[
  {
    "text": "<s>[INST] Create an array of length 5 which contains all even numbers between 1 and 10. [/INST] arr = [2, 4, 6, 8, 10]</s>"
  },
  {
    "text": "<s>[INST] Formulate an equation to calculate the height of a triangle given the angle, side lengths and opposite side length. [/INST] Height of triangle = opposite side length * sin (angle) / side length</s>"
  },
  {
    "text": "<s>[INST] Write a replace method for a string class which replaces the given string with a given set of characters.\n\nstring = \"Hello World!\"\nreplace_with = \"Greetings!\" [/INST] def replace(self, replace_with):\n    new_string = \"\"\n    for char in self:\n        if char == \" \":\n            new_string += replace_with\n        else:\n            new_string += char\n    return new_string</s>"
  },
  {
    "text": "<s>[INST] Create an array of length 15 containing numbers divisible by 3 up to 45. [/INST] arr = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]</s>"
  },
  {
    "text": "<s>[INST] Write a function to find the number of distinct states in a given matrix.\n\nmatrix = [[1, 0, 0],\n          [1, 0, 1],\n          [1, 1, 1]] [/INST] def find_num_distinct_states(matrix):\n    states = set()\n    for row in matrix:\n        state = \"\".join([str(x) for x in row])\n        states.add(state)\n    return len(states)</s>"
  },
  {
    "text": "<s>[INST] Create a nested loop to print every combination of numbers between 0-9 [/INST] for i in range(10):\n    for j in range(10):\n        print(i, j)</s>"
  },
  {
    "text": "<s>[INST] Write a function to find the maximum difference between two numbers in a given array.\n\narr = [5, 3, 17, 11, 9] [/INST] def max_difference(arr):\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff</s>"
  },
  {
    "text": "<s>[INST] Write a function to generate the nth Fibonacci number. [/INST] def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)</s>"
  },
  {
    "text": "<s>[INST] Write a class to represent a 2D point with x and y coordinates. [/INST] class Point:\n    def __init__(self, x, y):\n        self.x = x \n        self.y = y \n   \n    def __str__(self): \n        return \"({0},{1})\".format(self.x, self.y)</s>"
  },
  {
    "text": "<s>[INST] Write code that removes spaces from a given string.\n\nstring = \" A B C D \" [/INST] def remove_spaces(string): \n    return \"\".join(string.split())</s>"
  },
  {
    "text": "<s>[INST] Write a function that checks if a give number is even or odd. [/INST] def is_even(n):\n    if n%2 == 0:\n        return True  \n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Write code to create a list of all prime numbers between 2 and 100. [/INST] def find_primes(n): \n    prime_list = [2] \n    for number in range(2, n + 1): \n        is_prime = True\n        for k in range(2, number): \n            if number % k == 0: \n                is_prime = False \n        if is_prime: \n            prime_list.append(number) \n    return prime_list</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to print out all even numbers from 1 to 10.\n\nfor i in range(1,11):\n    print(i) [/INST] for i in range(1,11):\n    if i % 2 == 0:\n        print(i)</s>"
  },
  {
    "text": "<s>[INST] Write code to find the sum of all numbers between 1 and 10. [/INST] sum = 0\nfor i in range(1,11):\n    sum += i\nprint(sum)</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the area of a given circle. [/INST] def area_circle(radius):\n    return 3.14 * (radius**2)</s>"
  },
  {
    "text": "<s>[INST] Follow the comments in the code to complete the program which prints a conversion table from Fahrenheit to Celsius.\n\n# This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\n# TODO\n\n# Print the column headings\n# TODO\n\n# Calculate and print the table body\n# TODO [/INST] # This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\nprint(\"Fahrenheit to Celsius Conversion Table\")\n\n# Print the column headings\nprint(\"Fahrenheit \\t Celsius\")\n\n# Calculate and print the table body\nfor fahr in range(-50 , 121):\n  celsius = (fahr - 32) * 5 / 9\n  print(\"%3d \\t\\t %.2f\" % (fahr, celsius))</s>"
  },
  {
    "text": "<s>[INST] Develop a classification algorithm in Python to predict whether a bird is a hawk or a falcon. [/INST] import pandas as pd\nimport numpy as np\n\n# Define features\nfeatures = [\"wing_shape\", \"size\", \"tails_length\", \"color_pattern\"] \n\n# Load the data\ndata = pd.read_csv(\"birds.csv\")\n\n# Preprocess the data to generate feature vectors\nX = np.array(data[features]) \n\n# Make a target vector \ny = np.array(data[\"species\"]) \n\n# Divide the data into training and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a classification model\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Generate evaluation metrics\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Model accuracy: %.2f\" % accuracy)</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java for computing the factorial of a positive integer number. [/INST] public static long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program for randomly shuffling an array of integers. [/INST] #include <iostream>\n#include <algorithm>\n#include <random>\n\nvoid shuffleArray(int array[], int size) {\n\tstd::random_device rd;\n\tstd::mt19937 g(rd()); \n\tstd::shuffle(array, array+size, g); \n}\n\nint main() \n{ \n\tint array[] = {1, 2, 3, 4, 5, 6, 7, 8}; \n\tint size = sizeof(array) / sizeof(array[0]); \n\n    // Print original array\n    std::cout << \"Original array: \";\n    for (int i : array)\n        std::cout << i << \" \";\n    std::cout << \"\\n\";\n\n    // Shuffle array\n\tshuffleArray(array, size); \n\n    // Print shuffled array\n    std::cout << \"Shuffled array: \";\n    for (int i : array)\n        std::cout << i << \" \";\n    std::cout << \"\\n\";\n\n\treturn 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Use the function to debug the given program and prevent the segmentation fault.\n\n#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // TODO\n    for (i = 0; i <= n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n} [/INST] #include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // Limit loop size to the length of the array\n    for (i = 0; i < n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Replace the placeholder with a for loop for iterating over the numbers from 1 to n and printing them.\n\nfor i in range(n):\n    # TODO [/INST] for i in range(1, n+1):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Use try-except statements to detect and handle exceptions in the code.\n\nfor i in range(n):\n    x = 1/i [/INST] try:\n    for i in range(n):\n        x = 1/i\nexcept ZeroDivisionError:\n    print(\"Zero division error encountered!\")</s>"
  },
  {
    "text": "<s>[INST] Re-write the code segment as a list comprehension.\n\nnumbers = []\nfor i in range(10):\n    if i % 2 == 0:\n        numbers.append(i) [/INST] numbers = [i for i in range(10) if i % 2 == 0]</s>"
  },
  {
    "text": "<s>[INST] Remove the boilerplate code from the program for printing 10 random numbers.\n\nimport random\n\n# Generate 10 random numbers\nfor i in range(10):\n    # TODO [/INST] import random\n\n# Generate 10 random numbers\nfor i in range(10):\n    print(random.randrange(1, 101))</s>"
  },
  {
    "text": "<s>[INST] Modify the code to perform the mathematical expression “x to the power of y”.\n\n# Calculate x to the power of y\n# TODO [/INST] # Calculate x to the power of y\nx_pow_y = x**y</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary for counting the occurrence of each letter in the given string.\n\nstring = \"hello world\"\n#TODO [/INST] string = \"hello world\"\nletter_counts = {}\n\nfor letter in string:\n    if letter in letter_counts:\n       letter_counts[letter] += 1\n    else:\n        letter_counts[letter] = 1\n\nprint(letter_counts)</s>"
  },
  {
    "text": "<s>[INST] Follow the comments to complete the code that finds the maximum value in an array.\n\n# Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n# TODO [/INST] # Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n\nmax_value = arr[0]\nfor i in range(1, len(arr)):\n    if arr[i] > max_value:\n        max_value = arr[i]\n\nprint(max_value)</s>"
  },
  {
    "text": "<s>[INST] Write a function in HTML for creating a table of n rows and m columns. [/INST] <table>\n  <tbody>\n    <% for (let i = 0; i < n; i++) { %>\n      <tr>\n        <% for (let j = 0; j < m; j++) { %>\n          <td>Cell Content</td>\n        <% } %>\n      </tr>\n    <% } %>\n  </tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Create a CSS script that centers the login form on the webpage. [/INST] .login-form {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that prints out the sum of the numbers in the array.\n\nint[] numbers = {1, 2, 3 , 4, 5}; [/INST] public class SumOfArray {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3 , 4, 5};\n        int sum = 0;\n        for(int i=0; i < numbers.length;i++) {\n            sum = sum + numbers[i];\n        }\n        System.out.println(\"The sum of numbers in the given array is: \" + sum);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to calculate the total number of orders in the \"orders\" table. [/INST] SELECT COUNT(*) AS \"Total Number of Orders\" \nFROM orders;</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to convert a given string to lowercase.\n\nstring = \"FOO\" [/INST] def to_lowercase(string):\n    return string.lower()\n\nstring = \"FOO\"\nprint(to_lowercase(string))</s>"
  },
  {
    "text": "<s>[INST] Create a C program that prints out the Fibonacci sequence. [/INST] #include <stdio.h>\n\nint main()\n{\n    int i, num, first=0, second=1, next;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &num);\n    printf(\"Fibonacci Series: \");\n    for (i = 0; i < num; i++)\n    {\n        if (i <= 1)\n            next = i;\n        else\n        {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        printf(\"%d \", next);\n    }\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript to count the number of vowels in a given string.\n\nconst string = \"abcdefg\" [/INST] function countVowels(string) {\n    let vowelCount = 0;\n    const vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n  \n    for (let i = 0; i < string.length; i++) {\n      if (vowels.includes(string[i])) {\n        vowelCount++;\n      }\n    }\n  \n    return vowelCount;\n}\n\nconst string = \"abcdefg\";\nconsole.log(countVowels(string));</s>"
  },
  {
    "text": "<s>[INST] Create a JSX code that renders a \"Hello, World!\" message in the browser. [/INST] import React from \"react\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Hello, World!</h1>\n    </div>\n  );\n}\n\nexport default App;</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to calculate the average order price for each product category in the \"orders\" table. [/INST] SELECT category, AVG(price) as \"Average Order Price\"\nFROM orders\nGROUP BY category;</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that prints out the contents of a given two-dimensional array.\n\nint[][] arr = {{1,2},{3,4},{5,6}} [/INST] public class TwoDArray {\n\n    public static void main(String[] args) {\n        int[][] arr = {{1,2},{3,4},{5,6}};\n\n        for(int i=0;i<arr.length;i++){\n            for(int j=0;j<arr[i].length;j++){\n                System.out.print(arr[i][j]+\" \");\n            }\n            System.out.println();\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program that sorts a given array in descending order.\n\nint array[] = {6, 3, 8, 12, 9, 4}; [/INST] #include<iostream>\nusing namespace std;\n \nint main()\n{\n    int array[] = {6, 3, 8, 12, 9, 4};\n    int arraySize = sizeof(array)/sizeof(array[0]);\n \n    //ascending order sorting\n    for(int i = 0; i < arraySize; i++)\n    {\n        // find the position of smallest element\n        int small = i;\n        for(int j = i+1; j < arraySize; j++)\n        {\n            if(array[j] > array[small])\n                small = j;\n        }\n \n        // swap the position of smallest element\n        int temp = array[i];\n        array[i] = array[small];\n        array[small] = temp;\n    }\n \n    // print the sorted array\n    cout << \"Sorted array : \";\n    for(int i = 0; i < arraySize; i++)\n        cout << array[i] << \" \";\n \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the Python code so that it prints out the total number of elements in the list.\n\nlist = [1, 2, 3, 4, 5] [/INST] list = [1, 2, 3, 4, 5]\nprint(\"Total number of elements in the list: \", len(list))</s>"
  },
  {
    "text": "<s>[INST] Create a Swift code that show the number of days in the given month.\n\nint month = 5 [/INST] let month = 5\nlet daysEndingInth = [3, 0, 3, 2, 3, 2, 3, 3, 2, 3, 2, 3]\nlet daysInMonth = daysEndingInth[month - 1] \nprint(\"The number of days in the month of \\(month) is \\(daysInMonth).\")</s>"
  },
  {
    "text": "<s>[INST] Write a HTML code that create a form for user to fill out their current address. [/INST] <form action=\"\">\n    <label for=\"street\">Street</label>\n    <input type=\"text\" name=\"street\" id=\"street\">\n    <label for=\"city\">City</label>\n    <input type=\"text\" name=\"city\" id=\"city\">\n    <label for=\"state\">State</label>\n    <input type=\"text\" name=\"state\" id=\"state\">\n    <label for=\"zip\">Zip Code</label>\n    <input type=\"text\" name=\"zip\" id=\"zip\"> \n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the total number of orders placed between two given dates.\n\nstart_date = '2020-01-01'\nend_date = '2020-02-01' [/INST] SELECT COUNT(*)\nFROM orders\nWHERE order_date BETWEEN '2020-01-01' AND '2020-02-01';</s>"
  },
  {
    "text": "<s>[INST] Create a Ruby code that prints out the median of a given array of numbers.\n\nnums = [1, 7, 3, 6] [/INST] nums = [1, 7, 3, 6]\nsorted_nums = nums.sort\n\n# Calculation of median \nif sorted_nums.length % 2 == 0\n  mid_index = sorted_nums.length/2\n  median = (sorted_nums[mid_index] + sorted_nums[mid_index - 1])/2.to_f\nelse\n  mid_index = sorted_nums.length/2\n  median = sorted_nums[mid_index]\nend\n\nputs median</s>"
  },
  {
    "text": "<s>[INST] Create a PHP code to check if an array contains a given item.\n\n$input_array = array(1,2,3,4,5);\n$item_to_check = 3; [/INST] <?php\n$input_array = array(1,2,3,4,5);\n$item_to_check = 3;\n\nif(in_array($item_to_check, $input_array)) {\n  echo \"Array contains the given item.\";\n} else {\n  echo \"Array doesn't contain the given item.\";\n}\n?></s>"
  },
  {
    "text": "<s>[INST] Edit the code to create a try-except block to handle the exception.\n\na = 5\nb = 0\n\nans = a/b [/INST] try:\n    a = 5\n    b = 0\n\n    ans = a/b\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero.\")</s>"
  },
  {
    "text": "<s>[INST] Write a script using Bash that replaces all vowels with a number. [/INST] #!/bin/bash\n\nstring=\"Hello World!\"\nvowels=(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n\nfor i in \"${vowels[@]}\"\ndo\n    string=\"${string//$i/0}\"\ndone\n\necho $string #H0ll0 W0rld!</s>"
  },
  {
    "text": "<s>[INST] Change the variable `x` to the data type desired.\n\nx = 'Hello World!' [/INST] x = \"Hello World!\"</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes an array as an argument and returns the sum of all the elements in the array.\n\narr = [1, 2, 3, 4, 5] [/INST] def arraySum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total</s>"
  },
  {
    "text": "<s>[INST] Sort the array in ascending order.\n\narr = [3, 2, 1, 5, 4] [/INST] arr.sort() # [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Generate a random integer between 4 and 8 (inclusively). [/INST] import random\nx = random.randint(4, 8)</s>"
  },
  {
    "text": "<s>[INST] Write a list comprehension to square each number in the list.\n\narr = [1, 2, 3, 4, 5] [/INST] arr = [x**2 for x in arr] # [1, 4, 9, 16, 25]</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string and reverses the words.\n\ntext = \"Hello World!\" [/INST] def reverseWords(text):\n    return ' '.join(text.split()[::-1])\n\nreverseWords(text) # \"World! Hello\"</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to return the sum of all salaries. [/INST] SELECT SUM(salary)\nFROM employees;</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in two numbers as arguments and returns the product of the two. [/INST] def multiply(x, y):\n    return x*y</s>"
  },
  {
    "text": "<s>[INST] Sum up the numbers in the array in Javascript.\n\narr = [1,2,3,4,5] [/INST] let sum = arr.reduce((total, num) => total + num);\nconsole.log(sum); // 15</s>"
  },
  {
    "text": "<s>[INST] Using the given function, create a loop that counts from 0 to 9.\n\nfunction printNum(num){\n  console.log(num)\n} [/INST] for (let i = 0; i < 10; i++){\n    printNum(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JSON object with three key-value pairs. [/INST] {\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 30\n}</s>"
  },
  {
    "text": "<s>[INST] Count the number of characters in the string.\n\ntext = \"Hello World!\" [/INST] len(text) # 12</s>"
  },
  {
    "text": "<s>[INST] Generate a random number between 0 and 1 (inclusively). [/INST] Math.random(); // a random number between 0 and 1 (inclusively)</s>"
  },
  {
    "text": "<s>[INST] Compose a function named average_list which takes a list of numbers as its argument and computes the average. [/INST] def average_list(nums):\n    return sum(nums)/len(nums)</s>"
  },
  {
    "text": "<s>[INST] Generate a snippet of code to extract all the URLs from the given string.\n\nThis string contains some urls such as https://www.google.com and https://www.facebook.com. [/INST] import re\n\nstring = \"This string contains some urls such as https://www.google.com and https://www.facebook.com.\"\n\nurls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string) \n\nprint(urls)</s>"
  },
  {
    "text": "<s>[INST] Write a code to convert a given spredsheet in csv format to json format. [/INST] import csv\nimport json\n\ndef csv_to_json():\n    # Path of csv file\n    file_csv = 'mycsvfile.csv'\n    \n    # Path of json file\n    file_json = 'myjsonfile.json'\n    \n    with open(file_csv, 'r') as input_file:\n        reader = csv.DictReader(input_file)\n        data = list(reader)\n    \n    with open(file_json, 'w') as output_file:\n        json.dump(data, output_file)\n\ncsv_to_json()</s>"
  },
  {
    "text": "<s>[INST] Create a list comprehension to generate a list of multiples of 3 from 0 to 23. [/INST] list_of_multiples_of_3 = [x*3 for x in range(8)]</s>"
  },
  {
    "text": "<s>[INST] Design a program to find the longest element in the given list.\n\n[10, 100, 200, 500, 400] [/INST] def longest_element(list):\n  max_length = 0\n  max_length_item = None\n\n  for item in list:\n    if len(item) > max_length:\n      max_length = len(item)\n      max_length_item = item\n\n  return max_length_item\n\nlist = [10, 100, 200, 500, 400]\nlongest_element(list) # 500</s>"
  },
  {
    "text": "<s>[INST] Write a function to print all prime numbers between two given numbers. [/INST] def print_prime_numbers_in_range(start, end):\n  # start = starting number\n  # end = ending number\n\n  for num in range(start, end+1):\n    # Prime numbers are greater than 1\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        print(num)\n---\n\n11. Instruction: Generate a snippet of code to reverse given string\n11. Input:\n<noinput>\n11. Output:\ndef reverse_string(input_string):\n  string_length = len(input_string)\n  reversed_string = \"\"\n  \n  for i in range(string_length-1,-1,-1):\n    reversed_string += input_string[i]\n  \n  return reversed_string</s>"
  },
  {
    "text": "<s>[INST] Describe the basic syntax of a Java function? [/INST] A Java function consists of a function name, return type, parameters (arguments), and body. The syntax of a Java function is as follows: \npublic <return type> <function name>(<list of parameters>) { \n    // function body \n    <statements> \n}</s>"
  },
  {
    "text": "<s>[INST] How to reverse a list in C++? [/INST] You can reverse a list in C++ using the std::reverse algorithm. To reverse the list, pass the list as the first parameter and the beginning and end of the list as the second and third parameter, respectively. Alternatively, you can also reverse the list using a for loop and the operator [] to access each element of the list.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to update a value x in a column y in a table z.\n\nx = 5, y = 'amount' and z = 'payments'. [/INST] UPDATE payments \nSET amount = 5 \nWHERE payments.amount IS NOT NULL;</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in Python to determine if a number is even or odd. [/INST] def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of a constructor in a class in Java? [/INST] The purpose of a constructor in a class in Java is to initialize an object of that class. A constructor is a special kind of method that is used to create an object of its associated class. When an object of the class is created, the constructor is used to set the initial state of the object.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to get the current browser URL. [/INST] var currentURL = window.location.href;\nconsole.log(currentURL);</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following C++ code using only pointer references instead of array subscripts:\n\nint arr[3] = {1,2,3};\nint sum = 0;\nfor (int i = 0; i < 3; i++) \n{\n    sum += arr[i];\n} [/INST] int arr[3] = {1,2,3};\nint sum = 0;\nint* ptr = arr;\nfor (int i = 0; i < 3; i++) \n{\n    sum += *(ptr+i); \n}</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to print the column names of a table named 'employees'. [/INST] SELECT column_name FROM information_schema.columns WHERE table_name = 'employees';</s>"
  },
  {
    "text": "<s>[INST] Generate a regular expression to match a valid email address. [/INST] /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/</s>"
  },
  {
    "text": "<s>[INST] How to delete a particular row in an SQLite database table? [/INST] To delete a particular row in an SQLite database table, you can use the DELETE statement with a WHERE clause to specify the row to be deleted. For example: DELETE FROM table_name WHERE condition;</s>"
  },
  {
    "text": "<s>[INST] Is it possible to set a breakpoint that is not associated with any source code line in a GDB program? [/INST] Yes, it is possible to set a breakpoint that is not associated with any source code line in a GDB program. For example, you can set a breakpoint on a function or a memory address. You can do this by using the break command with '*' prefix followed by the address of the breakpoint.</s>"
  },
  {
    "text": "<s>[INST] Write a C++ code to find the average of an array of integers. [/INST] #include <iostream>\n\nint calculateAverage(int array[], int n){\n    int sum = 0; \n    for (int i=0; i<n; i++){\n        sum += array[i]; \n    } \n    int average = sum/n;\n    return average;\n}</s>"
  },
  {
    "text": "<s>[INST] How can we encrypt a string in Python? [/INST] We can encrypt a string in Python using the cryptography module. The cryptography module provides high level cryptographic primitives using the Fernet cipher. The Fernet cipher uses AES-128 in CBC mode and PKCS7 padding to encrypt the string.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of declaring a function as static in C++? [/INST] The purpose of declaring a function as static in C++ is to restrict its visibility to only the translation unit in which it is declared. A static function can only be called from within the same translation unit and thus, it cannot be accessed from outside of that translation unit.</s>"
  },
  {
    "text": "<s>[INST] How to print the elements of a two-dimensional array in C? [/INST] We can use nested loops to print the elements of a two-dimensional array in C. The outer loop iterates over the rows, while the inner loop iterates over the columns. For example, the following code snippet prints the elements of a two-dimensional array: \n \nint array[3][3] = {{1,2,3},{4,5,6},{7,8,9}};\nfor (int i=0; i<3; i++)\n{   \n    for(int j=0; j<3; j++) \n    {\n        printf(\"%d \", array[i][j]); \n    }\n    printf(\"\\n\");\n}</s>"
  },
  {
    "text": "<s>[INST] Using the following code, clean up the bugs and make sure the output functions correctly.\n\ndef example_func(lst):\n   for element in lst:\n      if (type(element) == int):\n         lst.append(element + 5)\n   return lst\n \nexample_func([1, 2, \"hello\"]) [/INST] def example_func(lst):\n   output_lst = []\n   for element in lst:\n      if (type(element) == int):\n         output_lst.append(element + 5)\n   return output_lst\n \nexample_func([1, 2, \"hello\"])</s>"
  },
  {
    "text": "<s>[INST] Write a C++ function to generate a random integer between 0 and 10. [/INST] #include <iostream> \n#include <cstdlib> \n#include <ctime> \nusing namespace std; \n\nint randomIntGenerator() \n{ \n   // Setting the seed \n   srand(time(0)); \n\n   // Generating random integer \n   return (rand()%11); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a table to store customer information. [/INST] CREATE TABLE customers (\n   id int NOT NULL AUTO_INCREMENT,\n   name varchar(100) NOT NULL,\n   email varchar(100) NOT NULL,\n   phone varchar(20) NOT NULL,\n   address varchar(200) NOT NULL,\n   PRIMARY KEY (id)\n);</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java named Puppy that has two instance variables, age and name and two methods, bark and sleep. [/INST] public class Puppy { \n   // Instance Variables \n   String name; \n   int age; \n  \n   // Constructor \n   public Puppy(String name, int age){ \n      this.name = name; \n      this.age = age; \n   } \n  \n   // Methods \n   public void bark(){ \n      System.out.println(\"Woof Woof!\"); \n   } \n  \n   public void sleep(){ \n      System.out.println(\"Zzzzzz...\"); \n   } \n}</s>"
  },
  {
    "text": "<s>[INST] Parse the string and return the number of unique alphabets in the string.\n\nStringInput = \"apple\" [/INST] int count = 0;\nfor (int i = 0; i < StringInput.length(); i++) {\n  if ((StringInput.charAt(i) >= 'a' && StringInput.charAt(i) <= 'z') || (StringInput.charAt(i) >= 'A' && StringInput.charAt(i) <= 'Z')) {\n   count++;\n  }\n}\nSystem.out.println(\"Number of unique alphabets: \" + count);</s>"
  },
  {
    "text": "<s>[INST] Write a shell script to print the top 3  most frequently used commands. [/INST] #!/bin/bash\n# Store all commands used in the last hour in command_list.\nhistory | tail -$(($(date +%H) * 60)) -n $(($(date +%M)+1)) | cut -d ' ' -f 5 > command_list\n# Create frequency database and store them in frequency.dat\ncat command_list | sort | uniq -c | sort -rn > frequency.dat\n# Print top 3 commands\nhead -3 frequency.dat</s>"
  },
  {
    "text": "<s>[INST] Read the JSON string below and convert it into a dictionary.\n\njsonString = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}' [/INST] import json\n\njsonObject = json.loads(jsonString)\ndictionary = dict(jsonObject)\nprint(dictionary)</s>"
  },
  {
    "text": "<s>[INST] Implement a function that finds the maximum element in a given array.\n\narr = [45, 7, 0, 82, 23] [/INST] def find_max_element(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \narr = [45, 7, 0, 82, 23]\nmax_element = find_max_element(arr) \nprint(max_element)</s>"
  },
  {
    "text": "<s>[INST] Validate whether the string contains only alphabets or not.\n\nmyString = \"abc123\" [/INST] def check_string_alphabets(myString):\n    for character in myString:\n        if (not character.isalpha()):\n            return False\n    return True\n\nmyString = \"abc123\"\nif (check_string_alphabets(myString)):\n    print(\"String contains only alphabets\")\nelse:\n    print(\"String contains numbers\")</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code using ternary operator.\n\nnum1 = 5\nnum2 = 10\n\nif num1 < num2:\n    print(\"num1 is smaller than num2\")\nelse:\n    print(\"num1 is greater than or equal to num2\") [/INST] num1 = 5\nnum2 = 10\n\nprint(\"num1 is smaller than num2\") if (num1 < num2) else print(\"num1 is greater than or equal to num2\")</s>"
  },
  {
    "text": "<s>[INST] Write a script to check if a given number is a palindrome or not.\n\ninputNumber = 121 [/INST] # Function to check whether the inputNumber is palindrome or not\ndef is_palindrome(inputNumber):\n\n   # negative numbers are not palindrome\n   if inputNumber < 0:\n       return False\n\n   # find the number of digits in the inputNumber\n   div = 1\n   while (inputNumber / div >= 10):\n       div *= 10\n\n   # check if the most significant and least significant digits match\n   while (inputNumber != 0):\n       # compare first and last digits\n       firstdigit = inputNumber // div\n       lastdigit =  inputNumber % 10\n       if firstdigit != lastdigit:\n           return False\n\n       # remove the most and least significant digit of inputNumber\n       inputNumber = (inputNumber % div) // 10\n\n       # reduce div by a factor of 2,  since 2 digits\n       # were removed\n       div = div // 100\n   return True\n\n# Driver code to test above\ninputNumber = 121\nif is_palindrome(inputNumber) :\n  print(\"Yes\")\nelse:\n  print(\"No\")</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to remove the bugs.\n\ndef reverse_string(user_string): \n  if len(user_string) == 0: \n    return \"\" \n  else: \n    return reverse_string(user_string[1:]) + user_string[0] \n    \nprint(reverse_string(“test”)) [/INST] def reverse_string(user_string): \n  reversed_string = ''\n  if len(user_string) == 0: \n    return \"\" \n  else: \n    reversed_string = reverse_string(user_string[1:]) + user_string[0] \n    return reversed_string\n\nuser_string = 'test'\nprint(reverse_string(user_string))</s>"
  },
  {
    "text": "<s>[INST] What is the output of the following code?\n\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\nfor x, y in zip(list1, list2):\n    print(x * y) [/INST] a\nbb\nccc</s>"
  },
  {
    "text": "<s>[INST] Write a function to remove all whitespace characters from a given string.\n\nmyString = \"Hello   World    \" [/INST] def remove_whitespaces(myString):\n    return ''.join(myString.split())\n\nmyString = \"Hello   World    \"\nprint(remove_whitespaces(myString))</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to add try catch block.\n\nx = \"5\"\ny = \"2\"\nsum = int(x) + int(y)\nprint(\"Sum of x and y is\", sum) [/INST] x = \"5\"\ny = \"2\"\ntry:\n   sum = int(x) + int(y)\n   print(\"Sum of x and y is\", sum)\nexcept:\n   print(\"Error: Invalid input\")</s>"
  },
  {
    "text": "<s>[INST] Write a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index.\n\nlist_one = [1, 2, 3, 4]\nlist_two = [\"a\", \"b\", \"c\", \"d\"] [/INST] def list_dict(list_one, list_two):\n    \"\"\"Create a dictionary of elements in the two lists which have the same index.\"\"\"\n    assert len(list_one) == len(list_two), \"lists must be same length\"\n    dict = {}\n    for i in range(len(list_one)):\n        dict[list_one[i]] = list_two[i]\n    return dict</s>"
  },
  {
    "text": "<s>[INST] Create a quick-sort algorithm in Python. [/INST] def quick_sort(arr):\n    \"\"\"Sort a list of numbers in ascending order using the Quick-Sort algorithm\"\"\"\n    if len(arr) == 0:\n        return []\n\n    pivot = arr[0]\n    left_arr = [x for x in arr if x < pivot]\n    right_arr = [x for x in arr if x > pivot]\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm to find the value of n where n is the index of the Fibonacci sequence. [/INST] def nth_fibonacci_number(n):\n    \"\"\"Find the value of n where n is the index of the Fibonacci Sequence.\"\"\" \n    if n < 2:\n        return n \n    elif n == 2:\n        return 1\n    else:\n        return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)</s>"
  },
  {
    "text": "<s>[INST] Create a program that finds all the prime numbers less than or equal to a given number. [/INST] def find_primes(num):\n    \"\"\"Find all the prime numbers less than or equal to a given number.\"\"\"\n    primes = []\n    for i in range(2, num + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes in a list of numbers and prints out the greatest number.\n\nlist = [8, 2, 14, 25] [/INST] def find_greatest(list):\n    \"\"\"Print out the greatest number from a list of numbers.\"\"\"\n    greatest = list[0]\n    for num in list:\n        if num > greatest:\n            greatest = num\n    print('The greatest number is: ', greatest)</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm that takes a list of strings and returns the longest string.\n\nlist = [\"cat\", \"dog\", \"lion\", \"bird\"] [/INST] def find_longest(list):\n    \"\"\"Return the longest string from a list of strings.\"\"\" \n    longest = list[0]\n    for item in list:\n        if len(item) > len(longest):\n            longest = item\n    return longest</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes in a matrix of numbers and reverses the order of the rows and columns.\n\nmatrix = [[1, 2, 3], \n          [4, 5, 6], \n          [7, 8, 9]\n         ] [/INST] def reverse_matrix(matrix):\n    \"\"\"Reverse the order of the rows and columns in a matrix of numbers.\"\"\"\n    reversed_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            reversed_matrix[j][i] = matrix[i][j]\n    return reversed_matrix</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm that creates a random password of 8 characters. [/INST] def generate_password():\n    \"\"\"Generate a random password of 8 characters.\"\"\"\n    import random\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()'\n    password = ''\n    for i in range(8):\n        password += random.SystemRandom().choice(chars)\n    return password</s>"
  },
  {
    "text": "<s>[INST] FOr a given list, create a program that prints out the standard deviation of the elements in the list.\n\nlist = [1, 4, 9, 16] [/INST] def std_dev(list):\n    \"\"\"Print the standard deviation of elements in a given list.\"\"\"\n    numerator = 0\n    mean = sum(list) / len(list)\n    for num in list:\n        numerator += (num - mean) ** 2\n    sd = (numerator / (len(list) - 1)) ** 0.5\n    return sd</s>"
  },
  {
    "text": "<s>[INST] Create a program that can filter out words of a string that contain a specific character.\n\nstring = \"This is a sentence\"\ncharacter = 's' [/INST] def filter_string(string, character):\n    \"\"\"Filter out words of a string that contain a specific character.\"\"\"\n    words = string.split(' ')\n    filtered_words = []\n    for word in words:\n        if character not in word:\n            filtered_words.append(word)\n    return ' '.join(filtered_words)</s>"
  },
  {
    "text": "<s>[INST] Create a program that can calculate the distance between two points in three-dimensional space.\n\npoint1 = (1, 5, 9)\npoint2 = (4, 2, 8) [/INST] def dist_points_3d(point1, point2):\n    \"\"\"Calculate the distance between two points in three-dimensional space.\"\"\"\n    distance = ((point1[0] - point2[0]) ** 2 + \n                (point1[1] - point2[1]) ** 2 + \n                (point1[2] - point2[2]) ** 2) ** 0.5\n    return distance</s>"
  },
  {
    "text": "<s>[INST] Create a program that ciphers a given text using the caesar cipher.\n\ntext = \"This is a secret message\"\nkey = 3 [/INST] def caesar_cipher(text, key):\n    \"\"\"Cipher a given text using the Caesar Cipher.\"\"\"\n    ciphertext = \"\"\n    for char in text: \n        if not char.isalpha():\n            ciphertext += char\n            continue\n        offset = ord('a') if char.islower() else ord('A')\n        new_char = (ord(char) - offset + key) % 26\n        ciphertext += chr(offset + new_char)\n    return ciphertext</s>"
  },
  {
    "text": "<s>[INST] Find the second smallest element in an integer array of size n.\n\narray = [4, 5, 8, 2, 9, 13] [/INST] def second_smallest(array):\n\nsmallest = min(array)\nsecond_smallest = float('inf')\n\nfor num in array:\n    if num > smallest and num < second_smallest:\n        second_smallest = num\n        \nreturn second_smallest</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all the users in a database with age greater than 25. [/INST] SELECT * FROM users WHERE age > 25</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the maximum of two numbers. [/INST] def max_of_two(x, y):\n    if x > y:\n        return x\n    else:\n        return y</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to split a string on a given character separator.\n\nmystring = \"Hello, World!\"\nseparator = \",\" [/INST] def split(mystring, separator):\n    return mystring.split(separator)</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to get the day of week from a given date and time.\n\nfrom datetime import datetime\ndate = datetime(2020, 4, 20, 19, 15, 0) [/INST] from datetime import datetime\n\ndef get_day_of_week(date):\n    return date.strftime(\"%A\")</s>"
  },
  {
    "text": "<s>[INST] Write a Javascript function to determine if the given number is an even number or not. [/INST] function isEven(num) {\nreturn num % 2 === 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to print out an ASCII art of a given word.\n\nword = \"happy\" [/INST] def draw_word(word):\n    art = \"\"\"\n                 __\n           _   /  \\\\\n           \\\\_/\\_/\\_/\n           /    |\n           \\___/\n          \\\\\\\\_//\n           \\/ \\/\n            \\/\n        \"\"\"\n    for letter in word:\n        art += \"  \" + letter\n    print(art)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to validate a given URL. [/INST] function isValidURL(url) {\n    const regex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n    return regex.test(url);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C# program to find the maximum and minimum of three numbers. [/INST] public void Maximum_Minimum(int num1, int num2, int num3)\n{\n    int max = Math.Max(Math.Max(num1, num2),num3);\n    int min =  Math.Min(Math.Min(num1,num2),num3);\n    Console.WriteLine(\"Maximum Number is : \" + max);\n    Console.WriteLine(\"Minimum Number is : \" + min);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to reverse a given string. [/INST] public class ReverseString\n{ \n\n    public static void main(String[] args) \n    { \n        String input = \"Hello\"; \n        StringBuilder input1 = new StringBuilder(); \n  \n        // append a string into StringBuilder input1 \n        input1.append(input); \n  \n        // reverse StringBuilder input1 \n        input1 = input1.reverse(); \n  \n        // print reversed String \n        System.out.println(input1); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML template to display a greeting message. The message should include the name of the user who visits the website.\n\nusername = \"John\" [/INST] <html>\n\t<head>\n\t\t<title>Greeting Message</title>\n\t</head>\n\t<body>\n\t\t<h1>Hello, {{ username }}!</h1>\n\t</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Python program to concatenate all elements in a list into a string separated by a given separator.\n\ninput_list = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\nseparator = \"-\" [/INST] def list_to_string(input_list, separator):\n    return separator.join(input_list)</s>"
  },
  {
    "text": "<s>[INST] Write a C program to find the sum of all digits of a given number [/INST] #include <stdio.h>\n\nint getSumOfDigits(int num) {\n    // Initialize sum\n    int sum = 0;\n\n    // Find the sum of digits\n    while(num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n\n    return sum;\n}\n\nint main() {\n    int num;\n    scanf(\"%d\", &num);\n\n    printf(\"Sum of digits of %d is %d\\n\", num, getSumOfDigits(num));\n\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to generate random numbers [/INST] import java.util.Random; \n  \npublic class GenerateRandom { \n  \n    public static void main(String[] args) \n    { \n  \n        Random rand = new Random(); \n  \n        // Generate random integers in range 0 to 999 \n        int x = rand.nextInt(1000); \n        System.out.println(\"Random Integers: \" + x); \n  \n        // Generate Random doubles \n        double y = rand.nextDouble(); \n        System.out.println(\"Random Doubles: \" + y); \n  \n        // Generate Random Boolean \n        boolean z = rand.nextBoolean(); \n        System.out.println(\"Random Boolean: \" + z); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following Python code using a for-loop.\n\ni = 0\nwhile i <= 10:\n    print(i)\n    i += 1 [/INST] for i in range(11):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Write a code to print the current date and time in ISO format. [/INST] from datetime import datetime\n\ndate_time_obj = datetime.now()\n\nprint(date_time_obj.isoformat()) # prints \"2020-07-29T15:10:01.584131\"</s>"
  },
  {
    "text": "<s>[INST] Create a new folder called 'data' within the current working directory. [/INST] import os\n\n# create 'data' folder in the current working directory\ncurrent_directory = os.getcwd()\nnew_directory = os.path.join(current_directory, 'data')\nos.mkdir(new_directory)</s>"
  },
  {
    "text": "<s>[INST] Write a code to sort the following array in increasing order.\n\n[10, 2, 7, 8, 32, 4] [/INST] # sorting array using insertion sort\narr = [10, 2, 7, 8, 32, 4] \n\n# traverse through all array elements \nfor i in range(1, len(arr)):\n    key = arr[i]\n\n    # move elements of arr[0..i-1], that are greater than key,\n    # to one position ahead of their current position\n    j = i-1\n    while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n    arr[j + 1] = key\n  \n#print the sorted array\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript that takes an array of integers and returns the largest number. [/INST] function findMax(arr) {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression to validate a URL string. [/INST] # Regular expression to validate a URL string\n^(http:\\/\\/|https:\\/\\/|ftp:\\/\\/)?(www\\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\\.)+[\\w]{2,5}(\\/\\S*)?$</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to calculate the mean of a given array.\n\n[1,2,3,4] [/INST] # calculate the mean of given array\narr = [1,2,3,4]\n\ndef calc_mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum / len(arr)\n\nprint(calc_mean(arr)) # prints 2.5</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java that takes a string and prints the reversed version. [/INST] public static void reverseString(String str) { \n    StringBuilder sb = new StringBuilder(); \n  \n    for (int i = str.length() - 1; i >= 0; i--) { \n        sb.append(str.charAt(i)); \n    } \n  \n    System.out.print(sb.toString()); \n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to get the time difference between two date-time objects.\n\ndate1: 2019-05-11 21:00:00\ndate2: 2019-05-13 10:00:00 [/INST] from datetime import datetime\n\ndef time_difference(date1, date2):\n    date1_obj = datetime.strptime(date1, '%Y-%m-%d %H:%M:%S')\n    date2_obj = datetime.strptime(date2, '%Y-%m-%d %H:%M:%S')\n\n    return (date2_obj - date1_obj).total_seconds() // 3600\n\nprint(time_difference('2019-05-11 21:00:00', '2019-05-13 10:00:00')) # prints 33.0</s>"
  },
  {
    "text": "<s>[INST] Write a code to connect to a remote database.\n\nusername: john\npassword: john123\nIP: 100.10.0.10 [/INST] import psycopg2\n\nconn = psycopg2.connect(host=\"100.10.0.10\", database=\"mydb\", user=\"john\", password=\"john123\")</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form with a textbox, a submit button, and two radio buttons. [/INST] <form>\n  <input type=\"text\" id=\"textbox\">\n  <input type=\"submit\" value=\"Submit\">\n  <input type=\"radio\" name=\"choice\" value=\"yes\">Yes\n  <input type=\"radio\" name=\"choice\" value=\"no\">No\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a code to access the nth element of a linked list. [/INST] # defining the Node class\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef getNthElement(head, n): \n\tcurrent = head \n\tcount = 0\n\n\t# looping through the linked list\n\twhile(current is not None): \n\t\tif (count == n): \n\t\t\treturn current.data \n\t\tcount += 1\n\t\tcurrent = current.next\n\treturn -1</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to find the number of occurrences of a letter in a word.\n\nword: hello\nletter: l [/INST] function findOccurrences(word, letter) {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n        if (word.charAt(i) === letter) {\n            count++;\n        }\n    }\n    return count;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to add two linked lists of different sizes.\n\nlist1 = [2->4->3]\nlist2 = [5->6->4->1] [/INST] # adding two linked lists\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef addTwoLists(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\n    # looping until one list has all nodes added\n    while(first is not None or second is not None): \n        Node = Node() \t\t# Node data\n\n        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) \n\t\t\n        # update carry\n        if Node.data >= 10: \n            Node.data = Node.data % 10\n            carry = 1\n        else: \n            carry = 0\n \n        temp = Node\n        # Move first, second pointers ahead\n        if first is not None: \n            first = first.next\n        if second is not None: \n            second = second.next\n\n        # Attach the previous node to the current node\n        if prev is not None: \n            prev.next = Node \n        prev = Node\n\t\t\n    if carry > 0: \n        temp.next = Node \n        temp.data = carry \n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java to convert a list of strings to a 2D array.\n\nlist: [\"aa\", \"bb\", \"cc\"] [/INST] public static String[][] convertTo2DArray(List<String> strings) {\n    int n = strings.size();\n    String[][] array = new String[n][1];\n    for (int i = 0; i < n; i++) {\n        array[i][0] = strings.get(i);\n    }\n    return array;\n    \n}</s>"
  },
  {
    "text": "<s>[INST] Modify the code below to make it calculate the sum of all the numbers from 1 to n.\n\nnum = 5\nsum = 0\nfor i in range(num):\n  sum += i [/INST] num = 5\nsum = 0\nfor i in range(1, num+1):\n  sum += i</s>"
  },
  {
    "text": "<s>[INST] Create a program to generate a histogram using data from a set of numbers.\n\nvalues = [3, 4, 2, 5, 8, 1, 2, 6] [/INST] import matplotlib.pyplot as plt\n\nvalues = [3, 4, 2, 5, 8, 1, 2, 6]\n\nplt.hist(values, bins= 10, edgecolor='black', color='b')\n\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\nplt.title('Histogram')\n\nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Create a function to convert Celsius to Fahrenheit. [/INST] def celsius_to_fahrenheit(c):\n    f = c * (9/5) + 32\n    return f</s>"
  },
  {
    "text": "<s>[INST] Write a function to find the number of occurrences of an element in a list.\n\narr = [10, 20, 10, 40, 40, 40, 50] [/INST] def count_occurrences(arr, element):\n    count = 0\n    for e in arr:\n        if e == element:\n            count += 1\n    return count\n\nprint(count_occurrences(arr, 40)) # Outputs: 3</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to print the numbers from 1 to 10. [/INST] for (let i = 1; i <= 10; i++) {\n  console.log(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a dictionary of 10 key-value pairs, where the key is a string and the values are random numbers from 1 to 100. [/INST] import random\n\nd = dict()\n\nkeys = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\n\nfor key in keys:\n    d[key] =  random.randint(1,100)\n\nprint(d)</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function which takes a string as a parameter and returns the most frequent character in the string.\n\n'Hello World!' [/INST] function mostFrequentChar(string) {\n    let charMap = {};\n    let maxCount = 0;\n    let freqChar = '';\n  \n    for (let char of string) {\n        if (charMap[char]) {\n            charMap[char]++;\n        } else {\n            charMap[char] = 1;\n        }\n    }\n  \n    for (let char in charMap) {\n        if (charMap[char] > maxCount) {\n            maxCount = charMap[char];\n            freqChar = char;\n        }\n    }\n  \n    return freqChar;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C# function which takes 2 strings as parameters and returns a new string which is a concatenation of the two parameters.\n\n'Hello', 'World!' [/INST] string ConcatenateStrings(string str1, string str2)\n{\n   return str1 + str2;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page where the main content area has a random background color when the page is loaded. [/INST] <!DOCTYPE html>\n<html>\n   <head>\n      <title>RandomBackground</title>\n      <script>\n         window.addEventListener(\"load\",function(){\n            var randomColor = \"#\"+((1<<24)*Math.random()|0).toString(16);\n            document.querySelector(\"body\").style.background = randomColor;\n         });\n      </script>\n   </head>\n   <body>\n   </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a Java program which takes an integer array as a parameter, sorts the array in ascending order, and returns the sorted array.\n\n[3, 5, 9, 1, 6] [/INST] public int[] SortIntegerArray(int[] nums)\n{\n    Arrays.sort(nums);\n    return nums;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select the number of employees in each department, sorted by the department name in ascending order. [/INST] SELECT department, COUNT(employee_ID)\nFROM employees\nGROUP BY department\nORDER BY department ASC;</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to remove all instances of a given value from a given list.\n\n[1, 2, 3, 2, 3, 4], 2 [/INST] def remove_value(nums, val):\n    res = []\n    for num in nums:\n        if num != val:\n            res.append(num)\n    return res</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to take a given string and replace all occurrences of a given letter with another given letter\n\n'bbac', 'b', 'a' [/INST] public String ReplaceLetters(String str, char oldChar, char newChar) {\n    return str.replace(oldChar, newChar);\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to calculate the average salary of all employees in a table, rounded to the nearest integer. [/INST] SELECT ROUND(AVG(salary))\nFROM employees;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that takes a given sentence as a parameter and capitalizes the first letter of each word.\n\n'hello world' [/INST] function capitalizeSentence(str) {\n    let words = str.split(' ');\n    let res = [];\n  \n    for (let word of words) {\n        res.push(word[0].toUpperCase() + word.slice(1));\n    }\n  \n    return res.join(' ');\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to generate the first n Fibonacci numbers. [/INST] def generate_fibonacci_numbers(n):\n   if n==1:\n       return [0]\n   elif n==2:\n       return [0,1]\n   else:\n       fib_list = [0,1]\n       for i in range(2,n):\n           fib_list.append(fib_list[i-1]+fib_list[i-2])\n       return fib_list</s>"
  },
  {
    "text": "<s>[INST] Create a C# program which takes two strings as parameters, and returns true if the two strings are anagrams of each other.\n\n'listen', 'silent' [/INST] bool AreAnagrams(string s1, string s2)\n{\n    if (s1.Length != s2.Length)\n        return false;\n \n    int[] a = new int[256];\n    int n = s1.Length;\n    for (int i = 0; i < n; i++)\n    {\n        int c1 = (int)s1[i];\n        int c2 = (int)s2[i];\n \n        a[c1]++;\n        a[c2]--;\n    }\n \n    for (int i = 0; i < 256; i++)\n    {\n        if (a[i] != 0)\n            return false;\n    }\n \n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to calculate the difference between the total salaries of male and female employees in a table. [/INST] SELECT SUM(CASE WHEN gender = 'female' THEN salary ELSE 0 END) - SUM(CASE WHEN gender = 'male' THEN salary ELSE 0 END)\nFROM employees;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program which takes an array of integers as a parameter and reverses the array in-place.\n\n[3, 5, 9, 1, 6] [/INST] function reverseArrayInPlace(nums) {\n    let left = 0;\n    let right = nums.length - 1;\n  \n    while (left < right) {\n        let temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n  \n        left++;\n        right--;\n    }\n    return nums;\n}</s>"
  },
  {
    "text": "<s>[INST] Explain what the following line of code does.\n\na %= b [/INST] This line of code assigns the remainder of a divided by b to a, so that the resulting value of a is the remainder of a divided by b. For example, if a is 10 and b is 3, the value of a after executing this line of code would be 1 (the remainder of 10 divided by 3).</s>"
  },
  {
    "text": "<s>[INST] Construct an if-else statement that returns ‘even’ if the given number is even and ‘odd’ if the given number is odd. [/INST] if n % 2 == 0:\n    return 'even'\nelse:\n    return 'odd'</s>"
  },
  {
    "text": "<s>[INST] Multiply two vectors of size 5 and return the output.\n\na = [1, 2, 3, 4, 5] \nb = [5, 4, 3, 2, 1] [/INST] [5, 8, 9, 8, 5]</s>"
  },
  {
    "text": "<s>[INST] Create a list comprehension that takes all the elements of list_one and creates a new list where all the elements are doubled.\n\nlist_one = [1, 2, 3, 4, 5] [/INST] [x*2 for x in list_one]</s>"
  },
  {
    "text": "<s>[INST] You are given a matrix of m rows and n columns. Write a function that calculates the transpose of the given matrix.\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] def transpose(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n\n    transpose_matrix = [[0] * m for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            transpose_matrix[j][i] = matrix[i][j]\n\n    return transpose_matrix</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, print the difference between the largest and the smallest number.\n\nlist_of_numbers = [10, 7, 5, 12, 4] [/INST] difference = max(list_of_numbers) - min(list_of_numbers)\nprint(difference)</s>"
  },
  {
    "text": "<s>[INST] Create a for loop that goes through every element of list_of_words and prints ‘success’ if an element is equal to “example” and prints ‘failure’ in any other case.\n\nlist_of_words = [\"hello\", \"example\", \"world\"] [/INST] for word in list_of_words:\n    if word == \"example\":\n        print(\"success\")\n    else:\n        print(\"failure\")</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in a list of temperatures and returns the average temperature\n\nlist_of_temperatures = [20, 24, 26, 18] [/INST] def average_temperature(temperatures):\n    num_items = len(temperatures)\n    sum_items = 0\n    for temperature in temperatures:\n        sum_items += temperature\n    return sum_items / num_items</s>"
  },
  {
    "text": "<s>[INST] You are given a list of numbers. Create a function that returns a new list with duplicates removed\n\nlist_of_numbers = [3, 6, 5, 5, 7, 6, 3] [/INST] def remove_duplicates(numbers):\n    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list</s>"
  },
  {
    "text": "<s>[INST] In a given string, create a function that returns the longest consecutive sequence of characters.\n\nmy_string = “abccdeefghj\" [/INST] def longest_consecutive(string):\n    character_list = []\n    max_length = 0\n    max_sequence = ''\n    for char in string:\n        if char in character_list:\n            continue\n        else:\n            character_list.append(char)\n            current_length = 1\n            for i in range(1, len(string)):\n                if string[i-1] == char and string[i] == char:\n                    current_length += 1\n            if current_length>max_length:\n                max_length = current_length\n                max_sequence = char*max_length\n    return max_sequence</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in a string and counts the number of vowels in it [/INST] def count_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes in a string and returns a list of all the words that have more than 5 characters [/INST] def long_words(string):\n    words = string.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > 5:\n            long_words_list.append(word)\n    return long_words_list</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in a string and replaces all punctuation with a space [/INST] import string\n\ndef replace_punctuation(string):\n    for char in string:\n        if char in string.punctuation:\n            string = string.replace(char, \" \")\n    return string</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in a list of numbers and returns true if the list contains at least one positive number\n\nlist_of_numbers = [-2, -5, 0, 3] [/INST] def is_positive_number(numbers):\n    for num in numbers:\n        if num > 0:\n            return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Write code in Java to generate the Fibonacci sequence up to N numbers.\n\nN = 10 [/INST] public class Fibonacci { \n  \n    public static void FibonacciN(int n) { \n        int i, f=0, s=1; \n  \n        if (n == 1) \n            System.out.print(f+ \" \"); \n  \n        else { \n            System.out.print(f+\" \"+s+\" \"); \n  \n            for (i = 2; i < n; i++) { \n                int next = f + s; \n                System.out.print(next+\" \"); \n                f= s; \n                s = next; \n            } \n        } \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to find the largest element in an array.\n\n[8, 11, 12, 5, 3] [/INST] // Algorithm to find the largest element in an array\n\n// Step 1: Create a variable 'max' and initialize it with value of the first element in the array\nint max = arr[0];\n\n// Step 2: Iterate through the array and compare each element with 'max'\nfor (int i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n        max = arr[i];\n    }\n}\n\n// Step 3: Return the value of 'max'\nreturn max;</s>"
  },
  {
    "text": "<s>[INST] Write code in Java to sort an array of integers in ascending order.\n\n[5, 2, 8, 10, 4, 9] [/INST] public static void sortAscending(int[] arr) {\n    for(int i = 0; i < arr.length - 1; i++) {\n        int min = i;\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[min]) {\n                min = j;\n            }\n        }\n        int tmp = arr[i];\n        arr[i] = arr[min];\n        arr[min] = tmp;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a new button using HTML. [/INST] <button>My Button</button></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to add a new column \"age\" in the employees table. [/INST] ALTER TABLE Employees\nADD COLUMN age INT;</s>"
  },
  {
    "text": "<s>[INST] Design a function in Python to delete duplicates from a list.\n\nThe list is: [2, 3, 2, 4, 5, 5, 6] [/INST] def remove_duplicates(list): \n      \n    unique_list = [] \n      \n    for x in list: \n        if x not in unique_list: \n            unique_list.append(x) \n    return unique_list \n  \nlist = [2, 3, 2, 4, 5, 5, 6] \nprint (\"Original List: \", list) \nprint (\"Unique List: \", remove_duplicates(list)) \n\nOutput: \nOriginal List: [2, 3, 2, 4, 5, 5, 6]\nUnique List: [2, 3, 4, 5, 6]</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm to find the sum of all the elements in an array.\n\nThe array is: [3, 5, 8, 10, 4] [/INST] // Algorithm to calculate the sum of all the elements in an array\n\n// Step 1: Initialize a variable 'sum' and set it equal to 0\nint sum = 0;\n\n// Step 2: Iterate through the array and add each element to 'sum'\nfor (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n}\n\n// Step 3: Return the value of sum\nreturn sum;</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to display the name, job and salary of all employees. [/INST] SELECT name, job, salary \nFROM employees;</s>"
  },
  {
    "text": "<s>[INST] Find the sum of two numbers using C#.\n\nThe two numbers are: 123 and 456 [/INST] int  result = 123 + 456;\nConsole.WriteLine(result); //Output: 579</s>"
  },
  {
    "text": "<s>[INST] Create a web page using HTML and CSS that displays a div with some text. [/INST] <html>\n   <head>\n      <title>Div Example</title>\n   </head>\n   <body>\n      <div>Hello, welcome to my website!</div>\n   </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to capitalize the first letter of each word in a string.\n\nString: \"This is an example\". [/INST] function capitalizeFirstLetter(str) {\n    return str.replace(/\\w\\S*/g, function(txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}\ncapitalizeFirstLetter('This is an example');</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to loop through all the items in a given list.\n\nList: [1, 2, 3, 4, 5, 6] [/INST] my_list = [1, 2, 3, 4, 5, 6]\nfor item in my_list:\n    print(item)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the name and address from a given table.\n\nTable: Employee [/INST] SELECT name, address FROM Employee</s>"
  },
  {
    "text": "<s>[INST] Create a new CSS animation rule to rotate an object a full circle. [/INST] @keyframes rotate {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a PL/SQL program to print out all numbers from 1 to 10. [/INST] BEGIN\n  FOR i IN 1..10 LOOP\n    DBMS_OUTPUT.PUT_LINE(i);\n  END LOOP;\nEND;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to remove the last element from an array.\n\nArray: [1, 2, 3, 4, 5] [/INST] let array = [1, 2, 3, 4, 5];\narray.pop(); // remove the last element\nconsole.log(array); // [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Convert the following binary number to a decimal number.\n\nBinary Number: 10011 [/INST] 19 (10011 = 2^4 + 2^3 + 2^1 = 16 + 8 + 1 = 25)</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to calculate the sum of the two given integers.\n\nIntegers: 4 and 9 [/INST] public static int addIntegers(int a, int b) {\n    int sum = a + b;\n    return sum;\n}\n\npublic static void main(String[] args) {\n    int x = 4, y = 9;\n    int sum = addIntegers(x, y);\n    System.out.println(\"Sum is: \"+sum);\n}</s>"
  },
  {
    "text": "<s>[INST] What is the largest prime factor of the number 885? [/INST] The largest prime factor of 885 is 5.</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python which takes two parameters and returns their product. [/INST] def product(a, b):\n    return a*b</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop that prints out the numbers from 1 to 10 [/INST] for i in range(1, 11):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form with three input fields: firstName, lastName and age. [/INST] <form> \n    First Name:<br> \n    <input type=\"text\" name=\"firstName\"><br> \n    Last Name:<br> \n    <input type=\"text\" name=\"lastName\"><br> \n    Age:<br> \n    <input type=\"number\" name=\"age\"><br><br> \n    <input type=\"submit\" value=\"Submit\"> \n</form></s>"
  },
  {
    "text": "<s>[INST] Write a function in Java that takes two strings as parameters and returns true if the first string is a substring of the second. [/INST] public boolean isSubstring(String s1, String s2) \n{ \n    int M = s1.length(); \n    int N = s2.length(); \n  \n    for (int i = 0; i <= N - M; i++) { \n        int j; \n  \n        for (j = 0; j < M; j++) \n            if (s2.charAt(i + j) != s1.charAt(j)) \n                break; \n  \n        if (j == M) \n            return true; \n    } \n  \n    return false; \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a while loop that increments a counter every time a number is divisible by 3. [/INST] int count = 0; \nint i = 0; \nwhile(i < 100)\n{\n     if(i % 3 == 0)\n          count++; \n     i++;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Regular Expression pattern to find words that contain the letters \"a\", \"b\", and \"c\". [/INST] \\b[abc]+\\w*\\b</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python to represent a Person. [/INST] class Person:\n    # Constructor \n    def __init__(self, name, age): \n         \n        # instance attributes \n        self.name = name \n        self.age = age \n  \n    # instance method \n    def greeting(self): \n        print(\"My name is\", self.name) \n  \n# construct an object \nperson1 = Person(\"John\", 36) \n  \n# call a method of the object \nperson1.greeting()</s>"
  },
  {
    "text": "<s>[INST] Write a code to check whether the input string is a palindrome or not.\n\na man a plan a canal panama [/INST] \"\"\"\nWrite a code to check whether the input string is a palindrome or not\n\"\"\"\n\ndef check_palindrome(input_string):\n    rev_str = input_string[::-1]\n \n    # Checking if both string are equal or not\n    if rev_str == input_string:\n        return True\n    return False\n  \n# main function\nif __name__ == \"__main__\":\n    str = \"a man a plan a canal panama\"\n    if check_palindrome(str):\n        print(\"String is Palindrome\")\n    else:\n        print(\"String is not Palindrome\")</s>"
  },
  {
    "text": "<s>[INST] Write a code to remove the duplicates from a given list.\n\nmylist = [1,2,3,1,2] [/INST] \"\"\"\nWrite a code to remove the duplicates from a given list\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,1,2]\n\n# Creating a new list with unique elements\nunique_list = list(set(mylist))\n\n# Printing the new list\nprint(\"New list with unique elements is {}\".format(unique_list))</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary containing the key-value pair of a given string.\n\nstring = \"test string\" [/INST] \"\"\"\nCreate a dictionary containing the key-value pair of a given string\n\"\"\"\n\n# Given string\nstring = \"test string\"\n\n# Initialising an empty dictionary\nmy_dict = {}\n\n# Looping through the given string\nfor char in string:\n    # If the character is not already in dictionary\n    if char not in my_dict:\n        # Adding the character to the dictionary\n        my_dict[char] = 1\n    # If the character already exists in dictionary\n    else:\n        # Incrementing the frequency\n        my_dict[char] += 1\n        \n# Printing the dictionary\nprint(my_dict)</s>"
  },
  {
    "text": "<s>[INST] Write a code to generate a random number between 1 to 10. [/INST] \"\"\"\nWrite a code to generate a random number between 1 to 10\n\"\"\"\n\nimport random\n\n# Generate random number between 1 to 10 \nrandom_number = random.randint(1,10)\n\n# Printing the random number\nprint(random_number)</s>"
  },
  {
    "text": "<s>[INST] Write a code to create a 3 x 3 matrix containing all 0s. [/INST] \"\"\"\nWrite a code to create a 3 x 3 matrix containing all 0s\n\"\"\"\n\n# Creating an empty 3 x 3 matrix\nmatrix = [[0 for x in range(3)] for y in range(3)] \n  \n# Printing the matrix\nprint(matrix)</s>"
  },
  {
    "text": "<s>[INST] Write a code to check whether two strings are anagrams or not.\n\nfirst = \"listen\"\nsecond = \"silent\" [/INST] \"\"\"\nWrite a code to check whether two strings are anagrams or not\n\"\"\"\n\n# Strings to be checked\nfirst = \"listen\"\nsecond = \"silent\"\n\n# Sorting the strings\nfirst_sorted = \"\".join(sorted(first))\nsecond_sorted = \"\".join(sorted(second))\n\n# Checking if both sorted strings are equal or not\nif first_sorted == second_sorted:\n    print(\"Strings are Anagrams\")\nelse:\n    print(\"Strings are not Anagrams\")</s>"
  },
  {
    "text": "<s>[INST] Write a code to delete all the vowels from a given string.\n\nstring = \"hello world\" [/INST] \"\"\"\nWrite a code to delete all the vowels from a given string\n\"\"\"\n\n# Given string\nstring = \"hello world\"\n\n# Removing all the vowels from the string\nno_vowels = \"\".join([letter for letter in string if letter not in \"aeiouAEIOU\"])\n\n# Printing the new string\nprint(\"String without vowels is\", no_vowels)</s>"
  },
  {
    "text": "<s>[INST] Write a code to convert a given list of strings to uppercase.\n\nmylist = [\"hello\",\"world\"] [/INST] \"\"\"\nWrite a code to convert a given list of strings to uppercase\n\"\"\"\n\n# List containing the strings\nmylist = [\"hello\",\"world\"]\n\n# Converting the list of strings to uppercase\nupper_list = [string.upper() for string in mylist]\n \n# Printing the new list\nprint(\"List with strings in uppercase is\", upper_list)</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the maximum in a given list of integers.\n\nmylist = [1,2,3,4,5] [/INST] \"\"\"\nWrite a code to find the maximum in a given list of integers\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,4,5]\n\n# Finding the maximum element\nmax = mylist[0]\n\n# Looping through each element to find if it is the maximum\nfor i in range(1,len(mylist)):\n    # Comparing the element with the maximum\n    if mylist[i] > max:\n        max = mylist[i]\n\n# Printing the maximum element\nprint(\"Maximum element of the list is\", max)</s>"
  },
  {
    "text": "<s>[INST] Write a code to generate the multiplication table of a given integer.\n\nx = 5 [/INST] \"\"\"\nWrite a code to generate the multiplication table of a given integer\n\"\"\"\n\n# Number for which multiplication table will be generated\nx = 5\n\n# Generating the multiplication table\nfor i in range(1,11):\n    # Printing each row of the table\n    print(\"{} x {} = {}\".format(x,i,x*i))</s>"
  },
  {
    "text": "<s>[INST] Write a code to merge two given lists of equal size.\n\nlist1 = [1,2,3]\nlist2 = [4,5,6] [/INST] \"\"\"\nWrite a code to merge two given lists of equal size\n\"\"\"\n\n# Given lists\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\n# Initialising an empty list\nmerged_list = []\n\n# Merging the lists\nfor i in range(len(list1)):\n    merged_list.append(list1[i])\n    merged_list.append(list2[i])\n\n# Printing the merged list\nprint(\"Merged list is\", merged_list)</s>"
  },
  {
    "text": "<s>[INST] Write a code to compute the mean of an input list of numbers.\n\nmylist = [1,2,3,4,5] [/INST] \"\"\"\nWrite a code to compute the mean of an input list of numbers\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,4,5]\n\n# Computing the sum and number of elements\nsum = 0\nnum_elements = len(mylist)\n\n# Looping through each element\nfor i in mylist:\n    sum += i\n\n# Computing the mean\nmean = sum/num_elements\n\n# Printing the mean\nprint(\"Mean of the list is\", mean)</s>"
  },
  {
    "text": "<s>[INST] Create a program to convert the input sentence to Pig Latin.\n\nI am a computer programmer [/INST] \"\"\"\nCreate a program to convert the input sentence to Pig Latin.\n\"\"\"\n\ndef pig_latin(sentence):\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in 'aeiou':\n            new_words.append(word + 'ay')\n        else:\n            new_words.append(word[1:] + word[0] + 'ay')\n    return ' '.join(new_words)\n\nif __name__ == '__main__':\n    print(pig_latin('I am a computer programmer'))</s>"
  },
  {
    "text": "<s>[INST] Create a program to write an overwriting if-else logic for the following switch statement\n\nswitch(a) {\n  case 1: \n    func1();\n    break;\n  case 2: \n    func2();\n    break;\n} [/INST] \"\"\"\nCreate a program to write an overwriting if-else logic for the following switch statement\n\"\"\"\n\ndef switch_to_if_else(a):\n  if a == 1:\n    func1()\n  elif a == 2:\n    func2()\n\nif __name__ == '__main__':\n    switch_to_if_else(a)</s>"
  },
  {
    "text": "<s>[INST] Write a function that sorts the given list of numbers in descending order\n\n[1, 2, 3, 5, 8, 10] [/INST] \"\"\"\nWrite a function that sorts the given list of numbers in descending order\n\"\"\"\n\ndef sort_list_descending(numbers):\n    numbers.sort(reverse = True)\n    return numbers\n\nif __name__ == '__main__':\n    print(sort_list_descending([1, 2, 3, 5, 8, 10]))</s>"
  },
  {
    "text": "<s>[INST] Create a program to create a list of all the numbers from 1 to 10 which are divisible by 3 [/INST] \"\"\"\nCreate a program to create a list of all the numbers from 1 to 10 which are divisible by 3\n\"\"\"\n\ndef divisible_by_three():\n    divisible_by_three_list = []\n    for i in range(1, 11):\n        if i % 3 == 0:\n            divisible_by_three_list.append(i)\n    return divisible_by_three_list\n\nif __name__ == '__main__':\n    print(divisible_by_three())</s>"
  },
  {
    "text": "<s>[INST] rewrite the following for-loop as a while-loop\n\nfor i in range(0, 5):\n    print(i) [/INST] \"\"\"\nRewrite the following for-loop as a while-loop\n\"\"\"\n\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1</s>"
  },
  {
    "text": "<s>[INST] Create a program to compute the checksum of a given data packet\n\ndata_packet = [0xff, 0x0a, 0x1b, 0x3f] [/INST] \"\"\"\nCreate a program to compute the checksum of a given data packet\n\"\"\"\n\ndef compute_checksum(data_packet):\n    checksum = 0\n    for x in data_packet:\n        checksum += x\n    return checksum\n\nif __name__ == '__main__':\n    data_packet = [0xff, 0x0a, 0x1b, 0x3f]\n    print(compute_checksum(data_packet))</s>"
  },
  {
    "text": "<s>[INST] Create a program to parse a given string and return a dictionary with all the words and their frequency\n\n\"this is a practice string to learn the parsing of strings\" [/INST] \"\"\"\nCreate a program to parse a given string and return a dictionary with all the words and their frequency\n\"\"\"\n\ndef parse_string(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nif __name__ == '__main__':\n    print(parse_string(\"this is a practice string to learn the parsing of strings\"))</s>"
  },
  {
    "text": "<s>[INST] Create a program to classify whether the given number is even or odd\n\n5 [/INST] \"\"\"\nCreate a program to classify whether the given number is even or odd\n\"\"\"\n\ndef even_or_odd(number: int) -> str:\n    if number % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n\nif __name__ == '__main__':\n    print(even_or_odd(5))</s>"
  },
  {
    "text": "<s>[INST] Create a program to generate the sum of all the elements in a given list\n\n[1, 2, 3, 4, 5] [/INST] \"\"\"\nCreate a program to generate the sum of all the elements in a given list\n\"\"\"\n\ndef sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3, 4, 5]))</s>"
  },
  {
    "text": "<s>[INST] Create a program to find all the factors of a given number\n\n24 [/INST] \"\"\"\nCreate a program to find all the factors of a given number \n\"\"\"\n\ndef find_factors(num):\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\nif __name__ == '__main__':\n    print(find_factors(24))</s>"
  },
  {
    "text": "<s>[INST] Create a program to check if a given string is a palindrome\n\n\"racecar\" [/INST] \"\"\"\nCreate a program to check if a given string is a palindrome\n\"\"\"\n\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n-i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_palindrome(\"racecar\"))</s>"
  },
  {
    "text": "<s>[INST] Create a program to generate all possible pairs of a given list of numbers\n\n[1, 2, 3] [/INST] \"\"\"\nCreate a program to generate all possible pairs of a given list of numbers\n\"\"\"\n\ndef generate_pairs(nums):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            pairs.append((nums[i], nums[j]))\n    return pairs\n\nif __name__ == '__main__':\n    print(generate_pairs([1, 2, 3]))</s>"
  },
  {
    "text": "<s>[INST] Create a program that extracts a given pattern from a given string\n\ntext = \"Hello world!\", pattern = \"l\" [/INST] \"\"\"\nCreate a program that extracts a given pattern from a given string\n\"\"\"\n\ndef extract_pattern(text, pattern):\n    result = []\n    for i in range(len(text)):\n        if text[i] == pattern:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    text = \"Hello world!\"\n    pattern = \"l\"\n    print(extract_pattern(text, pattern))</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to split special characters with a given string.\n\nstring = \"Hello@#World\" [/INST] string = \"Hello @# World\"</s>"
  },
  {
    "text": "<s>[INST] Create a regex to match the characters \"CDE\" in any order. [/INST] regex = r\"(C|D|E){3}\"</s>"
  },
  {
    "text": "<s>[INST] Convert the following string to a list of strings.\n\nwords = \"How are you doing today\" [/INST] words = [\"How\", \"are\", \"you\", \"doing\", \"today\"]</s>"
  },
  {
    "text": "<s>[INST] Generate a 5x5 array with all its elements equal to 1. [/INST] arr = [[1,1,1,1,1],\n       [1,1,1,1,1],\n       [1,1,1,1,1],\n       [1,1,1,1,1],\n       [1,1,1,1,1]]</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, find the index of the greatest value.\n\nlst = [3, 5, 6, 8, 9] [/INST] index = 4</s>"
  },
  {
    "text": "<s>[INST] Classify the following sentence as positive or negative sentiment.\n\nThis is the worst experience ever. [/INST] Negative sentiment.</s>"
  },
  {
    "text": "<s>[INST] Create a web page with a centered title and paragraph in HTML.\n\ntitle = \"My First Web Page\"\nparagraph = \"This is my first web page. It is an amazing experience!\" [/INST] <!DOCTYPE html>\n<html>\n    <head>\n        <title>My First Web Page</title>\n    </head>\n    <body>\n        <div class=\"main\">\n            <h1 align=\"center\">My First Web Page</h1>\n            <p align=\"center\">This is my first web page. It is an amazing experience!</p>\n        </div>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that finds the shortest word in a string.\n\nsentence = \"I'm so excited to begin this journey\" [/INST] function findShortestWord(sentence) { \n    let words = sentence.split(\" \"); \n    let shortestWord = words[0]; \n  \n    for (let i = 0; i < words.length; i++) { \n        if (words[i].length < shortestWord.length) \n            shortestWord = words[i]; \n    } \n  \n    return shortestWord; \n}</s>"
  },
  {
    "text": "<s>[INST] Find the total number of elements in the following array.\n\nmy_array = [[1,2], 3, 4] [/INST] Total number of elements = 4</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the names of customers who have ordered products. [/INST] SELECT c.name\nFROM customers c, orders o\nWHERE o.customer_id = c.id</s>"
  },
  {
    "text": "<s>[INST] Classify the following sentence as a question or a statement.\n\nHave you ever tried eating a brussel sprout? [/INST] Question.</s>"
  },
  {
    "text": "<s>[INST] Write a Python program that tests if a given number is divisible by 3.\n\nnum = 51 [/INST] if (num % 3 == 0):\n    print(\"The number is divisible by 3\")\nelse:\n    print(\"The number is not divisible by 3\")</s>"
  },
  {
    "text": "<s>[INST] Edit the following code so it outputs the odd numbers between 1 and 50.\n\nfor i in range(1,51):\n    print(i) [/INST] for i in range(1,51):\n    if i % 2 != 0:\n        print(i)</s>"
  },
  {
    "text": "<s>[INST] Write a function to compare two strings and return True if they are anagrams.\n\nstr1 = 'silent'\nstr2 = 'listen' [/INST] def anagram(str1, str2): \n\n    # Get lenghts of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If lengths are not same, then strings   \n    # are not anagrams \n    if n1 != n2:\n        return False\n    str1 = ''.join(sorted(str1))\n    str2 = ''.join(sorted(str2))\n    # Comparing sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n\n    return True\n\nprint(anagram(str1, str2))</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a list of integers as inputs and returns the sum of the square of all the even numbers.\n\nlst = [2, 8, 9, 5, 3, 10] [/INST] def sum_square_even(lst):\n    result = 0\n    for num in lst:\n        if (num % 2 == 0):\n            result += num ** 2\n    return result\n\nprint(sum_square_even(lst))</s>"
  },
  {
    "text": "<s>[INST] Using the input string, write a code to replace the \"!\" with a \"?\".\n\nstring = \"Hello World!\" [/INST] string = \"Hello World!\"\nstring = string.replace(\"!\", \"?\")\nprint(string)</s>"
  },
  {
    "text": "<s>[INST] Write a code to take two string inputs and generate the output string containing alternate characters from each string.\n\nstr1 = 'abc'\nstr2 = '123' [/INST] def alternate_char(str1, str2):\n    # get the length of string\n    n = len(str1)\n\n    # initialize the output string\n    output_str = ''\n\n    # generate the output string\n    for i in range(n):\n        output_str += str1[i] + str2[i]\n    \n    return output_str\n\nprint(alternate_char(str1, str2))</s>"
  },
  {
    "text": "<s>[INST] Given a list of strings, write a code to find the longest string.\n\nlst = ['one', 'two', 'three', 'four', 'five'] [/INST] # initial max length\nmax_length = 0\n# empty string to store the max length string\nmax_str = ''\n\n# iterate through the list\nfor string in lst:\n    # get the length\n    length = len(string)\n    # update the max length\n    if length > max_length:\n        # get the string\n        max_str = string\n        # update max length\n        max_length = len(string)\n\nprint(max_str)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the total amount from orders table where status is \"complete\". [/INST] SELECT SUM(amount)\nFROM orders\nWHERE status = 'completed';</s>"
  },
  {
    "text": "<s>[INST] Write a function to get the mean of the given list of numbers.\n\nlst = [1, 4, 5, 9, 3] [/INST] def mean(lst):\n    # calculate the sum\n    total = 0\n    for item in lst:\n        total += item\n    \n    # calculate the mean\n    mean = total / len(lst)\n    return mean\n\nprint(mean(lst))</s>"
  },
  {
    "text": "<s>[INST] Write a Django Model API to store status and published date for a blog post. [/INST] from django.db import models\n\nclass BlogPost(models.Model):\n    # post title\n    title = models.CharField(max_length = 200)\n    # post status (draft / published)\n    status = models.CharField(max_length = 20)\n    # post publish date\n    published = models.DateTimeField(auto_now_add = True)</s>"
  },
  {
    "text": "<s>[INST] Write a code to compare two lists and find the common elements.\n\nlist1 = [3, 6, 9, 12]\nlist2 = [2, 4, 5, 6, 8, 9] [/INST] def find_common(list1, list2):\n    # initial list to store common elements\n    result = []\n\n    # iterate through the list\n    for num in list1:\n        # check if the number is in list2\n        if num in list2:\n            # append the element\n            result.append(num)\n\n    return result\n    \nprint(find_common(list1, list2))</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to check if an array contains a given value\n\narr = [1, 7, 5, 8, 44]\nvalue = 5 [/INST] def check_value(arr, value):\n    for item in arr:\n        if item == value:\n            return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to print out the first n prime numbers [/INST] public static void printPrimeNumbers(int n) \n    { \n        int num; \n        int count=0;\n        for (int i = 2; i <= n;) \n        { \n            num=0; \n            for (int j = 2; j <= i / 2; j++)  \n            { \n                if (i % j == 0) \n                { \n                    num++; \n                    break; \n                } \n            } \n            if (num == 0) \n            { \n                System.out.print(i+\" \"); \n                count++; \n            } \n            i++; \n        } \n    }</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the names of all employees working at a given department [/INST] SELECT e.name \nFROM employee e \nJOIN department d ON e.departmentid = d.id \nWHERE d.name = 'given department'</s>"
  },
  {
    "text": "<s>[INST] Write a function to determine if two strings are anagrams of each other [/INST] def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    freq1 = {}\n    freq2 = {}\n\n    for char in str1:\n        if char not in freq1:\n            freq1[char] = 1\n        else:\n            freq1[char] += 1\n\n    for char in str2:\n        if char not in freq2:\n            freq2[char] = 1\n        else:\n            freq2[char] += 1\n\n    for key in freq1:\n        if key not in freq2 or freq2[key] != freq1[key]:\n            return False\n    \n    return True</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to calculate the factorial of a number [/INST] function factorial(n){\n    if (n == 0){\n        return 1;\n    }\n    else{\n        return n * factorial(n - 1);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write C++ code to find the maximum subarray sum [/INST] int maxSubarraySum(int arr[], int n) { \n    int max_so_far = 0, max_ending_here = 0; \n  \n    for (int i = 0; i < n; i++) { \n        max_ending_here = max_ending_here + arr[i]; \n        if (max_so_far < max_ending_here) \n            max_so_far = max_ending_here; \n  \n        if (max_ending_here < 0) \n            max_ending_here = 0; \n    } \n    return max_so_far; \n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to generate the Fibonacci series up to the nth term [/INST] def fibonacci(n):  \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b</s>"
  },
  {
    "text": "<s>[INST] Connect to a MySQL database and select all rows from Customers where Phone is greater than 1000. [/INST] import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"\",\n  passwd=\"\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT * FROM customers WHERE phone > 1000\")\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\n  print(x)</s>"
  },
  {
    "text": "<s>[INST] Write a function that checks if a string is a palindrome or not.\n\nstring = \"ana\" [/INST] def is_palindrome(string):\n    rev = ''.join(reversed(string))\n    if rev == string:\n        return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Change the following array so that it orders in ascending order\n\narray = [3, 7, 1, 8, 4] [/INST] array.sort()</s>"
  },
  {
    "text": "<s>[INST] Read a code and identify the data type of the variables a and b\n\na = 8\nb = \"Hello\" [/INST] A is an integer and B is a string.</s>"
  },
  {
    "text": "<s>[INST] Write a simple calculator program. [/INST] def calculator():\n    number1 = int(input(\"Please enter first number: \"))\n    number2 = int(input(\"Please enter second number: \"))\n    print(\"Please choose operation -\\n\" \\\n          \"1. Add\\n\" \\\n          \"2. Subtract\\n\" \\\n          \"3. Multiply\\n\" \\\n          \"4. Divide\\n\") \n\n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        ans = number1 + number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 2:\n        ans = number1 - number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 3:\n        ans = number1 * number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 4:\n        ans = number1 / number2\n        print(\"Answer={}\".format(ans))\n    else:\n        print(\"Invalid Choice\")</s>"
  },
  {
    "text": "<s>[INST] Parse the string \"Hello[1]World[4]123[3]\" into a list.\n\nstring = \"Hello[1]World[4]123[3]\" [/INST] my_list = string.split('[')\nmy_list = [item.replace(']', '') for item in my_list]\nmy_list = [int(item) for item in my_list[1::2]]</s>"
  },
  {
    "text": "<s>[INST] Read the following two JSON strings and merge them\n\njson1 = {\n    \"name\": \"John\",\n    \"age\": 20\n}\n\njson2 = {\n    \"address\": \"123 Street\"\n} [/INST] import json\n\njson1 = json.loads(json1)\njson2 = json.loads(json2)\nmerged_json = {**json1, **json2}</s>"
  },
  {
    "text": "<s>[INST] Write a code to return the first 3 elements in a list.\n\nmylist = [1,4,3,6,7,2,4] [/INST] mylist[:3]</s>"
  },
  {
    "text": "<s>[INST] Change the following array so that it only contains numbers divisible by 3\n\nmylist = [2, 4, 5, 6, 7, 11, 12, 22] [/INST] mylist = [x for x in mylist if x % 3 == 0]</s>"
  },
  {
    "text": "<s>[INST] Write a function to remove duplicate items in a list.\n\nmylist = [2, 3, 3, 4, 5, 6, 4, 7] [/INST] def remove_duplicates(mylist):\n    return set(mylist)</s>"
  },
  {
    "text": "<s>[INST] Read a code and find all the function calls that are made.\n\nprint('Hello world!')\nmy_function()\nmy_function2(2, 3) [/INST] The two function calls made are \"my_function()\" and \"my_function2(2, 3)\".</s>"
  },
  {
    "text": "<s>[INST] Write a code to delete all items from a list with a value of 3.\n\nmylist = [2, 3, 3, 4, 5, 6, 4, 7] [/INST] mylist = [item for item in mylist if item != 3]</s>"
  },
  {
    "text": "<s>[INST] Connect to a MongoDB database and select all documents from the collection ‘customers’. [/INST] import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydoc = mycol.find({})\n\nfor x in mydoc:\n  print(x)</s>"
  },
  {
    "text": "<s>[INST] Create a new array that contains only the even numbers from a given array.\n\narr = [1, 2, 3, 4, 5, 6, 7, 8] [/INST] arr = [x for x in arr if x % 2 == 0]</s>"
  },
  {
    "text": "<s>[INST] Find the number of times a letter appears in a string.\n\nstring = \"Hello World\"\nletter = 'l' [/INST] count = string.count(letter)</s>"
  },
  {
    "text": "<s>[INST] Create a for loop to print the numbers from 1 to 100. [/INST] for i in range(1, 101):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Estimate the time complexity of the following algorithm.\n\nfor i in range(n):\n    for j in range(n):\n        print(i + j) [/INST] O(n^2)</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to return the item with the highest value in a given dictionary.\n\nd = {'a':20, 'b':10, 'c':15} [/INST] key = max(d, key = d.get) \nval = d[key]\nreturn (key, val)</s>"
  },
  {
    "text": "<s>[INST] For the following two arrays, create a code snippet to return the intersecting element.\n\narr1 = [1, 9, 4, 10]\narr2 = [2, 4, 7, 8] [/INST] intersect_arr = [] \nfor i in arr1:\n    if i in arr2:\n        intersect_arr.append(i)\nreturn intersect_arr</s>"
  },
  {
    "text": "<s>[INST] Using the numpy library, create a 3x3 Identity Matrix. [/INST] iden_matrix = numpy.identity(3) \nprint(iden_matrix)</s>"
  },
  {
    "text": "<s>[INST] Create a Linked List Node with the data of type integer. [/INST] class Node: \n  \n  # Function to initializaee the node object \n  def __init__(self, data): \n    self.data = data # Assign data \n    self.next = None # Initialize next as null</s>"
  },
  {
    "text": "<s>[INST] Generate a unique and random password for a user using python. [/INST] import random \ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[ ]{}:'\npassword = random.choices(characters, k = 16) \nprint(\"\".join(password))</s>"
  },
  {
    "text": "<s>[INST] Given a binary tree, write a code snippet to list all of its descendant leafs. [/INST] def listDescendantLeaves(root):\n    if not root: \n        return\n    elif not root.left and not root.right: \n        print(root.val) \n    listDescendantLeaves(root.left) \n    listDescendantLeaves(root.right)</s>"
  },
  {
    "text": "<s>[INST] Given a string, write a function to remove all the duplicate characters.\n\nstring = \"apple\" [/INST] def remove_duplicates(string): \n    new_string = \"\" \n    for char in string:\n        if char not in new_string:\n            new_string += char \n    return new_string</s>"
  },
  {
    "text": "<s>[INST] classify the following sentence using a sentiment analysis model.\n\nThe movie is awesome. [/INST] \"\"\"\nClassify the following sentence using a sentiment analysis model.\nSentence: The movie is awesome.\n\"\"\"\n\nfrom textblob import TextBlob\n\nsentence = \"The movie is awesome.\"\n\n# convert the sentence to a TextBlob object\nblob = TextBlob(sentence)\n\n# get the sentiment\nsentiment = blob.sentiment\n\nif sentiment.polarity > 0:  # positive sentiment\n    print(\"This sentence is classified as Positive.\")\nelif sentiment.polarity == 0:  # neutral sentiment\n    print(\"This sentence is classified as Neutral.\")\nelse:  # negative sentiment\n    print(\"This sentence is classified as Negative.\")</s>"
  },
  {
    "text": "<s>[INST] convert all words in a sentence to camelCase\n\nThe quick brown fox jumps over the lazy dog [/INST] \"\"\"\nConvert all words in a sentence to camelCase\n\nInput: The quick brown fox jumps over the lazy dog\n\nOutput: theQuickBrownFoxJumpsOverTheLazyDog\n\"\"\"\n\ndef toCamelCase(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for index, word in enumerate(words):\n        if index > 0:\n            small_word = word.capitalize()\n            result += small_word\n        else:\n            result += word\n    return result\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(toCamelCase(sentence))</s>"
  },
  {
    "text": "<s>[INST] Write a function to calculate the average score of a list of numbers. [/INST] def get_average(numbers):\n    \"\"\"\n    Calculate and return the average of a list of numbers\n    :param numbers: the list of numbers\n    :return: the average of the numbers\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += number\n    return total / len(numbers)</s>"
  },
  {
    "text": "<s>[INST] Write a function to find the longest string in a list of strings. [/INST] def find_longest_string(strings):\n    \"\"\"\n    Find and return the longest string in a list of strings.\n    :param strings: the list of strings\n    :return: the longest string\n    \"\"\"\n    longest = \"\"\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest</s>"
  },
  {
    "text": "<s>[INST] Implement a function to extract the last two words from a string of words [/INST] def get_last_two_words(string):\n    \"\"\"\n    Extract and return the last two words from a string of words\n    :param string: the input string\n    :return: the last two words\n    \"\"\"\n    words = string.split(\" \")\n    return words[-2:]</s>"
  },
  {
    "text": "<s>[INST] Write code to find the intersection of two sorted lists\n\nlist1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6] [/INST] def find_intersection(list1, list2):\n    \"\"\"\n    Find the intersection of two sorted lists\n    :param list1: the first sorted list\n    :param list2: the second sorted list\n    :return: a list with elements found in both lists\n    \"\"\"\n    intersection = []\n    p1 = p2 = 0\n    while p1 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return intersection\n\nlist1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]\nprint(find_intersection(list1, list2))</s>"
  },
  {
    "text": "<s>[INST] Write code to flatten a nested list [/INST] def flatten_list(list):\n    \"\"\"\n    Flatten a nested list\n    :param list: the nested list to flatten\n    :return: a flattened list\n    \"\"\"\n    flattened_list = []\n    for item in list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list</s>"
  },
  {
    "text": "<s>[INST] Write code to remove all occurrences of a given element from a list [/INST] def remove_element(list, element):\n    \"\"\"\n    Remove all occurrences of a given element from a list\n    :param list: the list\n    :param element: the element to remove\n    :return: the filtered list\n    \"\"\"\n    filtered_list = [item for item in list if item != element]\n    return filtered_list</s>"
  },
  {
    "text": "<s>[INST] Generate pseudocode for a matrix multiplication algorithm. [/INST] \"\"\"\nGenerate pseudocode for a matrix multiplication algorithm.\n\"\"\"\n\n# Create an NxN matrix result, initialized to 0\nresult = zeros(NxN)\n\n# loop through matrix A and B\nfor i in range(N):\n    for j in range(N):\n        for k in range(N):\n            # multiply the elements of A and B\n            result[i][j] += A[i][k] * B[k][j]\n\n# return the result matrix\nreturn result</s>"
  },
  {
    "text": "<s>[INST] Create a function to generate a random password of length n [/INST] import random\n\ndef generate_password(n):\n    \"\"\"\n    Create a function to generate a random password of length n\n    :param n: the length of the password\n    :return: a random password of length n\n    \"\"\" \n    # create a character list of symbols, alphabets, and numbers\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-='\n    # create a list of length n with random characters\n    password = [random.choice(characters) for _ in range(n)] \n    # convert the list to a string\n    password = ''.join(password)  \n    # return the password\n    return password</s>"
  },
  {
    "text": "<s>[INST] Debug the following Python code\n\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1 [/INST] \"\"\"\nDebug the following Python code\n\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n\"\"\"\n\n# incorrect indentation of the else statement\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1   # correct indentation</s>"
  },
  {
    "text": "<s>[INST] Generate a data structure that can efficiently store an array of words [/INST] \"\"\"\nGenerate a data structure that can efficiently store an array of words\n\"\"\"\n\n# create a trie (a node with 26 references to other nodes)\nclass TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.end = True\n\n# create an empty array\nword_array = []\n\n# create a new trie\ntrie = Trie()\n\n# iterate over the array and insert the words into the trie\nfor word in word_array:\n    trie.insert(word)</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the position of a substring in a string [/INST] def find_substring(string, substring):\n    \"\"\"\n    Find the position of a substring in a string\n    :param string: the string\n    :param substring: the substring to find\n    :return: the position of the substring in the string\n    \"\"\"\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            return i\n    return -1  # substring not found</s>"
  },
  {
    "text": "<s>[INST] Reorder a given array in specialized order [/INST] def reorder_array(arr):\n    \"\"\"\n    Reorder a given array in specialized order\n    :param arr: the input array to reorder\n    :return: the reordered array\n    \"\"\"\n    # determine the size of the array\n    n = len(arr)\n    \n    # create a new array to store the reordered results\n    reordered = [0] * n\n    \n    # loop through the array \n    for i in range(n):\n        # calculate the position of the current element\n        pos = 2 * (arr[i] % (1 + n // 2))\n        # find the first vacant position in the new array\n        while reordered[pos] != 0:\n            pos += 1\n        # assign the current element to the vacant position\n        reordered[pos] = arr[i]\n    \n    return reordered</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code to create a horizontal line. [/INST] <hr></s>"
  },
  {
    "text": "<s>[INST] Design a function in Python that returns the median of an array of integers. [/INST] def median(arr):\n  sortedArr = sorted(arr)\n  length = len(arr)\n  if length % 2 == 0:\n    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)\n  else:\n    return sortedArr[length//2]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to valid a password based on the following rules: [/INST] function validatePassword(password) {\n  // Minimum 8 characters, one uppercase letter, one lowercase letter, one number, and one special character\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/;\n  if (password.match(re)) {\n    return true;\n  }\n  return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to reverse the order of a data structure such as array, list, or stack.\n\nlist1 = [1, 3, 5, 7, 9] [/INST] list1.reverse() # [9, 7, 5, 3, 1]</s>"
  },
  {
    "text": "<s>[INST] Create a program in C++ that calculates the absolute difference between two numbers.\n\nnum1 = 50;\nnum2 = 40; [/INST] #include <iostream>\nusing namespace std;\n\nint main() \n{\n  int num1 = 50;\n  int num2 = 40;\n  int absDiff = abs(num1 - num2);\n  cout << \"The absolute difference between two numbers is: \" << absDiff;\n  return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Design an HTML form with the following fields: first name, last name, age, phone number and address. [/INST] <form> \n  <label> First Name: </label> \n  <input type=\"text\" name=\"firstname\" required> \n  <label> Last Name: </label> \n  <input type=\"text\" name=\"lastname\" required> \n  <label> Age: </label> \n  <input type=\"number\" name=\"age\" min=\"18\" required> \n  <label> Phone Number: </label> \n  <input type=\"tel\" name=\"phone\" required> \n  <label> Address: </label> \n  <input type=\"text\" name=\"address\" required> \n  <input type=\"submit\" value=\"Submit\"> \n</form></s>"
  },
  {
    "text": "<s>[INST] Create a Ruby program to check if a number is even or odd. [/INST] def is_even(number)\n  number % 2 == 0\nend</s>"
  },
  {
    "text": "<s>[INST] Redesign the following Python program with functions.\n\nmy_list = [5, 10, 15, 20]\nsum = 0\nfor number in my_list:\nsum = sum + number [/INST] def sum_of_list(my_list):\n  sum = 0\n  for number in my_list:\n    sum = sum + number\n  return sum\n\nmy_list = [5, 10, 15, 20]\nresult = sum_of_list(my_list)</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page displaying a table of 3 rows and 3 columns. [/INST] <table>\n  <tr>\n    <td>Column 1</td>\n    <td>Column 2</td>\n    <td>Column 3</td>\n  </tr>\n  <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n    <td>Row 1</td>\n  </tr>\n  <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n    <td>Row 2</td>\n  </tr>\n  <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n    <td>Row 3</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Debug the following JavaScript code which calculates the average of an array of integers:\n\narr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\nsum += arr[i]}\naverage = sum / arr.length [/INST] arr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\naverage = sum / arr.length;\nconsole.log(average);</s>"
  },
  {
    "text": "<s>[INST] Generate an random integer between 1 and 6. [/INST] Math.floor(Math.random() * 6) + 1;</s>"
  },
  {
    "text": "<s>[INST] Create a program that prints the first 10 Fibonacci numbers. [/INST] \"\"\"\nPrint the first ten Fibonacci numbers\n\"\"\"\n\ndef print_first_ten_fibonacci_numbers():\n    \"\"\"Print the first ten Fibonacci numbers.\"\"\"\n\n    n1, n2 = 0, 1\n    num = 0\n    while num < 10:\n        print(n1)\n        nth= n1 + n2\n        n1 = n2\n        n2 = nth\n        num += 1\n        \nif __name__ == '__main__':\n    print_first_ten_fibonacci_numbers()</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of an array of integers\n\n[3, 5, 7, 9] [/INST] 24</s>"
  },
  {
    "text": "<s>[INST] Find the smallest element in a given array.\n\n[6, 8, 1, 4, 5] [/INST] 1</s>"
  },
  {
    "text": "<s>[INST] How would you determine if a given number is a prime number? [/INST] A prime number is a number that is only divisible by 1 and itself. To check if a given number is a prime number, first use a loop to check all the numbers from 1 to the given number. If any of the numbers evenly divide the given number, then the number is not a prime. Otherwise, the number is a prime number.</s>"
  },
  {
    "text": "<s>[INST] Compare two integers and print the larger one.\n\na = 3, b = 5 [/INST] if a > b:\n    print(a)\nelse:\n    print(b)</s>"
  },
  {
    "text": "<s>[INST] Edit the program to print the given date in the format \"dd/mm/yyyy\".\n\nyear = 2020\nmonth = 5\nday = 3 [/INST] # Print date in dd/mm/yyyy format\nprint(\"{:02d}/{:02d}/{:04d}\".format(day, month, year))</s>"
  },
  {
    "text": "<s>[INST] Create a function to reverse a string.\n\ns = \"hello world\" [/INST] \"\"\"\nReverse string\n\"\"\"\n\ndef reverse_string(s):\n    \"\"\"Reverse a given string.\n    \n    Args:\n        s (str): The string to reverse.\n        \n    Returns:\n        str: The reversed string.\n    \"\"\"\n    return s[::-1]\n    \nif __name__ == '__main__':\n    s = \"hello world\"\n    print(reverse_string(s))</s>"
  },
  {
    "text": "<s>[INST] Normalize a given array such that it adds up to 1.\n\n[3, 0, 9, 5] [/INST] [0.15, 0.0, 0.45, 0.3]</s>"
  },
  {
    "text": "<s>[INST] Find the longest common substring between two strings.\n\ns1 = \"Tangible\"\ns2 = \"Non-Tangible\" [/INST] \"\"\"\nFind the longest common substring between two strings\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    \"\"\"Find the longest common substring between two strings.\n    \n    Args:\n        s1 (str): The first string.\n        s2 (str): The second string.\n        \n    Returns:\n        str: The longest common substring.\n    \"\"\"\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1): \n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    break \n                length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\n    \nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))</s>"
  },
  {
    "text": "<s>[INST] Find the top 5 most common words in a given string.\n\ns = \"Hello world, this is a sample string for the task\" [/INST] \"\"\"\nFind the top 5 most common words in a given string\n\"\"\"\n\nfrom collections import Counter\n\ndef get_top_five_words(s):\n    \"\"\"Get the top five most common words in a given string.\n    \n    Args:\n        s (str): The string to process.\n        \n    Returns:\n        list: A list of (word, count) tuples sorted in descending order\n            of the most common words.\n    \"\"\"\n    words = s.split()\n    counts = Counter(words).most_common(5)\n    return counts\n    \nif __name__ == '__main__':\n    s = \"Hello world, this is a sample string for the task\"\n    print(get_top_five_words(s))</s>"
  },
  {
    "text": "<s>[INST] Classify a given sentence based on the intention behind it.\n\nsentence = \"I want to buy a car\" [/INST] The given sentence is a request intention.</s>"
  },
  {
    "text": "<s>[INST] Use the list comprehension syntax to make a new list whose elements are the square of the first list.\n\nlst = [1, 2, 3, 4] [/INST] [x**2 for x in lst]</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to calculate the factorial of a number (a non-negative integer). [/INST] def factorial(num):\n    \"\"\"\n    Calculates factorial of a given number.\n    \"\"\"\n    # Base case\n    if num == 0:\n        return 1\n    # Recursion\n    else:\n        return num * factorial(num-1)</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string and returns a boolean based on whether the string is a palindrome or not. [/INST] def is_palindrome(str):\n    \"\"\"\n    Checks if the given input string is a palindrome or not.\n    \"\"\"\n    return str == str[::-1]</s>"
  },
  {
    "text": "<s>[INST] Write a code to check whether a given year is a leap year or not [/INST] def is_leap_year(year):\n    \"\"\"\n    Checks if the given year is a leap year or not.\n    \"\"\"\n    if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):  \n        return True  \n    else:  \n        return False</s>"
  },
  {
    "text": "<s>[INST] Create a program which will take the user's name and output a custom message depending on the supplied name\n\nname = 'John' [/INST] def greet_user(name):\n    \"\"\"\n    Greet the user with a custom message depending on the supplied name.\n    \"\"\"\n    if name == 'John':\n        print('Hey there John! Welcome back!')\n    elif name == 'Mary':\n        print('Good morning Mary! How are you doing today?')\n    else:\n        print('Hi there! Welcome to our service!')</s>"
  },
  {
    "text": "<s>[INST] Write code to find the smallest number in an array of numbers.\n\narr = [5, 8, 2, 4, 7, 10] [/INST] def find_smallest_number(arr):\n    \"\"\"\n    Finds the smallest number in an array of numbers.\n    \"\"\"\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num</s>"
  },
  {
    "text": "<s>[INST] Write a function to calculate the arithmetic mean of an array of numbers\n\narr = [5, 8, 2, 4, 7, 10] [/INST] def calculate_mean(arr):\n    \"\"\"\n    Calculate the arithmetic mean of an array of numbers.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    return sum(arr) / len(arr)</s>"
  },
  {
    "text": "<s>[INST] Write code to implement Bubble Sort.\n\narr = [5, 8, 2, 4, 7, 10] [/INST] def bubble_sort(arr):\n    \"\"\"\n    Implementation of the Bubble Sort algorithm.\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Write code to find the longest substring of unique characters in a given string.\n\nstring = 'abcabcbb' [/INST] def find_longest_substring(string):\n    \"\"\"\n    Finds the longest substring of unique characters in a given string.\n    \"\"\"\n    longest_substring = ''\n    current_substring = ''\n    for ch in string:\n        if ch not in current_substring:\n            current_substring += ch\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n        else:\n            current_substring = ch\n    return longest_substring</s>"
  },
  {
    "text": "<s>[INST] Find the index of a given item in an array\n\narr = [1, 4, 6, 8, 9]\nitem = 8 [/INST] def find_index(arr, item):\n    \"\"\"\n    Finds the index of a given item in an array\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == item:\n            return i\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Write code to find the most frequent item in an array\n\narr = [1, 4, 6, 8, 9, 1, 4, 6] [/INST] def most_frequent_item(arr):\n    \"\"\"\n    Finds the most frequent item in an array.\n    \"\"\"\n    dictionary = {}\n    for i in arr:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n\n    max_count = 0\n    max_item = 0\n\n    for k, v in dictionary.items():\n        if v > max_count:\n            max_item = k\n            max_count = v\n    return max_item</s>"
  },
  {
    "text": "<s>[INST] Write code to concatenate two given strings.\n\nstr1 = 'hello'\nstr2 = 'world' [/INST] def concatenate(str1, str2):\n    \"\"\"\n    Concatenates two given strings.\n    \"\"\"\n    return str1 + str2</s>"
  },
  {
    "text": "<s>[INST] Create a program to display all prime numbers between a given range.\n\na, b = 2, 8 [/INST] def prime_numbers_in_range(a, b):\n    \"\"\"\n    Displays all prime numbers between a given range.\n    \"\"\"\n    for num in range(a, b+1):\n        if is_prime(num):\n            print(num,' is prime.')\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime or not.\n    \"\"\"\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False \n    return True</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of Big O notation in one sentence. [/INST] Big O notation is a way to measure the efficiency of algorithms and to compare them based on how their running time or space complexity grows relative to the size of the input.</s>"
  },
  {
    "text": "<s>[INST] Write a code to remove the oldest elements from a list until the list contains at most 10 elements.\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] [/INST] def remove_old_elements(lst):\n  for i in range(len(lst) - 10):\n    lst.pop(0)\n  return lst\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(remove_old_elements(list)) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of object-oriented programming. [/INST] Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields and code in the form of procedures. OOP is used to design objects which contain both data and functions as one unit and help in creating reusable code.</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to check if a value exists in a list. [/INST] def is_in_list(lst, val):\n    return val in lst</s>"
  },
  {
    "text": "<s>[INST] How do you declare a variable in Python? [/INST] In Python, you can declare a variable by assigning a value to it. For example, x = 1 is a variable declaration which creates a variable named x with the value of 1.</s>"
  },
  {
    "text": "<s>[INST] Write a code to multiple two numbers without using the multiplication operator. [/INST] def multiply(x,y):\n  if(y == 0):\n    return 0\n  return x + multiply(x,y-1)\n\nmultiply(5,4) # 20</s>"
  },
  {
    "text": "<s>[INST] Given a string, create a function that takes out all the duplicated characters in the string.\n\nstring = 'Keeep Learning' [/INST] def remove_duplicates(s):\n  seen = []\n  res = \"\"\n  for char in s:\n    if(char in seen):\n      continue\n    else:\n      seen.append(char)\n      res += char\n  return res\n\nstring = 'Keeep Learning'\nprint(remove_duplicates(string)) # Keep Larning</s>"
  },
  {
    "text": "<s>[INST] Write a Javascript code to check if the given number is a prime number. [/INST] function isPrimeNumber(num) {\n  for(var i = 2; i < num; i++){\n    if(num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of treemaps in data visualization? [/INST] Treemaps are used to represent hierarchical data visually. They are used to visualize large datasets by dividing them into rectangles proportional to their values. This makes it easier to quickly compare values and identify patterns across datasets.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the top 3 highest salaries in a employees table. [/INST] SELECT TOP 3 salary FROM employees ORDER BY salary DESC;</s>"
  },
  {
    "text": "<s>[INST] What is data transformation and how is it used? [/INST] Data transformation is the process of converting data from one format to another format. It is mainly used for cleaning and normalizing data before it is used for further analysis or machine learning. Data transformation involves a range of operations from removing outliers and duplicates, performing calculations to creating new columns and more.</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that takes an array of numbers and returns the median value from the array. [/INST] function getMedian(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  \n  let mid = Math.floor(arr.length / 2);\n  \n  if (arr.length % 2 === 0) {\n    return (arr[mid - 1] + arr[mid]) / 2;\n  } else {\n    return arr[mid];\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C++ code to find the longest common substring in two strings. [/INST] #include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring longestCommonSubstring(const string& s1, const string& s2) \n{ \n    int n1 = s1.length(); \n    int n2 = s2.length(); \n  \n    int maxlen = 0;\n    int endingIndex = n1;\n            \n    int dp[n1 + 1][n2 + 1]; \n  \n    for (int i = 0; i <= n1; i++) { \n        for (int j = 0; j <= n2; j++) { \n            if (i == 0 || j == 0) { \n                dp[i][j] = 0; \n            } else if (s1[i - 1] == s2[j - 1]) { \n                dp[i][j] = dp[i - 1][j - 1] + 1; \n  \n                if (dp[i][j] > maxlen) { \n                    maxlen = dp[i][j]; \n                    endingIndex = i; \n                } \n            } else { \n                dp[i][j] = 0; \n            } \n        } \n    } \n  \n    return s1.substr(endingIndex - maxlen, maxlen); \n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to perform binary search on a sorted array. [/INST] def binarySearch(array, item):\n  low = 0\n  high = len(array) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    guess = array[mid]\n    if guess == item:\n      return mid\n    if guess > item:\n      high = mid - 1\n    else:\n      low = mid + 1\n  return None</s>"
  },
  {
    "text": "<s>[INST] Given a string, write a Python program to find the first non-repeating character in it.\n\ninput_str = \"aaaaabbbbccc\" [/INST] def first_non_repeating_char(input_str): \n \n    char_count = {}\n \n    for ch in input_str: \n \n        if ch in char_count: \n \n            char_count[ch] += 1\n \n        else: \n \n            char_count[ch] = 1\n \n    for ch in input_str: \n \n        if char_count[ch] == 1: \n            return ch \n \n    return None\n\nprint(first_non_repeating_char(input_str))</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to check if an array contains a specific element.\n\nvar arr = [1,2,3,4]; [/INST] function contains(arr, element) {\n  return arr.indexOf(element) > -1;\n}\n\nconsole.log(contains(arr, 2)); //true</s>"
  },
  {
    "text": "<s>[INST] Construct a regular expression to extract all words from a given string that start with a specific letter.\n\ninput_str = \"The quick brown fox jumped over the lazy dog\" [/INST] var regex = /\\b[qQ]\\w+\\b/g;\n \nvar result = input_str.match(regex);\n\nconsole.log(result); //['quick']</s>"
  },
  {
    "text": "<s>[INST] Write a C++ function to find the maximum element in an array. [/INST] // C++ program to find maximum in arr[] of size n \n\nint arr[] = {10, 324, 45, 90, 9808}; \n\nint n = sizeof(arr)/sizeof(arr[0]); \n\nint max = arr[0];\n\n// Traverse array elements from second and \n// compare every element with current max   \nfor (int i = 1; i < n; i++) \n    if (arr[i] > max) \n        max = arr[i]; \n\nprintf(\"Maximum element = %d\", max);</s>"
  },
  {
    "text": "<s>[INST] Create a Node.js function to concatenate two strings. [/INST] function concatenate(str1, str2) {\n  return str1 + str2;\n}\n\nconsole.log(concatenate('Hello', 'World')); //HelloWorld</s>"
  },
  {
    "text": "<s>[INST] Construct a regular expression to check if a string begins with a given substring. [/INST] //String begins with substring\nvar regex = /^substring/;\n\nif (input_str.match(regex)) {\n  console.log('The string begins with the substring.');\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby program to search for a specific item in an array of strings.\n\narray = [\"Apple\",\"Banana\",\"Mango\",\"Orange\"] [/INST] def search_array(array, item) \n  return array.include?(item)\nend\n  \nputs search_array(array, \"Mango\") #true</s>"
  },
  {
    "text": "<s>[INST] Write a PHP program to find the sum of all elements of an array. [/INST] <?php\n \nfunction sum_array($arr) {\n    $sum = 0;\n    foreach ($arr as $val) {\n        $sum += $val;\n    }\n    return $sum;\n}\n \n$arr = array(5, 10, 25);\necho sum_array($arr); //40\n?></s>"
  },
  {
    "text": "<s>[INST] Create an HTML form with radio buttons for selecting gender. [/INST] <form>\n  <label>Gender:</label><br>\n  <input type=\"radio\" name=\"gender\" value=\"male\"> Male<br>\n  <input type=\"radio\" name=\"gender\" value=\"female\"> Female<br> \n</form></s>"
  },
  {
    "text": "<s>[INST] Write a Java program to find the largest element in a given array. [/INST] public class Largest { \n  \n    static int getLargest(int[] inputArray){ \n        int largest = inputArray[0]; \n        for(int i = 1; i < inputArray.length; i++){ \n            if(inputArray[i] > largest){ \n                largest = inputArray[i]; \n            } \n        } \n        return largest; \n    } \n      \n    public static void main(String[] args){ \n        int[] arr = {10,4,20,5,89}; \n        System.out.println(\"Largest element in the array is: \"+getLargest(arr)); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to find all columns in a table called \"customers\" where the first name is equal to 'John'. [/INST] SELECT * FROM customers WHERE firstName = 'John';</s>"
  },
  {
    "text": "<s>[INST] What is the correct syntax for an infinite loop in C++? [/INST] while (true) {\n    // Code to run\n}</s>"
  },
  {
    "text": "<s>[INST] Create a method in Java to return the largest of three numbers. [/INST] public static int max(int num1, int num2, int num3) {\nint max = num1;\nif (num2 > max) {\n max = num2;\n}\nif (num3 > max) {\n max = num3;\n}\nreturn max;\n}</s>"
  },
  {
    "text": "<s>[INST] Count the number of words in this sentence using Python.\n\nThis sentence has a total of eight words. [/INST] 8</s>"
  },
  {
    "text": "<s>[INST] Write a query in SQL to select all the rows from table Books. [/INST] SELECT * FROM Books;</s>"
  },
  {
    "text": "<s>[INST] Generate a 15-digit random number using Python. [/INST] import random\n\nrandom.randint(100000000000000, 999999999999999)</s>"
  },
  {
    "text": "<s>[INST] Compare the two strings character-by-character and return the number of differences using Java.\n\nString 1: Hello\nString 2: Halle [/INST] int diff = 0;\n\nfor (int i=0; i < Math.min(str1.length(), str2.length()); i++) {\n    if (str1.charAt(i) != str2.charAt(i)) {\n        diff++;\n    }\n}\nreturn diff;</s>"
  },
  {
    "text": "<s>[INST] Classify the following transaction as valid or invalid using Python.\n\nTransaction ID: 101\nTransaction Amount: -200 [/INST] \"invalid\"</s>"
  },
  {
    "text": "<s>[INST] Write a query in MongoDB to find all the documents in the collection \"Books\". [/INST] db.Books.find({})</s>"
  },
  {
    "text": "<s>[INST] Implement a function in JavaScript to calculate the average of all elements in an array.\n\n[2, 3, 9] [/INST] function avg(arr) {\n    let sum = 0;\n    for (const val of arr) {\n        sum += val;\n    }\n    return sum/arr.length;\n}\n\nconsole.log(avg([2,3,9])); // 4.666</s>"
  },
  {
    "text": "<s>[INST] Generate a random string of 12 characters using Python. [/INST] import string\nimport random\n\n''.join(random.choices(string.ascii_letters + string.digits, k=12))</s>"
  },
  {
    "text": "<s>[INST] What is the command to print \"Hello World\" twelve times in Python? [/INST] for i in range(12):\n    print(\"Hello World\")</s>"
  },
  {
    "text": "<s>[INST] Given a string s, write a function to check if the string is a palindrome.\n\ns = \"A man, a plan, a canal: Panama!\" [/INST] def is_palindrome(s):\n    s = s.lower().replace(' ', '').replace(',', '').replace(':', '').replace('!', '')\n\n    return s == ''.join(reversed(s))</s>"
  },
  {
    "text": "<s>[INST] Generate a list of the first three even numbers [/INST] [2, 4, 6]</s>"
  },
  {
    "text": "<s>[INST] Edit the Java code to filter out the persons whose age is less than 18.\n\nList<Person> persons = new ArrayList<>();\n\nfor (Person person : persons) {\n    System.out.println(person.getName());\n} [/INST] List<Person> persons = new ArrayList<>();\n\nfor (Person person : persons) {\n    if (person.getAge() >= 18) {\n        System.out.println(person.getName());\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] You need to find the largest subset of an array that sums up to a given value.\n\narr = [1, 2, 3, 4, 5], target = 8 [/INST] def find_largest_subset(arr, target):\n    curr_sums, max_sum_list = [], []\n    for num in arr:\n        for curr_sum in curr_sums[:]:\n            new_sum = curr_sum + num\n            if new_sum == target:\n                if new_sum > sum(max_sum_list):\n                    max_sum_list = curr_sum + [num]\n            else:\n                curr_sums.append(new_sum)\n    return max_sum_list</s>"
  },
  {
    "text": "<s>[INST] Can you explain what is imperative programming? [/INST] Imperative programming is a programming paradigm that describes computation in terms of statements that change a program’s state. Imperative programming focuses on describing how a program operates. It describes lists of instructions that the computer should execute, describing the steps from start to finish. Contrast this with functional programming, which describes what the program must do. In imperative programming, instructions are typically presented using decision-making (conditional) and looping (iteration) constructs. Examples of imperative programming languages are C, Java, and Python.</s>"
  },
  {
    "text": "<s>[INST] How do you count the number of specific characters in a given string? [/INST] You can use the count() method in Python to count the number of specific characters in a given string. For example:\n\ns = 'My name is John'\n\nnum_of_char = s.count('o')\n\nprint(num_of_char) #Output: 2</s>"
  },
  {
    "text": "<s>[INST] Generate an array with the first 10 even numbers [/INST] [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</s>"
  },
  {
    "text": "<s>[INST] Write a codde fragment to print out the most frequent element in an array.\n\narr = [1, 2, 2, 3, 4, 4, 5] [/INST] freq = {}\n\nfor el in arr:\n    if el in freq:\n        freq[el] += 1\n    else:\n        freq[el] = 1\n        \nmax_el, max_freq = None, 0\nfor el, freq in freq.items():\n    if freq > max_freq:\n        max_el = el\n        max_freq = freq\n        \nprint(max_el, max_freq)  # Output: 2 2</s>"
  },
  {
    "text": "<s>[INST] Write a JS program that takes a number n and prints out the first n even numbers.\n\nn = 10 [/INST] function getFirstNEvens(n) {\n    let arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(2 * i);\n    }\n    return arr;\n}\n\nlet firstNEvens = getFirstNEvens(n);\nconsole.log(firstNEvens); // Output: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</s>"
  },
  {
    "text": "<s>[INST] How do you merge two sorted arrays in O(n) time? [/INST] Merging two sorted arrays in O(n) time can be done using a two-pointer technique. Starting from the beginning of both the arrays, we keep track of the pointers and compare the elements at these positions. The smaller element is added to the merged array, and the pointer is then incremented. This is repeated until both arrays have been iterated over, with the remaining elements of the larger array being added to the merged array.</s>"
  },
  {
    "text": "<s>[INST] Classify whether the following is an imperative or functional programming language.\n\nJava [/INST] Imperative Programming</s>"
  },
  {
    "text": "<s>[INST] Update the existing HTML structure to add a new div class named \"container\".\n\n<body>\n    <h1> My First Webpage </h1>\n</body> [/INST] <body>\n    <div class=\"container\"></div>\n    <h1>My First Webpage</h1>\n</body></s>"
  },
  {
    "text": "<s>[INST] Determine the type of the given variable.\n\nvar age = 20 [/INST] Number.</s>"
  },
  {
    "text": "<s>[INST] Design a JSON structure including a \"name\" field and a \"date\" field. [/INST] {\"name\": \"\", \"date\": \"\"}</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop to iterate through an array of numbers.\n\nvar nums = [1,2,3,4,5] [/INST] for(var i=0; i<nums.length; i++){\n   console.log(nums[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Modify the following for loop to loop backwards.\n\nfor(var i=0; i<nums.length; i++){\n   console.log(nums[i]);\n} [/INST] for(var i=nums.length-1; i>=0; i--){\n   console.log(nums[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Describe the purpose of the given function.\n\nfunction avg(a,b){\n   return (a+b)/2;\n} [/INST] The purpose of this function is to calculate the average of two given numbers and return the result.</s>"
  },
  {
    "text": "<s>[INST] Create a CSS style to set the background color of a div class \"sample\". [/INST] .sample{\n   background-color: #fff;\n}</s>"
  },
  {
    "text": "<s>[INST] Compare and contrast  two sorting algorithms: Bubble sort and Quick sort. [/INST] Bubble sort is an algorithm that compares adjacent elements and swaps positions if they are out of order. It continues in this manner with loops until all elements of the array are in their correct order. Quick sort is very similar in its approach, but chooses a \"pivot\" element and divides the remaining array into two parts based on whether the elements are less than or greater than the pivot element. Bubble sort is simpler but has worse time complexity than Quick sort, which is more efficient.</s>"
  },
  {
    "text": "<s>[INST] Convert the given binary string to its corresponding decimal number.\n\n10111101 [/INST] 189.</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of try-catch statement in JavaScript. [/INST] The try-catch statement is used to handle errors in JavaScript code. It allows the code to continue running even if there is an error. The try clause contains the code that may throw an error, and the catch clause contains code that will execute when an error is thrown.</s>"
  },
  {
    "text": "<s>[INST] Generate a unique 6 character alphanumeric string. [/INST] j4xdu6.</s>"
  },
  {
    "text": "<s>[INST] Construct an array of objects with the fields \"name\" and \"age\". [/INST] [\n  {\n    \"name\": \"\",\n    \"age\": \n  },\n  {\n    \"name\": \"\",\n    \"age\": \n  },\n  ...\n]</s>"
  },
  {
    "text": "<s>[INST] Find the index of the given word in the sentence.\n\nWord: music\nSentence: I love listening to music. [/INST] 7.</s>"
  },
  {
    "text": "<s>[INST] Write a Python code snippet to print the pyramid structure with the given number of lines.\n\n4 [/INST] *   \n   ***\n  *****\n *******</s>"
  },
  {
    "text": "<s>[INST] Summarize the given paragraph in < 100 words.\n\nAda Lovelace is widely considered to be the world's first computer programmer. She was born to the poet Lord Byron and Lady Byron in 1815. She was fascinated by mathematics and charmed Charles Babbage, who is known as the father of computers, into teaching her about his Analytical Engine. Lovelace wrote a detailed description of the machine in 1843, and also outlines how it could be used to carry out complex calculations. [/INST] Ada Lovelace was born in 1815 to Lord Byron and Lady Byron and is widely acknowledged as the world’s first computer programmer. She was fascinated by mathematics and was able to learn about Charles Babbage’s Analytical Engine from him. In 1843, she wrote a detailed description of the machine and how it could be used for complex calculations.</s>"
  },
  {
    "text": "<s>[INST] Construct a switch statement to log different grades messages based on the grade variable.\n\nvar grade = \"A+\"; [/INST] switch(grade){\n   case \"A+\":\n      console.log(\"Excellent job!\");\n      break;\n   case \"A\":\n      console.log(\"Well done!\");\n      break;\n   case \"B\":\n      console.log(\"Good job!\");\n      break;\n   case \"C\":\n      console.log(\"Keep up the good work!\");\n      break;\n   default: \n      console.log(\"Keep up the hard work!\");\n      break;\n}</s>"
  },
  {
    "text": "<s>[INST] Reverse a string using Python code.\n\ninput_str = \"Hello world!\" [/INST] def reverse_string(input_str): \n    new_string = \"\" \n    for char in input_str: \n        new_string = char + new_string\n  \n    return new_string \n  \ninput_str = \"Hello world!\"\n\nprint(reverse_string(input_str))\n##\n5. Instruction: Create a program that prints a multiplication table that shows the product of any two numbers between 1 and 10.\n5. Input:\n<noinput>\n5. Output:\nfor i in range(1, 11): \n    for j in range(1, 11): \n        product = i * j\n        print(str(i) + '*' + str(j) +'=' + str(product), end = '  ') \n    print()</s>"
  },
  {
    "text": "<s>[INST] Create a regex expression that captures a valid URL. [/INST] ^(https?:\\/\\/)([\\da-zA-Z\\.-]+)\\.([a-zA-Z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$</s>"
  },
  {
    "text": "<s>[INST] Write a C++ class to represent a date. [/INST] class Date \n{\nprivate:\n    int day;\n    int month;\n    int year;\n\npublic:\n    Date(int day, int month, int year); \n\n    int getDay() const; \n    int getMonth() const;\n    int getYear() const;\n\n    void setDay(int day);\n    void setMonth(int month);\n    void setYear(int year);\n};</s>"
  },
  {
    "text": "<s>[INST] Write an SQL statement to select the name, city and country of all stores. [/INST] SELECT name, city, country\nFROM stores;</s>"
  },
  {
    "text": "<s>[INST] Create a list of two-word phrases using each of the four words ('apple', 'bear', 'cat', 'dog'). [/INST] [('apple', 'bear'), ('apple', 'cat'), ('apple', 'dog'), ('bear', 'cat'), ('bear', 'dog'), ('cat', 'dog')]</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, find the minimum and maximum elements.\n\n[3, 4, 8, 1, 5, 0, 9] [/INST] min_el = 0\nmax_el = 9</s>"
  },
  {
    "text": "<s>[INST] Assign the value 'Hello World' to the variable 'message'. [/INST] message = \"Hello World\"</s>"
  },
  {
    "text": "<s>[INST] Calculate the square root of the given number.\n\n25 [/INST] sqrt(25) = 5</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to print the first 10 terms of the Fibonacci series. [/INST] let a = 0, b = 1, c, limit = 10;\n\nconsole.log(\"Fibonacci Series of \"+limit+\" numbers:\");\n\nfor(var i=0; i < limit; i++){\n    if(i<=1){\n        c=i;\n    }\n    else{\n        c=a+b;\n        a=b;\n        b=c;\n    }\n    \n    console.log(c);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL table 'employees' with columns name, age, department and salary. [/INST] CREATE TABLE employees (\n    name VARCHAR(255) NOT NULL,\n    age INT NOT NULL,\n    department VARCHAR(255) NOT NULL,\n    salary DOUBLE NOT NULL\n);</s>"
  },
  {
    "text": "<s>[INST] Find the largest number from the given list of numbers.\n\n[7, 9, 11, 5] [/INST] largest_number = 11</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to print the following pattern. [/INST] for i in range(1,6):\n  for j in range(1,i+1):\n    print(\"*\", end=\" \")\n  print()</s>"
  },
  {
    "text": "<s>[INST] Generate a random 5-character string using the letters a-z. [/INST] import random\n\ncharacters = \"abcdefghijklmnopqrstuvwxyz\"\n\nrandom_string = \"\"\nfor i in range(5):\n    random_string += random.choice(characters)\n\nprint(random_string)</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to check if a given string is an anagram of another or not.\n\nword1 = \"cat\"\nword2 = \"tac\" [/INST] def is_anagram(word1, word2):\n return sorted(word1) == sorted(word2)</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to create a two-dimensional array of specified dimensions. [/INST] def create_2D_array(rows, columns):\n arr = [[] * columns] * rows\n return arr</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to replace all the occurrences of a given substring with another.\n\nstring = \"Hello World\"\nsubstring = \"World\"\nreplacement = \"Universe\" [/INST] def replace_substring(string, substring, replacement):\n return string.replace(substring, replacement)</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to compute the maximum value for each key in a given dictionary.\n\nd = {'a':10, 'b':20, 'c':30} [/INST] def max_values(d):\n return {key: max(d.values()) for key in d}</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to count the number of occurances of each character in a given string.\n\nstring = \"Mississippi\" [/INST] def count_chars(string):\n char_occurrences = {}\n for char in string:\n  if char not in char_occurrences:\n   char_occurrences[char] = 1\n  else:\n   char_occurrences[char] += 1\n return char_occurrences</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to generate the powerset of a given list.\n\nlist = [2, 4, 6] [/INST] def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\n\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) != 0</s>"
  },
  {
    "text": "<s>[INST] Describe how to debug a C++ program using GDB. [/INST] Debugging a C++ program using GDB involves running the program with the ‘gdb’ command and then setting breakpoints and examining variables. This can be done by typing in ‘break’ followed by the line number, or ‘b’ followed by the function name, where the program should halt. Once the program is halted, variables and registers can be inspected to determine what is causing the program to fail. Finally, the ‘continue’ or ‘c’ command can be used to resume normal execution.</s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query for finding a record in the collection that contains a specific value for a given field.\n\nThe collection is named 'books' and contains the fields 'title', 'author', and 'pub_date'. We would like to find a record where the title is \"Harry Potter and The Sorcerer's Stone\". [/INST] db.books.find({\"title\" : \"Harry Potter and The Sorcerer's Stone\"});</s>"
  },
  {
    "text": "<s>[INST] Name a few Python libraries used for data analysis. [/INST] Data analysis libraries in Python include Pandas, NumPy, SciPy, Matplotlib, Scikit-Learn and Seaborn.</s>"
  },
  {
    "text": "<s>[INST] Write code in Java to create a linked list. [/INST] class Node{\n    int data; \n    Node next; \n        \n    Node(int d){\n        data = d; \n        next = null; \n    } \n} \n\nclass LinkedList{ \n    Node head; \n        \n    public void insert(int data){ \n        Node node = new Node(data); \n        if (head == null) { \n            head = node; \n        } \n        else { \n            Node n = head; \n            while (n.next != null) { \n                n = n.next; \n            } \n            n.next = node; \n        } \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of inheritance in Python? [/INST] Inheritance in Python allows a class to inherit attributes and behavior from another class, called the parent class. Inheritance enables code reuse, making it an important part of object-oriented programming (OOP). A class that inherits attributes and behavior from a parent is called a child class or derived class. The parent class is also known as the base class or superclass.\n\nIn Python, inheritance is specified by placing classes in parentheses after the class name: class DerivedClass(BaseClass):. This syntax allows the DerivedClass to inherit all attributes and methods from the BaseClass. It also allows the DerivedClass to override methods of the BaseClass, and add new attributes and methods.</s>"
  },
  {
    "text": "<s>[INST] Construct a Java program for sorting a given array in ascending order. [/INST] public class ArraySort { \n    public static int[] sortArray(int[] arr) { \n        int n = arr.length; \n        for (int i = 0; i < n - 1; i++) { \n            int min_idx = i; \n            for (int j = i + 1; j < n; j++) \n                if (arr[j] < arr[min_idx]) \n                    min_idx = j; \n            int temp = arr[min_idx]; \n            arr[min_idx] = arr[i]; \n            arr[i] = temp; \n        } \n        return arr; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a CSS rule that sets the font-weight of all h1 headings to bold. [/INST] h1 {\n  font-weight: bold;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a query for filtering an array of objects in a MongoDB collection by their 'age' field.\n\nThe collection is named 'users' and the filter should return objects with age greater than 21 [/INST] db.users.find({\"age\": { $gt: 21 }});</s>"
  },
  {
    "text": "<s>[INST] Name the components of a typical machine learning pipeline. [/INST] A typical machine learning pipeline consists of data pre-processing, model training, model evaluation and model deployment. Data pre-processing involves cleaning, formatting, and transforming the data, while model training involves selecting an appropriate model and using it to learn from the data. Model evaluation evaluates the models and assists in model selection. The final step is deployment of the model, to enable inference from and prediction on new data points.</s>"
  },
  {
    "text": "<s>[INST] Describe the steps of creating an application using the Flask framework. [/INST] Steps to creating a Flask application include importing the Flask module, creating an instance of Flask, creating an HTML template file, and creating a route for the app that renders the HTML template. The next step is to create a file containing the code to execute on each route; this could include performing a database query, calling a web API, running functions, etc. Once the application has been built, it can be run using a Flask client, such as the flask command line interface.</s>"
  },
  {
    "text": "<s>[INST] Suggest the best practice for minimizing the risk of SQL injection attacks. [/INST] The best practice for minimizing the risk of SQL injection attacks is to use parameterized inputs and prepared statements. This enables the database to identify the data as separate values and thus renders SQL injection attacks ineffective. Additionally, input should be validated to ensure only valid data is accepted and to avoid any malicious manipulation of the input.</s>"
  },
  {
    "text": "<s>[INST] Describe how to create a 'dockerfile' [/INST] A Dockerfile is created by specifying a set of instructions for how to build an image for a Docker container. A Dockerfile should specify a base image and the desired version, update the package manager, set environment variables, run commands, define the port mapping for the application, add files from the host filesystem to the image, and set an entrypoint for the container.</s>"
  },
  {
    "text": "<s>[INST] Construct a query in SQL to find the names of the customers who made purchase on a given date.\n\nThe table name is 'Orders' and the given date is '2020-06-25'. [/INST] SELECT customer FROM orders WHERE date = '2020-06-25';</s>"
  },
  {
    "text": "<s>[INST] Purge all rows from the following dataframe that have a negative value in the Age column.\n\nimport pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data) [/INST] import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)\n\ndf = df[df['Age'] >= 0]</s>"
  },
  {
    "text": "<s>[INST] Convert the following strings to lower case.\n\ns1 = \"Hello World!\"\ns2 = \"HELLO WORLD!\" [/INST] s1 = \"Hello World!\".lower()\ns2 = \"HELLO WORLD!\".lower()</s>"
  },
  {
    "text": "<s>[INST] Change the following code snippet to generate a random integer from 0 to 10. [/INST] import random\n\nrandom_int = random.randint(0, 10)</s>"
  },
  {
    "text": "<s>[INST] Convert the following list to a set.\n\nmy_list = [2, 3, 5, 7] [/INST] my_set = set(my_list)</s>"
  },
  {
    "text": "<s>[INST] Print the first 5 elements of the following list.\n\nmy_list = [2, 4, 6, 8, 10, 12, 14] [/INST] for elem in my_list[:5]:\n    print(elem)</s>"
  },
  {
    "text": "<s>[INST] Define a function to check if a number is odd. [/INST] def is_odd(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Split the following string at the comma.\n\nmy_str = \"Hello,World\" [/INST] my_str_split = my_str.split(\",\")</s>"
  },
  {
    "text": "<s>[INST] Create a new empty dictionary. [/INST] my_dict = dict()</s>"
  },
  {
    "text": "<s>[INST] Create a pandas dataframe from the following dictionary.\n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, 18, 24]} [/INST] import pandas as pd\n\ndf = pd.DataFrame(data)</s>"
  },
  {
    "text": "<s>[INST] Sort the following list in descending order.\n\nmy_list = [1, 5, 3, 7] [/INST] my_list.sort(reverse=True)</s>"
  },
  {
    "text": "<s>[INST] Multiply each element in the following list with 10.\n\nmy_list = [2, 4, 6] [/INST] my_list = [x * 10 for x in my_list]</s>"
  },
  {
    "text": "<s>[INST] Count the number of unique elements in the following list.\n\nmy_list = [1, 2, 3, 1] [/INST] unique_count = len(set(my_list))</s>"
  },
  {
    "text": "<s>[INST] Using Python, create a list containing the first 20 prime numbers. [/INST] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]</s>"
  },
  {
    "text": "<s>[INST] Sort the given list of numbers in ascending order using Python.\n\nnumbers = [3, 5, 7, 1, 2] [/INST] sorted_numbers = [1, 2, 3, 5, 7]</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the greatest common divisor of two numbers in Python. [/INST] def gcd(a, b):\n     while b != 0:\n        a, b = b, a % b\n     return a</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to find the common elements in two given lists.\n\nlist1 = [1, 2, 3, 5, 7]\nlist2 = [2, 3, 4, 5, 6] [/INST] def common_elements(list1, list2):\n    common_ele = []   \n    for i in list1:\n        for j in list2:\n            if i==j:\n                common_ele.append(i)\n    return common_ele</s>"
  },
  {
    "text": "<s>[INST] Compute the result of the following mathematical expression in Python.\n\n(4 + 5 * 7 - 9) / 2 [/INST] result = 17</s>"
  },
  {
    "text": "<s>[INST] Using Python, create a function to check if a given string contains an uppercase letter. [/INST] def contains_uppercase(text):\n  for char in text:\n    if char.isupper():\n      return True\n  return False</s>"
  },
  {
    "text": "<s>[INST] Convert the following number into binary representation using Python.\n\n12 [/INST] binary = \"0b1100\"</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to format a specified string to limit the number of characters to 6.\n\nstring = \"Hello world\" [/INST] def limit_char(string):\n    if len(string) > 6 :\n        return string[:6]\n    else:\n        return string</s>"
  },
  {
    "text": "<s>[INST] Find the longest palindrome in a given string using Python.\n\nstring = \"My name is John\" [/INST] def longest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                palindrome = substring\n    return palindrome</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of all elements in a given list using Python.\n\nlist1 = [1, 2 ,3, 4, 5] [/INST] sum_list = 15</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to remove the characters which have odd index values of a given string.\n\nstring = \"Hello World\" [/INST] def remove_odd_index(string):\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a function to convert a given number from decimal to binary representation using Python. [/INST] def dec_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary+= str(num % 2)\n        num = num // 2\n    return binary[::-1]</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to find the intersection between two lists.\n\nlist1 = [1, 2, 3, 5, 7]\nlist2 = [3, 4, 5, 6] [/INST] def intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    return result</s>"
  },
  {
    "text": "<s>[INST] Implement a Java program for finding the index of an element in a sorted array. [/INST] public int binarySearch(int[] arr, int val){\n    int left = 0;\n    int right = arr.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) /2 ;\n        if (arr[mid] == val) \n            return mid;\n        else if (arr[mid] < val) \n            left = mid + 1;\n        else \n            right = mid - 1;\n    }  \n    return -1;\n}</s>"
  },
  {
    "text": "<s>[INST] Modify the following function to return the number of unique elements in a given array.\n\nint count_unique(int array[], int n) \n{ \n    int count = 0; \n    int i; \n    for (i = 0; i < n; i++) { \n        int j; \n        for (j = 0; j < i; j++) { \n            if (array[i] == array[j]) \n                break; \n        } \n        if (i == j) \n            count++; \n    } \n    return count; \n} [/INST] int count_unique(int array[], int n) \n{ \n    int count = 0; \n    int visited[n]; \n    for (int i = 0; i < n; i++) \n        visited[i] = 0; \n\n    for (int i = 0; i < n; i++) { \n        if (!visited[i]) { \n            visited[i] = 1; \n            count++; \n            for (int j = i + 1; j < n; j++) \n                if (array[i] == array[j]) \n                    visited[j] = 1; \n        } \n    } \n    return count; \n}</s>"
  },
  {
    "text": "<s>[INST] Improve the following code in order to create a balanced binary search tree.\n\nNode insert(int x, Node root) \n{ \n    if (root == NULL) { \n        root = new Node; \n        root->key = x; \n        root->left = root->right = NULL; \n    } \n    else    if (x < root->key) \n        root->left = insert(x, root->left); \n    else \n        root->right = insert(x, root->right); \n    return root; \n} [/INST] Node insert(int x, Node root) \n{ \n    if (root == NULL) { \n        root = new Node; \n        root->key = x; \n        root->left = root->right = NULL; \n    } \n    else    if (x < root->key) \n        root->left = insert(x, root->left); \n    else \n        root->right = insert(x, root->right); \n    root = balance(root); \n    return root; \n} \n\nNode balance(Node root) \n{ \n    int left_height = height(root->left); \n    int right_height = height(root->right); \n    if (abs(left_height - right_height) > 1) { \n        if (right_height > left_height) \n            root = leftRotate(root); \n        else\n            root = rightRotate(root); \n    } \n    return root; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to find the maximum value in the given array.\n\n[2, 4, 5, 7, 8] [/INST] def find_max(arr): \n    max_val = arr[0] \n    for i in range(len(arr)): \n        if max_val < arr[i]: \n            max_val = arr[i] \n    return max_val \n\narr = [2, 4, 5, 7, 8] \nmax_val = find_max(arr) \nprint(max_val)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to eliminate any symbols from a given string. [/INST] const eliminateSymbols = str => str.replace(/[^\\w\\s]/gi, \"\");</s>"
  },
  {
    "text": "<s>[INST] Create a C++ code to find the average of n numbers. [/INST] #include <iostream> \nusing namespace std; \n  \nfloat avg(int n, int arr[]) \n{  \n    float sum, avg; \n  \n    for (int i = 0; i < n; i++) \n    {\n        sum = sum + arr[i]; \n    }\n    avg = sum / n; \n    return avg; \n}</s>"
  },
  {
    "text": "<s>[INST] Design a PHP code snippet to create a simple calculator. [/INST] <?php \n\n// Function to get the addition of two numbers \nfunction addition($num1, $num2){ \n\t$sum = $num1 + $num2; \n\techo \"Result of addition is: \" . $sum; \n} \n\n// Function to get the subtraction of two numbers \nfunction subtraction($num1, $num2){ \n\t$diff = $num1 - $num2; \n\techo \"Result of subtraction is: \" . $diff; \n}\n\n// Function to get the multiplication of two numbers \nfunction multiplication($num1, $num2){ \n\t$prod = $num1 * $num2; \n\techo \"Result of multiplication is: \" . $prod; \n}\n\n// Function to get the division of two numbers \nfunction division($num1, $num2){ \n\t$quot = $num1 / $num2; \n\techo \"Result of division is: \" . $quot; \n} \n\n?></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to join two tables on a specified conditions.\n\nTable 1:\nid  name  age\n1     a     15\n2     b     18\n3     c     20\nTable 2:\nid  class  marks\n1    10      80\n2    10      75\n3    11      70 [/INST] SELECT table1.id, table1.name, table1.age, table2.class, table2.marks FROM table1 INNER JOIN table2 ON table1.id = table2.id WHERE table1.age > 18;</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to check for a palindrome. [/INST] public class Palindrome {  \n    public static boolean isPalindrome(String str){ \n        // Pointers pointing to the beginning \n        // and the end of the string \n        int i = 0, j = str.length() - 1; \n  \n        // While there are characters toc compare \n        while (i < j) { \n  \n            // If there is a mismatch \n            if (str.charAt(i) != str.charAt(j)) \n                return false; \n  \n            // Increment first pointer and \n            // decrement the other \n            i++; \n            j--; \n        } \n  \n        // Given string is a palindrome \n        return true; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Improve the following React component to render a link with the text \"Visit us Here\". [/INST] import React from 'react'; \n\nclass Link extends React.Component { \n\trender() { \n\t\treturn ( \n\t\t\t<div> \n\t\t\t\t<a href=\"#\">Visit us Here</a> \n\t\t\t</div> \n\t\t); \n\t} \n} \nexport default Link;</s>"
  },
  {
    "text": "<s>[INST] Write a shell script to prompt a user for their name and display a personalized message. [/INST] #!/bin/bash\nread -p \"Enter your name: \" name\necho \"Hello $name, welcome to our website!\"</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to determine if a given number is an Armstrong number. [/INST] def isArmstrongNumber(num):\n sum = 0\n temp = num\n while temp > 0:\n  digit = temp % 10\n  sum += digit ** 3\n  temp //= 10\n if num == sum:\n  return True\n else:\n  return False</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the total area of a triangle, given its base and height. [/INST] def findAreaOfTriangle(base, height):\n return 0.5 * base * height</s>"
  },
  {
    "text": "<s>[INST] Edit the following function so that it counts the even numbers in the given array.\n\narr = [1, 2, 3, 4] [/INST] def countEvens(arr):\n count = 0\n for num in arr:\n  if num % 2 == 0:\n   count += 1\n return count</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that prints out a stringified version of a list.\n\n[1, 4, 6, 8] [/INST] def print_str_list(in_list):\n    \"\"\"This function takes a list and returns a stringified version of it\"\"\"\n    return \" \".join(str(x) for x in in_list)</s>"
  },
  {
    "text": "<s>[INST] Create a python class called \"Employee\" that contains 3 instance variables. [/INST] class Employee:\n    \"\"\"A class for representing an employee\"\"\"\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary</s>"
  },
  {
    "text": "<s>[INST] Create a function to check if an item is in a list [/INST] def check_list_contains(item_list, item):\n    \"\"\"This function checks if an item is in a list\"\"\"\n    return item in item_list</s>"
  },
  {
    "text": "<s>[INST] What type of object is \"None\" in Python? [/INST] None is a special constant in Python and is of type NoneType.</s>"
  },
  {
    "text": "<s>[INST] Create some code that iterates through a list and prints out each element.\n\nmy_list = [1, 4, 6, 8] [/INST] for item in my_list:\n    print(item)</s>"
  },
  {
    "text": "<s>[INST] Implement a function that takes two integers and returns the smaller one. [/INST] def min_integer(a, b):\n    \"\"\"This function returns the minimum of two integers\"\"\"\n    return min(a, b)</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to calculate the value of \"e\" to 4 decimal places. [/INST] from math import e\n\ndef calc_e():\n    \"\"\"This function calculates the value of e to 4 decimal places\"\"\"\n    return round(e, 4)</s>"
  },
  {
    "text": "<s>[INST] How can you get the length of a list in Python? [/INST] You can use the built-in function len() to get the length of a list in Python.</s>"
  },
  {
    "text": "<s>[INST] Given a list of integers, create code to remove the duplicates.\n\nmy_list = [1, 4, 4, 6, 6, 8] [/INST] unique_list = list(set(my_list))</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to calculate the factorial of a number. [/INST] def factorial(n):\n    \"\"\"This function returns the factorial of a given integer\"\"\"\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1)</s>"
  },
  {
    "text": "<s>[INST] Describe the details of the try-except statement in Python. [/INST] The try-except statement in Python is used to handle exceptions in code. All the code that has a potential for raising an exception is placed in the \"try\" block and the code that is executed if an exception is raised is placed in the \"except\" block. The \"Except\" block is also used to catch a specific exception and handle it accordingly.</s>"
  },
  {
    "text": "<s>[INST] Given a number, create a function that returns a list that contains its divisors.\n\nnum = 20 [/INST] def get_divisors(num):\n    \"\"\"This function returns a list that contains the divisors of a given number\"\"\"\n    return [x for x in range(1, num + 1) if num % x == 0]</s>"
  },
  {
    "text": "<s>[INST] Create an if-else statement in Python that checks if an integer is even or odd. [/INST] if num % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to find the highest salary of each department. [/INST] SELECT d.name, MAX(e.salary)\nFROM Department d\nINNER JOIN Employee e\nON d.department_id = e.department_id\nGROUP BY d.name;</s>"
  },
  {
    "text": "<s>[INST] Create a function in HTML to display a blinking text on the webpage. [/INST] <script> \nfunction blink() { \n    var text = document.getElementById('blink');\n    text.style.visibility = (text.style.visibility == 'hidden' ? '' : 'hidden');\n    setTimeout(\"blink()\", 500); \n} \nblink();\n</script> \n<span id=\"blink\">Text to blink</span></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to display all products in the database which have not been sold yet. [/INST] SELECT * FROM Products WHERE product_id NOT IN (SELECT product_id FROM Sales);</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to check if a string is a valid email address. [/INST] function validateEmail(email) \n{\n\tvar re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\treturn re.test(String(email).toLowerCase());\n}</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, write an algorithm to find the first repeating element.\n\n[2, 5, 1, 2, 3, 5] [/INST] int findFirstRepeating(int arr[], int n) \n{ \n    unordered_set<int> s; \n  \n    for (int i = 0; i < n; i++) { \n        if (s.find(arr[i]) != s.end()) \n            return arr[i];         \n        s.insert(arr[i]); \n    }  \n  \n    return -1; \n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form to accept the user's name, email, phone number and address. [/INST] <form>\n  <input type=\"text\" name=\"name\" placeholder=\"Name\" required><br>\n  <input type=\"email\" name=\"email\" placeholder=\"Email\" required><br>\n  <input type=\"tel\" name=\"phone\" placeholder=\"Phone Number\" required><br>\n  <textarea name=\"address\" placeholder=\"Address\" required></textarea><br>\n  <input type=\"submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a Python code to calculate the sum of natural numbers up to n. [/INST] def n_sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the second highest salary of an employee. [/INST] SELECT MAX(Salary) \nFROM Employee \nWHERE Salary NOT IN (SELECT MAX(Salary) FROM Employee);</s>"
  },
  {
    "text": "<s>[INST] Determine the output of the given Python code.\n\nx = [1, 2, 3, 4, 5] \ny = x \ny[2] = 6 [/INST] The output of the given Python code is [1, 2, 6, 4, 5].</s>"
  },
  {
    "text": "<s>[INST] Debug the given SQL query.\n\nSELECT Name, COUNT(*) \nFROM Employees\nGROUP BY Name [/INST] SELECT Name, COUNT(*) \nFROM Employees\nGROUP BY Name\nHAVING COUNT(*) > 1;</s>"
  },
  {
    "text": "<s>[INST] Classify the given code as either functional programming or object-oriented programming.\n\ndef double(x):\n  return x * 2 [/INST] The given code is an example of functional programming.</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of the following CSS selector.\n\n.main a [/INST] The purpose of the CSS selector \".main a\" is to select all links (anchor tags, \"a\") that are descendants of the element with class name \"main\".</s>"
  },
  {
    "text": "<s>[INST] Write a MongoDB query that returns all the records that have a “name” field set to “John” [/INST] db.collection. find({\"name\": \"John\"})</s>"
  },
  {
    "text": "<s>[INST] Convert the following code from Swift to Java.\n\nlet age = 25 [/INST] int age = 25;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that takes a single parameter and returns a string.\n\nParameter: num (integer) = 3 [/INST] function getString(num) { \n  return \"The number is \" + num; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a new array in JavaScript containing only even numbers from the given input array.\n\nArray: [3,7,10,6,23] [/INST] let evenArray = [3,7,10,6,23].filter(num => num % 2 == 0); \n//evenArray: [10,6]</s>"
  },
  {
    "text": "<s>[INST] Explain the following CSS rule.\n\np {\n  font-size: 20px;\n  font-weight: bold;\n} [/INST] The CSS rule will assign a font size of 20px and a font weight of bold to all paragraph elements. It will make the text in any \"p\" element display in a bold font with a font size of 20px.</s>"
  },
  {
    "text": "<s>[INST] Create a for loop in Java that iterates over the given array and prints the values.\n\nArray: int[] arr = {1, 2, 3, 4, 5}; [/INST] for (int i = 0; i < arr.length; i++) { \n  System.out.println(arr[i]); \n}</s>"
  },
  {
    "text": "<s>[INST] Convert the following SQL query to MongoDB.\n\nSELECT * FROM Customers WHERE age > 30 [/INST] db.customers.find({\"age\" : {\"$gt\": 30}})</s>"
  },
  {
    "text": "<s>[INST] Edit the given HTML so that it renders as a centered, level-two heading.\n\n<h1>Heading Text</h1> [/INST] <h2 style=\"text-align: center;\">Heading Text</h2></s>"
  },
  {
    "text": "<s>[INST] Rewrite the given JavaScript code in Python.\n\nlet array = [0,1,2,3];\n  const newArray = array.map(item => item + 3); [/INST] array = [0,1,2,3]\nnew_array = list(map(lambda item: item + 3, array))</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to calculate the count of each type of book in a library.\n\nNoinput [/INST] SELECT books.type, COUNT(*) AS book_count\nFROM books\nGROUP BY books.type;</s>"
  },
  {
    "text": "<s>[INST] Create a program in Java to print out the Fibonacci sequence of numbers up to 10. [/INST] public class Fibonacci {\n\n  public static void main(String[] args) {\n    int n1=0,n2=1,n3,i,count=10;\n    System.out.print(n1+\" \"+n2);\n    \n    for(i=2;i<count;++i) {\n      n3=n1+n2;\n      System.out.print(\" \"+n3);\n      n1=n2;\n      n2=n3;\n    }   \n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a function in Python to convert a string containing dates from the format MM/DD/YYYY to DD-MM-YYYY.\n\n\"02/20/2020\" [/INST] def mmddyyyy2ddmmyyyy(date_string):\n    if len(date_string) != 10:\n        raise ValueError('Invalid date format')\n    mm, dd, yyyy = date_string.split('/')\n    new_date_string = '{}-{}-{}'.format(dd, mm, yyyy)\n    return new_date_string</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java to find the larger of two integers. [/INST] public static int max(int x, int y) {\n    if (x > y)\n      return x;\n    else \n      return y;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the maximum subarray sum in an array using dynamic programming. [/INST] def maxSubArraySum(arr): \n    n = len(arr) \n  \n    max_so_far = -float('inf') \n    max_ending_here = 0\n  \n    for i in range(0, n): \n        max_ending_here = max_ending_here + arr[i] \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n  \n        if max_ending_here < 0: \n            max_ending_here = 0   \n    return max_so_far</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to evaluate if a given number is prime. [/INST] def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num//2 + 1): \n        if num % i == 0: \n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Construct a query in PostgreSQL to delete all the rows from a table. [/INST] DELETE FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Construct a query in PostgreSQL to find the names and emails of all users who have \"google.com\" in their emails. [/INST] SELECT name, email\nFROM users\nWHERE email LIKES '%google.com%';</s>"
  },
  {
    "text": "<s>[INST] Create a program in JavaScript to check if two strings are anagrams. [/INST] // Function to check if two strings are anagrams\nconst isAnagram = (string1, string2) => {\n  // Check if string lengths are the same\n  let string1Arr = string1.split('').sort();\n  let string2Arr = string2.split('').sort();\n  if (string1Arr.length !== string2Arr.length) return false;\n  \n  // Compare each character in the strings\n  for (let i = 0; i < string1Arr.length; i++) {\n    if (string1Arr[i] !== string2Arr[i]) return false;\n  }\n  \n  // Return true if all characters match\n  return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Design a class Car with a constructor to initialize the variables _type, _year and _color [/INST] class Car:\n    \n    def __init__(self, type, year, color):\n        self._type = type\n        self._year = year\n        self._color = color</s>"
  },
  {
    "text": "<s>[INST] Write the SQL query to delete all records from the table 'Customer' [/INST] DELETE FROM Customer;</s>"
  },
  {
    "text": "<s>[INST] Parse the following JSON and extract the value of the variable 'price'.\n\n`{\n \"item\": \"Shoes\",\n \"price\": 125\n}` [/INST] import json \n\n# parse the JSON string\ndata = json.loads(input_json)\n\n# extract the value of the price variable\nprice = data['price']</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to print out the Fibonacci sequence up to 20 numbers [/INST] def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \nprint(\"Fibonacci sequence:\") \nfor i in range(20): \n    print(fibonacci(i))</s>"
  },
  {
    "text": "<s>[INST] Correct the following HTML code to remove mistakes and indentation errors\n\n`<html><head><title>My Site</title></head>\n <body>\n   <h1>Welcome!</h1><p>My website\n </body>\n </html>` [/INST] <html>\n  <head>\n    <title>My Site</title>\n  </head>\n  <body>\n    <h1>Welcome!</h1>\n    <p>My website</p>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of the numbers in the array [1, 5, 7, 10] [/INST] # Define the array\narr = [1, 5, 7, 10]\n\n# Calculate the sum\nsum = sum(arr)\n\n# Print the result\nprint(\"The sum of the numbers in the array is \" + str(sum) + \".\")</s>"
  },
  {
    "text": "<s>[INST] Update the following code to use a while loop instead of a for loop\n\n`# Define an array\narr = [1, 2, 3, 4]\n\n# Iterate over the array and print each element\nfor i in arr:\n    print(i)` [/INST] # Define an array\narr = [1, 2, 3, 4]\n\n# Initialize the index\ni = 0\n\n# Iterate over the array and print each element\nwhile i < len(arr):\n    print(arr[i])\n    i += 1</s>"
  },
  {
    "text": "<s>[INST] Write a code to implement Selection Sort in Java [/INST] public class SelectionSort {\n    public static void sort(int[] arr) {\n        int n = arr.length;\n \n        // One by one move boundary of unsorted subarray\n        for (int i = 0; i < n-1; i++)\n        {\n            // Find the minimum element in unsorted array\n            int min_idx = i;\n            for (int j = i+1; j < n; j++)\n                if (arr[j] < arr[min_idx])\n                    min_idx = j;\n \n            // Swap the found minimum element with the first\n            // element\n            int temp = arr[min_idx];\n            arr[min_idx] = arr[i];\n            arr[i] = temp;\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a query to find out the maximum salary earned by an employee [/INST] SELECT MAX(salary)\nFROM Employees;</s>"
  },
  {
    "text": "<s>[INST] Create a class Employee with constructor to initialize the instance variables _name and _age [/INST] class Employee {\n    \n    private String _name;\n    private int _age;\n    \n    public Employee(String name, int age) {\n        this._name = name;\n        this._age = age;\n    }\n    \n    public String getName() {\n        return _name;\n    }\n    \n    public int getAge() {\n        return _age;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Design a function to remove duplicates from an array [/INST] def remove_duplicates(arr):\n    # Stores the unique elements\n    unique = []\n\n    # Iterate through the array\n    for elem in arr:\n        # If the element is not already in the unique list\n        if elem not in unique:\n            # Add it to the unique list\n            unique.append(elem)\n\n    # Return the array without duplicates\n    return unique</s>"
  },
  {
    "text": "<s>[INST] Write a C++ code to find the greatest common divisor of two integers [/INST] #include<iostream>\n\nusing namespace std;\n\nint gcd(int first, int second) {\n    // Base case\n    if (second == 0)\n        return first;\n    \n    return gcd(second, first % second);\n}\n\nint main() {\n    // Define two integers\n    int first = 10;\n    int second = 20;\n    \n    cout << \"The greatest common divisor of \" << first << \" and \" << second << \" is \" << gcd(first, second) << endl;\n\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, write a function to find the largest value in the list.\n\nlst = [1, 5, 9, 12, 8] [/INST] def get_largest_value(lst):\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value\n\nprint(get_largest_value(lst))</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to sort a list of numbers in ascending order.\n\nlst = [2, 5, 1, 7, 4] [/INST] def sort_list_ascending(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n# Driver code to test above \nlst = [2, 5, 1, 7, 4] \nprint(sort_list_ascending(lst))</s>"
  },
  {
    "text": "<s>[INST] Given an array, write a program that checks if any two numbers sum to 0.\n\narr = [-3, -2, 1, 2, 3] [/INST] def check_if_sum_zero(arr): \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] + arr[j] == 0): \n                return True\n    return False\n\nprint(check_if_sum_zero([-3, -2, 1, 2, 3]))</s>"
  },
  {
    "text": "<s>[INST] Create a program to generate an XOR linked list. [/INST] class Node: \n    def __init__(self, data): \n        self.data = data \n        self.npx = None\n  \nclass XORLinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def add(self, item): \n        new_node = Node(item) \n        new_node.npx = self.head \n        if self.head is not None: \n            self.head.npx = new_node.npx ^ self.head.npx \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data), \n            prev = temp \n            temp = self.XOR(temp.npx, prev) \n  \n    def XOR(self, a, b): \n        return (a or b) and (not a or not b) \n  \na = XORLinkedList() \na.add(2) \na.add(3) \na.add(4) \na.add(5) \na.printList()</s>"
  },
  {
    "text": "<s>[INST] Given a list of strings, write a program to sort the strings in alphabetical order.\n\nlst = [\"apple\", \"orange\", \"grapes\"] [/INST] def sort_in_alphabetical_order(lst): \n    lst.sort()\n    return lst\n\nprint(sort_in_alphabetical_order([\"apple\", \"orange\", \"grapes\"]))</s>"
  },
  {
    "text": "<s>[INST] Create a function to generate the nth term in the Fibonacci sequence.\n\nn = 3 [/INST] def get_fib_term(n): \n    if n <= 1: \n        return n \n    else: \n        return get_fib_term(n-1) + get_fib_term(n-2)\n  \nprint(get_fib_term(3))</s>"
  },
  {
    "text": "<s>[INST] Calculate the mean of a list of numbers.\n\nlst = [1, 2, 3, 4, 5] [/INST] def calculate_mean(lst):\n    return sum(lst) / len(lst)\n\nprint(calculate_mean([1, 2, 3, 4, 5]))</s>"
  },
  {
    "text": "<s>[INST] Sum all the prices in the list of dictionaries and output the result as an integer.\n\nlist_of_dictionaries = [{\"price\": 5}, {\"price\": 7}, {\"price\": 9}] [/INST] 21</s>"
  },
  {
    "text": "<s>[INST] Edit the original code snippet so that it prints in the correct syntax for a Python 3 script.\n\n#!/usr/bin/python\nprint \"Hello, World!\" [/INST] #!/usr/bin/python\nprint(\"Hello, World!\")</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript that takes an integer n and returns the nth Fibonacci number. [/INST] function Fibonacci(n) { \n  if (n <= 1) return n; \n  return Fibonacci(n-1) + Fibonacci(n-2); \n}</s>"
  },
  {
    "text": "<s>[INST] Given the following object, write a function in JavaScript to count the occurrences of each character in the object's values.\n\nobj = {\n \"name\": \"John Doe\"\n} [/INST] function countOccurences(obj) {\n    let result = {};\n    for (let value of Object.values(obj)) {\n        for (let char of value) {\n            result[char] = result[char] + 1 || 1;\n        }\n    }\n    return result; \n}</s>"
  },
  {
    "text": "<s>[INST] Using the given list, create a function in Python that classifies each number as odd or even.\n\nlst = [1, 2, 6, 8, 4] [/INST] def classifyList(lst):\n    result = []\n    for num in lst: \n        if num % 2 == 0: \n            result.append('even')\n        else:\n            result.append('odd')\n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a Java program that takes two strings as inputs and checks if one string is a rotation of the other. [/INST] import java.util.Arrays;\n \nclass GFG {\n \n    // Function to check if two strings are \n    // rotations of each other or not\n    static boolean areRotations(String str1, String str2)\n    {\n        // There lengths must be same and str2 should \n        // be a substring of str1 concatenated with \n        // str1.\n        return (str1.length() == str2.length())\n            && ((str1 + str1).indexOf(str2) != -1);\n    }\n \n    // Driver program \n    public static void main(String[] args) \n    {\n        String str1 = \"ABACD\";\n        String str2 = \"CDABA\";\n \n        if (areRotations(str1, str2))\n            System.out.println(\"Strings are rotations of each other\");\n        else\n            System.out.println(\"Strings are not rotations of each other\");\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.\n\narr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n] [/INST] def longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java that takes a string consisting of brackets and output true if the brackets are properly nested, else output false. [/INST] public static boolean isBalanced(String str) \n{ \n    if(str.length() == 0) \n        return true; \n      \n    Stack<Character> stack  = new Stack<Character>(); \n  \n    for(int i = 0; i < str.length(); i++) \n    { \n        char current = str.charAt(i); \n          \n        if(current == '{' || current == '(' || current == '[') \n        { \n        stack.push(current); \n        } \n  \n        if(current == '}' || current == ')' || current == ']') \n        { \n            if(stack.isEmpty()) \n                return false; \n  \n            char last = stack.peek(); \n            if(current == '}' && last == '{' || current == ')' && last == '(' || current == ']' && last == '[') \n                stack.pop(); \n            else \n                return false; \n        }\n    } \n \n    return stack.isEmpty(); \n}</s>"
  },
  {
    "text": "<s>[INST] Given a string and a set of delimiters, write a function in JavaScript to split the string.\n\nstring = \"Hello, world!\"\ndelimiters = [\" \", \",\", \"-\", \"!\"] [/INST] function splitStringWithDelimiters (string, delimiters) { \n  let result = []; \n  let s = string; \n  while (s.length > 0) { \n    let char = s[0]; \n    if (delimiters.includes(char)) { \n      s = s.substr(1); \n    } else { \n      let index = 0; \n      for (const delimiter of delimiters) { \n        if (s.indexOf(delimiter) > 0 && s.indexOf(delimiter) < index) { \n          index = s.indexOf(delimiter); \n        } \n      } \n      if (index === 0) { \n        index = s.length; \n      } \n      result.push(s.substr(0, index)); \n      s = s.substr(index); \n    } \n  } \n  return result; \n}</s>"
  },
  {
    "text": "<s>[INST] Create an array in Java with 10 floating-point values and output the average of these values. [/INST] // Create an array \nfloat arr[] = {1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1};\n\n// Calculate average \nfloat sum = 0;\nfor (int i = 0; i < 10; i++) {\n    sum += arr[i];\n}\n\nfloat average = sum / 10;\nSystem.out.println(\"Average of the array values: \" + average);</s>"
  },
  {
    "text": "<s>[INST] Find the power of a number using an iterative approach in Java. [/INST] public static int power(int base, int exp) \n{ \n    int result = 1; \n    while (exp != 0) \n    { \n        result *= base; \n        --exp; \n    } \n    return result; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a string and a set of characters as inputs and removes all characters in the string that are in the set.\n\nstring = \"Hello, world!\"\ncharset = [\"o\", \"!\"] [/INST] def removeChars(string, charset):\n\tresult = \"\"\n\tfor c in string:\n\t\tif c not in charset:\n\t\t\tresult += c\n\treturn result</s>"
  },
  {
    "text": "<s>[INST] Create a program to count the total characters in a string. [/INST] def count_string_characters(string):\n    return len(string)</s>"
  },
  {
    "text": "<s>[INST] Make a code to determine whether a given number is prime or not. [/INST] def is_prime(x):\n    for i in range(2,int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Create a code that sorts element in an array. [/INST] def sort_elements(arr):\n    return sorted(arr)</s>"
  },
  {
    "text": "<s>[INST] Develop a function to swap the position of two elements in an array. [/INST] def swap_elements(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Create function to return the cube of a number. [/INST] def cube_number(x):\n    return x**3</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a number and returns the sum of all its divisors. [/INST] def get_divisor_sum(n):\n    divisor_sum = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select all entries from the \"Users\" table. [/INST] SELECT * FROM Users;</s>"
  },
  {
    "text": "<s>[INST] Create a loop to print hello world 5 times. [/INST] for (int i = 0; i < 5; i++){ \n  System.out.println(\"Hello World!\"); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with 3 sections, using div tags. [/INST] <div>\n  <div id=\"section1\"> Section 1... </div> \n  <div id=\"section2\"> Section 2... </div> \n  <div id=\"section3\"> Section 3... </div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Create a function to check whether a number entered is prime or not. [/INST] def is_prime(number):\n   # If given number is greater than 1\n   if number > 1:\n       # Iterate from 2 to n / 2\n       for i in range(2, number//2):\n           # If num is divisible by any number between \n           # 2 and n / 2, it is not prime\n           if (number % i) == 0:\n               return False\n       else:\n           return True\n# If the number is less than or equal to 1\n   else:\n       return False</s>"
  },
  {
    "text": "<s>[INST] Sort a list of 5 numbers in descending order.\n\n[123, 45, 287, 398, 135] [/INST] [398, 287, 135, 123, 45]</s>"
  },
  {
    "text": "<s>[INST] Using an object-oriented programming language, create a class that has two methods - one to calculate the area of a circle and another to calculate the circumference. [/INST] class Circle():\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self): \n        return self.radius ** 2 * 3.14 \n    def circumference(self): \n        return 2 * self.radius * 3.14</s>"
  },
  {
    "text": "<s>[INST] Concisely describe how a Linked List works. [/INST] A linked list is a linear data structure in which each node is comprised of a data element as well as a pointer to the next node in the list. This allows it to form a chain, with each node pointing to the next node in the list and the last node pointing to null.</s>"
  },
  {
    "text": "<s>[INST] Find the index of the number 23 in the given array.\n\n[78, 82, 6, 23, 77, 57, 88] [/INST] 3</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to display all the employee names in the 'students' table. [/INST] SELECT name FROM students;</s>"
  },
  {
    "text": "<s>[INST] Convert the given string to uppercase.\n\nHello World [/INST] HELLO WORLD</s>"
  },
  {
    "text": "<s>[INST] Create a program in Python that calculates the average of numbers in a list.\n\n[9, 5, 10, 12] [/INST] def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([9, 5, 10, 12]))   # Output: 9.5</s>"
  },
  {
    "text": "<s>[INST] Use JavaScript to filter an array of numbers such that only even numbers are returned.\n\n[1, 4, 6, 7, 8, 3, 10] [/INST] const arr = [1, 4, 6, 7, 8, 3, 10];\n\nconst evenArr = arr.filter(num => num % 2 == 0);\n\nconsole.log(evenArr); // Output: [4, 6, 8, 10]</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program that prints out the prime numbers up to 100. [/INST] #include <iostream> \nusing namespace std; \n  \nvoid printPrimeNumber(int n) \n{ \n    int flag; \n  \n    for (int i = 2; i <=n; i++) { \n        flag = 0; \n        for (int j = 2; j < i; j++) { \n            if (i % j == 0) { \n                flag = 1; \n                break; \n            } \n        } \n        if (flag == 0) \n            cout << i << \" \"; \n    } \n} \n  \nint main() \n{ \n    int n = 100; \n    printPrimeNumber(n); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that takes in two parameters and returns their sum. [/INST] function sum(num1, num2) {\n return num1 + num2;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in Ruby that prints a message when instantiated. [/INST] class MyClass\n  def initialize\n    puts \"Welcome to MyClass!\"\n  end\nend</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that selects the maximum price from all products.\n\nTable Name: Products\nColumns: Name (varchar), Price (decimal) [/INST] SELECT MAX(Price) FROM Products;</s>"
  },
  {
    "text": "<s>[INST] Create a binary search tree in JavaScript. [/INST] class Node { \n  constructor(data) \n  { \n    this.data = data; \n    this.left = null; \n    this.right = null; \n  } \n} \n  \nclass BinarySearchTree { \n  constructor() \n  { \n    this.root = null; \n  } \n\n  insert(data) \n  { \n    let newNode = new Node(data); \n    if(this.root === null) \n    {\n      this.root = newNode; \n    }\n\n    else\n    { \n      this.insertNode(this.root, newNode);\n    } \n  }\n  \n  insertNode(node, newNode) \n  { \n    if(newNode.data < node.data) \n    { \n      if(node.left === null) \n      { \n        node.left = newNode; \n      } else { \n        this.insertNode(node.left, newNode); \n      } \n    } \n    else { \n      if(node.right === null) \n      { \n        node.right = newNode; \n      } else { \n        this.insertNode(node.right,newNode); \n      } \n    } \n  } \n}</s>"
  },
  {
    "text": "<s>[INST] Suppose there is an array of numbers. Write a Java program to sort the array in ascending order.\n\n[3,8,5,1,2,6,4] [/INST] public class SortAscending { \n    public static void main(String[] args) \n    {\n        int[] numbers = {3,8,5,1,2,6,4};\n        int temp = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = i+1; j < numbers.length; j++) {\n                if (numbers[i] > numbers[j]) {\n                    //swap elements\n                    temp = numbers[i]; // assign value of i to temp\n                    numbers[i] = numbers[j];  // assign value of j to i\n                    numbers[j] = temp;  // assign value of temp to j\n                }\n            }\n        }\n        System.out.println(\"Array elements in ascending order:\");\n        for (int i = 0; i < numbers.length; i++) { \n            System.out.print(numbers[i]+\" \"); \n        } \n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Modify the above program to sort the array in descending order.\n\n[3,8,5,1,2,6,4] [/INST] public class SortDescending { \n    public static void main(String[] args) \n    {\n        int[] numbers = {3,8,5,1,2,6,4};\n        int temp = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = i+1; j < numbers.length; j++) {\n                if (numbers[i] < numbers[j]) {\n                    //swap elements\n                    temp = numbers[i]; // assign value of i to temp\n                    numbers[i] = numbers[j];  // assign value of j to i\n                    numbers[j] = temp;  // assign value of temp to j\n                }\n            }\n        }\n        System.out.println(\"Array elements in descending order:\");\n        for (int i = 0; i < numbers.length; i++) { \n            System.out.print(numbers[i]+\" \"); \n        } \n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form with two input boxes and a submit button. [/INST] <form>\n   <label>Name: </label>\n   <input type=\"text\" name=\"name\"><br>\n   <label>Age: </label>\n   <input type=\"number\" name=\"age\"><br>\n   <input type=\"submit\" value=\"Submit\">\n </form></s>"
  },
  {
    "text": "<s>[INST] Edit the above PHP function so that it also checks if a given number is prime. [/INST] function isPrime($n) {\n  if ($n == 1) {\n    return false;\n  } \n  elseif ($n == 2) {\n    return true;\n  } \n  else {\n    for ($i = 2; $i <= sqrt($n); $i++) {\n      if ($n % $i == 0) {\n        return false;\n        break;\n      }\n    }\n    return true;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python function to parse a string and remove all special characters. [/INST] import re\n\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]','', s)</s>"
  },
  {
    "text": "<s>[INST] Modify the function to also remove all whitespace from the string. [/INST] import re\n\ndef remove_special_chars_and_whitespace(s):\n    return re.sub(r'\\s','', re.sub(r'[^\\w\\s]','', s))</s>"
  },
  {
    "text": "<s>[INST] Create an object in JavaScript that performs a task given a condition. [/INST] const myObject = {\n  doTask: (condition) => {\n    if(condition) {\n      // code to perform the task\n    } \n  }\n}</s>"
  },
  {
    "text": "<s>[INST] For the following list, print out the second element.\n\nlist = [\"apple\", \"banana\", \"cherry\"] [/INST] second_element = list[1]\nprint(second_element) # prints banana</s>"
  },
  {
    "text": "<s>[INST] What is the next output when this code is executed?\n\ni = 0 \nwhile (i < 5): \n    print(i, sep = \", \")\n    i += 1 [/INST] 0, 1, 2, 3, 4</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the square of the first n numbers. [/INST] def square_of_first_n_number(n):\n    \"\"\"Find the square of the first n numbers\"\"\"\n    \n    # Initialize an empty list\n    squares = []\n\n    # Iterate to the first n numbers\n    for i in range(n):\n        # Compute the square and append to the list\n        squares.append(i * i)\n\n    return squares</s>"
  },
  {
    "text": "<s>[INST] Formulate an SQL query to make this table:\n\nTable: books\n\nbook_id | book_title | book_edition\n------------------------ [/INST] CREATE TABLE books (\n    book_id INTEGER PRIMARY KEY,\n    book_title VARCHAR(50),\n    book_edition VARCHAR(50)\n);</s>"
  },
  {
    "text": "<s>[INST] Reverse the following String.\n\nString = \"Hello World!\" [/INST] rev_string = String[::-1] \nprint(rev_string) # prints \"!dlroW olleH\"</s>"
  },
  {
    "text": "<s>[INST] Given a list, write code to convert the list into a dictionary.\n\nlist1 = [\"John\", \"Doe\", 23] [/INST] dict1 = dict(zip(['name', 'surname', 'age'], list1))\nprint(dict1) # prints {'name': 'John', 'surname': 'Doe', 'age': 23}</s>"
  },
  {
    "text": "<s>[INST] Given a two-dimensional array, write a code to sum the values in each row.\n\nA = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]] [/INST] row_sum = []\nfor row in A:\n    row_sum.append(sum(row))\n    \nprint(row_sum) # prints [6, 15, 24]</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop that will loop over the string \"Hello World\". [/INST] for letter in \"Hello World\":\n    print(letter)</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the missing number in the given array.\n\nA = [1, 2, 3, 4, 6, 7, 8] [/INST] # Create a set from the array\nA_set = set(A)\n\n# Determine the max value\nmax_val = max(A_set)\n\n# Find the missing number\nmissing_number = max_val - sum(A_set)\n\nprint(missing_number) # prints 5</s>"
  },
  {
    "text": "<s>[INST] What would be the resulting string after executing this code?\n\na = \"Hello\"\nb = \"World\"\n\nc = a + \" \" + b\n\nc = f\"{c}!\" [/INST] c = \"Hello World!\"</s>"
  },
  {
    "text": "<s>[INST] Write a code to print out all the prime numbers between 2 and 10. [/INST] # initialize an empty list to store prime numbers\nprime_numbers = []\n\n# Iterate over the range from 2 to 10\nfor num in range(2, 11):\n    cnt = 0\n    # check if the number is divisible by any natural number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            cnt += 1\n    # if the number is not divisible by any of the numbers then add to the list\n    if cnt == 0:\n        prime_numbers.append(num)\n\nprint(prime_numbers) # prints [2, 3, 5, 7]</s>"
  },
  {
    "text": "<s>[INST] Write a function to remove all duplicate elements in an array.\n\ndata = [1, 2, 3, 2, 4, 5] [/INST] def remove_duplicates(data):\n    \"\"\"Remove all duplicate elements in an array\"\"\"\n    \n    # Initialize an empty list\n    unique_data = []\n\n    # Iterate over the data\n    for i in data:\n        # Check if element is not already in list\n        if i not in unique_data:\n            # If not, then add to list\n            unique_data.append(i)\n    \n    return unique_data\n\nprint(remove_duplicates(data)) # prints [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] What will happen when the following code is executed?\n\na_list = [1, 2, 3, 4, 5]\n\nfor i in a_list:\n    a_list.append(i + 6)\n\nprint(a_list) [/INST] [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12]</s>"
  },
  {
    "text": "<s>[INST] What data type should you use to store a list like [4, 7, 2] in a Python variable? [/INST] The data type you should use to store a list like [4, 7, 2] in a Python variable is a list. The list type is specified using square brackets when declaring the variable. For example: my_list = [4, 7, 2].</s>"
  },
  {
    "text": "<s>[INST] Rearrange the following list of numbers in an ascending order.\n\n[9, 5, 8, 2, 4] [/INST] [2, 4, 5, 8, 9]</s>"
  },
  {
    "text": "<s>[INST] Improve the following code to handle an input which is an empty list.\n\ndef check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr) [/INST] def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    elif not arr:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr)</s>"
  },
  {
    "text": "<s>[INST] How much would you substract 5 to 101? [/INST] 96</s>"
  },
  {
    "text": "<s>[INST] Generate a list of odd numbers from 80 to 100. [/INST] [81, 83, 85, 87, 89, 91, 93, 95, 97, 99]</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to handle an input which is a negative number.\n\ndef power_func(number):\n    if number >= 0:\n        return number**2 [/INST] def power_func(number):\n    if number < 0:\n        return \"Invalid input!\"\n    else:\n        return number**2</s>"
  },
  {
    "text": "<s>[INST] Edit the following code snippet to add an error handling that allows the function to return an appropriate message when an invalid input is received.\n\ndef factorial(n):\n  \tif n == 0:\n  \t   return 1\n\telse:\n  \t   return n * factorial(n-1) [/INST] def factorial(n):\n  if n < 0:\n    return \"Invalid input!\"\n  elif n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)</s>"
  },
  {
    "text": "<s>[INST] Given the following list, extract the item at index 2.\n\nmy_list = [\"apple\", \"banana\", \"mango\", \"grapes\"] [/INST] mango</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to find out the common items from two given arrays.\n\narr1 = [1, 2, 3, 5, 7 ]\narr2 = [2, 3, 5, 6, 7] [/INST] common_items = []\n\nfor item in arr1:\n  if item in arr2:\n    common_items.append(item)\n\nprint(common_items)  # Output: [2, 3, 5, 7]</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to check whether a string has all unique characters. [/INST] def all_unique(string): \n  # loops through each character in string \n  for char in string: \n  \n    # if character appears more than once, \n    # return False \n    if string.count(char) > 1: \n      return False \n      \n  # return True if no characters appear more than once\n  return True</s>"
  },
  {
    "text": "<s>[INST] Given the following dictionary, change the value of the key \"a\" to \"apples\".\n\nmy_dict = {\"a\": \"bananas\", \"b\": \"pears\"} [/INST] my_dict = {\"a\": \"apples\", \"b\": \"pears\"}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code so it can take a list as input instead of an integer.\n\ndef list_sum(num):\n    total = 0\n    for x in range(num):\n        total += x\n    return total [/INST] def list_sum(input_list):\n    total = 0\n    for item in input_list:\n        total += item\n    return total</s>"
  },
  {
    "text": "<s>[INST] Design a program to compare two sorted lists and returning list with the common elements.\n\nlist_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27] [/INST] def compare_list(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list</s>"
  },
  {
    "text": "<s>[INST] Design a program to flatten a given list.\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] def flatten_list(lst):\n    res = []\n    for l in lst:\n        for i in l:\n            res.append(i)\n    return res</s>"
  },
  {
    "text": "<s>[INST] Write a script to determine whether an element is present in a given array.\n\nGiven array: [1,2,5,7]\nNumber to find: 5 [/INST] def element_in_array(lst, n): \n    for i in range(len(lst)): \n        if n == lst[i]: \n            return True \n    return False</s>"
  },
  {
    "text": "<s>[INST] Write a script to generate the Fibonacci sequence up to a certain number.\n\nNumber of elements to generate: 10 [/INST] def fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        lst = [1, 1]\n        while len(lst) < n:\n            lst.append(lst[-1] + lst[-2])\n        return lst</s>"
  },
  {
    "text": "<s>[INST] Design a program to find the intersection of two given arrays.\n\nlist_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27] [/INST] def intersection(list_one, list_two):\n    lst = []\n    for i in list_one:\n        if i in list_two:\n            lst.append(i)\n    return lst</s>"
  },
  {
    "text": "<s>[INST] Write a script to delete an element from an array given its index.\n\nGiven array: [1, 2, 3, 4]\nIndex of element to delete: 1 [/INST] def delete_element(lst, index):\n    del lst[index]\n    return lst</s>"
  },
  {
    "text": "<s>[INST] Design a program to find the nth Fibonacci number.\n\nn: 10 [/INST] def nth_fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        n1, n2 = 1, 1\n        for i in range(2, n):\n            n1, n2 = n2, n1 + n2\n        return n2</s>"
  },
  {
    "text": "<s>[INST] Design a program to find the occurrence of a given character in a given string.\n\nGiven string: \"Hello World!\"\nCharacter to find: o [/INST] def occurance_count(str, char):\n    count = 0\n    for c in str:\n        if c == char:\n            count += 1\n    \n    return count</s>"
  },
  {
    "text": "<s>[INST] Generate a function to multiply two integers. [/INST] def multiply_ints(x, y): \n    return x * y</s>"
  },
  {
    "text": "<s>[INST] Create a loop to iterate over characters in a given string.\n\nSample string s = \"Hello World\" [/INST] for char in s:\n    print(char)</s>"
  },
  {
    "text": "<s>[INST] Create an if-else statement to classify a given number into an even or an odd. [/INST] if (num % 2 == 0):\n    print(\"Even\")\nelse:\n    print(\"Odd\")</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression to validate a given string of IP addresses. [/INST] ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$</s>"
  },
  {
    "text": "<s>[INST] Create a project in random forest to learn the target variable given a set of predictor variables.\n\npredictor_vars = [\"age\", \"occupation\"]\ntarget_var = \"income\" [/INST] from sklearn.ensemble import RandomForestRegressor\n\n# Initialize the model\nmodel = RandomForestRegressor()\n\n# Train the model using the predictor variables\nmodel.fit(predictor_vars, target_var)</s>"
  },
  {
    "text": "<s>[INST] Use the back-propagation algorithm to learn the weights of a given neural network. [/INST] # Initialize weights with random values & weights\nweights = np.random.uniform(-1,1, (num_nodes, num_inputs))\nbias = np.random.uniform(-1,1, num_nodes)\n\n#Forward pass\nwhile True:\n    \n    # Compute a_L and estimated output y_hat\n    a_L, y_hat = compute_forward_pass(x, weights, bias)\n    \n    # Compute the loss\n    loss = compute_loss(y_hat, y)\n    \n    # Compute delta and derivatives\n    delta = compute_delta(a_L, y)\n    weights_derivatives, bias_derivatives = compute_derivatives(x, a_L, delta)\n\n    # Update the weights\n    weights -= learning_rate * weights_derivatives\n    bias -= learning_rate * bias_derivatives</s>"
  },
  {
    "text": "<s>[INST] Create a loop to traverse a given binary tree. [/INST] def traverse_tree(root):\n\n    # Initialize the stack\n    stack = [root]\n\n    # traversal loop\n    while stack:\n        node = stack.pop()\n\n        # Do something with the node\n        ...\n\n        # Push the left and right nodes to the stack\n        if node.right:\n            stack.append(node.right)\n        if node.left:\n            stack.append(node.left)</s>"
  },
  {
    "text": "<s>[INST] Write an API to return the average transaction amount of a customer. [/INST] @app.route('/get_average_transaction_amount', methods=['GET'])\ndef get_average_transaction_amount():\n    customer_id = request.args.get('customer_id')\n    query = \"SELECT AVG(transaction_amount) FROM transactions WHERE customer_id = %s\"\n    result = db.query(query, customer_id)\n    return jsonify(result)</s>"
  },
  {
    "text": "<s>[INST] Edit a python function to generate the fibonacci sequence.\n\ndef fibonacci(n):\n    a = 1\n    b = 0\n    for i in range(n):\n        print(a)\n        a, b = b, a+b [/INST] def fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a)\n        a, b = b, a+b</s>"
  },
  {
    "text": "<s>[INST] Use the Gaussian algorithm to learn the optimal parameters of a 2D linear regression model.\n\nTraining dataset: {(x1,y1), (x2,y2), (x3,y3)} [/INST] def gaussian(x, y):\n    n = len(x)\n    l = np.linalg.inv(np.dot(x.T, x))\n    k = np.dot(x.T, y)\n    return np.dot(l, k).T</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page to display a table of students\n\nData of students: First name, LastName and Age [/INST] <html>\n  <head> <title>My Student Table </title> </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Age</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for firstName, lastName, age in studentsList %}\n          <tr>\n            <td>{{ firstName }}</td>\n            <td>{{ lastName }}</td>\n            <td>{{ age }}</td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Add the code for a sleep() function to the following script.\n\n#This script will be used to write a status update in Slack.\nimport os\n\ndef update_status(message):\n    os.system('curl -X POST --data '{ \"text\": \"' + message + '\"}'' .....) [/INST] #This script will be used to write a status update in Slack.\nimport os\nimport time\n\ndef update_status(message):\n    os.system('curl -X POST --data '{ \"text\": \"' + message + '\"}'' .....)\n    time.sleep(1)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to check whether a given number is odd or even.\n\nnum = 21 [/INST] function isEvenNumber(num) {\n  return num % 2 === 0;\n}\n\nlet result = isEvenNumber(21);\nconsole.log(result); //false</s>"
  },
  {
    "text": "<s>[INST] Explain what a for loop does in Python. [/INST] A for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. It executes a set of statements specified in the for loop for each item of the sequence. It makes it easier to write and execute code multiple times without having to write the same code multiple times.</s>"
  },
  {
    "text": "<s>[INST] Create an HTML table with 3 columns containing the given data.\n\nData:\nName | Age | Hobby\nAlice | 20 | Reading\nBob | 25 | Outdoor activities [/INST] <table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Hobby</th>\n  </tr>\n  <tr>\n    <td>Alice</td>\n    <td>20</td>\n    <td>Reading</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>25</td>\n    <td>Outdoor activities</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Write a Java program to print the sum of all integers from 1 to given integer.\n\ninteger = 5 [/INST] public class SumIntegers {\n \n    public static void main(String[] args) {\n        int n = 5;\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of integers from 1 to \"+n+\": \"+sum);\n    }\n \n}\n// Output: Sum of integers from 1 to 5: 15</s>"
  },
  {
    "text": "<s>[INST] Suggest a better algorithm to find the minimum element in a given array. [/INST] The better algorithm would be to use a divide and conquer approach. This approach involves splitting the array into two halves, finding the minimum element in each half and then comparing the two elements to determine the overall minimum. This is a faster algorithm than the linear search approach in which we traverse the array from start to end and compare each element with the current minimum.</s>"
  },
  {
    "text": "<s>[INST] Explain what API stands for and what it does. [/INST] API stands for Application Programming Interface, which is a set of routines, protocols, and tools used to build software applications. It defines how two applications can interact with each other and allows for data to be exchanged between them. APIs provide developers with predefined sets of code which can be used to perform a variety of tasks and help developers build applications quickly and easily.</s>"
  },
  {
    "text": "<s>[INST] Complete the following code to shuffle an array of elements.\n\n#Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr): [/INST] #Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr):  \n    for i in range(len(arr)-1, 0, -1): \n        j = random.randint(0, i+1)\n        arr[i], arr[j] = arr[j], arr[i] \n    return arr</s>"
  },
  {
    "text": "<s>[INST] Suggest an efficient data structure to store a list of words. [/INST] A Trie (Prefix Tree) data structure is an efficient data structure for storing a list of words. It allows efficient insertion, deletion and search operations. It stores the words in a hierarchical structure by prefixing the words. This makes search operations very efficient since it involves only a single traversal of the Trie structure.</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to print out the list of even numbers from 0 to given limit.\n\nlimit = 10 [/INST] # declare list of numbers\nnumbers = [x for x in range(0, limit+1)]\n\n# declare empty list of even numbers\neven_numbers = []\n\n# loop through list of numbers\nfor num in numbers:\n    # if number is even, append to even_numbers list\n    if num % 2 == 0:\n        even_numbers.append(num)\n\n# print even numbers\nprint(even_numbers) # Output: [0, 2, 4, 6, 8, 10]</s>"
  },
  {
    "text": "<s>[INST] Write a PHP program to find the largest number from an array.\n\narray = [10, 25, 2, 39] [/INST] <?php\n$arr = array(10, 25, 2, 39);\n$max = $arr[0];\n \nforeach ($arr as $value) {\n   if ($value > $max) {\n      $max = $value;\n   }\n}\n \necho $max; // Output: 39\n?></s>"
  },
  {
    "text": "<s>[INST] Write a for-loop to print out the values from a list named 'mylist'\n\nmylist = [1,2,3,4,5,6,7] [/INST] for i in mylist:\nprint(i)</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python called 'Car' and add instance variables for the car's make, model and year. [/INST] class Car:\n    \n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year</s>"
  },
  {
    "text": "<s>[INST] Use the 'requests' library to retrieve the HTML content of a website.\n\nurl = \"https://www.example.com\" [/INST] import requests\n\nhtml = requests.get(url).text</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression to extract all email addresses from a string.\n\nstring = \"My email address is john@doe.com and your email address is jane@doe.com\" [/INST] import re\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", string)\nprint(emails)</s>"
  },
  {
    "text": "<s>[INST] Initialize an empty list in Python and then add three items to it. [/INST] my_list = []\nmy_list.append(\"item1\")\nmy_list.append(\"item2\")\nmy_list.append(\"item3\")</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of all the numbers in a list named 'mylist'.\n\nmylist = [1,2,3,4,5] [/INST] total_sum = 0\nfor num in mylist:\n total_sum += num\nprint(total_sum)</s>"
  },
  {
    "text": "<s>[INST] Convert a string to all lowercase using the built-in string method.\n\nstring = \"This Is A String\" [/INST] lowercase_string = string.lower()\nprint(lowercase_string)</s>"
  },
  {
    "text": "<s>[INST] Group a list of dictionaries by a shared key.\n\nmylist = [{'name': 'john', 'age': 20}, {'name': 'jane', 'age': 19}, {'name': 'bob', 'age': 22}] [/INST] from collections import defaultdict\n\ngrouped_dicts = defaultdict(list)\n\nfor x in mylist:\n grouped_dicts[x['name']].append(x)</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary from two lists with the same length.\n\nmylist1 = [\"a\", \"b\", \"c\", \"d\"]\nmylist2 = [\"1\", \"2\", \"3\", \"4\"] [/INST] mydict = dict(zip(mylist1, mylist2))\nprint(mydict)</s>"
  },
  {
    "text": "<s>[INST] Perform a linear search in a list named 'mylist' and return the index of the first occurrence of a target value.\n\nmylist = [1, 2, 3, 4, 5, 6, 7]\ntarget = 4 [/INST] def linear_search(mylist, target):\n for i in range(len(mylist)):\n if mylist[i] == target:\n return i\n return -1</s>"
  },
  {
    "text": "<s>[INST] Generate a random number between 1 and 10, inclusive. [/INST] import random\n\nrandom_num = random.randint(1, 10)\nprint(random_num)</s>"
  },
  {
    "text": "<s>[INST] Use the built-in sort method to sort a list of strings by their length.\n\nmylist = ['this', 'is', 'a', 'long', 'list', 'of', 'strings'] [/INST] mylist.sort(key=len)\nprint(mylist)</s>"
  },
  {
    "text": "<s>[INST] Use the 'subprocess' library to execute a shell command and store its output.\n\ncommand = \"echo hello world\" [/INST] import subprocess\n\nresult = subprocess.run(command, shell=True, capture_output=True)\nprint(result.stdout.decode('utf-8'))</s>"
  },
  {
    "text": "<s>[INST] Create a method to print all the prime numbers up to n. [/INST] def print_prime_numbers(n):\n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n                break\n        if is_prime: \n            primes.append(num) \n    print(primes)</s>"
  },
  {
    "text": "<s>[INST] Implement a reverse method to reverse the content of an array.\n\n[1, 2, 3, 4, 5] [/INST] def reverse(arr): \n    n =len(arr) \n    for i in range(n // 2): \n        temp = arr[i] \n        arr[i] = arr[n - i - 1] \n        arr[n - i - 1] = temp\n  \n    return arr</s>"
  },
  {
    "text": "<s>[INST] Retrieve the number of letters in the following phrase .\n\n\"May the force be with you!\" [/INST] 22</s>"
  },
  {
    "text": "<s>[INST] Create a method to checkout the content of dictionary. [/INST] def check_dict(dictionary):\n    for key in dictionary:\n        print(key + \": \" + str(dictionary[key]))</s>"
  },
  {
    "text": "<s>[INST] You need to read a list of strings, split each into 2 substrings, and output the 2 substrings as a tuple.\n\n['international', 'imagination', 'skyscraper'] [/INST] def split_words(string_list):\n    new_list = []\n    for string in string_list:\n        mid = int(len(string)/2) \n        new_list.append( (string[:mid], string[mid:]) )\n    return new_list</s>"
  },
  {
    "text": "<s>[INST] Create a program to find the sum of all the even numbers from 1 to n. [/INST] def find_sum(n):  \n    sum = 0\n    for i in range (1, n): \n        if (i % 2 == 0): \n            sum = sum + i \n    return sum</s>"
  },
  {
    "text": "<s>[INST] Create a function to find if a given input is a prime number or not. [/INST] def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False        \n    return True</s>"
  },
  {
    "text": "<s>[INST] Calculate the result of raising 2 to the power of 6. [/INST] 64</s>"
  },
  {
    "text": "<s>[INST] Create a method to reverse a linked list. [/INST] def reverse_list(head): \n  \n    prev = None\n    current = head \n    while(current is not None): \n        next = current.next\n        current.next = prev \n        prev = current \n        current = next\n    head = prev \n    return head</s>"
  },
  {
    "text": "<s>[INST] Print out the content of a two-dimensional array.\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] def print_2d_array(arr):\n    for row in arr:\n        for el in row:\n            print(el, end=' ')\n        print(\"\")</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that prints out the numbers from 1 to n. [/INST] function printNumbers(n) {\n for (let i = 1; i <= n; i++) {\n console.log(i);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Swift function to find the sum of elements in an array of integers.\n\nlet arr = [1,2,3,4,5] [/INST] func sumOfElements(arr: [Int]) -> Int {\n let sum = arr.reduce(0, +)\n return sum\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript class that returns the area and circumference of a circle when given the radius. [/INST] class Circle {\n  constructor(radius) {\n    this._radius = radius;\n  }\n \n  get area() {\n    return Math.PI * this._radius * this._radius;\n  }\n \n  get circumference() {\n    return 2 * Math.PI * this._radius;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write SQL code to find the product details of the item with ID 1234. [/INST] SELECT * FROM products WHERE id = 1234;</s>"
  },
  {
    "text": "<s>[INST] Write a C# program to create the list of prime numbers in a given range. [/INST] public class PrimeNumber\n{\n static void Main()\n {\n int n1 = 2;\n int n2 = 10;\n while (n1 < n2)\n {\n bool isPrime = true;\n for (int i = 2; i <= n1 / 2; i++)\n {\n if (n1 % i == 0)\n {\n isPrime = false;\n break;\n }\n }\n if (isPrime)\n Console.Write(n1 + \" \");\n n1++;\n }\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Build a deep learning model in Python to predict the stock price of a given company. [/INST] # import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# import data\ndata = pd.read_csv('stock_data.csv')\n\n# preprocess data\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\n\n# split into training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# build the model\nimport keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\nmodel = Sequential()\nmodel.add(Dense(units=6, activation='relu', input_dim=4))\nmodel.add(Dense(units=4, activation='sigmoid'))\nmodel.add(Dense(units=1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae','accuracy'])\nmodel.fit(X_train, y_train, epochs=20, batch_size=10)\n\n# test the model\ny_pred = model.predict(X_test)\n\n# evaluate the model\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)</s>"
  },
  {
    "text": "<s>[INST] Write an R script to find the correlation between two variables. [/INST] # read the data\ndat <- read.csv(\"data.csv\")\n\n# calculate the correlation\ncor(dat$var1, dat$var2)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to sort an array of integers. [/INST] function sortArray(arr) {\n return arr.sort(function(a, b) {\n  return a - b;\n });\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the most expensive item in the table. [/INST] SELECT * FROM items ORDER BY price DESC LIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to find the sum of elements in a 3x3 matrix. [/INST] // Java program to find sum of elements in a matrix \npublic class Matrix \n{ \n\tpublic static void main(String[] args) \n\t{ \n\t\t// Initialize matrix \n\t\tint[][] matrix = {{1, 2, 3}, \n\t\t\t\t\t\t{4, 5, 6}, \n\t\t\t\t\t\t{7, 8, 9}}; \n\n\t\t// Initialize sum \n\t\tint sum = 0; \n\n\t\t// Compute sum of elements \n\t\tfor (int i = 0; i < 3; i++) \n\t\t\tfor (int j = 0; j < 3; j++) \n\t\t\t\tsum = sum + matrix[i][j]; \n\n\t\t// Print Sum \n\t\tSystem.out.println(\"Sum of elements is: \" + sum); \n\t} \n}</s>"
  },
  {
    "text": "<s>[INST] Describe in one sentence what is wrong with the following Java code.\n\npublic class Main {\n    public static void main(String[] args) {\n        int y;\n        y = 10 + 5;\n        y -= 30;\n    }\n} [/INST] The code does not do anything with the value of y, meaning that it is not being used.</s>"
  },
  {
    "text": "<s>[INST] To what type of data can the following MySQL query return?\n\nSELECT *\nFROM table1 t1\nINNER JOIN table2 t2\nON t1.id = t2.id [/INST] The query can return results of any combination of columns from the two tables. It will return a set of records with the matching id from Table 1 and Table 2.</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list.\n\ntest_list = [4, 6, 8, 10, 3, 1, 9] [/INST] def greatest_difference(numbers_list):\n    max_difference = 0\n    for num1 in numbers_list:\n        for num2 in numbers_list:\n            if num1 != num2:\n                difference = abs(num1 - num2)\n                if difference > max_difference:\n                    max_difference = difference\n    \n    return max_difference\n\ngreatest_difference(test_list)</s>"
  },
  {
    "text": "<s>[INST] Construct an XML element with tag 'hello' and the text 'Welcome to my website'. [/INST] <hello>Welcome to my website</hello></s>"
  },
  {
    "text": "<s>[INST] What will be the result of the following Ruby code?\n\na = 11\nb = 3\nc = a % b [/INST] The result of the code will be 2.</s>"
  },
  {
    "text": "<s>[INST] Explain what is wrong with the following SQL statement.\n\nSELECT column1, column2 FROM myTable; [/INST] The statement does not specify which records in MyTable it is attempting to retrieve, so it will return all columns of all records in the table.</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to get all CustomerIDs from the Orders table if their OrderTotal is greater than 500. [/INST] SELECT CustomerID\nFROM Orders\nWHERE OrderTotal > 500;</s>"
  },
  {
    "text": "<s>[INST] Create a loop in JavaScript that prints the numbers from 1 to 10 in the console. [/INST] for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Improve the following HTML structure.\n\n<div>\n<h2>Welcome!</h2>\n<p>This is my website.</p>\n</div> [/INST] <div>\n <h2>Welcome!</h2>\n <p>Hello and welcome to my website. Here, you can find all the information you need to know about me.</p>\n</div></s>"
  },
  {
    "text": "<s>[INST] Name three types of looping structures in Java. [/INST] The three types of looping structures in Java are for-loops, while-loops, and do-while loops.</s>"
  },
  {
    "text": "<s>[INST] What is a callback function in JavaScript? [/INST] A callback function in JavaScript is a function that is passed as an argument to another function and is executed after the outer function has finished executing.</s>"
  },
  {
    "text": "<s>[INST] Augment the following HTML structure to include a link to a CSS document.\n\n<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head> [/INST] <head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head></s>"
  },
  {
    "text": "<s>[INST] Explain in simple terms what is a tree structure in data structures. [/INST] A tree structure in data structures is a hierarchical structure composed of a root node connected to one or more nodes each of which is connected to one or more other nodes. It is a non-linear data structure that allows efficient insertion and retrieval of data.</s>"
  },
  {
    "text": "<s>[INST] Write code to retrieve data from a given MySQL table.\n\nTable Name: Books [/INST] SELECT * FROM Books;</s>"
  },
  {
    "text": "<s>[INST] Calculate the factorial of a given number.\n\nThe number is 7 [/INST] 5040</s>"
  },
  {
    "text": "<s>[INST] Create a Linked List in C++. [/INST] // create a struct to represent a node\nstruct node \n{ \n    int data; \n    struct node* next; \n}; \n  \n// function to insert an element in the Linked List \nvoid push(struct node** head_ref, int newdata) \n{ \n    // allocate memory for the node \n    struct node* newnode = (struct node*) malloc(sizeof(struct node)); \n  \n    // adding data to the node \n    newnode->data = newdata; \n  \n    // make next point to the previous head \n    newnode->next = (*head_ref); \n  \n    // move the head point to the new node \n    (*head_ref) = newnode; \n}</s>"
  },
  {
    "text": "<s>[INST] Output the even numbers between 0 and 10. [/INST] 2, 4, 6, 8, 10</s>"
  },
  {
    "text": "<s>[INST] Write a query to display the average age of the students.\n\nTable Name: Students [/INST] SELECT AVG(Age) FROM Students;</s>"
  },
  {
    "text": "<s>[INST] Compare two strings to determine if they are equal or not.\n\nString1: \"Hello World\"\nString2: \"Hello World\" [/INST] true</s>"
  },
  {
    "text": "<s>[INST] Create a function to collect all the alphabets from a given string.\n\nThe string is \"My name is John!\" [/INST] //Function to collect all the alphabets\nfunction getAlphabets(str) {\n  const result = [];\n  for(let i=0; i < str.length; i++) {\n    if(str[i].match(/[a-z]/i)) {\n      result.push(str[i]);\n    }\n  }\n  return result;\n}\n\n//Call function and pass the string as parameter\nlet alphabets = getAlphabets(\"My name is John!\"); \nconsole.log(alphabets); // Output: [\"M\", \"y\", \"n\", \"a\", \"m\", \"e\", \"i\", \"s\", \"J\", \"o\", \"h\"]</s>"
  },
  {
    "text": "<s>[INST] Write a query to retrieve all the customer names from an orders table.\n\nTable Name: Orders [/INST] SELECT CustomerName FROM Orders;</s>"
  },
  {
    "text": "<s>[INST] Obtain the type of the data in the given code.\n\nlet number = 10; [/INST] number is of type number.</s>"
  },
  {
    "text": "<s>[INST] Create an array of the numbers from 1 to 10. [/INST] let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</s>"
  },
  {
    "text": "<s>[INST] Design a webpage with a given template.\n\nTemplate: Pink and Purple with three-column layout [/INST] <html>\n<head>\n  <title>Pink and Purple Layout</title>\n  <style>\n    body {\n      background-color: pink;\n    }\n    #container {\n      display: flex;\n    }\n    #container > div {\n      flex: 1;\n      background-color: purple;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Calculate the circumference of a circle.\n\nRadius: 3 [/INST] 18.85</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to generate the Fibonacci series between 0 and 10. [/INST] def FibonacciSequence():\n  a, b = 0, 1\n  for _ in range(10):\n    yield a\n    a, b = b, a + b\n\nfor num in FibonacciSequence():\n  print(num)</s>"
  },
  {
    "text": "<s>[INST] Generate a set of five English words starting with the letter \"P\". [/INST] panther, plane, purple, parking, planet</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, extend the list such that it contains the square of the elements present in the list.\n\nnumbers = [1,2,3] [/INST] numbers = [1,2,3,1,4,9]</s>"
  },
  {
    "text": "<s>[INST] Append a string \"Welcome to the party\" at the end of the provided array.\n\nwords = [\"Hello\", \"there\"] [/INST] words = [\"Hello\", \"there\", \"Welcome to the party\"]</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to get the sum of the values in a column.\n\ntableName: myTable\ncolumnName: myColumn [/INST] SELECT SUM(myColumn) FROM myTable</s>"
  },
  {
    "text": "<s>[INST] Create a CSS rule to set the body's font size to 12px. [/INST] body {\n font-size: 12px;\n}</s>"
  },
  {
    "text": "<s>[INST] Filter the provided array by returning only even numbers.\n\nnumbers = [1, 2, 3, 4, 5] [/INST] numbers = [2, 4]</s>"
  },
  {
    "text": "<s>[INST] Reorganize the provided data into an HTML table.\n\nstudents = [\n  {name: 'John', age: 23},\n  {name: 'Sarah', age: 26 },\n] [/INST] <table>\n <tr>\n  <th>Name</th>\n  <th>Age</th>\n </tr>\n <tr>\n  <td>John</td>\n  <td>23</td>\n </tr>\n <tr>\n  <td>Sarah</td>\n  <td>26</td>\n </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Implement a stack data structure in Java. [/INST] // Stack class \nclass Stack \n{ \n    static final int MAX = 1000; \n    int top; \n    int a[] = new int[MAX]; // Maximum size of Stack \n  \n    boolean isEmpty() \n    { \n        return (top < 0); \n    } \n    Stack() \n    { \n        top = -1; \n    } \n  \n    boolean push(int x) \n    { \n        if (top >= (MAX-1)) \n        { \n            System.out.println(\"Stack Overflow\"); \n            return false; \n        } \n        else\n        { \n            a[++top] = x; \n            System.out.println(x + \" pushed into stack\"); \n            return true; \n        } \n    } \n  \n    int pop() \n    { \n        if (top < 0) \n        { \n            System.out.println(\"Stack Underflow\"); \n            return 0; \n        } \n        else\n        { \n            int x = a[top--]; \n            return x; \n        } \n    } \n\n    int peek() \n    { \n        if (top < 0) \n        { \n            System.out.println(\"Stack Underflow\"); \n            return 0; \n        } \n        else\n        { \n            int x = a[top]; \n            return x; \n        } \n    } \t\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to replace all the vowels in a given string with '*'. [/INST] function replaceVowels(str) {\n  return str.replace(/[aeiou]/gi, '*');\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java class that prints the Fibonacci sequence between 0 and 10. [/INST] public class Fibonacci {\n\n  public static void main(String[] args) {\n    printFibonacci();\n  }\n\n  public static void printFibonacci() {\n    int n1 = 0;\n    int n2 = 1;\n    int n3;\n\n    System.out.print(n1 + \" \" + n2);\n\n    for (int i = 0; i < 8; i++) {\n      n3 = n1 + n2;\n      System.out.print(\" \" + n3);\n      n1 = n2;\n      n2 = n3;\n    }\n  }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Make sure the following code runs without errors.\n\ndef calculate_sum(numbers):\n      total = 0\n      for number in numbers\n          total += number\n      return total [/INST] def calculate_sum(numbers):\n      total = 0\n      for number in numbers:\n          total += number\n      return total</s>"
  },
  {
    "text": "<s>[INST] Incorporate the following change in the given code.\n\ndef calculate_area(base, height):\n    area = base*height\n    area = float(area)\nChange: Calculate area of the triangle in square meters. [/INST] def calculate_area(base, height):\n    area = 0.5*base*height\n    area = float(area)*(10**-6)\n    return area</s>"
  },
  {
    "text": "<s>[INST] Create a Python function which takes an array and returns true if the array contains all unique values.\n\narray = [1, 2, 3, 2] [/INST] \"\"\"\nCreate a Python function which takes an array and returns \ntrue if the array contains all unique values\n\"\"\"\n\ndef is_unique(arr):\n    seen = set()\n    for x in arr: \n        if x in seen: \n            return False\n        seen.add(x)\n    return True\n    \nif __name__ == '__main__':\n    arr = [1,2,3,2]\n    result = is_unique(arr)\n    print(result)\n    \n# Output\n# False</s>"
  },
  {
    "text": "<s>[INST] Write a code to get the value of pi (to 6 decimal places) using mathematical methods. [/INST] \"\"\"\nCalculate the value of pi using mathematical methods\n\"\"\"\n\ndef calculate_pi():\n    pi = 0  \n    n = 1000\n    for n in range(n):\n        pi += ((-1)**n)/(2*n+1)\n    pi = pi*4\n    return round(pi, 6)\n\nif __name__ == '__main__':\n    print(calculate_pi())\n\n# Output\n# 3.141593</s>"
  },
  {
    "text": "<s>[INST] Visualize the following on a line chart.\n\nData points = [12, 13, 19, 20, 25] [/INST] import matplotlib.pyplot as plt\n\ndata_points = [12, 13, 19, 20, 25]\n\nplt.plot(data_points)\nplt.ylabel(\"data points\")\nplt.xlabel(\"index\")\nplt.title(\"Line chart of data points\")\n\nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Implement a binary search on the given array.\n\nArray = [1, 4, 5, 6, 7, 9] [/INST] \"\"\"\nImplement a binary search on a given array\n\"\"\"\n\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\nif __name__ == '__main__':\n    arr = [1, 4, 5, 6, 7, 9]\n    element = 7\n    result = binary_search(arr, element)\n    print(result)\n\n# Output\n# True</s>"
  },
  {
    "text": "<s>[INST] Change the following code so that it prints the list elements in reverse order.\n\narr = [1, 2, 3, 4, 5]\n\nfor x in arr:\n    print(x) [/INST] arr = [1, 2, 3, 4, 5]\n\nfor x in arr[::-1]:\n    print(x)</s>"
  },
  {
    "text": "<s>[INST] Consider the following program. Find out the output without running it.\n\nmy_list = [1, 1, 2, 3, 5, 8]\n\nfor x in my_list:\n    if x%2 == 0:\n        print(x) [/INST] 2\n8</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a string and returns a new string with each character capitalized.\n\nString = \"hello!\" [/INST] \"\"\"\nCreate a function that takes a string and returns a new string with each character capitalized\n\"\"\"\n\ndef capitalize(string):\n    new_string = \"\"\n    for c in string:\n        new_string += c.upper()\n    return new_string\n    \nif __name__ == '__main__':\n    string = \"hello!\"\n    result = capitalize(string)\n    print(result)\n\n# Output\n# HELLO!</s>"
  },
  {
    "text": "<s>[INST] Show how this array could be sorted using the insertion sort algorithm.\n\n[3, 4, 8, 1, 5] [/INST] // Initial Array\n[3, 4, 8, 1, 5]\n\n// 1st Pass\n[3, 4, 8, 1, 5] // Move 8 to the left\n[3, 4, 1, 8, 5]\n\n// 2nd Pass\n[3, 4, 1, 8, 5] // Move 4 to the left\n[3, 1, 4, 8, 5]\n\n// 3rd Pass\n[3, 1, 4, 8, 5] // Move 3 to the left\n[1, 3, 4, 8, 5]\n\n// 4th Pass\n[1, 3, 4, 8, 5] // Move 8 to the right\n[1, 3, 4, 5, 8]\n\n// Final Array\n[1, 3, 4, 5, 8]</s>"
  },
  {
    "text": "<s>[INST] Write a short JavaScript code snippet to detect a browser language and display a response message in that particular language. [/INST] // get the current browser language\nvar language = navigator.language || navigator.userLanguage;\n\nif (language === \"en\") {\n    console.log(\"Hello, welcome to the website!\");\n} \nelse if (language === \"de\") {\n    console.log(\"Hallo, willkommen auf der Webseite!\");\n}\nelse if (language === \"fr\") {\n    console.log(\"Bonjour, bienvenue sur le site Web!\");\n}\nelse {\n    console.log(\"Welcome to the website!\");\n}</s>"
  },
  {
    "text": "<s>[INST] Describe how to use the following code to sort an array in ascending order.\n\nfunction bubbleSort(arr) {\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len; j++) {\n            if (arr[j] > arr[j+1]) {\n               let temp = arr[j];\n               arr[j] = arr[j+1];\n               arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n} [/INST] // To sort an array in ascending order using the bubble sort algorithm:\n// 1. Initialize the array to be sorted\n// 2. Iterate over the array and compare adjacent elements\n// 3. If the element on the left is greater than the element on the right, swap them\n// 4. Repeat steps 2 and 3 until the array is sorted\n// 5. Return the sorted array</s>"
  },
  {
    "text": "<s>[INST] Create an integer array using Java and sort it using the bubble sort algorithm. [/INST] // Create an integer array\nint[] array = {4, 2, 6, 1, 3};\n\n// Sort the array using the bubbleSort function\nbubbleSort(array);\n\n// Write a function to implement the bubbleSort algorithm\npublic static int[] bubbleSort(int[] array) {\n    int len = array.length;\n    for (int i = 0; i < len; i++) {\n        for (int j = 0; j < len; j++) {\n            if (array[j] > array[j+1]) {\n                int temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n            }\n        }\n    }\n    return array;\n}\n// The sorted array is [1, 2, 3, 4, 6]</s>"
  },
  {
    "text": "<s>[INST] Describe how to add an element in a linked list in Python. [/INST] // To add an element in a linked list in Python:\n// 1. Create a new node containing the value to be added\n// 2. Set the \"next\" attribute of the new node to point to the current head node\n// 3. Set the head node to be the newly created node\n// 4. Increase the size of the linked list by 1</s>"
  },
  {
    "text": "<s>[INST] Explain how to implement a heap sort algorithm in Java. [/INST] // To implement a heap sort algorithm in Java:\n// 1. Build a min heap from the input data.\n// 2. At the top of the heap, obtain the minimum element.\n// 3. Exchange the minimum element with the last element of the heap.\n// 4. Reduce the size of the heap by one and heapify the root of the heap.\n// 5. Repeat steps 2-4 until all the elements are sorted.\n// 6. Return the sorted array.</s>"
  },
  {
    "text": "<s>[INST] Suggest a Python code to parse an XML document. [/INST] # Parse an XML document using Python\nimport xml.etree.ElementTree as ET\n\n# load the XML document\ntree = ET.parse('document.xml')\n# get the root element\nroot = tree.getroot()\n# loop through all the elements\nfor element in root.findall('element'):\n    # print the attributes of all elements\n    print(element.attrib)</s>"
  },
  {
    "text": "<s>[INST] Describe how to use the following code to generate random numbers.\n\nimport random\n\ndef random_with_N_digits(n):\n    range_start = 10**(n-1)\n    range_end = (10**n)-1\n    return random.randint(range_start, range_end) [/INST] // To generate random numbers using the code provided:\n// 1. Specify number of digits to generate\n// 2. Use the random_with_N_digits function to generate the random number\n// 3. Pass the desired number of digits as the argument in the function\n// 4. The function will return a random number between 10^(n-1) and 10^n-1\n// 5. Use the returned random number for the desired purpose</s>"
  },
  {
    "text": "<s>[INST] Generate a Frequency Table for the following sequence of characters using Python.\n\n'aabbccddee' [/INST] # Create a frequency table for the given sequence\n# using Python\nfrom collections import Counter\n\nstring = 'aabbccddee'\n# create the Counter object\nfreq_table = Counter(string)\n# print the output\nprint(freq_table)\n\n# Output\nCounter({'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2})</s>"
  },
  {
    "text": "<s>[INST] In Python, write code to identify whether a given string contains only numeric values. [/INST] # To identify whether a given string contains only numeric values in Python:\n# 1. Use the isdigit method of the str object\n# 2. Pass the given string as an argument to the isdigit method\n# 3. The method will return True if the given string contains only numeric values,\n#    and False otherwise\n\n# Example\ngiven_string = \"1234\"\n\nif given_string.isdigit():\n    print(\"The given string contains only numeric values\")  \nelse:\n    print(\"The given string does not contain only numeric values\")</s>"
  },
  {
    "text": "<s>[INST] Explain how to perform a bubble sort on a given array. [/INST] // To perform a bubble sort on a given array:\n// 1. Iterate over the array and compare adjacent elements\n// 2. If the element on the left is greater than the element on the right, swap them\n// 3. After each pass, the largest element in the array will \"bubble\" up to the right\n// 4. Continue to iterate and swap until the array is sorted\n// 5. Return the sorted array</s>"
  },
  {
    "text": "<s>[INST] Write a script in JavaScript to parse an XML document. [/INST] // To parse an XML document in JavaScript:\n// 1. Use the DOMParser to load the XML document into an XML Document object\n// 2. Use the getElementsByTagName method to obtain all the elements with a specific tag in the document\n// 3. Use the getElementsByTagNameNS method to obtain all the elements with a specific tag and namespace in the document\n// 4. Use the getAttribute method to obtain the attribute values of the desired elements\n// 5. Use the getElementsByClassName method to obtain all the elements with a specific class in the document  \n// 6. Parse the elements and create a custom object according to the returned XML.</s>"
  },
  {
    "text": "<s>[INST] Describe how to use the following code to calculate the sum of all elements in an array in Java.\n\npublic static int calcSum(int[] arr) {\n    int sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n} [/INST] // To calculate the sum of all elements in an array using the code provided:\n// 1. Initialize the array of integers to be summed\n// 2. Use the calcSum function to iterate over the array and sum all of its elements\n// 3. Return the calculated sum from the calcSum function</s>"
  },
  {
    "text": "<s>[INST] Sort the given words in lexicographical order.\n\napple, cat, flower, dog [/INST] apple, cat, dog, flower</s>"
  },
  {
    "text": "<s>[INST] Write SQL code to find the names of students who are enrolled in all three classes.\n\nTable name: students\nColumns: student_id, name, class1, class2, class3 [/INST] SELECT name\nFROM students\nWHERE class1 = 1 AND class2 = 1 AND class3 = 1;</s>"
  },
  {
    "text": "<s>[INST] Generate the Fibonacci sequence up to the 10th number. [/INST] 0, 1, 1, 2, 3, 5, 8, 13, 21, 34</s>"
  },
  {
    "text": "<s>[INST] Convert this number from decimal to binary.\n\n128 [/INST] 10000000</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function for reversing a string. [/INST] function reverseString(str) {\n    let revStr = '';\n    for(let i = str.length-1; i >= 0; i--) {\n        revStr += str[i];\n    }\n    return revStr;\n}</s>"
  },
  {
    "text": "<s>[INST] Identify and explain the Big O runtime complexity of this algorithm.\n\ndef find_sum(numbers): \n    total = 0\n    for num in numbers:\n        total += num\n    return total [/INST] O(n), where n is the number of elements in the list. This algorithm has linear time complexity, because the amount of operations performed is directly dependent on the number of elements in the list.</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program to calculate the sum of numbers in an array.\n\nstd::vector<int> numbers = {1, 2, 3, 4, 5}; [/INST] #include <iostream>\n#include <vector>\n \nint sumArray(std::vector<int> &nums)\n{\n    int sum = 0;\n    for (int num : nums) {\n        sum += num;\n    }\n    return sum;\n}\n \nint main()\n{\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    std::cout << \"Sum: \" << sumArray(nums);\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Classify the following statement.\n\nI must finish the project by tomorrow. [/INST] Imperative sentence.</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python that implements a stack. [/INST] class Stack: \n    def __init__(self): \n        self.stack = []\n\n    def push(self,element): \n        self.stack.append(element)  \n\n    def pop(self): \n        return self.stack.pop()\n\n    def peek(self):\n        return self.stack[-1]</s>"
  },
  {
    "text": "<s>[INST] Write an R function to calculate the mean of a numerical vector. [/INST] calc_mean <- function(x) {\n    mean(x)\n}</s>"
  },
  {
    "text": "<s>[INST] Transform the following sentence into a declarative sentence.\n\nDo your homework every day. [/INST] You should do your homework every day.</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to extract all unique words from a given sentence.\n\nThis sentence contains multiple words. [/INST] sentence_words = set(sentence.split())\nunique_words = set(word for word in sentence_words if word not in visited_words)\nprint(unique_words)\n# Output: {'contains', 'words', 'multiple', 'This'}</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the \"break\" keyword in C language? [/INST] The \"break\" keyword is used to immediately break out of a loop in the C programming language. It can also be used to break out of a switch statement. It is used to terminate a loop or switch statement and transfer program control to the next statement after the loop or switch.</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that reads two numbers from the user and prints the sum. [/INST] import java.util.Scanner;\n\npublic class Sum {\n\npublic static void main(String[] args) {\n \nScanner sc = new Scanner(System.in);\n \nSystem.out.println(\"Enter first number:\");\nint num1 = sc.nextInt();\n \nSystem.out.println(\"Enter second number:\");\nint num2 = sc.nextInt();\n \nint sum = num1 + num2;\n \nSystem.out.println(\"The sum is: \"+sum);\n \n }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the highest salary of a employee in the salary table? [/INST] SELECT MAX(salary) FROM salary;</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the \"if-else\" statement in JavaScript? [/INST] The if-else statement is a control statement in JavaScript that is used to execute a block of code if a certain condition is true, and a different block of code if the condition is false. It is a type of decision-making statement which allows a program to execute a certain code depending on a certain condition.</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page that displays the words \"Hello, World!\" in different colors. [/INST] <!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World Page</title>\n    <style>\n        h1 {\n            color: red;\n        }\n\n        h2 {\n            color: blue;\n        }\n\n        h3 {\n            color: green;\n        }\n    </style>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <h2>Hello, World!</h2>\n    <h3>Hello, World!</h3>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to print all prime numbers between 1 and 100. [/INST] #include<iostream>  \nusing namespace std;  \nint main()  \n{  \n int i, j,flag;   \n for (i = 2; i <= 100; i++)  \n {  \n     flag = 0;  \n     for (j = 2; j <= i / 2; j++)  \n     {  \n         if (i % j == 0)\n         {  \n             flag = 1;  \n             break;  \n         }  \n     }  \n     if (flag == 0)  \n         cout << i << \" \";  \n }  \n return 0;  \n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that finds, in a table of employees, the names and titles of all employees who work in the Marketing department.\n\nTable: Employees\n\n| EmployeeID | Name | Department   | Title                   |\n|------------|------|--------------|-------------------------|\n| 1          | Bob  | Marketing    | Senior Marketing Manager |\n| 2          | Joe  | Finance      | Financial Analyst       |\n| 3          | Jane | Marketing    | Marketing Manager       |\n| 4          | Alex | Sales        | Sales Representative     | [/INST] SELECT Name, Title \nFROM Employees \nWHERE Department = 'Marketing';</s>"
  },
  {
    "text": "<s>[INST] Write a for loop in Java to print all the numbers in a given list.\n\nint[] list = {21, 34, 54, 77, 92}; [/INST] for (int i = 0; i < list.length; i++) {\n System.out.println(list[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a data structure to store the following data.\n\nNames of fruits and vegetables in an online grocery store [/INST] A HashMap could be a suitable data structure to store the names of fruits and vegetables in an online store. The keys should be the names of the fruits and vegetables, and the values should store a description or additional information about them. For example, the key could be \"Banana\" and the value could be \"A yellow-skinned fruit with a sweet taste\".</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes in two strings and concatenates them together with a space in between. [/INST] def my_concat(string1, string2)\n    return string1 + ' ' + string2</s>"
  },
  {
    "text": "<s>[INST] Find the minimum element in an unordered array given in Python.\n\narr = [17, 21, 4, 7, 29, 34, 11] [/INST] min_ele = arr[0]\nfor i in range (1, len(arr)):\n    if (min_ele > arr[i]):\n       min_ele = arr[i] \n    \nprint(\"Minimum element in array is\", min_ele)</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to sort a given array of numbers into ascending order.\n\nint[] array = {11, 7, 18, 2, 5, 8}; [/INST] public static void sortAscending(int[] array) \n{ \n    // Sort the array in ascending order \n    Arrays.sort(array); \n  \n    System.out.println(\"Array in Ascending Order: \"); \n    for (int i = 0; i < array.length; i++)  \n    { \n        System.out.print(array[i] + \" \"); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a heading 2 of \"Operating System\". [/INST] <html>\n<head>\n    <title>Operating System</title>\n</head>\n<body>\n    <h2>Operating System</h2>\n\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Suggest an algorithm for finding the maximum element in an unordered array given in JavaScript.\n\nlet array = [9, 4, 15, 10, 6, 20]; [/INST] // max is assign to 0 as a starting point\nlet max = 0;\n\nfor (let i=0; i < array.length; i++) {\n  // If the current value of i is greater than max, max will be updated\n  if (array[i] > max) { \n    max = array[i];\n  }\n}\n\nconsole.log(max); // Output: 20</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string and returns a dictionary counting each character in the string. [/INST] def character_count(str): \n    res = {} \n  \n    for keys in str: \n        res[keys] = res.get(keys, 0)+1\n        \n    return res</s>"
  },
  {
    "text": "<s>[INST] Create a bash script that prints out \"Hello World\" five times. [/INST] #!/bin/bash\n \nfor i in `seq 1 5`;\ndo\n  echo \"Hello World!\"\ndone</s>"
  },
  {
    "text": "<s>[INST] Write a CSS style to add a yellow background to the body of a webpage. [/INST] body {\n  background-color: yellow;\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a sorting algorithm to sort the following array in descending order.\n\narr = [17, 21, 4, 7, 29, 34, 11] [/INST] A Bubble Sort algorithm could be used to sort the given array in descending order. This algorithm compares adjacent elements in the array and swaps them if the element on the left is larger than the element on the right. This process is continued until the array is sorted.</s>"
  },
  {
    "text": "<s>[INST] Modify the following Java program to find the area of a rectangle.\n\npublic class Area\n{\n public static void main(String[] args)\n {\n double radius = 10;\n double area = 3.14 * radius * radius;\n\n System.out.println(\"The area of the circle = \"+area);\n }\n} [/INST] public class Area\n{\n public static void main(String[] args)\n {\n double length = 10;\n double width = 5;\n double area = length * width;\n\n System.out.println(\"The area of the rectangle = \"+area);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a list of 10 random capital letters. [/INST] ['X', 'Z', 'J', 'G', 'M', 'B', 'Y', 'Q', 'C', 'T']</s>"
  },
  {
    "text": "<s>[INST] Convert the following string to camelCase.\n\nthis_string_should_be_converted_to_camelCase [/INST] thisStringShouldBeConvertedToCamelCase</s>"
  },
  {
    "text": "<s>[INST] Merge the two lists below together.\n\nlist_a = [1,2,3] \nlist_b = [4,5,6] [/INST] [1, 2, 3, 4, 5, 6]</s>"
  },
  {
    "text": "<s>[INST] Read the input text and reverse it character by character.\n\nThis is a sample text [/INST] txet elpmas a si sihT</s>"
  },
  {
    "text": "<s>[INST] Create an empty set in Python and add the following items into it: \"A\", \"B\", \"C\" [/INST] mySet = {\"A\", \"B\", \"C\"}</s>"
  },
  {
    "text": "<s>[INST] Print the following 2D matrix in row-major order.\n\n[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]] [/INST] 1 4 7 2 5 8 3 6 9</s>"
  },
  {
    "text": "<s>[INST] Create a Python dictionary with keys \"A\", \"B\", \"C\" and each key value should be the length of corresponding key. [/INST] {\"A\": 1, \"B\": 1, \"C\": 1}</s>"
  },
  {
    "text": "<s>[INST] Generate a 3x3 matrix of random real numbers in the range of 0.0 to 1.0. [/INST] import numpy as np\nnp.random.RandomState(0).rand(3, 3)</s>"
  },
  {
    "text": "<s>[INST] Concatenate the two strings below, with a space inserted between them.\n\nA = \"Hello\"\nB = \"World!\" [/INST] A + ' ' + B</s>"
  },
  {
    "text": "<s>[INST] Calculate the average from a given list of integers.\n\n[1, 2, 3, 4, 5] [/INST] sum(list_of_numbers) / len(list_of_numbers)</s>"
  },
  {
    "text": "<s>[INST] Find the sum of the elements in a given list of numbers.\n\n[1, 2, 3, 4, 5] [/INST] sum(list_of_numbers)</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code into a generator.\n\ndef some_function(nums):\n  output = []\n  for x in nums:\n    y = x ** 2\n    output.append(y)\n  return output [/INST] def some_function(nums):\n  for x in nums:\n    yield x ** 2</s>"
  },
  {
    "text": "<s>[INST] In C++, search a given string for a given sub-string.\n\nstring = \"This is a string\"\n    sub_string = \"ing\" [/INST] size_t found = string.find(sub_string);\nif (found != string::npos) {\n    // sub-string found\n} else {\n    // sub-string not found\n}</s>"
  },
  {
    "text": "<s>[INST] Write a bash script to list the content of the current directory. [/INST] #!/bin/bash\n\nls</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object to represent a person's name and age. [/INST] let person = {\n  name: \"John Doe\",\n  age: 25\n};</s>"
  },
  {
    "text": "<s>[INST] Generate an array of odd numbers up to and including the number 10. [/INST] let numbers = [1, 3, 5, 7, 9];</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript variable to store the current date and time. [/INST] let datetime = new Date();</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to count the letters in a given sentence and return a dictionary of letter counts.\n\nsentence = \"Hello World!\" [/INST] def letter_counts(sentence):\n  count_dict = {}\n  for char in sentence:\n    if char.isalpha():\n      if char in count_dict:\n        count_dict[char] += 1\n      else:\n        count_dict[char] = 1\n  return count_dict</s>"
  },
  {
    "text": "<s>[INST] Suggest a syntax to create a PHP class for a user. [/INST] class User {\n  public $name;\n  public $age;\n\n  function __construct($name, $age) {\n    $this->name = $name;\n    $this->age = $age;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the average salary of all employees in the department labeled \"sales\". [/INST] SELECT AVG(salary) \nFROM Employees \nWHERE department = 'sales';</s>"
  },
  {
    "text": "<s>[INST] Write a CSS selector to apply a font-size of 16px to every element with a class of \"heading\". [/INST] .heading {\n  font-size: 16px;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a 5-element tuple of random numbers between 5 and 15 using Python. [/INST] import random\n\nrandom_tuple = tuple(random.randint(5, 15) for _ in range(5))</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML code to add an additional radio button with the label \"orange\".\n\n<input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana [/INST] <input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana<br>\n<input type=\"radio\" name=\"fruit\" value=\"orange\"> Orange</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to check if two strings are an anagram or not. [/INST] def is_anagram(str1, str2): \n    if len(str1) != len(str2): \n        return False \n  \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n  \n    if s1 == s2: \n        return True\n  \n    return False</s>"
  },
  {
    "text": "<s>[INST] Analyze the given Java code and identify the errors.\n\npublic class TestClass {\n   public static void main (String[] args) {\n      int x = 10;\n      int y = 20\n      int z = x + y;\n      system.out.println(\"The sum is: \" + z);\n   }\n} [/INST] The errors are:\n1. The semicolon at the end of line 2 is missing.\n2. The line 4 should be `System.out.println(\"The sum is: \" + z);` (the capital S is missing).\n3. The line 5 is an extra line which should be removed.</s>"
  },
  {
    "text": "<s>[INST] Create a new MySQL table to store user data.\n\nTable structure: \nUser_ID, FirstName, LastName, Email [/INST] CREATE TABLE User_Data (\nUser_ID INT,\nFirstName VARCHAR (20) NOT NULL,\nLastName VARCHAR (20) NOT NULL,\nEmail VARCHAR (50) NOT NULL,\n PRIMARY KEY (User_ID)\n);</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to generate a random string of 5 characters. [/INST] import random\n\ndef generate_random_string():\n  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  random_string = ''\n  for x in range(5):\n    random_string += random.choice(characters)\n  \n  return random_string\n\nprint(generate_random_string())</s>"
  },
  {
    "text": "<s>[INST] Manipulate the given list in Python to include the new element at the beginning.\n\nlist = [1, 2, 3]\nnew_element = 0 [/INST] list = [0] + list \nlist.insert(0, new_element)</s>"
  },
  {
    "text": "<s>[INST] Write a query in SQL to list the employee information from the given Employee table in descending order of their salaries.\n\nTable structure:\nEmployee_ID  Name   Department   Salary [/INST] SELECT * FROM Employee \nORDER BY Salary DESC;</s>"
  },
  {
    "text": "<s>[INST] Write an HTML page including the given text.\n\nThis is a test page [/INST] <html>\n  <head>\n    <title>Test Page</title>\n  </head>\n  <body>\n    <h1>This is a test page</h1>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Find the average salary of the given table.\n\nTable structure:\nEmployee_ID  Name   Department   Salary [/INST] SELECT AVG (Salary) \nFROM Employee ;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the row with the customer id \"CID001\" from the customers table. [/INST] SELECT * FROM customers WHERE customer_id = 'CID001';</s>"
  },
  {
    "text": "<s>[INST] Create a CSS rule to make all h1 elements red in color. [/INST] h1 {\n  color: red;\n}</s>"
  },
  {
    "text": "<s>[INST] Identify the most efficient data structure to store a list of strings. [/INST] A linked list is the most efficient data structure for storing a list of strings, as it offers constant-time insertions and deletions.</s>"
  },
  {
    "text": "<s>[INST] Using the code below, update the function to find the average of two numbers.\n\ndef find_average(num1, num2): \n  total = num1 + num2 [/INST] def find_average(num1, num2): \n  total = num1 + num2 \n  average = total / 2\n  return average</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to center text in a div element with id \"myDiv\". [/INST] document.getElementById('myDiv').style.textAlign = \"center\";</s>"
  },
  {
    "text": "<s>[INST] Generate a random string with 10 characters. [/INST] let randomString = Math.random().toString(36).substring(2, 12);</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to print \"Hello World!\" on the console. [/INST] print(\"Hello World!\")</s>"
  },
  {
    "text": "<s>[INST] Create a list of car models that includes \"Honda Accord\", \"Toyota Corolla\", and \"Ford F150\". [/INST] car_models = [\"Honda Accord\", \"Toyota Corolla\", \"Ford F150\"]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to add two numbers using a prompt. [/INST] let a = prompt('Enter the first number:');\nlet b = prompt('Enter the second number:');\nlet sum = parseInt(a) + parseInt(b);\nconsole.log(sum);</s>"
  },
  {
    "text": "<s>[INST] Using the provided HTML, add a class attribute to the h1 tag so its style can be updated.\n\n<h1>My Website</h1> [/INST] <h1 class=\"myClass\">My Website</h1></s>"
  },
  {
    "text": "<s>[INST] Create a dictionary of fruits and their respective colors. [/INST] fruits = {\n \"apple\": \"red\",\n \"banana\": \"yellow\",\n \"grape\": \"purple\"\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the provided CSS rule to make all elements with the class \"myClass\" have a bold font-weight.\n\n.myClass { \n  font-size: 16px;\n} [/INST] .myClass { \n  font-size: 16px;\n  font-weight: bold;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class to represent a two-dimensional vector. [/INST] class Vector2D(object):\n  '''Class to represent a two-dimensional vector'''\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar)</s>"
  },
  {
    "text": "<s>[INST] Compare the performance of Grover's algorithm and classical search algorithms. [/INST] Grover's algorithm is a quantum algorithm that offers exponential speedup over classical search algorithms. As an example of how it works, assume we want to find an element in a database of size N. For a classical algorithm, the best search time is O(log N). In contrast, Grover's algorithm provides a search time of only O((log N)^2). Thus, using Grover's algorithm, the search time is reduced by a factor of log N for a given problem size. Furthermore, Grover's algorithm does not require any additional memory to store data, as it operates directly on the states of the quantum system. This can also provide significant advantages compared to classical search algorithms.</s>"
  },
  {
    "text": "<s>[INST] Implement a linked list in Python. [/INST] class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        curr_node = self.head\n        while curr_node.next is not None: \n            curr_node = curr_node.next\n        curr_node.next = new_node\n\n    def delete_by_value(self, data):\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            self.head = curr_node.next\n            return\n        prev_node = curr_node\n        while curr_node is not None:\n            if curr_node.data == data:\n                break\n            prev_node = curr_node\n            curr_node = curr_node.next\n        if curr_node is None:\n            return\n        prev_node.next = curr_node.next</s>"
  },
  {
    "text": "<s>[INST] Create a Java 8 Stream to filter a list of objects by a given field.\n\n[\n    {'name': 'John', 'age': 20},\n    {'name': 'Smith', 'age': 30},\n    {'name': 'Bill', 'age': 40}\n] [/INST] List<Object> list = Arrays.asList({\n    {'name': 'John', 'age': 20},\n    {'name': 'Smith', 'age': 30},\n    {'name': 'Bill', 'age': 40}\n});\n\nStream<Object> stream = list.stream();\n\n// Filter records whose age greater than 25\nstream.filter(record -> (int) record.get(\"age\") > 25).forEach(System.out::println);</s>"
  },
  {
    "text": "<s>[INST] Identify a potential bug in the following code.\n\ndef add(a, b):\n    c = a + b\n    return c [/INST] A potential bug in this code is that if the parameters a and b are passed in as strings instead of numbers, then the resulting c will be a concatenation of the two strings rather than a mathematical addition. To avoid this error, the parameters should be converted to the appropriate data type before performing the addition.</s>"
  },
  {
    "text": "<s>[INST] Edit this JavaScript code to use the correct syntax for the switch statement.\n\nif (action == 'play') {\n  console.log('Playing...');\n} else if (action == 'stop') {\n  console.log('Stopping...');\n} else {\n  console.log('Undefined action');\n} [/INST] switch (action) {\n  case 'play':\n    console.log('Playing...');\n    break;\n  case 'stop':\n    console.log('Stopping...');\n    break;\n  default:\n    console.log('Undefined action'); \n}</s>"
  },
  {
    "text": "<s>[INST] Explain what a Turing machine is. [/INST] A Turing machine is a mathematical model of computation that was initially developed by Alan Turing in 1936. It is a device that can read and write symbols on a strip of tape according to a set of instructions. The tape is divided into individual squares, each of which can hold one symbol at a time. The machine can move either right or left one square at a time, and has a set of instructions that determine how its internal state changes based on which symbol it reads. The Turing machine is a powerful tool for understanding computation, as it can be used to simulate any algorithm or computation.</s>"
  },
  {
    "text": "<s>[INST] Format this JSON data as per a specific schema.\n\n{\n    \"name\": \"John\",\n    \"age\": 20,\n    \"height_cm\": 178,\n    \"weight_kg\": 73\n} [/INST] {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"info\": {\n        \"height_cm\": 178,\n        \"weight_kg\": 73\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of an abstract data type in software engineering? [/INST] The purpose of an abstract data type in software engineering is to allow for the creation of data structures which have a certain behavior, without having to specify exactly how the data is represented in memory. Abstract data types are useful for organizing large amounts of data in complex systems, as they provide a clear interface for users to interact with the data without requiring them to understand the underlying implementation. By separating the data structures from the algorithms that operate on them, abstract data types can also reduce the complexity of software development.</s>"
  },
  {
    "text": "<s>[INST] What is the primary purpose of object-oriented programming? [/INST] The primary purpose of object-oriented programming is to create software systems that are modular, reusable, and maintainable. By modeling real-world objects and their behavior as individual components, object-oriented programming enables developers to create and manage complex systems in an organized and efficient manner. It also allows the code to be easily modified and adapted to fit the changing needs of the user. Additionally, object-oriented programming makes software more secure, as all the code is contained within individual objects which can be handled securely.</s>"
  },
  {
    "text": "<s>[INST] Design a class in Java that can store student information. [/INST] public class Student {\n  private String name;\n  private int age;\n  private String course;\n\n  public Student(String name, int age, String course) {\n    this.name = name;\n    this.age = age;\n    this.course = course;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n  public String getName(){\n    return name;\n  }\n  \n  public void setAge(int age){\n    this.age = age;\n  }\n\n  public int getAge(){\n    return age;\n  }\n  \n  public void setCourse(String course){\n    this.course = course;\n  }\n\n  public String getCourse(){\n    return course;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java that can store a list of students and the courses they are enrolled in. [/INST] public class StudentList {\n  private ArrayList<Student> students;\n  private ArrayList<String> courses;\n\n  public StudentList() {\n    this.students = new ArrayList<Student>();\n    this.courses = new ArrayList<String>();\n  }\n\n  public void addStudent(Student student) {\n    this.students.add(student);\n  }\n  \n  public void addCourse(String course) {\n    this.courses.add(course);\n  }\n  \n  public ArrayList<Student> getStudents() {\n    return this.students;\n  }\n  \n  public ArrayList<String> getCourses() {\n    return this.courses;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select the names of all employees from the table 'employees' with an age greater than 25. [/INST] SELECT name FROM employees WHERE age > 25;</s>"
  },
  {
    "text": "<s>[INST] Change the variable names in the following Python code.\n\nx1 = 10\ny1 = 20 [/INST] a = 10\nb = 20</s>"
  },
  {
    "text": "<s>[INST] Design a class in Java that can store a list of books and their associated authors. [/INST] public class BookCollection {\n  private ArrayList<Book> books;\n  private ArrayList<String> authors;\n\n  public BookCollection() {\n    this.books = new ArrayList<Book>();\n    this.authors = new ArrayList<String>();\n  }\n\n  public void addBook(Book book) {\n    this.books.add(book);\n  }\n  \n  public void addAuthor(String author) {\n    this.authors.add(author);\n  }\n  \n  public ArrayList<Book> getBooks() {\n    return this.books;\n  }\n  \n  public ArrayList<String> getAuthors() {\n    return this.authors;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form with three text fields—name, age and gender. [/INST] <form>\n <label for=\"name\">Name:</label>\n <input type=\"text\" id=\"name\" name=\"name\">\n <br>\n <label for=\"age\">Age:</label>\n <input type=\"text\" id=\"age\" name=\"age\">\n <br>\n <label for=\"gender\">Gender:</label>\n <input type=\"text\" id=\"gender\" name=\"gender\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Edit the following JavaScript code to reverse the characters of a given string. [/INST] function reverseString(string) {\n  let reversedString = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n  return reversedString;\n}</s>"
  },
  {
    "text": "<s>[INST] Fix the Python code below to make the script work.\n\nimport json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile) [/INST] import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile, indent=4)</s>"
  },
  {
    "text": "<s>[INST] Compile a C program to print the number of arguments passed.\n\n#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n    printf(\"number of arguments passed: %d\\n\", argc);\n    return 0;\n} [/INST] gcc -o program program.c</s>"
  },
  {
    "text": "<s>[INST] Build a linear regression model using Python's scikit learn library.\n\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1],\n    'y': [2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9]\n    })\n\nX = data['x'].values.reshape(-1, 1)\ny = data['y'].values.reshape(-1, 1) [/INST] from sklearn.linear_model import LinearRegression\n\n# Create linear regression model\nmodel = LinearRegression()\n\n# Train the model using the training set\nmodel.fit(X, y)\n\n# Make predictions using the testing set\ny_pred = model.predict(X)</s>"
  },
  {
    "text": "<s>[INST] Create a simple web page with a div element and a child paragraph element. [/INST] <!DOCTYPE html>\n<html>\n    <head>\n    <title>Simple Web Page</title>\n    </head>\n\n    <body>\n        <div>\n            <p>The quick brown fox jumps over the lazy dog.</p>\n        </div>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a function returning the factorial of a given number in Python. [/INST] def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)</s>"
  },
  {
    "text": "<s>[INST] Create an array from elements 0 to 10 in JavaScript. [/INST] const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</s>"
  },
  {
    "text": "<s>[INST] Create a script for sorting the given array in decreasing order.\n\nconst array = [5, 10, 8, 6, 4, 9, 2] [/INST] const sortedArray = array.sort((a, b) => b - a);</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to check if an array is empty. [/INST] function isArrayEmpty(arr) {\n    return arr.length === 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a script for finding the largest number in the given array.\n\nconst array = [4, 8, 2, 6, 9, 3] [/INST] let largestNum = array[0];\n\nfor (let num of array) {\n    if (num > largestNum) {\n        largestNum = num;\n    }\n}\n\nconsole.log(largestNum);</s>"
  },
  {
    "text": "<s>[INST] Create an MySQL table with four columns: \"id\", \"name\", \"age\", and \"city\". [/INST] CREATE TABLE table_name (\n    id int(11) NOT NULL AUTO_INCREMENT,\n    name varchar(50) NOT NULL,\n    age int(11) NOT NULL,\n    city varchar(50) NOT NULL,\n    PRIMARY KEY (id)\n);</s>"
  },
  {
    "text": "<s>[INST] Apply the filter method in JavaScript to return only those elements of a given array that are not null.\n\nconst array = [1, null, 2, undefined, 3, NaN]; [/INST] const filteredArray = array.filter(el => el != null);</s>"
  },
  {
    "text": "<s>[INST] Clean the given data in Python by replacing NaN and None with 0.\n\nimport pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age']) [/INST] import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])\n\ndf.fillna(0, inplace = True)</s>"
  },
  {
    "text": "<s>[INST] Deploy a basic HTML page to a server. [/INST] Clone the repository containing the HTML page to the server.\nConfigure the web server so that it will serve the HTML page when requested.</s>"
  },
  {
    "text": "<s>[INST] Classify the given article as spam or ham.\n\nHello everyone, this is a spam message. [/INST] Spam</s>"
  },
  {
    "text": "<s>[INST] Modify the given HTML code to create a form element with two text boxes and a submit button.\n\n<h2>My Form</h2> [/INST] <h2>My Form</h2>\n<form>\n    <label for=\"name\">Name:</label><br>\n    <input type=\"text\" name=\"name\"><br>\n    <label for=\"email\">Email:</label><br>\n    <input type=\"text\" name=\"email\"><br>\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Change this existing Java code to generate the \"Jesus Christ\" string.\n\nString str = \"Holy\"; [/INST] String str = \"Holy\";\nString jesusChrist = str + \" \" + \"Jesus Christ\";\nSystem.out.println(jesusChrist);</s>"
  },
  {
    "text": "<s>[INST] Write a method that prints out a square of size n.\n\nn=5 [/INST] public static void printSquare(int n) { \n    for (int i = 0; i < n; i++) { \n        for (int j = 0; j < n; j++) { \n            System.out.print(\"* \"); \n        }  \n        System.out.println(); \n    } \n} \n   \n// Output: \n/*       \n  * * * * * \n  * * * * * \n  * * * * * \n  * * * * * \n  * * * * * \n*/</s>"
  },
  {
    "text": "<s>[INST] Write a Java Method that takes an array of integers and returns true if the array is sorted in ascending order.\n\narray = [7, 18, 24, 55, 98] [/INST] public static boolean isSorted(int[] array) { \n    int n = array.length; \n    int temp = array[0]; \n  \n    for (int i = 1; i < n; i++) { \n        if (temp > array[i]) \n            return false; \n        temp = array[i]; \n    } \n  \n    return true; \n}</s>"
  },
  {
    "text": "<s>[INST] Implement a method in JavaScript that checks if a String is a palindrome.\n\nString = \"racecar\" [/INST] function checkPalindrome(str){\n    let revStr = str.split('').reverse().join(''); \n    return (str == revStr);\n}\n\ncheckPalindrome(\"racecar\"); // returns true</s>"
  },
  {
    "text": "<s>[INST] Edit this CSS code to make the background-color of the body green.\n\nbody {\n    font-family: sans-serif;\n    width: 75%;\n    margin: 0 auto;\n} [/INST] body {\n    font-family: sans-serif;\n    width: 75%;\n    margin: 0 auto;\n    background-color: green;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a method that prints out all the prime numbers between 1 and 100. [/INST] public static void printPrimeNumbers(){ \n    System.out.println(\"Prime numbers between 1 to 100 are : \"); \n    for (int i = 1; i <= 100; i++) { \n        boolean isPrime = true;\n        for (int j = 2; j < i; j++) { \n            if (i % j == 0) { \n                isPrime = false;\n                break; \n            } \n        } \n        if (isPrime) \n            System.out.print(i + \" \"); \n    } \n} \n\n// Output:\n// Prime numbers between 1 to 100 are : \n// 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</s>"
  },
  {
    "text": "<s>[INST] Demonstrate how to use an arraylist in Java. [/INST] import java.util.ArrayList;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        // Create an arraylist \n        ArrayList<String> list = new ArrayList<String>(); \n  \n        // Adding elements to the list \n        list.add(\"Adam\"); \n        list.add(\"Bob\"); \n        list.add(\"Charlie\"); \n  \n        // Printing elements in the list \n        System.out.println(list); \n  \n        // Accessing elements using get() method \n        String name = list.get(1); \n        System.out.println(\"Name at index 1 is : \" + name); \n  \n        // Adding elements at a specific index \n        list.add(1, \"David\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Removing elements from a list \n        list.remove(\"Adam\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Check if an element exists in a list \n        boolean isPresent = list.contains(\"Bob\"); \n        System.out.println(\"Bob is present in the list : \" + isPresent); \n    } \n}\n\n// Output:\n// [Adam, Bob, Charlie] \n// Name at index 1 is : Bob\n// Updated list : [Adam, David, Bob, Charlie]\n// Updated list : [David, Bob, Charlie]\n// Bob is present in the list : true</s>"
  },
  {
    "text": "<s>[INST] Write JavaScript to swap two elements in an array.\n\narray = [10, 20, 30, 40] [/INST] function swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp; \n} \n\nlet array = [10, 20, 30, 40];\nswap(array, 0, 2);\nconsole.log(array);\n\n// Output: [30, 20, 10, 40]</s>"
  },
  {
    "text": "<s>[INST] Write Python code to generate a random password of 8 alphanumeric characters. [/INST] import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())\n\n// Output:\n// h5Kp0FHc</s>"
  },
  {
    "text": "<s>[INST] Write a Java method that takes a string and prints out the number of occurrences of each letter in the string.\n\nString = \"adda123de3f\" [/INST] public static void printLetterOccurrences(String str) {\n    int[] alphabet = new int[26];\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) >= 'a' && str.charAt(i) <= 'z')\n            alphabet[str.charAt(i) - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (alphabet[i] > 0) {\n            System.out.println(\"Number of Occurrences of \" + (char)(i + 'a') \n                    + \" is \" + alphabet[i]); \n        }\n    }\n}\n\n// Output\n// Number of Occurrences of a is 2 \n// Number of Occurrences of d is 2 \n// Number of Occurrences of e is 1 \n// Number of Occurrences of f is 1</s>"
  },
  {
    "text": "<s>[INST] Write a C# method that takes an array of integers and shuffles it.\n\narray = [1, 2, 3, 4, 5, 6] [/INST] public static void shuffle(int[] array) \n{ \n    // Random variable \n    Random rand = new Random(); \n\n    for (int i = 0; i < array.Length; i++) \n    { \n        // Choose a random index \n        int index = rand.Next(i, array.Length); \n\n        // Swap \n        int temp = array[i]; \n        array[i] = array[index]; \n        array[index] = temp; \n    } \n}\n\n// Output\n// [3, 4, 5, 6, 1, 2]</s>"
  },
  {
    "text": "<s>[INST] Generate an array of 10 random numbers between 1 and 100 using Python [/INST] import random\n\ndef generate_random_array(n):\n    array= []\n    for _ in range(n):\n        array.append(random.randint(1, 100))\n    return array\n\nprint(generate_random_array(10))\n\n// Output\n// [14, 20, 32, 84, 59, 45, 11, 34, 57, 19]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that takes an array of strings and returns true if the strings are in sorted order.\n\narray = [\"apple\", \"boy\", \"cat\", \"dog\"] [/INST] function isSorted(arr) {\n    let isSorted = true;\n    for (let i=1;i<arr.length;i++){\n        if(arr[i-1] > arr[i]){\n            isSorted = false;\n            break; \n        }\n    }\n    return isSorted;\n}\n\nconsole.log(isSorted([\"apple\", \"boy\", \"cat\", \"dog\"]));\n\n// Output\n// true</s>"
  },
  {
    "text": "<s>[INST] Create a feature for predicting a customer's subscription plan based off their purchase history.\n\nThe customer has purchased 2 shirts, 1 hat, and 3 pairs of jeans in the past month. [/INST] The prediction feature should calculate the customer's current subscription plan by taking into account the items they have purchased. It could use factors such as item types, quantity of items purchased, time since purchase, cost of items, sale promotions, combinations of items, and so forth. The feature should use a combination of analyzed data and established weights for each factor to accurately predict the customer's most likely subscription plan.</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm to reverse a string in Java. [/INST] public static String reverseString(String s) {\n  char[] arr = s.toCharArray();\n  int n = arr.length;\n\n  for (int i = 0; i < n/2; i++) {\n    char temp = arr[i];\n    arr[i] = arr[n-i-1];\n    arr[n-i-1] = temp;\n  }\n  return new String(arr);\n}</s>"
  },
  {
    "text": "<s>[INST] Using list comprehension, create a list of even numbers between 1 and 20 in Python. [/INST] even_nums_list = [num for num in range(1, 21) if num % 2 == 0]</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to find the shortest path in a maze using JavaScript. [/INST] function findShortestPath(maze) {\n    let visited = new Set();\n\n    let queue = [];\n    queue.push({\n        row: 0,\n        col: 0\n    });\n\n    let minLength = Number.POSITIVE_INFINITY;\n\n    while (queue.length > 0) {\n        let node = queue.shift();\n        let row = node.row;\n        let col = node.col;\n        let length = node.length;\n\n        // Reached the end\n        if (row === maze.length - 1 && col === maze[0].length - 1) {\n            minLength = Math.min(minLength, length);\n        }\n\n        // Add neighbors\n        if (row - 1 >= 0 && maze[row - 1][col] === 0\n            && !visited.has(row - 1 + '_' + col)) {\n            queue.push({\n                row: row - 1,\n                col: col,\n                length: length + 1\n            });\n            visited.add(row - 1 + '_' + col);\n        }\n\n        if (row + 1 < maze.length && maze[row + 1][col] === 0\n            && !visited.has(row + 1 + '_' + col)) {\n            queue.push({\n                row: row + 1,\n                col: col,\n                length: length + 1\n            });\n            visited.add(row + 1 + '_' + col);\n        }\n\n        if (col - 1 >= 0 && maze[row][col - 1] === 0\n            && !visited.has(row + '_' + (col - 1))) {\n            queue.push({\n                row: row,\n                col: col - 1,\n                length: length + 1\n            });\n            visited.add(row + '_' + (col - 1));\n        }\n\n        if (col + 1 < maze[0].length && maze[row][col + 1] === 0\n            && !visited.has(row + '_' + (col + 1))) {\n            queue.push({\n                row: row,\n                col: col + 1,\n                length: length + 1\n            });\n            visited.add(row + '_' + (col + 1));\n        }\n    }\n\n    return minLength;\n}</s>"
  },
  {
    "text": "<s>[INST] Debug the code to encounter the issue mentioned in the comment.\n\ndef validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        return False\n    else:\n        return True [/INST] def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        print('Password must be at least 8 characters.')\n        return False\n    else:\n        return True</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the total sales for product category ‘clothing’. [/INST] SELECT SUM(t.total)\nFROM orders o\nINNER JOIN order_items t ON o.order_id = t.order_id\nINNER JOIN products p ON t.product_id = p.product_id\nWHERE p.category = 'clothing';</s>"
  },
  {
    "text": "<s>[INST] Create a Java class to represent a TV show. [/INST] public class TVShow {\n  private String title; \n  private String network;\n  private String genre;\n  private int episodes;\n  \n  public TVShow(String t, String n, String g, int e) {\n    title = t;\n    network = n;\n    genre = g;\n    episodes = e;\n  }\n  \n  public String getTitle() {\n    return title;\n  }\n  \n  public String getNetwork() {\n    return network;\n  }\n  \n  public String getGenre() {\n    return genre;\n  }\n  \n  public int getEpisodes() {\n    return episodes;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C++ algorithm to compute the Fibonacci sequence. [/INST] #include <iostream> \n\nint fibonacci(int n) { \n    if (n <= 1) \n        return n; \n    return fibonacci(n - 1) + fibonacci(n - 2); \n} \n  \nint main() { \n    int n = 10; \n    std::cout << \"The Fibonacci number at position \" << n << \" is \" << fibonacci(n); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the total revenue for services in the month of February. [/INST] SELECT SUM(t.total)\nFROM orders o\nINNER JOIN order_items t ON o.order_id = t.order_id\nINNER JOIN products p ON t.product_id = p.product_id\nWHERE p.type = 'service' \n  AND MONTH(o.order_date) = 2\n  AND YEAR(o.order_date) = YEAR(CURDATE());</s>"
  },
  {
    "text": "<s>[INST] Suggest an algorithm for sorting a list of integers.\n\n[7, 4, 5, 10, 3] [/INST] // Bubble Sort Algorithm\n// Set a flag to indicate whether there are any swaps during the current iteration\n// Initialize the flag to false and iterate until the flag turns true\n// During the iteration, compare each pair of adjacent elements and swap them if necessary\n// After each iteration, set the flag to false\n// If it is still false after iteration, break the loop since the list must be sorted\n\nvar list = [7, 4, 5, 10, 3];\nvar flag = false;\nwhile (flag === false) {\n    flag = true;\n    for (var i=0; i<list.length -1; i++) {\n        if (list[i] > list[i+1]) {\n            var temp = list[i];\n            list[i] = list[i+1];\n            list[i+1] = temp;\n            flag = false;\n        }\n    }\n}\nconsole.log(list); // prints [3, 4, 5, 7, 10]</s>"
  },
  {
    "text": "<s>[INST] Develop a code in Java to calculate the BMI given the height and weight of a person. [/INST] public double calculateBMI(double height, double weight){\n   double bmi;\n   height = height/100;\n   bmi = weight / Math.pow(height, 2);\n   return bmi;\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following SQL query so that it produces the same result but in an efficient way.\n\nSELECT * FROM Orders WHERE OrderId IN (SELECT OrderId FROM OrderItems WHERE ProductId IN (SELECT ProductId FROM Products WHERE CategoryId = 2)) [/INST] SELECT Orders.* \nFROM Orders \nINNER JOIN OrderItems \nON Orders.OrderId = OrderItems.OrderId \nINNER JOIN Products \nON OrderItems.ProductId = Products.ProductId\nWHERE Products.CategoryId = 2</s>"
  },
  {
    "text": "<s>[INST] Count the number of vowels in a sentence.\n\n\"Hi there, how are you doing?\" [/INST] int countVowels = 0;\nString sentence = \"Hi there, how are you doing?\";\nfor (int i = 0; i < sentence.length(); i++) {\n    if (sentence.charAt(i) == 'a' || sentence.charAt(i) == 'e' || sentence.charAt(i) == 'i' \n    || sentence.charAt(i) == 'o' || sentence.charAt(i) == 'u') {\n        countVowels++;\n    }\n}\nSystem.out.println(\"Number of vowels in the string: \" + countVowels);</s>"
  },
  {
    "text": "<s>[INST] Create an array of ten unique numbers within the range 10 to 50. [/INST] int[] numbers = {10, 13, 16, 23, 25, 37, 41, 45, 48, 50};</s>"
  },
  {
    "text": "<s>[INST] Generate a random string of length 8 that only contains alphabets. [/INST] // Initialize an array containing all the letters of the alphabet\nString[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \n                     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n \nString randomString = \"\";\nRandom random = new Random();\n \nfor (int i=0; i<8; i++) {\n    int index = random.nextInt(alphabet.length);\n    randomString += alphabet[index];\n}\nSystem.out.println(randomString); // Prints a random 8-character string consisting of alphabets</s>"
  },
  {
    "text": "<s>[INST] Edit the code so that it calculates the exponential of a given number.\n\npublic double calculatePower(double base, double power) {\n    return base * power;\n} [/INST] public double calculatePower(double base, double power) {\n    return Math.pow(base, power);\n}</s>"
  },
  {
    "text": "<s>[INST] Fill in the blanks at the end of the Java code to find the sum of an array.\n\npublic int sumArray(int[] arr){\n    int sum = 0;\n    ______________\n    ______________\n    return sum;\n} [/INST] public int sumArray(int[] arr){\n    int sum = 0;\n    for(int i=0; i<arr.length;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}</s>"
  },
  {
    "text": "<s>[INST] Describe the general syntax of an if statement in Java. [/INST] In Java, the syntax of an if statement is as follows:\n\nif (condition) {\n    // Code to execute if condition is true\n}</s>"
  },
  {
    "text": "<s>[INST] Reverse a given string.\n\n\"Hello World!\" [/INST] # Initialize the input string\nstring = \"Hello World!\"\n \n# Get the string length\nstringLength = len(string)\n \n# Create an empty string for storing the reversed string\nreversedString = \"\"\n \n# Iterate over the input string in reverse order\nfor i in range(stringLength -1, -1, -1):\n    reversedString += string[i]\n \n# Print the reversed string\nprint(reversedString) # Prints !dlroW olleH</s>"
  },
  {
    "text": "<s>[INST] Write a code in ReactJS that renders the title of a given page on the screen. [/INST] import React from \"react\";\n\nfunction App() {\n  const title = \"My Page Title\"\n\n  return (\n    <div>\n      <h1>{title}</h1>\n    </div>\n  );\n}\n\nexport default App;</s>"
  },
  {
    "text": "<s>[INST] Create a JSON object from the following data provided:\n\nName: John Smith\nAge: 34\nCountry: US [/INST] {\n  \"Name\": \"John Smith\",\n  \"Age\": 34,\n  \"Country\": \"US\"\n}</s>"
  },
  {
    "text": "<s>[INST] How to check if a given number is even or odd using Python? [/INST] def is_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"</s>"
  },
  {
    "text": "<s>[INST] Write a loop in Python to print all the numbers from 0 to 10 [/INST] for i in range(0, 11):\n  print(i)</s>"
  },
  {
    "text": "<s>[INST] Write a function to check if a given binary tree is a valid binary search tree [/INST] def isValidBST(root): \n      \n    # Check empty tree  \n    if root is None: \n        return True\n          \n    # Check left subtree recursively  \n    if not isValidBST(root.left): \n        return False\n  \n    # if left is not None then check it has \n    # correct data or not i.e. left node's data \n    # should be less than root's data \n    if (root.left is not None and\n        root.data < root.left.data): \n        return False\n      \n    # Check right subtree recursively  \n    if not isValidBST(root.right): \n        return False\n      \n    # if right is not None then check it has \n    # correct data or not i.e. right node's data \n    # should be greater than root's data \n    if (root.right is not None and\n        root.data > root.right.data): \n        return False\n      \n    # If all conditions satisfied  \n    # then return True  \n    return True</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, print the numbers and their corresponding squares\n\nlist = [4, 5, 7, 8] [/INST] for num in list:\n    print(f\"{num} --> {num*num}\")</s>"
  },
  {
    "text": "<s>[INST] Sort this list in ascending order\n\nlst = [7, 11, 4, 9, 2, 10] [/INST] lst.sort()\nprint(lst)</s>"
  },
  {
    "text": "<s>[INST] Given the following two lists, create a new list containing the elements of both lists\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5] [/INST] list3 = list1 + list2\nprint(list3)</s>"
  },
  {
    "text": "<s>[INST] How do you remove the last item from a list in Python? [/INST] list.pop()</s>"
  },
  {
    "text": "<s>[INST] Write an expression to calculate the average of the values in the following list\n\nlst = [3, 8, 13, 5, 9] [/INST] average = sum(lst) / len(lst)</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the index of the first occurrence of a given number in a list [/INST] def find_index(lst, num):\n  for index, val in enumerate(lst):\n    if val == num:\n      return index</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of this function.\n\ndef mean(list):\n    total = 0\n    for item in list:\n        total += item\n    return total / len(list) [/INST] This function takes a list of numbers as an argument and returns the mean value, which is the sum of all the values divided by the number of values in the list.</s>"
  },
  {
    "text": "<s>[INST] Build a Python program to transform a string in a dictionary.\n\nString: \" John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener\" [/INST] people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}</s>"
  },
  {
    "text": "<s>[INST] Change the data type of the following list to a dictionary.\n\nlist = ['John', '26', 'Movie Watch', 'Jane', '31', 'Book Reader', 'Charlotte', '25', 'Music Listener'] [/INST] people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}</s>"
  },
  {
    "text": "<s>[INST] Please generate a system variable in C language. [/INST] #include <stdlib.h>\nint system_variable = 5;</s>"
  },
  {
    "text": "<s>[INST] Write pseudocode to find the average of two numbers. [/INST] set total to 0\nset count to 0\n\nwhile numbers left to process\n    add next number to total\n    increment count\nend while\n\ncalculate average by dividing total by count\n\nprint average</s>"
  },
  {
    "text": "<s>[INST] Return a subset of a given array of size K\n\narr = [3, 6, 2, 5, 7, 4], K = 3 [/INST] def subset(arr, K): \n    n = len(arr) \n    subset_arr = [0]; \n      \n    for i in range (0, n): \n        x = len(subset_arr) \n        for j in range(0, x): \n              \n            # Generate subset by adding \n            # elements of A\n            temp = [] \n            temp = subset_arr[j] \n            temp.append(arr[i]) \n              \n            # Append in the list \n            subset_arr.append(temp) \n              \n    # Return K size subset \n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -1\n    \nprint(subset(arr, K))</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to remove vowels from a string. [/INST] def remove_vowels(string): \n      \n    # vowels list\n    vowels = ['a', 'e', 'i', 'o', 'u']  \n    stringWithoutVowels = \"\" \n      \n    for x in string: \n        if x not in vowels: \n            stringWithoutVowels += x \n              \n    return stringWithoutVowels</s>"
  },
  {
    "text": "<s>[INST] Please write a program to create a JavaScript function that is used to validate an email address. [/INST] // Function to validate email address \nfunction validateEmail(email) {\n  var pattern = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; \n  \n  if (pattern.test(email)) {\n    return true;\n  } else {\n    return false;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] How would you write a program to find the number of prime numbers between 0 and 100? [/INST] def count_prime_num(x, y): \n  \n    prime_count = 0\n  \n    for num in range(x, y + 1): \n       \n       if num > 1: \n           for i in range(2, num): \n               if (num % i) == 0: \n                   break\n           else: \n               prime_count += 1\n  \n    return prime_count \n\nprint(count_prime_num(0, 100))</s>"
  },
  {
    "text": "<s>[INST] Build a model using scikit-learn that classifies the given text data into ‘Positive’ or ‘Negative’.\n\nThe customer service was great, and I will definitely recommend this product to others. [/INST] from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\n\n# Create arrays for the features and the label\nX = ['The customer service was great, and I will definitely recommend this product to others.'] \ny = ['Positive']\n\n# Create a CountVectorizer for parsing/counting words\ncv = CountVectorizer()\n \n# Parse the data with the vectorizer\nX = cv.fit_transform(X)\n \n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n \n# Create the model, train it, then test it\nmodel = LogisticRegression() \nmodel.fit(X_train, y_train) \nmodel.score(X_test, y_test)</s>"
  },
  {
    "text": "<s>[INST] Create a basic REST API in python that takes a string as input and returns the reversed string [/INST] from fastapi import FastAPI\n@app.get(\"/reverse-string/{string}\")\n\ndef reverse_string(string: str):\n    return string[::-1]</s>"
  },
  {
    "text": "<s>[INST] How can you count the frequency of each word in a given string?\n\nThis is a string [/INST] str = \"This is a string\" \nwords = str.split()\ncount = {} \n  \nfor word in words: \n    if word in count: \n        count[word] += 1\n    else: \n        count[word] = 1\n        \nprint(count)\n\n# Output: {'This': 1, 'is': 1, 'a': 1, 'string': 1}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL command to count the number of rows from a table ‘Orders’. [/INST] SELECT COUNT(*) FROM Orders;</s>"
  },
  {
    "text": "<s>[INST] What is a JavaScript Promise? [/INST] A JavaScript Promise is an object that represents the eventual completion of an asynchronous operation. A Promise object can be either resolved (successful) or rejected (failed). It provides a unified API for handling asynchronous operations, no matter when the operations are completed.</s>"
  },
  {
    "text": "<s>[INST] Create a tree data structure for the following information:\n\na) Naruto\nb) Sasuke\nc) Boruto\nd) Sarada [/INST] Naruto\n    /    \\\n  Sasuke  Boruto\n            \\\n             Sarada</s>"
  },
  {
    "text": "<s>[INST] Create a switch statement for the following string:\n\ninput = “cat” [/INST] switch(input) {\n    case 'cat':\n        console.log('meow'); \n        break;\n    default:\n        console.log('unknown input') \n        break;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a for-loop to iterate over a list.\n\nlist = [1, 2, 3, 4] [/INST] for i in list:\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string as an argument, reverses the characters, and returns the reversed string. [/INST] def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that converts all the characters in a string to uppercase. [/INST] function toUpperCase(string) {\n return string.toUpperCase();\n}</s>"
  },
  {
    "text": "<s>[INST] You should write a MySQL command to count how many records in the table \"users\". [/INST] SELECT COUNT(*) FROM users;</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to compute the factorial of an integer. [/INST] def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)</s>"
  },
  {
    "text": "<s>[INST] Create a C++ function that finds the frequency of each character in a string and stores in a hashtable. [/INST] #include <iostream>\n#include <unordered_map>\n\nstd::unordered_map<char, int> character_frequency(std::string str)\n{ \n    std::unordered_map<char, int> frequency; \n    for (char c : str) \n        frequency[c]++; \n    return frequency; \n}</s>"
  },
  {
    "text": "<s>[INST] You should create a Java program to implement a binary search. [/INST] public class BinarySearch \n{ \n    // Returns index of x if it is present in arr[l.. \n    // r], else return -1 \n    public int binarySearch(int arr[], int l, int r, int x) \n    { \n        if (r >= l) { \n            int mid = l + (r - l) / 2; \n  \n            // If the element is present at the \n            // middle itself \n            if (arr[mid] == x) \n                return mid; \n  \n            // If element is smaller than mid, then \n            // it can only be present in left subarray \n            if (arr[mid] > x) \n                return binarySearch(arr, l, mid - 1, x); \n  \n            // Else the element can only be present \n            // in right subarray \n            return binarySearch(arr, mid + 1, r, x); \n        } \n  \n        // We reach here when element is not present \n        // in array \n        return -1; \n    } \n  \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function that outputs the minimum and maximum ofa list of numbers.\n\nlist = [1, 3, 7, -2, 4] [/INST] def minmax(list)\n    min = list[0]\n    max = list[0]\n    for num in list[1:]:\n        if num < min:\n            min = num\n        if num > max:\n            max = num\n\n    return min, max</s>"
  },
  {
    "text": "<s>[INST] Generate valid HTML tags for a two-column table. [/INST] <table>\n    <tr>\n        <th> Column 1 </th>\n        <th> Column 2 </th>\n    </tr>\n    <tr>\n        <td> </td>\n        <td> </td>\n    </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Construct a program to parse a JSON array.\n\n[{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}] [/INST] import json\n\ndata = [{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]\n\nfor entry in data:\n    name = entry['name']\n    age = entry['age']\n    print(f'The name is {name} and age is {age}')</s>"
  },
  {
    "text": "<s>[INST] You should edit this code and make it into a working code that prints \"Hello, world!\"\n\ncout << \"Hello, World!\" [/INST] #include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL table and insert data into it. [/INST] CREATE TABLE persons (\n    firstname TEXT NOT NULL,\n    lastname TEXT NOT NULL\n);\n\nINSERT INTO persons (firstname, lastname)\nVALUES ('John', 'Doe'), ('Jane', 'Doe');</s>"
  },
  {
    "text": "<s>[INST] Generate a code snippet to sort the given array in ascending order.\n\nlet arr = [3, 5, 7, 2, 1] [/INST] let arr = [3, 5, 7, 2, 1]\narr.sort(function(a,b){return a-b});\nconsole.log(arr);</s>"
  },
  {
    "text": "<s>[INST] Identify the bug in the given code snippet.\n\nfunction double_sum(nums) {\n for (let i = 0; i <= nums.length; i++) {\n  sum += nums[i] * 2;\n }\n} [/INST] The bug in the code is that it is looping one time too many. The correct version should use a less than or equal operator ('<=') instead of a less than operator ('<') in the for loop.</s>"
  },
  {
    "text": "<s>[INST] Rewrite the given code block to make the loops more efficient\n\nlet x = 0;\nlet y = 0;\nfor (let i = 0; i < 10; i++) {\n y = y + i;\n for (let j = 0; j < 10; j++) {\n  x = x + j;\n }\n} [/INST] let x = 0;\nlet y = 0;\nfor (let i = 0; i < 10; i++) {\n y += i;\n x += (10 * i);\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a code snippet to find the highest common factor of two given numbers [/INST] function highestCommonFactor(m, n) {\n  if (m === 0 || n === 0) {\n      return 0;\n  }\n\n  let a = Math.max(m, n);\n  let b = Math.min(m, n);\n\n  while (b !== 0) {\n      let c = b;\n      b = a % b;\n      a = c;\n  }\n\n  return a;\n}</s>"
  },
  {
    "text": "<s>[INST] Output the top 3 strings from the given array that have the greatest length\n\nlet arr = [\"Pineapple\", \"Apple\",\"Banana\", \"Strawberry\", \"Grape\"] [/INST] let top3 = arr.sort((a, b) => b.length - a.length).slice(0, 3);\nconsole.log(top3); // Output: [\"Pineapple\", \"Strawberry\", \"Banana\"]</s>"
  },
  {
    "text": "<s>[INST] How do you display the contents of an array in reverse order? [/INST] The contents of an array can be displayed in reverse order by using the reverse() method or by using a for loop. \n\nFor example, to display the content of the array [1, 2, 3, 4], the following code can be used:\n\n// Using reverse()\nlet arr = [1, 2, 3, 4];\narr.reverse();\nconsole.log(arr); // Output: [4, 3, 2, 1]\n\n// Using a for loop\nlet arr = [1, 2, 3, 4];\nfor (let i = arr.length - 1; i >= 0; i--) {\n    console.log(arr[i]); // Output: 4 3 2 1\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the given code to make it more readable\n\nwhile(i <= num) {\n  output += i;\n  i++\n} [/INST] let i = 0;\nwhile(i <= num) {\n  output += i;\n  i++;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a code snippet to convert a given string to uppercase [/INST] function toUpperCase(str) {\n  return str.toUpperCase();\n}</s>"
  },
  {
    "text": "<s>[INST] Print out the 5th number of the Fibonacci sequence. [/INST] 5</s>"
  },
  {
    "text": "<s>[INST] Identify the type of the following variable:\n$$\na = 5\n$$ [/INST] The type of 'a' is an integer.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between a for loop and a while loop in Java? [/INST] The main difference between for and while loop is that for loop is used when we already know the number of times the loop should iterate, while a while loop is used when the number of iterations is not known in advance. Another difference is that for loop is more convenient for looping through arrays/collections of objects, while a while loop is used for performing more complex computations.</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary to store the key-value pairs and print out the values of the dictionary keys.\n\nmyDict = {\n    \"cat\" : \"meow\",\n    \"dog\" : \"bark\",\n    \"horse\" : \"neigh\"\n} [/INST] for key, value in myDict.items(): \n    print(value) \n\n# Output\nmeow\nbark\nneigh</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of a try-catch block in Python? [/INST] The try-catch block is used in Python to handle exceptions. It is a construct used to catch and handle any unexpected errors that may occur in a program, allowing the program to continue running instead of crashing. The statements under the try block are the ones that may raise the exception, and the except block contains code that will be executed if an error does occur. The finally block is generally used to perform clean-up operations, regardless of whether an error occurs or not.</s>"
  },
  {
    "text": "<s>[INST] Write a JUnit test case to test if the sum of two numbers is correct. [/INST] @Test\npublic void testSum(){\n    int x = 1;\n    int y = 2;\n    int expectedSum = 3;\n    int actualSum = x+y;\n \n    assertEquals(expectedSum, actualSum);\n}</s>"
  },
  {
    "text": "<s>[INST] What is the meaning of static in Java? [/INST] In Java, the static keyword is used to indicate that an entity is associated with a class rather than an instance of a class. It can be used to denote class variables, class methods and other class elements, and is also used in various access modifiers. Static members are associated with the class itself, rather than any particular instance of the class.</s>"
  },
  {
    "text": "<s>[INST] Using the given SQL command, print out all rows from the \"users\" table.\n\nSELECT * FROM users [/INST] SELECT * FROM users; \n \nThis will return all rows from the \"users\" table.</s>"
  },
  {
    "text": "<s>[INST] When should the `break` keyword be used in a loop? [/INST] The break keyword should be used in a loop when the loop needs to be terminated before it has finished executing its normal iterations. The break statement will cause the loop to exit immediately, bypassing any remaining code in the loop.</s>"
  },
  {
    "text": "<s>[INST] Given a person's name and the current time, print the difference in time from the person's birthday.\n\nname = \"John\"\ntime = datetime.datetime(2021, 3, 25, 10, 0, 0) [/INST] birthday = datetime.datetime.strptime(name + \" birthdate\", \"%Y-%m-%d\")\ntime_diff = time - birthday\nprint(\"The difference in time from \" + name + \"'s birthday is \" + str(time_diff))</s>"
  },
  {
    "text": "<s>[INST] Generate a random 2-digit number using JavaScript. [/INST] Math.floor(Math.random() * 100);</s>"
  },
  {
    "text": "<s>[INST] You are given an array of integers. Write a program to find the maximum number in this array.\n\n[10, 5, 11, 23, 9] [/INST] def max_int(arr):\n  max_val = arr[0]\n  for i in range(1, len(arr)):\n    if arr[i] > max_val:\n      max_val = arr[i]\n  return max_val\n\nprint(max_int([10, 5, 11, 23, 9]))</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve all the rows from a table called \"customers\". [/INST] SELECT * FROM customers;</s>"
  },
  {
    "text": "<s>[INST] You are given two strings. Write a function that checks whether the two strings are an anagram or not.\n\n\"listen\", \"silent\" [/INST] def is_anagram(str1, str2):\n  str1 = str1.lower()\n  str2 = str2.lower()\n  if sorted(str1) == sorted(str2):\n    return True\n  else:\n    return False\n\nprint(is_anagram('listen', 'silent'))</s>"
  },
  {
    "text": "<s>[INST] Write a function to multiply two numbers in Java.\n\n5, 8 [/INST] public static int multiply(int x, int y){\n  return x * y;\n}\n\nSystem.out.println(multiply(5, 8));</s>"
  },
  {
    "text": "<s>[INST] You are given a string of symbols. Write a program to remove all the symbols and get a valid text string.\n\n\"This , is an example string %\" [/INST] def remove_symbols(string):\n  text_string = ''\n  for c in string:\n    if c.isalpha() or c.isdigit():\n      text_string += c\n  \n  return text_string\n\nprint(remove_symbols(\"This , is an example string %\"))</s>"
  },
  {
    "text": "<s>[INST] Compute the maximum product of two integers in an array.\n\n[-4, 2, -3, 6] [/INST] def max_product(arr):\n    max1 = max(arr)\n    arr.remove(max1)\n    max2 = max(arr)\n    return max1 * max2\n\nprint(max_product([-4, 2, -3, 6]))</s>"
  },
  {
    "text": "<s>[INST] Manipulate a given list to get a single string.\n\n[\"Hello\", \"World\", \"!\"] [/INST] def create_string(arr):\n  string = ''\n  for elem in arr:\n    string += elem\n  return string\n\nprint(create_string(['Hello', 'World', '!']))</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following for loop code using a list comprehension.\n\narr = [1,2,3,4,5]\nfor i in arr:\n  arr[i] = arr[i] + 1 [/INST] arr = [x+1 for x in [1,2,3,4,5] ]\n\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] You are given a list of numbers. Write a program to check if the given list is a palindrome or not.\n\n[1, 2, 3, 2, 1] [/INST] def is_palindrome(arr):\n  rev_arr = arr[::-1]\n  if arr == rev_arr:\n    return True\n  else:\n    return False\n\nprint(is_palindrome([1, 2, 3, 2, 1]))</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python for printing a given 2D array.\n\narr = [[1,2,3], [4,5,6], [7,8,9]] [/INST] def print_2D_array(arr):\n  for row in arr:\n    for element in row:\n      print(element,end=\" \")\n    print()\n\nprint_2D_array(arr)</s>"
  },
  {
    "text": "<s>[INST] Identify the advantages of using deep learning models. [/INST] The advantages of using deep learning models include: the ability to handle large and complex datasets; the ability to achieve better generalization performance; greater accuracy than traditional machine learning algorithms; the ability to capture non-linear relationships; and improved efficiency.</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python for reversing a list.\n\nmy_list = [1,2,3,4,5] [/INST] def reverse_list (my_list):\n  return my_list[::-1]\n  \nreverse_list(my_list)</s>"
  },
  {
    "text": "<s>[INST] Describe the steps for implementing a convolutional neural network. [/INST] The steps for implementing a convolutional neural network involve selecting the network architecture, preparing the dataset, defining the features, creating the layers and connections, training the network using an optimizer, and evaluating the model’s performance.</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm for sorting a given list in ascending order.\n\nmy_list = [5,1,4,2,8] [/INST] def sort_list(my_list): \n  for i in range(len(my_list)):\n    for j in range(i+1, len(my_list)):\n      if my_list[i] > my_list[j]: \n        my_list[i], my_list[j] = my_list[j], my_list[i]\n  return my_list\n\nsort_list(my_list)</s>"
  },
  {
    "text": "<s>[INST] Generate an array of 20 random numbers between 0 and 10 (inclusive). [/INST] import random \n  \narr = [] \nfor i in range(20): \n    arr.append(random.randint(0, 10))\n    \narr</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet for generating a unique identifier for a particular object. [/INST] import uuid\n\ndef generate_id(object): \n  return uuid.uuid4()</s>"
  },
  {
    "text": "<s>[INST] Describe the process of web scraping. [/INST] Web scraping is the process of extracting data from websites using automated software. It involves sending a request to the web server, processing the HTML, locating the relevant data, and saving it. The process usually involves using web crawlers and parsing data using regular expressions or custom logic.</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python for calculating the area of a circle. [/INST] def area_circle(r):\n  return 3.14 * r**2</s>"
  },
  {
    "text": "<s>[INST] Construct an if-else statement in Java for printing the square root of a given number. [/INST] if (x >= 0) {\n  System.out.println(Math.sqrt(x));\n} else {\nSystem.out.println(\"The number is negative\");\n}</s>"
  },
  {
    "text": "<s>[INST] Write an API endpoint to get the average annual temperature of a given city. [/INST] @app.route(\"/get_average_annual_temp/<city>\", methods=['GET'])\ndef get_average_annual_temp(city):\n    # Get the average annual temperature of the given city\n    temp = get_average_annual_temperature(city)\n    # Return the average temperature in json format\n    return jsonify({'temp': temp})</s>"
  },
  {
    "text": "<s>[INST] Generate a string of 5 random characters from the characters A through Z. [/INST] import random\n\ndef random_string():\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    random_string = ''.join(random.choice(chars) for i in range(5))\n    return random_string\n\nprint(random_string())</s>"
  },
  {
    "text": "<s>[INST] Create a React component that renders the provided state data in a table\n\nstate = {\n  data: [\n    { name: 'John', age: 20 },\n    { name: 'Alice', age: 18 }\n  ]\n} [/INST] import React from 'react';\n\nclass Table extends React.Component {\n  render() {\n    const state = this.props.state;\n    const dataRows = state.data.map(rowData => (\n      <tr>\n        <td>{rowData.name}</td>\n        <td>{rowData.age}</td>\n      </tr>\n    ));\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Age</th>\n          </tr>\n        </thead>\n        <tbody>{dataRows}</tbody>\n      </table>\n    );\n  }\n}\nexport default Table;</s>"
  },
  {
    "text": "<s>[INST] Create a CSS animation to apply an interesting effect to a given element. [/INST] element {\n  -webkit-animation: myAnimation 2s ease-in forwards;    \n  animation: myAnimation 2s ease-in forwards;\n}\n\n@-webkit-keyframes myAnimation {\n  from {\n    transform: scale(1);\n  }\n  to {\n    transform: scale(1.5);\n  }\n}\n@keyframes myAnimation {\n  from {\n    transform: scale(1);\n  }\n  to {\n    transform: scale(1.5);\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Build a flask server to handle a GET request to the route '/test'. [/INST] from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/test', methods=['GET'])\ndef test():\n    return \"This is a test\"\n\nif __name__ == '__main__':\n    app.run()</s>"
  },
  {
    "text": "<s>[INST] Train a sentiment classification model on the given data.\n\nTraining Data:\n\nI love this new phone!  Positive\nThis phone is terrible!  Negative [/INST] import nltk \nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# Preprocess data\ntraining_data = [('I love this new phone!', 'positive'), ('This phone is terrible!', 'negative')]\nall_words = []\ndocuments = []\nfor (sent, category) in training_data:\n    words = word_tokenize(sent)\n    words = [word.lower() for word in words if word not in stopwords.words()]\n    documents.append((words, category))\n    all_words.extend(words)\n\n# Create feature set\ndistinct_words = set(all_words)\nfeature_set = [({word: (word in tokenized_sentence) for word in distinct_words}, category) for (tokenized_sentence, category) in documents]\n\n# Train model\nclassifier = nltk.NaiveBayesClassifier.train(feature_set)</s>"
  },
  {
    "text": "<s>[INST] Create a parameterized SQL query to get all records from a table where the given field has a value greater than the given input.\n\nFields: age\nInput: 20 [/INST] SELECT * FROM table_name WHERE age > 20;</s>"
  },
  {
    "text": "<s>[INST] Given a Python list, write the code to flatten it\n\nl1=[1,2,3,[4,[5,6]]] [/INST] def flatten(nums):\n    flattened_list = []\n    for elem in nums:\n        if type(elem) == list:\n            flattened_list.extend(flatten(elem))\n        else:\n            flattened_list.append(elem)\n    return flattened_list\n\nflatten(l1)</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes two parameters and returns a list containing those two numbers [/INST] def make_list(a, b):\n  return [a, b]</s>"
  },
  {
    "text": "<s>[INST] Add a new element to the end of a list.\n\nmylist=[2,5,7] [/INST] mylist.append(9)</s>"
  },
  {
    "text": "<s>[INST] Write a function that prints a message saying 'Hello world!' [/INST] def say_hello():\n\tprint(\"Hello world!\")</s>"
  },
  {
    "text": "<s>[INST] Write a sorting algorithm that sorts an array using a bubble sort.\n\nnums=[3,4,1,2,9,6] [/INST] def bubble_sort(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums</s>"
  },
  {
    "text": "<s>[INST] Create a list containing a given number of random numbers. [/INST] import random\n\ndef random_list(length):\n\trand_list = []\n\tfor i in range(length):\n\t\trand_list.append(random.randint(0,100))\n\treturn rand_list</s>"
  },
  {
    "text": "<s>[INST] Using the existing code as guidance, add a 2nd player and 2nd input field to the game.\n\nplayername1=input(\"What is your name? \")\nplayer_score1=0\n\nif turn==1:\n\tplayer_score1+=1\n\nprint(\"It is now \" + playername1 + \" turn. You have \" + str(player_score1) + \" points\") [/INST] playername1=input(\"What is your name? \")\nplayername2=input(\"What is your opponent's name? \")\nplayer_score1=0\nplayer_score2=0\n\nif turn==1:\n\tplayer_score1+=1\n\nif turn==2:\n\tplayer_score2+=1\n\nprint(\"It is now \" + playername1 + \"'s turn. You have \" + str(player_score1) + \" points\")\nprint(\"It is now \" + playername2 + \"'s turn. You have \" + str(player_score2) + \" points\")</s>"
  },
  {
    "text": "<s>[INST] Using the existing code as a guide, construct a function to validate user input.\n\nusername=input(\"Enter your username: \")\npassword=input(\"Enter your password: \") [/INST] def validate_input(username, password):\n\tif len(username) < 5 or len(username) > 80:\n\t\treturn False\n\tif len(password) < 8 or len(password) > 16:\n\t\treturn False\n\treturn True</s>"
  },
  {
    "text": "<s>[INST] Create a function to generate a random integer between two given numbers. [/INST] import random\ndef rand_int(low, high):\n\treturn random.randint(low,high)</s>"
  },
  {
    "text": "<s>[INST] Analyze the following text and produce the sentiment score.\n\nText: I am extremely disappointed with the customer service I received. [/INST] Sentiment score: -2.</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that returns all permutations of a string. [/INST] def get_all_permutations(string):\n \n  if len(string) == 1:\n    return [string]\n \n  permutations = []\n  for index, char in enumerate(string):\n    slice_string  = string[:index] + string[index+1:]\n    for permutation in get_all_permutations(slice_string):\n      permutations.append(char + permutation)\n\n  return permutations</s>"
  },
  {
    "text": "<s>[INST] Given a character sequence, find the longest palindromic substring.\n\nsequence: madam [/INST] madam</s>"
  },
  {
    "text": "<s>[INST] Debug the following code to make it compile properly.\n\ndef addNumbers(num1, num2)\n  return num1 + num2 [/INST] def addNumbers(num1, num2):\n  return num1 + num2</s>"
  },
  {
    "text": "<s>[INST] Given a positive integer, find the sum of its digits. [/INST] def findSum(num): \n    res = 0\n    num = str(num)\n    for i in range(0, len(num)): \n        res = res + int(num[i]) \n    \n    return res</s>"
  },
  {
    "text": "<s>[INST] Write a loop in React that renders a list of numbers from 1 - 10. [/INST] render() {\n  const numbers = [1,2,3,4,5,6,7,8,9,10];\n  return (\n    <ul>\n      {numbers.map(number => <li>{number}</li>)}\n    </ul>\n  );\n}</s>"
  },
  {
    "text": "<s>[INST] Find the greatest common divisor of these two numbers.\n\n9 and 15 [/INST] 3</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of Generative Adversarial Networks (GANs). [/INST] Generative Adversarial Networks (GANs) are a type of deep neural network that are composed of two sub-networks; a generative network and a discriminative network. The generative network produces samples such as images, audio, or text that try to fool the discriminator network, which is trained to recognize real data from generated data. The two networks are trained together in an adversarial setting, in which the generator attempts to generate data that is indistinguishable from real data and the discriminator tries to distinguish real data from generated data.</s>"
  },
  {
    "text": "<s>[INST] Write a jQuery code snippet to retrieve the value of an input field with an id of \"name\". [/INST] $(\"#name\").val();</s>"
  },
  {
    "text": "<s>[INST] Implement the following algorithm in Java.\n\n// Bubble sort algorithm \nfor i in 0 to n-1 \n  for j in 0 to n-i-1 \n    if array[j] > array[j+1] \n      swap array[j] and array[j+1] [/INST] public void bubbleSort(int[] arr){\n  for (int i = 0; i < arr.length - 1; i++) {\n    for (int j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        int temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the term \"backtracking\". [/INST] Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, that incrementally builds candidates to the solutions and abandons each partial candidate c (\"backtracks\") as soon as it determines that c cannot possibly be completed to a valid solution.</s>"
  },
  {
    "text": "<s>[INST] Create an array of strings, of size 5, by taking the string input from the user.\n\n\"hello\", \"world\", \"this\", \"is\", \"a\" [/INST] arr = [\"hello\", \"world\", \"this\", \"is\", \"a\"]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to convert an array of strings to a comma-separated string.\n\narr = [\"this\", \"is\", \"a\", \"test\"] [/INST] //Function to convert an array of strings to a comma-separated string\nfunction arr_to_csv(arr) {\n    return arr.join(\",\");\n}\n\n// Testing code\nconsole.log(arr_to_csv(arr));</s>"
  },
  {
    "text": "<s>[INST] Write code for displaying the Fibinacci sequence up to the nth term. [/INST] def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b</s>"
  },
  {
    "text": "<s>[INST] Create an array of size n filled with the string \"hello\". [/INST] def fillWithHello(n):\n    arr = [] \n    for i in range(0, n): \n        arr.append(\"hello\") \n    return arr</s>"
  },
  {
    "text": "<s>[INST] Re-write the following function to use list comprehension.\n\ndef negative_list(numbers):\n    negative = []\n    for num in numbers:\n        if num < 0:\n            negative.append(num)\n    return negative [/INST] def negative_list(numbers):\n    return [num for num in numbers if num < 0]</s>"
  },
  {
    "text": "<s>[INST] Convert the following function to a lambda expression\n\ndef power_of_two(x):\n    return x ** 2 [/INST] power_of_two = lambda x : x ** 2</s>"
  },
  {
    "text": "<s>[INST] Convert the following nested for loop into a single line list comprehension.\n\na = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\nresult = []\nfor i in a:\n    for j in b:\n        result.append((i, j)) [/INST] result = [(i,j) for i in a for j in b]</s>"
  },
  {
    "text": "<s>[INST] Pre-process the following dataset and convert it into a tabular format using Pandas.\n\ndata = [{\"name\": \"john\", \"age\": 20, \"location\": \"New York\"},\n        {\"name\": \"sarah\", \"age\": 30, \"location\": \"Los Angeles\"}] [/INST] import pandas as pd\n\ndf = pd.DataFrame(data)\n\n# Create tabular format \n df = df[[\"name\", \"age\", \"location\"]]</s>"
  },
  {
    "text": "<s>[INST] Find all substrings from a given string. [/INST] def find_substring(str):\n    substrings = []\n    for length in range(1, len(str)+1):\n        for start in range(len(str)- length + 1):\n            substrings.append(str[start:start+length])\n    return substrings</s>"
  },
  {
    "text": "<s>[INST] Softmax a list of numbers and then sum the output.\n\n[1, 2, 3] [/INST] def softmax(arr): \n    a = np.exp(arr)\n    return a / np.sum(a) \ndef sum_softmax(arr): \n    return np.sum(softmax(arr))</s>"
  },
  {
    "text": "<s>[INST] Toast a Python function to swap the values of two given variables.\n\na = 10, b= 20 [/INST] def swap(a, b): \n    a, b = b, a \n    return (a,b)</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the Levenshtein distance between two strings\n\nstr1 = \"geeks\", str2 = \"geek\" [/INST] def lev_dist(str1, str2):\n    if len(str1) < len(str2):\n        return lev_dist(str2, str1)\n    \n    if len(str2) == 0:\n        return len(str1)\n \n    previous_row = range(len(str2) + 1)\n    for i, c1 in enumerate(str1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(str2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to sort a given array in ascending order using Bubble sort. [/INST] def bubble_sort(arr): \n    # length of the array \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]</s>"
  },
  {
    "text": "<s>[INST] Create a program to check if two given strings are a rotation of each other.\n\nstring1 = \"abcd\", string2= \"cdab\" [/INST] def isRotation(s1, s2):   \n    if len(s1) != len(s2): \n        return False\n  \n    temp = s1 + s1 \n    return (temp.count(s2) > 0)</s>"
  },
  {
    "text": "<s>[INST] Deploy a Docker container to Heroku.\n\nHeroku account details [/INST] Log in to Heroku using the account details provided.\nUse the command \"heroku container:push web -a [app-name]\" to deploy the container to Heroku. This command will build and push the Docker container to your Heroku app. You can monitor the progress of the deployment in the ‘Activity’ tab.</s>"
  },
  {
    "text": "<s>[INST] Predict the sentiment of a given sentence.\n\nThis movie was fairly dull. [/INST] The sentiment of the statement is negative.</s>"
  },
  {
    "text": "<s>[INST] Create a neural network in Python to recognize handwriting.\n\nMNIST hand-written digit dataset [/INST] The code to create a neural network in Python to recognize handwriting should consist of several parts. These parts include importing the MNIST dataset, preprocessing the data, building the neural network model, training the network, evaluting the network's performance, and improving the accuracy using hyperparameters.</s>"
  },
  {
    "text": "<s>[INST] Design an HTML page with a table of products and their prices.\n\nTable with 5 products and their prices [/INST] <html>\n <head>\n  <title>Product Prices</title>\n </head>\n <body>\n  <h1>Product Prices</h1>\n  <table>\n   <tr>\n    <th>Product Name</th><th>Price</th>\n   </tr>\n   <tr>\n    <td>Laptop</td><td>1000</td>\n   </tr>\n   <tr>\n    <td>Keyboard</td><td>50</td>\n   </tr>\n   <tr>\n    <td>Monitor</td><td>200</td>\n   </tr>\n   <tr>\n    <td>Mouse</td><td>30</td>\n   </tr>\n   <tr>\n    <td>Headphones</td><td>50</td>\n   </tr>\n  </table>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a CSS selector to select all paragraph elements with a class of \"highlight\". [/INST] p.highlight {\n    /* CSS styles */\n}</s>"
  },
  {
    "text": "<s>[INST] Determine the average of 3 numbers.\n\n30, 20, 60 [/INST] The average of the 3 numbers is 36.</s>"
  },
  {
    "text": "<s>[INST] Develop a machine learning algorithm to predict stock prices.\n\nHistorical stock prices [/INST] The algorithm should include parts like data preprocessing, feature extraction, selecting the right model, hyperparameter optimization and evaluation.</s>"
  },
  {
    "text": "<s>[INST] Identify the most frequent word in a given sentence.\n\nThis is a beautiful summer day [/INST] The most frequent word in the sentence is \"a\".</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to generate a random whole number. [/INST] function getRandomNumber() {\n return Math.floor(Math.random() * 100);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a PHP page to add two numbers. [/INST] <html>\n <head>\n  <title>Add two numbers</title>\n </head>\n <body>\n  <?php\n   if (isset($_POST['add'])) {\n   $num1 = $_POST['num1'];\n   $num2 = $_POST['num2'];\n   $sum = $num1 + $num2;\n   ?>\n    <p>The sum of <?php echo $num1; ?> and <?php echo $num2; ?> is <?php echo $sum; ?></p>\n   <?php\n   } else {\n   ?>\n   <form action=\"add.php\" method=\"post\">\n    <label>Enter first number:</label>\n    <input type=\"text\" name=\"num1\">\n    <br>\n    <label>Enter second number:</label>\n    <input type=\"text\" name=\"num2\">\n    <input type=\"submit\" name=\"add\" value=\"Add\">\n   </form>\n   <?php\n   }\n  ?>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write pseudo code for finding the maximum element in an array. [/INST] START\nSET max_element to 0\nLOOP through array\n IF current element is greater than max_element\n SET max_element to current element\nEND LOOP\nPRINT maximum element\nEND</s>"
  },
  {
    "text": "<s>[INST] How would you modify the following code to print the square of each number in the given list?\n\nnums = [1, 2, 3, 4] [/INST] nums = [1, 2, 3, 4]\n\nfor i in range(len(nums)):\n    nums[i] = nums[i] * nums[i]\n\nprint(nums) # [1, 4, 9, 16]</s>"
  },
  {
    "text": "<s>[INST] What does the following code do?\n\ndef division(num1, num2):\n    return num1 / num2 [/INST] The code defines a function called division which takes two numbers as arguments and returns the result of dividing the first number by the second number.</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string of numbers separated by commas and returns the sum of all the numbers.\n\n\"1,2,3,4\" [/INST] def sum_numbers(nums): \n    nums = nums.split(',')\n    total = 0\n  \n    # Traverse the string and add all elements \n    # of it to the total. \n    for i in range(len(nums)): \n        total += int(nums[i]) \n  \n    # return total \n    return total \n\nprint(sum_numbers(\"1,2,3,4\")) # 10</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes the string of the current time and returns the time in minutes.\n\n\"12:30PM\" [/INST] def convert_to_minutes(time): \n    # Split the time into hours and minutes \n    h, m = map(int, time.split(':'))\n\n    # Add 12 to the hours if the time is PM \n    if time.endswith('PM'): \n        h += 12\n    return h * 60 + m\n\nprint(convert_to_minutes(\"12:30PM\")) # 750</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two strings and returns a new string containing the first three characters of each string combined.\n\n\"Hello\"\n\"World\" [/INST] def combine_first_three(string1, string2): \n    # Get the first three characters of each string \n    string1 = string1[:3]\n    string2 = string2[:3]\n\n    # Combine the first three characters of each string \n    combined_string = string1 + string2\n\n    # Return the new string \n    return combined_string\n\nprint(combine_first_three(\"Hello\", \"World\")) # HelWor</s>"
  },
  {
    "text": "<s>[INST] How would you modify the following code to make it more efficient?\n\ndef find_word(word, text):\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\" [/INST] def find_word(word, text):\n    # Use the 'in' operator to check if the word is in the text\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"\n\n# Use the 'count' method to check if the word is in the text more efficiently\nif text.count(word) > 0:\n    return \"Word found\"\nelse:\n    return \"Word not found\"</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a list of numbers and returns the index of the largest number.\n\n[2, 5, 12, 3, 4] [/INST] def find_largest_number(nums): \n    # Initialize the index of the largest number.\n    largest_index = 0\n\n    # Loop through the list of numbers and\n    # compare each number to the other. \n    # Update the index of the largest number. \n    for i in range(len(nums)):\n        if nums[i] > nums[largest_index]:\n            largest_index = i\n    \n    # Return the index of the largest number.\n    return largest_index\n\nprint(find_largest_number([2, 5, 12, 3, 4])) # 2</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a sentence and returns the string with all occurrences of the longest word removed.\n\n\"This is a very long sentence\" [/INST] def remove_longest_word(sentence): \n    # Split the sentence into words \n    words = sentence.split(' ')\n\n    # Find the longest word \n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word): \n            longest_word = word \n\n    # Remove all occurrences of the longest word\n    new_sentence = [] \n    for word in words:\n        if word != longest_word: \n            new_sentence.append(word) \n    \n    # Join the list back into a string and return it \n    return \" \".join(new_sentence)\n\nprint(remove_longest_word(\"This is a very long sentence\")) # This is a sentence</s>"
  },
  {
    "text": "<s>[INST] Write a database query to retrieve the names of all authors. [/INST] SELECT name \nFROM authors;</s>"
  },
  {
    "text": "<s>[INST] Build a regular expression to check if a string only contains numbers. [/INST] ^[0-9]+$</s>"
  },
  {
    "text": "<s>[INST] You are given a list of items. Output a list of items and their respective frequencies.\n\n[1,2,2,4,5,2,3,4,5,6] [/INST] 1: 1\n2: 3\n3: 1\n4: 2\n5: 2\n6: 1</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop to show the multiplication table of 3. [/INST] for(i=1;i<=10;i++) {\n  console.log(3 + \" x \" + i + \" = \" + (3 * i));\n}</s>"
  },
  {
    "text": "<s>[INST] Create a basic neural network model to distinguish between cats and dogs. [/INST] Model Building Code:\nmodel = Sequential([\n    Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    MaxPooling2D(2,2),\n    Conv2D(64, (3,3), activation='relu'),\n    MaxPooling2D(2,2),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])</s>"
  },
  {
    "text": "<s>[INST] Read the given code block and debug it.\n\ndef main():\n print(\"Hey I'm here\")\n if n == 0: \n  print(\"Hey I'm there\")\nmain() [/INST] Error: n is not defined.\n\nThe given code is trying to use the variable n, which is not declared. To fix this, it should be declared before the if statement. The modified code is as follows:\n\ndef main():\n print(\"Hey I'm here\")\n n = 0\n if n == 0: \n  print(\"Hey I'm there\")\nmain()</s>"
  },
  {
    "text": "<s>[INST] Find the closest decimal approximation of 0.875. [/INST] 0.88</s>"
  },
  {
    "text": "<s>[INST] Write a Java code to calculate the maximum value in an array. [/INST] public static int getMax(int[] array) {\n  int max = array[0];\n  for (int i=1; i < array.length; i++) {\n    if (array[i] > max) {\n        max = array[i];\n    }\n  }\n  return max;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a loop to output all the elements from a list.\n\n['a', 'b', 'c', 'd'] [/INST] for i in range(len(arr)):\n    print(arr[i])</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to detect if a string is a palindrome or not. [/INST] def isPalindrome(s): \n    reversedString = s[::-1] \n  \n    if (s == reversedString): \n        return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Provide a function to find the length of a string. [/INST] def length(s):\n    i = 0\n    for ch in s:\n        i += 1\n    return i</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to get the desired output.\n\nfor i in range(1, 7):\n    for j in range(1, i):\n        print(j) [/INST] for i in range(1, 7):\n    for j in range(1, i+1):\n        print(j, end=' ')\n    print()</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes in two strings as input and outputs True if they are anagrams, False otherwise.\n\ns1 = “silent”\ns2 = “listen” [/INST] def anagrams(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n    s1_arr.sort()\n    s2_arr.sort()\n    for i in range(len(s1_arr)):\n        if s1_arr[i] != s2_arr[i]:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Generate a sentence using the given array of words:\n\narr = ['This', 'is', 'a', 'sentence'] [/INST] This is a sentence.</s>"
  },
  {
    "text": "<s>[INST] Swap the contents of two variables.\n\na = 10\nb = 15 [/INST] a, b = b, a</s>"
  },
  {
    "text": "<s>[INST] Generate a function which will validate a phone number using regular expression. [/INST] def validate_phone(phone_number):\n    regex = '^\\+?(\\d[\\d-. ]+)?(\\([\\d-. ]+\\))?[\\d-. ]+\\d$'\n    if re.match(regex, phone_number):\n        return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Modify the given code to multiply two n x n matrices.\n\ndef multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n): \n            result[i][j] = 0 [/INST] def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += m1[i][k] * m2[k][j]\n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a function to return the index of an item in an array.\n\narr = [1, 2, 3, 4, 5]\nx = 4 [/INST] def index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Generate a list that has the all even numbers between 1 and 50, inclusive. [/INST] even_nums_list = [x for x in range(1,51) if x % 2 == 0]</s>"
  },
  {
    "text": "<s>[INST] Reverse the string given in the input\n\nHello world [/INST] s = \"Hello world\" \ns = s[::-1] \nprint(s)</s>"
  },
  {
    "text": "<s>[INST] Create a class that creates a stack object and implements push and pop functions [/INST] class Stack: \n\tdef __init__(self): \n\t\tself.stack = [] \n\n\t# This method adds an element at the top of the stack \n\tdef push(self, item): \n\t\tself.stack.append(item) \n \n\t# This method removes the topmost element and returns it \n\tdef pop(self): \n\t\tif self.is_empty(): \n\t\t\treturn None\n\t\treturn self.stack.pop() \n  \n\t# This method returns the topmost element without removing it \n\tdef peek(self): \n\t\tif self.is_empty(): \n\t\t\treturn None\n\t\treturn self.stack[-1] \n  \n\t# This method returns true or false depending on whether the stack is empty or not \n\tdef is_empty(self): \n\t\treturn len(self.stack) == 0</s>"
  },
  {
    "text": "<s>[INST] Implement the code in the input to the output\n\ndef do_something(data):\n    # TODO: Your code here\n    pass [/INST] def do_something(data):\n    # Your code here\n    result = 1\n    for num in data:\n        result *= num\n    return result</s>"
  },
  {
    "text": "<s>[INST] Find the minimum of two given numbers.\n\n4, 6 [/INST] def min_two(a, b):\n  if a < b:\n    return a\n  else:\n    return b\n\nmin_val = min_two(4, 6)\nprint(min_val)</s>"
  },
  {
    "text": "<s>[INST] Sort the given array using insertion sort\n\n[5, 1, 4, 2, 8] [/INST] def insertion_sort(arr):\n    \"\"\"\n    Sort given array using insertion sort\n    \"\"\"\n    # Traverse through the array \n    for i in range(1, len(arr)): \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i - 1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n    return arr\n\narr = [5, 1, 4, 2, 8]\nsorted_arr = insertion_sort(arr)\nprint(sorted_arr)</s>"
  },
  {
    "text": "<s>[INST] Generate a list comprehension that has the multiples of 3 between 0 and 30 [/INST] multiples_of_3 = [x for x in range(0, 31) if x % 3 == 0]</s>"
  },
  {
    "text": "<s>[INST] Return the index of a given value in a list.\n\n[1,2,3], 3 [/INST] def find_index(lst, value):\n    \"\"\"\n    Return the index of a given value in a list.\n    \"\"\"\n    for i, v in enumerate(lst):\n        if v == value:\n            return i\n    return -1\n\nlst = [1,2,3]\nval = 3\nfind_index(lst, val)</s>"
  },
  {
    "text": "<s>[INST] Create a set of webhook functions in Node.js [/INST] /* Node.js webhook functions */\n\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\n\n// Init express\nconst app = express();\n\n// Add body parser\napp.use(bodyParser.json());\n\n// Create webhook functions\nconst webhooks = {\n  // Create a webhook for an event\n  onEvent: (req, res) => {\n    // Handle request\n  },\n  // Create a webhook for an action\n  onAction: (req, res) => {\n    // Handle request\n  },\n  // Create a webhook for a job\n  onJob: (req, res) => {\n    // Handle request\n  }\n};\n\n// Add webhook handlers\nObject.keys(webhooks).forEach(hook => {\n  app.post(`/hooks/${hook}`, webhooks[hook]);\n});\n\n// Start server\napp.listen(3000);</s>"
  },
  {
    "text": "<s>[INST] Return a new array after removing duplicates from a given array.\n\n[1, 2, 3, 2, 3, 4] [/INST] def remove_duplicates(arr):\n    \"\"\"\n    Return a new array after removing duplicates from a given array.\n    \"\"\"\n    new_arr = []\n    for num in arr:\n        if num not in new_arr:\n            new_arr.append(num)\n    return new_arr\n\narr = [1, 2, 3, 2, 3, 4]\nnew_arr = remove_duplicates(arr)\nprint(new_arr)</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to select all records from a table [/INST] SELECT * FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Implement a non-recursive algorithm to compute the factorial of a given number\n\n7 [/INST] def factorial(n): \n    res = 1 \n    # Calculate value of \n    # factorial in for loop \n    for i in range(2,n+1): \n        res = res * i \n    return res \n\nn = 7\nprint(\"Factorial of\",n,\"is\",factorial(n))</s>"
  },
  {
    "text": "<s>[INST] Compute the sum of two given lists\n\n[2,3,4], [1,2,3] [/INST] def sum_lists(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\nlst1 = [2,3,4]\nlst2 = [1,2,3]\nsum_lst = sum_lists(lst1, lst2)\nprint(sum_lst)</s>"
  },
  {
    "text": "<s>[INST] Construct a class to represent a student [/INST] class Student():\n  def __init__(self, first_name, last_name, email, street, city, state, zip_code):\n    self.first_name = first_name\n    self.last_name = last_name\n    self.email = email\n    self.street = street\n    self.city = city\n    self.state = state\n    self.zip_code = zip_code\n  \n  def change_email(self, new_email):\n    self.email = new_email</s>"
  },
  {
    "text": "<s>[INST] Create a function to compute the square root of a given number\n\n9 [/INST] def sqrt(n):\n    \"\"\"\n    Compute the square root of a given number\n    \"\"\"\n    r = n\n    while r*r > n:\n        r = (r + n/r) // 2\n    return r\n\nn = 9\nval = sqrt(n)\nprint(val)</s>"
  },
  {
    "text": "<s>[INST] Create a method that prints all elements of an array\n\n[1,2,3] [/INST] def print_elements(arr):\n    \"\"\"\n    Print all elements of an array.\n    \"\"\"\n    for num in arr:\n        print(num)\n\narr = [1,2,3]\nprint_elements(arr)</s>"
  },
  {
    "text": "<s>[INST] Given a string ``word``, write code to return the third character in the string.\n\nword = \"hello\" [/INST] third_character = word[2] # the third character is 'l'</s>"
  },
  {
    "text": "<s>[INST] Replace the \"TODO\" placeholder in the following python code.\n\ndef add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    # TODO [/INST] def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    return a + b</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the value of Pi rounded to the 3rd decimal point. [/INST] def find_pi():\n    pi = 3.141\n    return round(pi, 3) # rounded to the 3rd decimal point</s>"
  },
  {
    "text": "<s>[INST] Rearrange the following code to print out the list elements in reverse order.\n\ncolors = [\"red\", \"green\", \"blue\"] [/INST] colors = [\"red\", \"green\", \"blue\"]\ncolors.reverse()\nfor color in colors:\n    print(color)</s>"
  },
  {
    "text": "<s>[INST] Find the difference between the two dates\n\nimport datetime\ndate1 = datetime.date(2020, 5, 15)\ndate2 = datetime.date(2020, 4, 15) [/INST] diff = date1 - date2\ndifference = diff.days # difference = 30 days</s>"
  },
  {
    "text": "<s>[INST] How would you find the maximum number in a list of length 5?\n\nlist_nums = [1, 4, 7, 2, 9] [/INST] maximum_num = max(list_nums) # maximum_num = 9</s>"
  },
  {
    "text": "<s>[INST] Write a function to multiply two given numbers and return the product.\n\nnum1 = 5\nnum2 = 8 [/INST] def multiply(num1, num2):\n    '''This function multiplies two given numbers and returns the product.'''\n    return num1 * num2 # returns 40</s>"
  },
  {
    "text": "<s>[INST] Retrieve the elements at indexes 2 and 5 in the list.\n\nlist_nums = [1, 4, 7, 2, 9] [/INST] elements = [list_nums[2], list_nums[5]] # elements = [7, 9]</s>"
  },
  {
    "text": "<s>[INST] Using the comment as a guide, convert the following code from a for loop to a while loop.\n\ndata_list = [1, 3, 5, 7, 9]\n\n# Loops through the data_list and prints out all elements\nfor element in data_list:\n    print(element) [/INST] data_list = [1, 3, 5, 7, 9]\n\n# Loops through the data_list and prints out all elements\ni = 0\nwhile i < len(data_list):\n    print(data_list[i])\n    i += 1</s>"
  },
  {
    "text": "<s>[INST] Implement find_difference() to calculate the absolute difference between two integers.\n\ninput_int1 = 5\ninput_int2 = 9 [/INST] def find_difference(input_int1, input_int2):\n    '''This function calculates the absolute difference between two integers.'''\n    return abs(input_int1 - input_int2) # returns 4</s>"
  },
  {
    "text": "<s>[INST] How would you find the number of occurrences of a particular character in a given string?\n\nstring = \"hellohowareyou\"\nchar = 'o' [/INST] count_char = string.count(char) # count_char = 2</s>"
  },
  {
    "text": "<s>[INST] Create a new list from an existing list with no duplication.\n\nlist_int = [4, 7, 4, 8, 6, 7] [/INST] new_list_ints = list(set(list_int)) # new_list_ints = [4, 7, 8, 6]</s>"
  },
  {
    "text": "<s>[INST] How would you output the average value of a given list of numbers?\n\nlist_int = [2, 7, 15, 25] [/INST] avg = sum(list_int) / len(list_int) # avg = 11.5</s>"
  },
  {
    "text": "<s>[INST] Given a list of strings, write a program to return all strings with first character as 'c'.\n\nlist_strings = [\"cat\", \"dog\", \"cow\", \"duck\"] [/INST] required_strings = []\n\nfor string in list_strings:\n    if string[0] == 'c':\n        required_strings.append(string)\n    \n# required_strings = [\"cat\", \"cow\"]</s>"
  },
  {
    "text": "<s>[INST] Merge two sorted lists into a single sorted list\n\nlist1 = [1,3,5,7] \nlist2 = [2,4,6,8] [/INST] def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\n    # Iterate through the lists until all elements have been merged\n    while (i < len(list1) and j < len(list2)):\n        # If the element from the first list is smaller, add it \n        # to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i+=1\n        # Otherwise add the element from the second list\n        else:\n            merged_list.append(list2[j])\n            j+=1\n \n    # Append any remaining elements from the first list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i+=1\n \n    # Append any remaining elements from the second list\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j+=1\n \n    return merged_list</s>"
  },
  {
    "text": "<s>[INST] Convert this SQL query into MongoDB\n\nSELECT DISTINCT\n    user_name\nFROM\n    user_login_history\nWHERE\n    user_id >= 1000 [/INST] db.user_login_history.distinct(\"user_name\", { \"user_id\" : { $gte : 1000 } })</s>"
  },
  {
    "text": "<s>[INST] Edit this HTML code so that the header text is represented correctly.\n\n<h2>This is a Heading</h2> [/INST] <h2><span style=\"font-weight:bold;\">This is a Heading</span></h2></s>"
  },
  {
    "text": "<s>[INST] Create a list of all the prime numbers between 3 and 20 [/INST] [3, 5, 7, 11, 13, 17, 19]</s>"
  },
  {
    "text": "<s>[INST] Find the length of the longest substring of a string\n\ntext = \"Hello, world!\" [/INST] length = 6 # The longest substring is \"Hello,\" which has 6 characters.</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary mapping each character in a string to its frequency\n\ntext = \"Hello, world!\" [/INST] char_freq = {\n    'H': 1,\n    'e': 1,\n    'l': 2,\n    'o': 2,\n    ',': 1,\n    ' ': 1,\n    'w': 1,\n    'r': 1,\n    'd': 1,\n    '!': 1\n}</s>"
  },
  {
    "text": "<s>[INST] Make a jQuery call to retrieve data from a MySQL database [/INST] $.ajax({\n    url: '<phpfile>.php',\n    method: 'GET',\n    dataType: 'json',\n    success: function(response){\n        //handle the response\n    }\n})</s>"
  },
  {
    "text": "<s>[INST] Write a code to create a 2-D array with size (4,4) and fill it with 1's. [/INST] arr = [[1 for _ in range(4)] for _ in range(4)]</s>"
  },
  {
    "text": "<s>[INST] How can you declare a new array in Java? [/INST] In Java, you can declare a new array using the following syntax: int[] arrayName = new int[arraySize];</s>"
  },
  {
    "text": "<s>[INST] Write a C++ code snippet to search for a given value (45) in an array.\n\narr = [12, 4, 17, 6, 21, 45, 33] [/INST] int value = 45;\nbool found = false;\n\nfor(int i = 0; i < arr.length; i++){\n    if(arr[i] == value){\n        found = true;\n        break;\n    }\n}\n\nif(found)\n   cout << \"Value found in the array\" << endl;\nelse\n   cout << \"Value not found in the array\" << endl;</s>"
  },
  {
    "text": "<s>[INST] Write a code to compute the sum of the elements in a given array of integers.\n\narr = [2, 4, 6, 8] [/INST] int sum = 0;\nfor (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code in Java to replace all the occurrences of a given value (5) in an array with a new value (10).\n\narr = [2, 5, 1, 5, 8] [/INST] for (int i = 0; i < arr.length; i++) { \n    if (arr[i] == 5) \n        arr[i] = 10; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that extracts information from a table with columns (Id, Name, Age). [/INST] SELECT Id, Name, Age FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] How can you remove an element from a JavaScript array? [/INST] In JavaScript, you can remove an element from an array using the splice() method. For example: myArray.splice(index,1);</s>"
  },
  {
    "text": "<s>[INST] What is the cut-off frequency of a high-pass filter? [/INST] The cut-off frequency of a high-pass filter is the frequency at which the output signal is significantly reduced in magnitude compared with the input signal. It is used to remove low frequency components from a signal. It is commonly measured in hertz (Hz).</s>"
  },
  {
    "text": "<s>[INST] Describe the concept of OOP in programming. [/INST] Object-oriented programming (OOP) is a programming paradigm that uses objects and classes to organize data and define methods of operation on that data. It is based on the concepts of abstraction, encapsulation, inheritance, and polymorphism. OOP simplifies the development and maintenance of software by providing a model for how to structure, design, and use code. OOP also makes it easier to build applications for large and small teams.</s>"
  },
  {
    "text": "<s>[INST] What are the two main types of bug tracking tool? [/INST] The two main types of bug tracking tools are issue tracking systems and bug tracking systems. Issue tracking systems are used for managing customer service or support requests. Bug tracking systems are used for managing and tracking software bugs. Both tools are designed to help developers keep track of software issues, prioritize work, assign tasks, and report on progress.</s>"
  },
  {
    "text": "<s>[INST] Write a function to sort a list of strings by length. [/INST] def sort_by_length(lst):\n    lst.sort(key=len)\n    return lst</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of using global variables in programming? [/INST] The purpose of using global variables in programming is to allow variables to be shared among multiple functions. Global variables are accessible by all the functions within a program and provide an easy way to share data between different functions. By declaring a variable as global, its value can be changed by any other part of the program. This helps reduce the amount of code repetition and makes it easier to maintain the code.</s>"
  },
  {
    "text": "<s>[INST] Generate an artificial neural network code to recognize alphanumeric digits. [/INST] import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D\n\n# define model\nmodel = Sequential()\n\n# add layers\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# compile model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# fit model\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate model\nscore = model.evaluate(x_test, y_test, verbose=0)</s>"
  },
  {
    "text": "<s>[INST] Complete the following code to implement a binary search.\n\ndef binary_search(arr, x): [/INST] def binary_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1</s>"
  },
  {
    "text": "<s>[INST] What is the importance of writing unit tests? [/INST] The importance of writing unit tests is to ensure that the code works correctly and produce the expected results. By writing automated unit tests, developers can quickly and easily detect bugs and errors in their code. Unit tests also help with the building of reliable system architectures since the code is thoroughly tested even before the application is released. Unit tests also help in the code maintenance process since programmers can quickly identify changes made in the code that introduces bugs.</s>"
  },
  {
    "text": "<s>[INST] Complete the following regular expression for email address validation.\n\n^[\\w\\.+-]+@ [/INST] ^[\\w\\.+-]+@[\\w\\.-]+\\.[a-zA-Z]{2,4}$</s>"
  },
  {
    "text": "<s>[INST] What is the difference between a sequential and a parallel collection? [/INST] The difference between a sequential and a parallel collection is the way in which data is processed. A sequential collection is processed one item at a time, from start to finish in a single thread. A parallel collection is processed in chunks at the same time, using multiple threads. The main advantage of using a parallel collection is that it can take advantage of multiple cores in a processor, allowing for faster data processing.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to display all the columns of the 'Employees' table. [/INST] SELECT *\nFROM Employees;</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to find the unique elements in a list.\n\n2, 3, 9, 5, 2, 4, 9 [/INST] def unique_elements(input_list): \n    result_list = []\n    for item in input_list: \n        if item not in result_list: \n            result_list.append(item)\n    return result_list\n\ninput_list = [2, 3, 9, 5, 2, 4, 9]\nprint(unique_elements(input_list))\n# Output: [2, 3, 9, 5, 4]</s>"
  },
  {
    "text": "<s>[INST] What is Big O notation? [/INST] Big O notation is a measure of the complexity of an algorithm. It describes the worst-case complexity of a given algorithm in terms of time and/or space as the problem size increases.  It can indicate whether an algorithm's performance increases linearly or exponentially as the problem size increases.</s>"
  },
  {
    "text": "<s>[INST] Create a PHP program to count the number of occurrences of a given word in a string.\n\nTest string, word [/INST] <?php\n\nfunction count_occurrences($string, $word) {\n    $words = explode(\" \", $string);\n    $count = 0;\n    foreach ($words as $w)\n        if (strtolower($w) == strtolower($word))\n            $count++;\n    return $count;\n}\n\n$string = \"Test string\";\n$word = \"string\";\n\necho count_occurrences($string, $word);\n\n?>\n// Output: 1</s>"
  },
  {
    "text": "<s>[INST] What is an object in object-oriented programming? [/INST] In object-oriented programming, an object is a self-contained entity that contains both data and code, which together define and control its behavior. Objects can communicate with one another by sending messages and receiving data in response. Objects are used to represent real-world concepts, such as people, places, and things.</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page that displays a table with 4 columns; Book Name, Author, Price and Rating. [/INST] <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" width=\"500\"> \n    <tr> \n        <th>Book Name</th> \n        <th>Author</th> \n        <th>Price</th> \n        <th>Rating</th>  \n    </tr> \n    <tr>\n        <td><b>Harry Potter and the Sorcerer's Stone</b></td> \n        <td>J. K. Rowling</td> \n        <td>$7.99</td> \n        <td>4.7</td> \n    </tr> \n</table></s>"
  },
  {
    "text": "<s>[INST] Create a for loop for iterating over list y and adding its elements to a new list\n\ny = [1,2,3,4,5] [/INST] new_list = []\nfor el in y:\n    new_list.append(el)</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a number \"n\" as an argument and returns the nth Fibonacci number\n\nn = 15 [/INST] def fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2) \n  \nfibonacci(15)</s>"
  },
  {
    "text": "<s>[INST] Create an if statement to determine if an input number is even.\n\nnum = 5 [/INST] if num % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop to print out each element in a given list.\n\nmy_list = [2, 3, 5, 8] [/INST] for i in my_list:\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Construct code to compute the average height from a list of heights.\n\nheights = [170, 140, 160, 180, 160] [/INST] sum_heights = 0\nfor height in heights:\n    sum_heights += height\navg_height = sum_heights/len(heights)</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary where the keys are names and the values are their associated ages.\n\nname_list = [\"Kai\", \"Jane\", \"Andy\", \"Emily\"]\nage_list = [23, 32, 16, 55] [/INST] name_age_dict = dict(zip(name_list, age_list))</s>"
  },
  {
    "text": "<s>[INST] Construct a code to check if an input string is a palindrome.\n\ns = \"racecar\" [/INST] def check_palindrome(s): \n    return s == s[::-1] \n  \ncheck_palindrome(s)</s>"
  },
  {
    "text": "<s>[INST] Create a for loop for printing out the elements in a given list in reverse order.\n\nmy_list = [1,2,3,4] [/INST] for i in range(len(my_list)-1, -1, -1):\n    print(my_list[i])</s>"
  },
  {
    "text": "<s>[INST] Edit the following code such that output is an array of objects of key value pairs.\n\nlet fruit = [\"apple\", \"banana\", \"orange\"];\nlet colors = [\"red\", \"yellow\", \"orange\"]; [/INST] let fruits = [\"apple\", \"banana\", \"orange\"];\nlet colors = [\"red\", \"yellow\", \"orange\"];\n\nlet fruitObj = [];\n\nfor (let i = 0; i < fruits.length; i++) {\n    let obj = {};\n    obj.name = fruits[i];\n    obj.color = colors[i];\n    fruitObj.push(obj);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the 3 oldest employees in the 'employees' table. [/INST] SELECT * \nFROM employees\nORDER BY date_of_birth \nLIMIT 3;</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string, a key and a value as parameters and replaces all occurrences of the key with the value in the string.\n\ns = \"This is a sample sentence with some keys to replace.\"\nkey = \"keys\"\nvalue = \"words\" [/INST] def replace_key_value(s, key, value):\n  replacedStr = s.replace(key, value) \n  return replacedStr</s>"
  },
  {
    "text": "<s>[INST] Write a function that prints an array elements in a reverse order.\n\narr = [0, 1, 2, 3, 4, 5] [/INST] def reverse_print_array(arr):\n  for i in range(len(arr)-1, -1, -1):\n    print(arr[i])</s>"
  },
  {
    "text": "<s>[INST] Create a program to compare the elements of three arrays and print the elements that are present in all the arrays.\n\narr1 = [2, 3, 4]\narr2 = [1, 2, 5]\narr3 = [2, 4, 6] [/INST] def compare_arrays(arr1, arr2, arr3):\n  common_elements = []\n  for elem in arr1:\n    if elem in arr2 and elem in arr3:\n      common_elements.append(elem)\n  print(common_elements)</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes an array of integers and returns the minimum difference between two consecutive elements.\n\narr = [4, 2, 7, 5, 1] [/INST] def min_difference(arr):\n  min_diff = abs(arr[1] - arr[0])\n  for i in range(1, len(arr)-1):\n    diff = abs(arr[i+1] - arr[i])\n    if diff < min_diff:\n      min_diff = diff\n  return min_diff</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to find the smallest positive integer not present in an array.\n\narr = [2, 3, 7, 6, 8, -1, -10, 15] [/INST] def find_missing(arr):\n  # sort the array\n  arr.sort()\n  \n  # iterate through the array \n  # to find the smallest positive integer not present \n  for i in range(len(arr)):\n    if arr[i] > 0:\n      if arr[i+1] != arr[i] + 1:\n        return arr[i] + 1\n  return arr[-1] + 1</s>"
  },
  {
    "text": "<s>[INST] Sort the following array using the merge sort algorithm.\n\narr = [4, 10, 5, 1, 8, 9] [/INST] def merge_sort(arr):\n    if len(arr) > 1: \n      mid = len(arr)//2\n      left_arr = arr[:mid]\n      right_arr = arr[mid:]\n\n      merge_sort(left_arr)\n      merge_sort(right_arr)\n\n      i = j = k = 0\n\n      while i < len(left_arr) and j < len(right_arr): \n        if left_arr[i] < right_arr[j]: \n            arr[k] = left_arr[i] \n            i+=1\n        else: \n            arr[k] = right_arr[j] \n            j+=1\n        k+=1\n      while i < len(left_arr): \n        arr[k] = left_arr[i] \n        i+=1\n        k+=1\n      \n      while j < len(right_arr): \n        arr[k] = right_arr[j] \n        j+=1\n        k+=1</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm for searching for an element in a sorted array.\n\narr = [2, 4, 6, 8, 10]\ntarget = 6 [/INST] def binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n\n  while low <= high: \n    mid = (low + high) // 2\n    if arr[mid] == target: \n      return mid \n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1</s>"
  },
  {
    "text": "<s>[INST] Query the MongoDB database for all the documents that have \"Status\" field set to \"Done\". [/INST] db.collection.find({\"Status\":\"Done\"})</s>"
  },
  {
    "text": "<s>[INST] Assign \"D\" as the grade for a student whose score is higher than 80 and lower than 90.\n\nscore = 85 [/INST] if score > 80 and score < 90:\n    grade = \"D\"</s>"
  },
  {
    "text": "<s>[INST] List the people who have bought \"Apple iPod\" from the \"Electronics\" category. [/INST] SELECT people \nFROM orders \nWHERE item = 'Apple iPod' AND category = 'Electronics'</s>"
  },
  {
    "text": "<s>[INST] Summarize this text in one sentence.\n\nMachine Learning is the study of algorithms that improve automatically through the experience gained from available data. [/INST] Machine Learning is the process of using algorithms to gain insights from data and to improve automation.</s>"
  },
  {
    "text": "<s>[INST] Compile this Java program to determine any compile-time errors.\n\npublic class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello , World\");\n  }\n} [/INST] No compile-time error.</s>"
  },
  {
    "text": "<s>[INST] Complete the following C++ code to print the 3rd element from the array.\n\nint arr[5] = {1,2,3,4,5}; [/INST] std::cout << arr[2] << std::endl;</s>"
  },
  {
    "text": "<s>[INST] Generate an HTML table that displays the student names and grades in a 3x3 grid.\n\nStudent1: B\nStudent2: A\nStudent3: C\nStudent4: D\nStudent5: F\nStudent6: A [/INST] <table style=\"width:100%\">\n  <tr>\n    <th>Student</th>\n    <th>Grade</th> \n  </tr>\n  <tr>\n    <td>Student1</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>Student2</td>\n    <td>A</td> \n  </tr>\n  <tr>\n    <td>Student3</td>\n    <td>C</td> \n  </tr>\n  <tr>\n    <td>Student4</td>\n    <td>D</td> \n  </tr>\n  <tr>\n    <td>Student5</td>\n    <td>F</td> \n  </tr>\n  <tr>\n    <td>Student6</td>\n    <td>A</td> \n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Calculate the total cost of items purchased by a customer.\n\nprice1 = 10\nquantity1 = 5\nprice2 = 15\nquantity2 = 3 [/INST] total_cost = (price1*quantity1) + (price2*quantity2)\nprint(total_cost)  # Output: 95</s>"
  },
  {
    "text": "<s>[INST] Train a Neural Network model to classify handwritten digits. [/INST] from sklearn.neural_network import MLPClassifier\n\nmodel = MLPClassifier()\nmodel.fit(X_train, y_train) # X_train and y_train are the training data</s>"
  },
  {
    "text": "<s>[INST] Update the SQL table with the following data.\n\nid \tname     \tage\n1\t    John        26 [/INST] UPDATE Table\nSET name = 'John', age = 26\nWHERE id = 1;</s>"
  },
  {
    "text": "<s>[INST] Parse and extract the title of this HTML page.\n\n<html><head><title>This is the Page Title</title></head></html> [/INST] title = soup.find('title').text\nprint(title) # Output: This is the Page Title</s>"
  },
  {
    "text": "<s>[INST] Generate C# code that creates an instance of the Customer class. [/INST] Customer customer = new Customer();</s>"
  },
  {
    "text": "<s>[INST] Find the sum of the squares of the following numbers.\n\n[2, 3, 4] [/INST] sum = 0\nfor number in [2, 3, 4]:\n    sum += number ** 2\n\nprint(sum) # Output: 29</s>"
  },
  {
    "text": "<s>[INST] Write a C program to calculate the order of a particular number in ascending order.\n\ninput_number = 4 [/INST] int input_number = 4;\n \nint order = 0;\n \nfor(int i=0; i < input_number; i++){\n    order++;\n}\n \nprintf(\"The order of the number %d in ascending order is %d.\", input_number, order);</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to convert a number from octal to decimal.\n\noctal_number = 014 [/INST] function octToDec(octal_number){\n    let dec_number = 0;\n    let i = 0;\n    while(octal_number != 0){\n        dec_number += (octal_number % 10) * Math.pow(8,i);\n        octal_number = Math.floor(octal_number/10);\n        i++;\n    }\n    return dec_number;\n}\nvar decimal_number = octToDec(014);\nconsole.log(decimal_number);</s>"
  },
  {
    "text": "<s>[INST] Generate Java code to display a message on a GUI. [/INST] import javax.swing.JOptionPane;\n \npublic class DisplayMessage {\n \n    public static void main(String[] args) {\n        JOptionPane.showMessageDialog(null, \"Hello world!\", \"Message\", JOptionPane.INFORMATION_MESSAGE);\n    }\n \n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to make it run without errors.\n\ndef squared(num):\n    return num * num\n \nnum = 5\nprint(squared(5) [/INST] def squared(num):\n    return num * num\n \nnum = 5\nprint(squared(5))</s>"
  },
  {
    "text": "<s>[INST] Design a function with the following output. [/INST] def sayHi(name):\n    print(\"Hi \"+name+\"! How are you today?\")</s>"
  },
  {
    "text": "<s>[INST] Generate PHP code to validate a username and password. [/INST] $userName = \"user123\";\n$password = \"12345\";\n\nif (empty($userName) || empty($password)) {\n    echo \"Error: username and password cannot be empty.\";\n    exit;\n} \n$valid = true;\nif (strlen($userName) < 5 || strlen($password) < 8) {\n    $valid = false;\n}\nif (preg_match('/[^a-zA-Z0-9_]/', $userName) || preg_match('/[^a-zA-Z0-9_]/', $password)) {\n    $valid = false;\n}\n \nif ($valid == false) {\n    echo \"Error: invalid username or password.\";\n    exit;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to check for even numbers in the array.\n\narr = [1, 2, 3, 4, 5] [/INST] arr = [1, 2, 3, 4, 5]\n\nfor i in arr: \n if i % 2 == 0 : \n print(i)</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of the first 10 Fibonacci numbers in Java. [/INST] class Fibonacci \n{ \n    static int fib(int n) \n    { \n        if (n <= 1) \n            return n; \n        return fib(n-1) + fib(n-2); \n    } \n  \n    public static void main (String args[]) \n    { \n        int num = 10, sum = 0; \n        for (int i = 1; i <= num; i++) \n        { \n            sum += fib(i); \n        } \n        System.out.println(sum); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Find the length of a given string using JavaScript.\n\nstr = \"I'm a GPT model\" [/INST] let str = \"I'm a GPT model\";\nlet length = str.length;\nconsole.log(length); // 16</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that swaps the values of two variables. [/INST] function swap(a, b) {\n    let temp = a;\n    a = b;\n    b = temp;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL statement to get all records from a table which has id between 5 and 10. [/INST] SELECT * FROM table_name WHERE id BETWEEN 5 AND 10;</s>"
  },
  {
    "text": "<s>[INST] Generate a random string of 8 characters with at least 1 digit. [/INST] import random\n\ndef generate_random_string():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))</s>"
  },
  {
    "text": "<s>[INST] Create an HTML table with three columns and five rows. [/INST] <table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that takes two integers and returns true if the numbers are equal and false otherwise. [/INST] function isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm in Python to calculate the factorial of a given number n. [/INST] def factorial(n): \n   if n == 0: \n       return 1\n   elif n > 0: \n       return n * factorial(n-1) \n   else: \n       return \"Enter a positive integer\"</s>"
  },
  {
    "text": "<s>[INST] Create a coding program that sorts a given list of numbers into ascending order.\n\n[4, 3, 2, 5, 9, 1, 8] [/INST] def ascending_order(arr): \n\n# Bubble sort algorithm. \n    n = len(arr) \n   \n    # Traverse through all array elements \n    for i in range(n): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n   \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                \n    return arr\n\n# Test \narr = [4, 3, 2, 5, 9, 1, 8]\n\nascending_order(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),</s>"
  },
  {
    "text": "<s>[INST] Write a function that collects elements from two given arrays and creates a new array.\n\narray1 = [1, 2, 3] \narray2 = [4, 5, 6] [/INST] def collect(array1, array2):\n    result = array1 + array2 \n    return result</s>"
  },
  {
    "text": "<s>[INST] Develop a program that takes a number and prints \"true\" if it is a prime number, and \"false\" otherwise. [/INST] def is_prime(number):\n  if number<1:\n    return False\n  for check in range(2,number):\n    if number%check==0:\n      return False\n  return True</s>"
  },
  {
    "text": "<s>[INST] Develop a function to find all elements in a given array which appear more than once.\n\nnums = [4, 3, 6, 7, 3, 8, 4, 9] [/INST] def find_duplicates(nums):\n    duplicates = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                duplicates.append(nums[i])\n    return duplicates</s>"
  },
  {
    "text": "<s>[INST] Design a function to find the average of a given array.\n\narray = [1, 2, 3] [/INST] def array_mean(array):\n    total = 0\n    for num in array:\n        total += num\n    mean = total / len(array)\n    return mean</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm to print out the following pattern. [/INST] def print_pattern():\n    for i in range(1, 5):\n        for j in range(1,i+1):\n            print(j, end=\" \")\n        print()</s>"
  },
  {
    "text": "<s>[INST] Create a program to calculate the standard deviation of an array of numbers.\n\narr = [10, 8, 12, 5, 9] [/INST] def stdev(arr):\n    n = len(arr)\n    mean = sum(arr) / n\n    variance = sum((x - mean) ** 2 for x in arr) / n\n    return (variance ** 0.5)</s>"
  },
  {
    "text": "<s>[INST] Create a function that calculates the average of given list of numbers.\n\n[10, 15, 20, 25, 30] [/INST] def mean(nums):\n    sum = 0\n    for i in nums:\n      sum += i\n    return sum / len(nums)</s>"
  },
  {
    "text": "<s>[INST] You need to code a program that prints the absolute difference between two numbers.\n\n15 and 10 [/INST] def difference(num1, num2):\n    return abs(num1 - num2)</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of all the prime numbers between a given range.\n\n15 and 20 [/INST] def sum_of_primes(start, end): \n    sum = 0\n    for i in range(start, end + 1):\n        if isPrime(i): \n            sum = sum + i \n    return sum\n    \ndef isPrime(num): \n    if num > 1: \n        for i in range(2, num): \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False</s>"
  },
  {
    "text": "<s>[INST] Formulate a query to select the rows based on multiple conditions\n\nSELECT * FROM fruit WHERE color='red' AND quantity > 5 [/INST] No output required</s>"
  },
  {
    "text": "<s>[INST] Implement a recursive binary search on a given sorted list.\n\n[-4, -2, 0, 6, 7, 8] [/INST] def binary_search(arr, num, start, end): \n    if start >= end: \n        return None\n  \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n        return mid \n  \n    if arr[mid] < num: \n        return binary_search(arr, num, mid+1, end) \n    else: \n        return binary_search(arr, num, start, mid-1)</s>"
  },
  {
    "text": "<s>[INST] You need to code a program that converts a given number of days to years, month and days.\n\n450 days [/INST] def convertToYMD(num_days):\n\n    years = int(num_days/365)\n    rem_days = num_days % 365\n    months = int(rem_days / 30)\n    days = rem_days % 30\n    return [years, months, days]</s>"
  },
  {
    "text": "<s>[INST] Write a function to flatten a given array of lists.\n\n[[1,2], [3,4], [5,6]] [/INST] def flatten(arr):\n    output_list = []\n    for sublist in arr:\n        for item in sublist:\n            output_list.append(item)\n    return output_list</s>"
  },
  {
    "text": "<s>[INST] Create a function to sort a given set of strings in dictionary order. [/INST] def sort_dict(arr):\n\tarr.sort(key=lambda s: [s.lower(), s])\n\treturn arr</s>"
  },
  {
    "text": "<s>[INST] Clean up the following json data so that all the fields are consistent with the same data type.\n\n{\n    \"person\": {\n        \"fullname\": {\n            \"firstname\": \"John\",\n            \"lastname\": \"Smith\"\n        },\n        \"age\": 45,\n        \"hobbies\": [\"sample hobbby 1\", \"sample hobby2\", 3]\n    }\n} [/INST] {\n    \"person\": {\n        \"fullname\": {\n            \"firstname\": \"John\",\n            \"lastname\": \"Smith\"\n        },\n        \"age\": 45,\n        \"hobbies\": [\"sample hobbby 1\", \"sample hobby2\"]\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a python class to store a person's data like name, age, and hobbies. [/INST] class Person:\n     def __init__(self, firstname, lastname, age, hobbies):\n           self.firstname = firstname\n           self.lastname = lastname\n           self.age = age\n           self.hobbies = hobbies</s>"
  },
  {
    "text": "<s>[INST] Format a given string according to a given pattern.\n\nstring = 'John Doe, 25'\npattern = '{lastname}, {firstname} {age}' [/INST] formatted_string = pattern.format(firstname = string.split()[0], lastname = string.split()[1], age = string.split()[2])</s>"
  },
  {
    "text": "<s>[INST] Construct a python method to get the nth Fibonacci number. [/INST] def get_nth_fibonacci(n):\n if n == 0 or n == 1:\n return n\n else:\n return get_nth_fibonacci(n-1) + get_nth_fibonacci(n-2)</s>"
  },
  {
    "text": "<s>[INST] Modify the following python code so that it accepts two numbers as input and returns the maximum of those numbers.\n\ndef get_max(num1):\n return num1 [/INST] def get_max(num1, num2):\n return max(num1, num2)</s>"
  },
  {
    "text": "<s>[INST] Create a Django view that displays all the books stored in the library's database. [/INST] def library_books_view(request):\n books = Book.objects.all()\n context = {'books': books}\n return render(request, 'library/books.html', context)</s>"
  },
  {
    "text": "<s>[INST] Implement a method to check if a given string has all unique characters. [/INST] def has_unique_chars(string): \n  chars = set() \n  for char in string: \n    if char in chars: \n      return False \n    else: \n      chars.add(char) \n  return True</s>"
  },
  {
    "text": "<s>[INST] Suggest a method to remove a given item from a given list. [/INST] def remove_item(lst, item):\n if item in lst:\n    lst.remove(item)</s>"
  },
  {
    "text": "<s>[INST] Create a Pandas DataFrame from a given dictionary of lists.\n\ndata = {'Year': [2020, 2021, 2022],\n 'Sales': [50000, 70000, 60000]} [/INST] import pandas as pd\n\ndf = pd.DataFrame(data)</s>"
  },
  {
    "text": "<s>[INST] Explain how to create a custom exception in Python. [/INST] To create a custom exception in Python, you will have to subclass Exception class and define your own exception class. For example: \n \nclass MyCustomException(Exception):\n  pass \n \nThen you can use the exception in a try-except block to handle expected errors:\n \ntry: \n  ...\nexcept MyCustomException: \n  ...</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to calculate the sum of the even numbers in a given range of integers.\n\nStart: 10 \nEnd: 20 [/INST] // Java Program to calculate the sum of all even \n// numbers in a given range \n\npublic static int sumOfEvenInRange(int n1, int n2) { \n    int sum = 0; \n      \n    // calculating the sum of all even numbers in given range \n    for (int i = n1; i <= n2; i++) { \n        // if num is even then add it \n        if (i % 2 == 0) { \n            sum += i; \n        } \n    } \n    return sum; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a program in C to find the difference between the smallest and the largest number in a given array.\n\narray = { 100, 2, 11, 1, 5, 34, 45 } [/INST] #include<stdio.h> \n\n// Function to find the difference between smallest and largest element in given array \nint findDifference(int array[], int n) \n{   \n    int max = 0; \n    int min = array[0]; \n  \n    // Find maximum and minimum element in array \n    for (int i = 0; i < n; i++)  \n    { \n        if (array[i] > max) \n            max = array[i]; \n          \n        if (array[i] < min) \n            min = array[i]; \n    } \n    return (max - min); \n} \n\n// Driver Code \nint main() \n{ \n    int array[] = { 100, 2, 11, 1, 5, 34, 45 }; \n    int n = sizeof(array)/sizeof(array[0]); \n    printf(\"Difference between largest and smallest element: %d\",findDifference(array, n)); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Update the following SQL table column with the values in another column.\n\nTable A \n\nid | column_1 | column_2\n--------------------\n1  |        25|      NULL\n2  |        29|      NULL [/INST] UPDATE TableA\nSET column_2 = column_1\nWHERE column_2 IS NULL;</s>"
  },
  {
    "text": "<s>[INST] Modify the following HTML to apply an external style sheet.\n\n<html> \n  <head> \n    <title>This Is a Test</title> \n  </head> \n  <body>\n    <h1>Hello World!</h1> \n  </body>\n</html> [/INST] <!DOCTYPE html>\n<html> \n  <head> \n    <title>This Is a Test</title> \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"> \n  </head> \n  <body>\n    <h1>Hello World!</h1> \n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write an expression to verify the validity of a given password in Python. [/INST] import re \n  \ndef check(password): \n  \n    #Define pattern rules\n    pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}\"\n      \n    if (re.search(pattern,password)): \n        return True\n    else: \n        return False \n  \n# Driver code     \npassword = \"Geronimo1\"\nif (check(password)): \n    print(\"Valid Password\") \nelse: \n    print(\"Invalid Password\")</s>"
  },
  {
    "text": "<s>[INST] Organize the following array of objects in ascending order by the 'name' field.\n\n[ \n  { name: 'Jill', lastname: 'Smith' }, \n  { name: 'Bob', lastname: 'Jones' },\n  { name: 'Jack', lastname: 'Bauer' }\n] [/INST] let arr = [ \n  { name: 'Jill', lastname: 'Smith' }, \n  { name: 'Bob', lastname: 'Jones' },\n  { name: 'Jack', lastname: 'Bauer' }\n];\n\narr.sort((a, b) => (a.name > b.name) ? 1 : -1);\n  \nconsole.log(arr);</s>"
  },
  {
    "text": "<s>[INST] Write an expression in JavaScript to convert a given number of minutes to seconds.\n\nminutes = 55 [/INST] let minutes = 55;\nlet seconds = minutes * 60;\n\nconsole.log(seconds); //3300</s>"
  },
  {
    "text": "<s>[INST] In C++, write a function to allocate memory for an array of integers.\n\nsize = 5 [/INST] // C++ program to allocate memory for an array of integers \n\n#include<iostream> \nusing namespace std; \n  \nint* allocatearray(int size) \n{ \n    // Allocate memory for given number of integers \n    int *ptr = new int[size]; \n  \n    // Initialize the array \n    for (int i = 0; i < size; i++) \n        ptr[i] = i+10; \n  \n    return ptr; \n} \n  \n// Main function \nint main() \n{ \n    int size = 5; \n    int *ptr = allocatearray(size); \n  \n    cout << \"Array elements are \"; \n    for (int i = 0; i < size; i++) \n        cout << ptr[i] << \" \"; \n  \n    cout << endl; \n  \n    delete[] ptr; \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a program in SQL to display the name and salary of the employees whose salary is equal to the average salary of the employees.\n\nTable A\n\nid | name  | salary\n-----------------\n1 | John  | 35000\n2 | Peter | 50000 \n3 | Dave  | 70000 [/INST] SELECT name, salary \nFROM TableA\nWHERE salary = (SELECT AVG(salary) FROM TableA);</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to assign the value 0 for special values, i.e. empty strings and NaN.\n\nmy_list = [5, 2, 3, None, '', 8] [/INST] def assign_values(list): \n    for i, val in enumerate(list): \n        if not val or val != val: \n            list[i] = 0\n            \n    return list\n\nmy_list = [5, 2, 3, None, '', 8] \nresult = assign_values(my_list) \nprint(result) \n# Output: [5, 2, 3, 0, 0, 8]</s>"
  },
  {
    "text": "<s>[INST] Create a program in JavaScript to calculate the area of a triangle with given side lengths.\n\nside_1 = 10\nside_2 = 10\nside_3 = 8 [/INST] let side_1= 10;\nlet side_2= 10;\nlet side_3= 8;\n \n//calculate the permiter of triangle \nlet perimiter = (side_1 + side_2 + side_3)/2;\n \n//calculate the area of triangle using Heron's formula \nlet area = Math.sqrt(perimiter*(perimiter-side_1)*(perimiter-side_2)*(perimiter-side_3));\n \nconsole.log(area);</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of the numbers given in the following list using Python.\n\nmy_list = [1, 2, 3, 4, 5] [/INST] my_list = [1, 2, 3, 4, 5]\n\n# Calculate the sum \nsum_nums = sum(my_list)\n\nprint(sum_nums) \n# Output: 15</s>"
  },
  {
    "text": "<s>[INST] Create a drop-down list with menu items in HTML.\n\nList Items: Home, About Us, Contact Us, Careers [/INST] <select>\n  <option value=\"Home\">Home</option>\n  <option value=\"AboutUs\">About Us</option>\n  <option value=\"ContactUs\">Contact Us</option>\n  <option value=\"Careers\">Careers</option>\n</select></s>"
  },
  {
    "text": "<s>[INST] Produce a SELECT query in PostgreSQL to search for all existing entries with a specified ID.\n\nProperty ID: 15 [/INST] SELECT * FROM TableName WHERE PropertyID='15';</s>"
  },
  {
    "text": "<s>[INST] Write a function in C# to calculate the area of a circle from its radius.\n\nRadius: 5 [/INST] public double GetAreaOfCircle(double radius)\n{\n    return Math.PI * Math.Pow(radius, 2);\n}</s>"
  },
  {
    "text": "<s>[INST] Explain how can one sort a list of strings alphabetically in Java. [/INST] One can use the Collections.sort() method to perform an alphabetical sort of a list of strings in Java. For example, List<String> myList = new ArrayList<String>(); myList.add(\"Joe\"); myList.add(\"Bob\"); myList.add(\"Tom\"); Collections.sort(myList); This will sort the strings alphabetically in the list.</s>"
  },
  {
    "text": "<s>[INST] Design a GUI in Python to accept user input and display a welcome message.\n\nMessage: Welcome to our website! [/INST] import tkinter as tk\n\nwindow = tk.Tk()\n\nlabel = tk.Label(text='Please enter your name:')\nlabel.pack()\n\nname = tk.Entry(window, width=25)\nname.pack()\n\ndef greet_user():\n\twelcome = \"Welcome to our website, \" + name.get()\n\t\n\tgreeting = tk.Label(text=welcome)\n\tgreeting.pack()\n\nbtn = tk.Button(window, text='Submit', command=greet_user)\nbtn.pack()\n\nwindow.mainloop()</s>"
  },
  {
    "text": "<s>[INST] Write a SQL command to search for data containing a case-insensitive substring.\n\nTable Name: ItemTable\nColumn Name: ItemDescription\nSearch Term: Chair [/INST] SELECT * FROM ItemTable WHERE LOWER(ItemDescription) LIKE '%chair%';</s>"
  },
  {
    "text": "<s>[INST] Retrieve a random record from a MySQL table.\n\nTable Name: MemberTable [/INST] SELECT * FROM MemberTable ORDER BY RAND() LIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Create an array of column names in a MySQL query.\n\nColumn Names: item_name, item_price [/INST] SELECT `item_name`, `item_price` FROM TableName;</s>"
  },
  {
    "text": "<s>[INST] Write a function in PHP to convert a string to an array.\n\nString: \"A,B,C\" [/INST] function convertStringToArray($string) {\n  return explode(\",\", $string);\n}</s>"
  },
  {
    "text": "<s>[INST] Describe how a bubble sort algorithm works. [/INST] Bubble sort is a sorting algorithm in which adjacent elements in an array are compared and swapped if they are not in the correct order. The algorithm steps through the array multiple times, comparing adjacent elements and swapping them if the elements are not in the correct order. This process is repeated until all elements in the array are sorted.</s>"
  },
  {
    "text": "<s>[INST] Create a while loop in JavaScript to print out all the numbers between 20 and 30. [/INST] let i = 20;\nwhile (i <= 30) {\n  console.log(i);\n  i++;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a for loop in Java to display all the numbers between 1 and 10. [/INST] for (int i = 1; i <= 10; i++) {\n\tSystem.out.println(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Modify the code snippet to filter all records from a table using SQL.\n\nTable Name: StudentTable\nFilter Type: Accepted [/INST] SELECT * FROM StudentTable WHERE Accepted='True';</s>"
  },
  {
    "text": "<s>[INST] Construct a try-catch block in C#. [/INST] try \n{\n   // Code here\n}\ncatch(Exception ex)\n{\n   // Handle exceptions\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of the count() method. [/INST] The count() method is used to count the number of times a particular item appears in a list. It takes the element as an argument and returns the count of the specified element in the list.</s>"
  },
  {
    "text": "<s>[INST] Given a string, write a program to remove the leading and trailing white spaces from the string and output the modified string.\n\nString: \"Hello world   \" [/INST] # Python program to remove leading and trailing white spaces from a string \n  \n# Function to remove leading and trailing white spaces \ndef removeWhitespaces(string): \n    # Remove leading and trailing whitespaces \n    newString = string.strip() \n  \n    # Returns the new string with leading and trailing \n    # whitespaces removed \n    return newString \n  \n# Driver program \ninputString = \"Hello world   \"\n  \n# Printing the modified string \nprint(removeWhitespaces(inputString))</s>"
  },
  {
    "text": "<s>[INST] What is the difference between sort() and sorted()? [/INST] The sort() method sorts the elements of a given iterable in ascending order. It modifies the original list in place and does not return a value. The sorted() method on the other hand, returns an iterable sorted list without modifying the original sequence. It takes an optional 'key' argument to specify a function to be called on each list element prior to making comparisons.</s>"
  },
  {
    "text": "<s>[INST] Define a function to collect unique values from a list of dictionaries based on the \"key\" field.\n\nlist = [{'name': 'Apple', 'price': 100}, {'name': 'Mango', 'price': 90}, {'name': 'Apple', 'price': 200}] [/INST] def collect_unique(dic_list, key):\n    unique_values = set()\n    for item in dic_list:\n        val = item.get(key)\n        if val is not None:\n            unique_values.add(val)\n    return list(unique_values)</s>"
  },
  {
    "text": "<s>[INST] Output the concatenation of two strings.\n\nString1: \"Hello\"\nString2: \"world\" [/INST] print(string1 + string2)</s>"
  },
  {
    "text": "<s>[INST] Find the longest word in the given sentence.\n\nSentence: “The cow jumped over the moon.” [/INST] longest_word = max(sentence.split(), key=len)</s>"
  },
  {
    "text": "<s>[INST] Generate code to parse the following HTML.\n\n<div>\n    <h1>Heading</h1>\n    <p>Content 1 </p>\n    <ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n    </ul>\n</div> [/INST] def parse_html(html):\n    root = BeautifulSoup(html, 'html.parser')\n    heading = root.find('h1').text\n    content1 = root.find('p').text\n    items = [li.text for li in root.find_all('li')]\n    return {\n        'heading': heading,\n        'content1': content1,\n        'items': items\n    }</s>"
  },
  {
    "text": "<s>[INST] Identify which of the two strings is a valid URL.\n\nstr1 = \"http://example.com/blog\"\nstr2 = 'example.com/blog' [/INST] str1 is a valid URL, whereas str2 is not.</s>"
  },
  {
    "text": "<s>[INST] Convert the following JSON string to a Python dictionary.\n\n{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"} [/INST] import json\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npy_dict = json.loads(json_str)\n\n# py_dict would be {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}</s>"
  },
  {
    "text": "<s>[INST] Modify the following function to print out the 'type' of each argument.\n\ndef print_args(arg1, arg2):\n    print(\"Arg 1:  %s\" % arg1)\n    print(\"Arg 2:  %s\" % arg2) [/INST] def print_args(arg1, arg2):\n    print(\"Arg 1: %s\" % str(type(arg1))) \n    print(\"Arg 2: %s\" % str(type(arg2))) \n    print(\"Arg 1:  %s\" % arg1)\n    print(\"Arg 2:  %s\" % arg2)</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to add two matrices.\n\nmatrix1 = [[3, 5],\n           [6, 2]]\n\nmatrix2 = [[1, 2],\n           [3, 4]] [/INST] def add_matrices(mat1, mat2):\n    \"\"\"\n    This function takes two 2D matrices and adds them,\n    returning a new 2D matrix.\n    \"\"\"\n    output = []\n    \n    for i in range(len(mat1)):\n        row_m1 = mat1[i]\n        row_m2 = mat2[i]\n        row_sum = []\n        for j in range(len(row_m1)):\n            row_sum.append(row_m1[j] + row_m2[j])\n        output.append(row_sum)\n        \n    return output\n    \nresult = add_matrices(matrix1, matrix2)</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to make it print out the sum of two numbers.\n\nnum1 = 10\nnum2 = 5\n\nprint(num1 * num2) [/INST] num1 = 10\nnum2 = 5\n\nprint(num1 + num2)</s>"
  },
  {
    "text": "<s>[INST] Format the following date according to ISO 8601 standard.\n\ndate = 'January 5 2021' [/INST] from datetime import datetime\n\ndate = 'January 5 2021'\nformatted_date = datetime.strptime(date, '%B %d %Y').isoformat()\nprint(formatted_date)</s>"
  },
  {
    "text": "<s>[INST] Identify two coding languages used by Python developers. [/INST] Two coding languages used by Python developers are Python and C++.</s>"
  },
  {
    "text": "<s>[INST] Construct a REST API to get the list of current events from a Web Calendar application. [/INST] Endpoint: ‘/api/v1/events’\nHTTP Method: GET\nResponse Format: JSON\nResponse:\n{\n  \"status\": 200,\n  \"events\": [\n    { \"eventId\": 1,\n      “description”: “Company Meeting”,\n      \"dateTime\": \"2020-11-05T09:00:00\"\n    },\n    { \n      \"eventId\": 2,\n      “description”: “Board Meeting”,\n      \"dateTime\": \"2020-11-08T14:00:00\"\n    }\n  ]\n}</s>"
  },
  {
    "text": "<s>[INST] Debug the following bash script to ensure it works as intended.\n\n#!/bin/bash\n\necho \"Show a list of running processes\"\nps [/INST] #!/bin/bash\n\necho \"Show a list of running processes\"\nps aux | grep -v grep | awk '{print $2 \"  \" $11}'</s>"
  },
  {
    "text": "<s>[INST] Create a customer management system using Python and the Django web framework. [/INST] Steps for creating a customer management system using Python and the Django web framework:\n1. Create a Django project\n2. Add customers app to the project \n3. Create a model for customers in the customers app\n4. Update the customers app's views function to include the logic for adding, deleting, and updating customers\n5. Add customers app the the project's urls.py file to map requests to the views functions\n6. Create and update templates in the customers app to provide the UI\n7. Run the Django project to launch the web application</s>"
  },
  {
    "text": "<s>[INST] Combine the two lists below using Python to produce a single list containing all elements from both.\n\nlist_one = [1, 2, 3]\nlist_two = [4, 5, 6] [/INST] list_one = [1, 2, 3]\nlist_two = [4, 5, 6]\ncombined_list = list_one + list_two\nprint(combined_list) # Output: [1, 2, 3, 4, 5, 6]</s>"
  },
  {
    "text": "<s>[INST] Construct a GraphQL query for retrieving posts for the selected user. [/INST] query {\n  selectedUser {\n    posts {\n      title\n      body\n      createdAt\n      comments {\n        body\n        author {\n          name\n        }\n      }\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Implement an Insertion Sort algorithm in Java. [/INST] public static void insertSort(int[] arr) {\n  for (int i = 1; i < arr.length; i++) {\n    int currentElement = arr[i];\n    int j = i - 1;\n    while (j >= 0 && arr[j] > currentElement) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = currentElement;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Upgrade the following JavaScript code to use ES6 features.\n\nfunction addNumbers(num1, num2) {\n  return num1 + num2;\n} [/INST] const addNumbers = (num1, num2) => num1 + num2;</s>"
  },
  {
    "text": "<s>[INST] Create an Express application for a web store with endpoints for adding products, deleting products and viewing products. [/INST] Steps for creating an Express application for a web store:\n1. Install Express in the project.\n2. Create the routes for the endpoints.\n3. Create the controllers that handle the request logic.\n4. Add the required models for the endpoints.\n5. Use express.static() to enable static files.\n6. Create and enable middleware for authentication.\n7. Set up a testing environment.\n8. Create the view for the application.</s>"
  },
  {
    "text": "<s>[INST] Provide an example of a recursive Python function to calculate the factorial of a number. [/INST] def calculateFactorial(n):\n  if n == 0:\n    return 1\n\n  return n * calculateFactorial(n - 1)</s>"
  },
  {
    "text": "<s>[INST] Create a PostgreSQL database with a table to store user details. [/INST] Steps for creating a PostgreSQL database with a table to store user details:\n1. Connect to PostgreSQL database.\n2. Create database demodb.\n3. Create table to store user details.\n  Columns:\n  id - INT\n  name - VARCHAR\n  address - VARCHAR\n  email - VARCHAR\n  date_of_birth - DATE\n4. Apply constraints to the table.\n5. Grant read and write access to the database.</s>"
  },
  {
    "text": "<s>[INST] Construct an MySQL query to select records from a table named 'employees' where salary is between 50000 and 100000. [/INST] SELECT * FROM employees WHERE salary BETWEEN 50000 AND 100000;</s>"
  },
  {
    "text": "<s>[INST] In a Java program, write a method to find the longest common subsequence of two strings. [/INST] public static String longestCommonSubsequence(String s1,String s2) {\n   int l1 = s1.length();\n   int l2 = s2.length();\n\n   int[][] aux = new int[l1+1][l2+1];\n   for (int i = 0; i < l1; i++) {\n      for (int j = 0; j < l2; j++) {\n         if (s1.charAt(i) == s2.charAt(j))\n            aux[i+1][j+1] = aux[i][j] + 1;\n         else\n            aux[i+1][j+1] = Math.max(aux[i+1][j], aux[i][j+1]);\n      }\n   }\n   StringBuilder sb = new StringBuilder();\n   for (int i = l1, j = l2; i != 0 && j != 0; ) {\n      if (aux[i][j] == aux[i-1][j])\n         i--;\n      else if (aux[i][j] == aux[i][j-1])\n         j--;\n      else {\n         sb.append(s1.charAt(i-1));\n         i--;\n         j--;\n      }\n   }\n   return sb.reverse().toString();\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in C++ to insert an item into a linked list. [/INST] void insertItem(Node*& root, int data) {\n  Node* newNode = new Node; \n  newNode->data = data; \n  newNode->next = root; \n  root = newNode; \n}</s>"
  },
  {
    "text": "<s>[INST] What is the syntax for creating a class in Python? [/INST] class MyClass:\n    <statement(s)></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to check if a given string contains the substring 'hello'. [/INST] if (str.indexOf('hello') !== -1) {\n  console.log('The string contains the substring hello');\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to extract the first 5 characters of a string.\n\nstring = \"This is a sample string.\" [/INST] def get_first_five_characters(string):\n  return string[:5]\n\nprint(get_first_five_characters(string)) # Output: 'This '</s>"
  },
  {
    "text": "<s>[INST] How can we create a dictionary in JavaScript? [/INST] let myDict = {\n  key1: value1,\n  key2: value2\n}</s>"
  },
  {
    "text": "<s>[INST] What is the syntax for creating an array in JavaScript? [/INST] let myArray = [element1, element2, ...elementN];</s>"
  },
  {
    "text": "<s>[INST] How can we generate a random number within a given range in Python? [/INST] import random\n\nrandomNumber = random.randint(minNum, maxNum)</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to find the most common element in a given list. [/INST] def most_common(myList):\n  return max(set(myList), key=myList.count)</s>"
  },
  {
    "text": "<s>[INST] Suggest a for loop for printing all elements in an array.\n\nint a[] = {11, 22, 33, 44, 55}; [/INST] for (int i=0; i<sizeof(a)/sizeof(a[0]); i++) {\n    cout << a[i] << \" \";\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to convert a decimal number to binary.\n\nint number = 15 [/INST] string decimalToBinary(int number) {\n    string binaryNum = \"\";\n    while(number > 0) {\n        binaryNum = (number % 2 == 0 ? \"0\" : \"1\") + binaryNum;\n        number = Math.trunc(number / 2);\n    }\n    return binaryNum;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Haskell program to convert a given string to an Integer.\n\nstring text = \"12345\" [/INST] stringToInt :: String -> Int\nstringToInt x = read x :: Int</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to sort a given array using insertion sort algorithm.\n\nint arr[] = {82, 2, 25, 14, 5, 9} [/INST] void insertionSort(int arr[], int n) {\n    int i, key, j;\n    for (i = 1; i < n; i++) { \n        key = arr[i]; \n        j = i - 1; \n        while (j >= 0 && arr[j] > key) { \n            arr[j + 1] = arr[j]; \n            j = j - 1; \n        } \n        arr[j + 1] = key; \n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to summarize the sales of each product.\n\nTable: Sales\nColumns: product, quantity [/INST] SELECT product, SUM(quantity) AS total_sales\nFROM Sales\nGROUP BY product;</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to delete all elements from a linked list. [/INST] # Function to delete all the elements \n# of the linked list \ndef deleteList(head_node): \n    # Store head node \n    curr = head_node \n    prev = None\n\n    # Traverse the list and delete \n    # each node one by one \n    while(curr): \n        # Next node  \n        next = curr.next\n        # Free the current node \n        curr = None\n        # Update prev and curr node \n        prev = curr \n        curr = next</s>"
  },
  {
    "text": "<s>[INST] Given a list of strings, write a program to combine them into one string with a space between each element.\n\nlst = ['This', 'is', 'a', 'list', 'of', 'strings'] [/INST] result = \" \".join(lst)\nprint(result) # This is a list of strings</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the average, minimum, and maximum age of all users in the \"users\" table.\n\nTable: Users\nColumns: id, name, age [/INST] SELECT AVG(age) as avg_age, MIN(age) as min_age, MAX(age) as max_age\nFROM Users;</s>"
  },
  {
    "text": "<s>[INST] Write a function to compute a hash code for a string. [/INST] def hash(string):\n    result = 0\n    for char in string:\n        result += ord(char)\n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a code to parse a JSON string into Python objects.\n\njson_string = '{\"name\": \"John Doe\", \"age\": 42 }' [/INST] import json\n\njson_string = '{\"name\": \"John Doe\", \"age\": 42 }'\ndata = json.loads(json_string)\n\nprint(data['name']) # John Doe\nprint(data['age']) # 42</s>"
  },
  {
    "text": "<s>[INST] Build a program in C++ which finds the largest element in an array.\n\nint arr[] = {2, 3, 5, 8, 9} [/INST] #include <iostream> \nusing namespace std;\n\n// Finds the largest element in the array \nint findLargestElement(int arr[], int n) \n{ \n\t// Initialize maximum element \n\tint max = arr[0]; \n\n\t// Traverse array elements from second and \n\t// compare every element with current max \n\tfor (int i = 1; i < n; i++) \n\t\tif (arr[i] > max) \n\t\t\tmax = arr[i]; \n\n\treturn max; \n} \n\n// Driven program \nint main() \n{ \n\tint arr[] = {2, 3, 5, 8, 9}; \n\tint n = sizeof(arr) / sizeof(arr[0]); \n\t\n\tcout << \"Largest Element = \" << findLargestElement(arr, n); \n\t\n\treturn 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a function in Java to validate whether an input integer is a prime number.\n\nint n = 7 [/INST] public static boolean isPrime(int n) \n{ \n    // Corner case \n    if (n <= 1) \n        return false; \n  \n    // Check from 2 to n-1 \n    for (int i = 2; i < n; i++) \n        if (n % i == 0) \n            return false; \n  \n    return true; \n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in Python which reads a string and reorders it alphabetically.\n\nstring s = 'dcba' [/INST] def reorder_string(s):\n    s = sorted(s)\n    return ''.join(s)\n\nprint(reorder_string('dcba'))</s>"
  },
  {
    "text": "<s>[INST] Generate a code in C to check if a sentence is a palindrome.\n\nchar str[] = \"amanama\" [/INST] #include <stdio.h> \n#include <string.h> \n\n// Function to check if a string is palindrome \nbool isPalindrome(char str[]) \n{ \n\t// Start from leftmost and rightmost corners of str \n\tint l = 0; \n\tint h = strlen(str)-1; \n\n\t// Keep comparing characters while they are same \n\twhile (h > l) \n\t{ \n\t\tif (str[l++] != str[h--]) \n\t\t\treturn false; \n\t} \n\treturn true; \n} \n\n// Main function \nint main() \n{ \n\tchar str[] = \"amanama\"; \n\n\tif (isPalindrome(str)) \n\t\tprintf(\"Yes\"); \n\telse\n\t\tprintf(\"No\"); \n\n\treturn 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a HTML code which opens a popup window. [/INST] <html>\n    <head>\n        <title>Popup Window</title>\n    </head>\n    <body>\n    \n  <!-- Trigger/Open The Modal -->\n  <button id=\"myBtn\">Open Popup Window</button>\n  \n  <!-- The Modal -->\n  <div id=\"myModal\" class=\"modal\">\n\n    <!-- Modal content -->\n    <div class=\"modal-content\">\n      <span class=\"close\">&times;</span>\n      <p>This is the popup window!</p>\n    </div>\n\n  </div>\n\n  <script>\n    // Get the modal\n    var modal = document.getElementById(\"myModal\");\n\n    // Get the button that opens the modal\n    var btn = document.getElementById(\"myBtn\");\n\n    // Get the <span> element that closes the modal\n    var span = document.getElementsByClassName(\"close\")[0];\n\n    // When the user clicks the button, open the modal \n    btn.onclick = function() {\n        modal.style.display = \"block\";\n    }\n\n    // When the user clicks on <span> (x), close the modal\n    span.onclick = function() {\n        modal.style.display = \"none\";\n    }\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function(event) {\n        if (event.target == modal) {\n            modal.style.display = \"none\";\n        }\n    }\n  </script>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Build a program in C to find all prime numbers within a given range.\n\nint lower = 1;\nint upper = 20; [/INST] #include <stdio.h>  \nvoid primeCount(int lower, int upper) \n{ \n    while (lower < upper) { \n        int flag = 0; \n  \n        for (int i = 2; i <= lower / 2; ++i) { \n            if (lower % i == 0) { \n                flag = 1; \n                break; \n            } \n        } \n  \n        if (flag == 0) \n            printf(\"%d \", lower); \n  \n        ++lower; \n    } \n} \n  \n// Driver program \nint main() \n{ \n    int lower = 1;\n    int upper = 20;\n    primeCount(lower, upper); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a MySQL query to find the 3 employees with the highest salaries. [/INST] SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 3;</s>"
  },
  {
    "text": "<s>[INST] Generate a PHP code to determine if a number is odd or even.\n\n$num = 3 [/INST] <?php\n\nfunction isEven($num) {\n    return ($num%2 == 0);\n}\n\n$num = 3;\n \nif(isEven($num)) {\n    echo $num.\" is even\";\n} else {\n    echo $num.\" is odd\";\n}\n\n?></s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to join two tables called Employees and Departments.\n\nEmployees table has the following columns:\nEmp_ID: int\nName: string\nAge: int\nDept_ID: int\n\nDepartments table has the following columns:\nDept_ID: int\nDept_Name: string\nLocation: string [/INST] SELECT e.Name, e.Age, d.Dept_Name, d.Location\nFROM Employees e\nINNER JOIN Departments d \nON e.Dept_ID = d.Dept_ID;</s>"
  },
  {
    "text": "<s>[INST] Parse a given XML document using the ElementTree module.\n\n<note>\n  <to>John</to>\n  <from>Alice</from>\n  <heading>Greeting</heading>\n  <body>Hi John, how are you?</body>\n</note> [/INST] import xml.etree.ElementTree as ET\n\ntree = ET.parse('data.xml')\nroot = tree.getroot()\n\nfor child in root:\n print(child.tag, child.attrib, child.text)</s>"
  },
  {
    "text": "<s>[INST] Create a function to format a given number to two decimal places. [/INST] def format_number(num):\n return '{0:.2f}'.format(num)</s>"
  },
  {
    "text": "<s>[INST] Write pseudocode to sort a given list of integers using bubble sort. [/INST] # Set a swap flag to true\nswap = true \n# While the flag is true\nwhile swap \n  # Set the swap flag to false\n  swap = false\n  # Iterate through the list\n  for i in range(len(list) - 1):\n    # Swap adjacent element if they are out of order\n    if list[i] > list[i + 1]:\n      temp = list[i]\n      list[i] = list[i + 1]\n      list[i + 1] = temp\n      # Set the flag back to true\n      swap = true</s>"
  },
  {
    "text": "<s>[INST] Compare two given JSON objects and create a merged object.\n\nObject A: {\n\t\"name\": \"John\",\n\t\"age\": 35,\n\t\"interests\": [\"music\"]\n}\nObject B: {\n\t\"name\": \"John\",\n\t\"hobbies\": [\"cycling\"]\n} [/INST] def merge_json(json_a, json_b):\n # Create a new object\n merged = dict()\n # Iterate through the keys in both objects\n for key in json_a.keys() | json_b.keys():\n   # Merge the values of matching keys\n   if key in json_a and key in json_b:\n     if isinstance(json_a[key], list) and isinstance(json_b[key], list):\n       merged[key] = json_a[key] + json_b[key]\n     else:\n       merged[key] = [json_a[key], json_b[key]]\n   # Add keys that only exist in one object\n   elif key in json_a:\n     merged[key] = json_a[key]\n   elif key in json_b:\n     merged[key] = json_b[key]\n # Return the merged object\n return merged</s>"
  },
  {
    "text": "<s>[INST] Create a CSS selector to target all <p> elements with the class \"description\". [/INST] p.description {\n\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Perl regular expression to verify if a given string is a valid email address. [/INST] if ($string =~ m/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/) {\n print \"Valid email address\\n\";\n}</s>"
  },
  {
    "text": "<s>[INST] Identify the correct output of this Java program given the input.\n\nInput: Hello [/INST] Hello</s>"
  },
  {
    "text": "<s>[INST] Find and remove the bug from this Python code.\n\ndef function(a):\n    b = a / 0.5\n    c = a / 2.0\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\" [/INST] def function(a):\n    b = a * 2\n    c = a * 0.5\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"</s>"
  },
  {
    "text": "<s>[INST] Sort an array of integers in C++.\n\n[4, 2, 9, 5, 1, 3] [/INST] int array [] = {4, 2, 9, 5, 1, 3};\nint n = sizeof(array)/sizeof(array[0]);\n \n//sort the array\nstd::sort(array, array+n);\n \n//print the sorted array\nfor (int i=0; i<n; i++)\n   cout << array[i] << \" \";</s>"
  },
  {
    "text": "<s>[INST] Create a database table in SQL.\n\nTable Name: User\nColumns: user_id, username, password [/INST] CREATE TABLE User (\n   user_id INT NOT NULL,\n   username VARCHAR(50) NOT NULL,\n   password VARCHAR (50) NOT NULL,\n   PRIMARY KEY(user_id)\n);</s>"
  },
  {
    "text": "<s>[INST] What is the output of this Java program?\n\npublic class Main {\n    public static void main(String [] args) {\n        String name = \"John\";\n        int age = 34;\n        System.out.println(\"My name is \" + name + \" and I am \" + age + \" years old.\");\n    }\n} [/INST] My name is John and I am 34 years old.</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression to find all occurrences of a pattern in a string.\n\nString: \"The quick brown fox jumps over the lazy dog\"\nPattern: \"fox\" [/INST] /fox/g</s>"
  },
  {
    "text": "<s>[INST] How would you check if a string contains only digits in C++? [/INST] std::string str = \"123456\";\nbool result = std::all_of(str.begin(), str.end(), ::isdigit);</s>"
  },
  {
    "text": "<s>[INST] Compress a string using Huffman coding in Python.\n\nString: \"aaabbcc\" [/INST] def get_freq_list(s): \n      \n    # dictionaries are efficient for such a task \n    freq_list = {} \n  \n    for char in s: \n        if char in freq_list.keys(): \n            freq_list[char] += 1\n        else: \n            freq_list[char] = 1\n  \n    return freq_list \n  \ndef create_huffman_tree(freq_list): \n  \n    # create a priority queue \n    # to pop two minimum element each time \n    priority_queue = [] \n    for key in freq_list.keys(): \n        node = Node(key, freq_list[key]) \n        heapq.heappush(priority_queue, node) \n  \n    while len(priority_queue) > 1: \n        left_node = heapq.heappop(priority_queue) \n        right_node = heapq.heappop(priority_queue) \n  \n        new_node = Node(None, \n              left_node.freq + right_node.freq, \n              left_node, \n              right_node) \n        heapq.heappush(priority_queue, new_node) \n  \n    huffman_tree = heapq.heappop(priority_queue) \n    return huffman_tree \n    \ndef compress_string(huffman_tree, symbols): \n  \n    # create a character-code dict\n    code_dict = {} \n    _generate_codes(huffman_tree, '', code_dict) \n  \n    # encode the string \n    encoded_str = '' \n    for char in symbols: \n        encoded_str += code_dict[char] \n  \n    return encoded_str</s>"
  },
  {
    "text": "<s>[INST] Find the longest common subsequence for two strings in C++.\n\nString 1: \"abcdef\"\nString 2: \"abdee\" [/INST] int LCS(string X, string Y, int m, int n)\n{\n    int L[m + 1][n + 1];\n    int i, j;\n\n    for (i = 0; i <= m; i++)\n    {\n        for (j = 0; j <= n; j++)\n        {\n            if (i == 0 || j == 0)\n                L[i][j] = 0;\n            else if (X[i - 1] == Y[j - 1])\n                L[i][j] = L[i - 1][j - 1] + 1;\n            else\n                L[i][j] = max(L[i - 1][j], L[i][j - 1]);\n        }\n    }\n\n    return L[m][n];\n}</s>"
  },
  {
    "text": "<s>[INST] Edit this HTML code to add a meta tag.\n\n<head>\n    <title>This is a title</title>\n</head> [/INST] <head>\n    <title>This is a title</title>\n    <meta name=\"description\" content=\"\">\n</head></s>"
  },
  {
    "text": "<s>[INST] Suggest a way to improve the C++ program.\n\n#include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n return 0;\n} [/INST] #include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n std::cout << \"This is a C++ program.\" << std::endl;\n return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Can you retrieve the item at index 3 from the following array?\n\nint[] arr = {11, 30, 45, 19, 20, 60}; [/INST] int itemAtIndex3 = arr[3];\n// itemAtIndex3 is equal to 19</s>"
  },
  {
    "text": "<s>[INST] Write a C# method to check if a string contains a specific substring. [/INST] public bool ContainsSubstring(string text, string substring) {\n    return text.Contains(substring);\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest an algorithm to calculate the multiplication of two integers without using the operator '*'. [/INST] One approach is to use a loop to iterate over and add the second number (multiplicand) to the first number (multiplier) the number of times specified by the multiplicand. This would result in the product of the two integers. For example, to calculate 3 × 4, we would start with 0, add 4 three times (resulting in 12), and the final result is 12.\n\n// pseudocode\nfunction multiply(int a, int b) \n{\n  if (b == 0) {\n    return 0;\n  }\n  int result = 0;\n  for (int i = 0; i < b; i++) {\n    result += a;\n  }\n  return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML page that displays a red box. [/INST] <html>\n    <head>\n        <title>Red Box</title>\n    </head>\n    <body>\n        <div style=\"width: 200px;height: 200px;background-color: red;\"></div>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] What python library can be used for working with JSON data? [/INST] The Python library 'json' can be used for working with JSON data.</s>"
  },
  {
    "text": "<s>[INST] Suggest an approach to add items to an array in JavaScript. [/INST] A common approach to add items to an array in JavaScript is to use the Array.push() method. This method adds the item to the end of the array. \n\nFor example: \nlet arr = [1, 2, 3];\narr.push(4); // [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to sort an array of numbers in descending order. [/INST] let arr = [4, 5, 2, 1, 8];\narr.sort((a, b) => b - a); // [8, 5, 4, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the first name and last name of all employees whose salary is greater than $50,000. [/INST] SELECT first_name, last_name\nFROM employees\nWHERE salary > 50000;</s>"
  },
  {
    "text": "<s>[INST] Explain what the following function in Python does.\n\ndef print_max_element_idx(arr):\n    max_num = arr[0]\n    max_idx = 0\n    i = 1\n    while i < len(arr):\n        if arr[i] > max_num:\n            max_idx = i\n            max_num = arr[i]\n        i += 1\n    return max_idx [/INST] This function takes an array as input and then iterates through it. It keeps track of the maximum number and its index. At the end, it returns the index at which the maximum number is located.</s>"
  },
  {
    "text": "<s>[INST] Develop a Python program to find the most frequent element in an array.\n\n[3, 5, 1, 2, 4, 5, 5, 4, 2] [/INST] def most_frequent_element(arr):\n    count = 0\n    for i in arr:\n        current_count = arr.count(i)\n        if current_count > count:\n            count = current_count\n            most_frequent_element = i\n    return most_frequent_element\n\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5</s>"
  },
  {
    "text": "<s>[INST] Develop a SQL query to display the employees who work in the Sales department. [/INST] SELECT * \nFROM Employees \nWHERE Department = 'Sales';</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to delete an item from a python list. [/INST] You can use the built-in method \"remove\" to delete an item from a python list. \n\nFor example:\n\nmy_list = [1, 2, 3, 4, 5]\nmy_list.remove(4) # Remove item 4 from the list\n\nThe list will now be: [1, 2, 3, 5]</s>"
  },
  {
    "text": "<s>[INST] Develop a Python program to generate a list with numbers in range 3 to 12. [/INST] # Generate a list with numbers in range 3 to 12 \nmy_list = list(range(3, 13)) \nprint(my_list) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page containing a text field and a button. [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>Input Form</title>\n</head>\n<body>\n  <form>\n    <input type=\"text\" />\n    <input type=\"submit\" value=\"Submit\" />\n  </form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Suggest a way to convert a JSON object to a string in JavaScript. [/INST] The JSON.stringify() method can be used to convert a JSON object to a string in JavaScript. It takes two parameters: the object to be stringified and an optional replacer to modify the values before they are stringified. The result is a JSON-formatted string.\n\nExample: \nconst object = {'name': 'John', 'age': 25};\nconst string = JSON.stringify(object); \nconsole.log(string);  // '{\"name\": \"John\", \"age\": 25}'</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to read and print out the characters of a given string one by one.\n\nHello World [/INST] class Test \n{ \n  public static void main(String[] args) \n  { \n    String str = \"Hello World\"; \n    for (int i = 0; i < str.length(); i++) { \n        System.out.print(str.charAt(i)); \n    } \n  } \n}</s>"
  },
  {
    "text": "<s>[INST] Develop a C program to calculate the average of three numbers and display the result to the user. [/INST] #include <stdio.h>\n\n// Function to calculate the average of three numbers \nint average(int num1, int num2, int num3) \n{ \n    return (num1 + num2 + num3) / 3; \n} \n\nint main() \n{ \n    int num1, num2, num3; \n    printf(\"Enter three numbers: \");\n    scanf(\"%d %d %d\",&num1, &num2, &num3); \n\n    printf(\"Average of the three numbers is %d\", average(num1, num2, num3)); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Code a recursive solution for counting the number of characters in a given string.\n\nexample [/INST] def count_chars(string):\n    if len(string) == 0:\n        return 0\n    return 1 + count_chars(string[1:])</s>"
  },
  {
    "text": "<s>[INST] Create a web scraper that can collect data from the same web page.\n\nhttps://example.com/movies [/INST] \"\"\"\nA web scraper that can collect data from the same web page\n\"\"\"\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_data(url):\n    response = requests.get(url)\n    parser = BeautifulSoup(response.text, 'html.parser')\n    movies = parser.find_all('div', {'class': 'movie-card'})\n    data = []\n    for movie in movies:\n        title = movie.find('h3').get_text()\n        year = movie.find('div', {'class': 'movie-year'}).get_text()\n        rating = movie.find('div', {'class': 'movie-rating'}).get_text()\n        data.append({\n            'title': title,\n            'year': year,\n            'rating': rating\n        })\n    return data\n\nif __name__ == \"__main__\":\n    data = get_data('https://example.com/movies')\n    print(data)</s>"
  },
  {
    "text": "<s>[INST] Write a function to filter a given list such that all any string starting with an 'S' is removed from the list.\n\n['Swallow', 'Duck', 'Finch', 'Parrot'] [/INST] def filter_list(lst):\n    return [elem for elem in lst if not elem.startswith('S')]\n\nif __name__ == \"__main__\":\n        print(filter_list(['Swallow', 'Duck', 'Finch', 'Parrot']))</s>"
  },
  {
    "text": "<s>[INST] Compute the sum of all even numbers between 1 and 50. [/INST] def sum_even(num):\n    total = 0 \n    for i in range(1, num+1):\n        if i % 2 == 0:\n            total += i\n    return total\n\nif __name__ == \"__main__\":\n    print(sum_even(50))</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm that takes in an array and determines if it is a valid BST.\n\n[9, 7, 3, 15, 20] [/INST] def is_valid_bst(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n\n    root_val = arr[0]\n    left_subtree = [i for i in arr if i < root_val]\n    right_subtree = [i for i in arr if i > root_val]\n\n    if sorted(left_subtree) == left_subtree and sorted(right_subtree, reverse=True) == right_subtree:\n        return (is_valid_bst(left_subtree) and is_valid_bst(right_subtree))\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(is_valid_bst([9, 7, 3, 15, 20]))</s>"
  },
  {
    "text": "<s>[INST] Write a code to generate a list of all possible permutations of a given string.\n\n\"ABC\" [/INST] def get_permutations(string):\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n \n    permutations = []\n    for i, char in enumerate(string):\n        for permutation in get_permutations(string[:i] + string[i+1:]):\n            permutations.append(char + permutation)\n \n    return permutations\n\nif __name__ == \"__main__\":\n    print(get_permutations(\"ABC\"))</s>"
  },
  {
    "text": "<s>[INST] Code an algorithm to reverse an array of integers.\n\n[1, 3, 4, 6, 8] [/INST] def reverse_array(arr):\n    left_index = 0\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    return arr\n\nif __name__ == \"__main__\":\n    print(reverse_array([1, 3, 4, 6, 8]))</s>"
  },
  {
    "text": "<s>[INST] Show how to convert the JSON object below to a JavaScript object\n\n{\n    \"id\": 1234,\n    \"num_sessions\": 5\n} [/INST] let data = {\n id: 1234,\n num_sessions: 5\n};\nlet object = JSON.parse(JSON.stringify(data));</s>"
  },
  {
    "text": "<s>[INST] Describe the function of the following code\n\nwhile i < n:\n    print('Hello World!') [/INST] The code snippet is a basic example of a while loop in python. The code will loop through the code that is enclosed in the block and execute it for i (initialized to 0) values between 0 and n-1. In this case, the code will print \"Hello World!\" n times.</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes as input a string and returns a new string with all the vowels removed. [/INST] def remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for letter in string:\n        if letter.lower() not in vowels:\n            new_string += letter\n    return new_string</s>"
  },
  {
    "text": "<s>[INST] Output the following JSON object as a valid HTML table\n\n[\n\t{\n\t\t\"name\": \"John\",\n\t\t\"age\": 26\n\t},\n\t{\n\t\t\"name\": \"Sarah\",\n\t\t\"age\": 30\n\t},\n\t{\n\t\t\"name\": \"Joe\",\n\t\t\"age\": 27\n\t}\n] [/INST] <table>\n\t<thead> \n\t\t<tr>\n\t\t\t<th>Name</th>\n\t\t\t<th>Age</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>John</td>\n\t\t\t<td>26</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Sarah</td>\n\t\t\t<td>30</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Joe</td>\n\t\t\t<td>27</td>\n\t\t</tr>\n\t</tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Can you generate CSS for a div with an id of \"container\" that has a width of 500px, a height of 300px, and a white background? [/INST] #container { \n  width: 500px;\n  height: 300px;\n  background-color: #FFFFFF;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that returns the name and age of each person in a table called \"people\". [/INST] SELECT name, age FROM people;</s>"
  },
  {
    "text": "<s>[INST] What is the JavaScript syntax for creating a new object? [/INST] The syntax for creating a new object in JavaScript is:  const objectName = new Object();</s>"
  },
  {
    "text": "<s>[INST] Write a function to find the area of a triangle using the formula `A = 0.5 * base * height`. [/INST] def findArea(base, height):\n    return 0.5 * base * height;</s>"
  },
  {
    "text": "<s>[INST] Write a function to calculate the surface area of a sphere using the formula `4 * pi * r^2`. [/INST] def calcSurfAreaSphere(radius):\n    pi = 3.14159\n    return 4 * pi * radius * radius;</s>"
  },
  {
    "text": "<s>[INST] Replace the placeholder with a valid JavaScript expression\n\nlet x = <placeholder>; [/INST] let x = 8 * 8;</s>"
  },
  {
    "text": "<s>[INST] Clean the input data using Python, so it is valid for a machine learning model.\n\ndata = [{'age': '30', 'income': '$1,000', 'address': 'New York'}, {'age': 'ab*', 'income': '$2,000', 'address': 'California'}] [/INST] data = [{'age': 30, 'income': 1000, 'address': 'New York'}, {'age': None, 'income': 2000, 'address': 'California'}]</s>"
  },
  {
    "text": "<s>[INST] Convert a string to lowercase, using Python.\n\nmy_string = \"Hello World\" [/INST] my_string.lower() # Output: \"hello world\"</s>"
  },
  {
    "text": "<s>[INST] Create a basic HTML structure including an h1 titled \"Welcome\". [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Welcome</title>\n</head>\n<body>\n <h1>Welcome</h1>\n\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Check if a string contains a substring, using Python.\n\nhaystack = \"The quick brown fox\"\nneedle = \"brown\" [/INST] needle in haystack # Output: True</s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to make the text in a paragraph appear italicized. [/INST] p {\n    font-style: italic;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a pseudo-code to implement a simple sorting algorithm. [/INST] // Pseudo code for simple sorting\n\n// Define a sorting function \nfunction Sort(inputList):  \n \n// Loop through the list \n  for i from 0 to length(inputList) - 1 do:\n  \n    currentMinIndex = i \n   \n    // Search the lowest element \n    for j from i + 1 to length(inputList) do:\n      \n      // Update the smallest element \n      if inputList[j]<inputList[currentMinIndex] then \n        currentMinIndex = j\n    \n    // Swap the smallest element \n    if currentMinIndex != i do: \n      Swap(inputList[currentMinIndex],inputList[i]) \n \n// Return the sorted list \n  return inputList</s>"
  },
  {
    "text": "<s>[INST] Classify this text as either positive or negative\n\nI'm not sure if I'll ever be able to turn this situation around. [/INST] Negative</s>"
  },
  {
    "text": "<s>[INST] Read this piece of code and describe it in brief.\n\ndef add(x, y):\n  return x + y [/INST] This is a simple Python function that takes two parameters, x and y, and returns the sum of them. The function can be called by passing the two inputs, and it will add them both, then return the result to the caller.</s>"
  },
  {
    "text": "<s>[INST] Can you write a code to delete all the items whose key starts with \"item\"?\n\n{\n    \"item1\": \"apple\",\n    \"item2\": \"banana\",\n    \"item3\": \"cherry\",\n    \"item4\": \"durian\",\n    \"food1\": \"bacon\"\n} [/INST] let data = {\n    \"item1\": \"apple\",\n    \"item2\": \"banana\",\n    \"item3\": \"cherry\",\n    \"item4\": \"durian\",\n    \"food1\": \"bacon\"\n};\n\n// check each key for the preffix \"item\"\nfor (let key in data) {\n  if (key.startsWith('item')) {\n    // if key starts with \"item\", delete that item from the object\n    delete data[key];\n  } \n}\n\n// output object\nconsole.log(data);</s>"
  },
  {
    "text": "<s>[INST] Write a code to output whether a given number is even or odd\n\n24 [/INST] let num = 24;\n\nif (num % 2 == 0) {\n  console.log(num + \" is an even number\");\n} else {\n  console.log(num + \" is an odd number\");\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to delete all the items whose value is lower than 5\n\n{\n    \"item1\": 10,\n    \"item2\": 7,\n    \"item3\": 3,\n    \"item4\": 4,\n    \"food1\": 2\n} [/INST] let data = {\n    \"item1\": 10,\n    \"item2\": 7,\n    \"item3\": 3,\n    \"item4\": 4,\n    \"food1\": 2\n};\n\n// check each value\nfor (let key in data) {\n  if (data[key] < 5) {\n    // if value is lower than 5, delete that item from the object\n    delete data[key];\n  } \n}\n\n// output object\nconsole.log(data);</s>"
  },
  {
    "text": "<s>[INST] Write a PHP script to convert a number in binary format\n\n24 [/INST] <?php\n    $number = 24;\n\n    // convert the number to its binary form\n    $binary_num = decbin($number);\n\n    // output the result\n    echo \"Binary representation of \".$number.\" is \".$binary_num;\n?></s>"
  },
  {
    "text": "<s>[INST] Write a method that takes 2 strings and determines if the first string contains the second string as a substring.\n\nString 1: bus ride\nString 2: ride [/INST] public static boolean isSubstring(String str1, String str2) \n{\n    if (str1.indexOf(str2) >= 0)\n        return true;\n    else\n        return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to create a new JavaScript array of n length. [/INST] var array = [];\nfor (var i = 0; i < n; i++) {\n  array.push(null);\n}</s>"
  },
  {
    "text": "<s>[INST] Given a number N, write a function to check if N is prime.\n\nNumber: 11 [/INST] function isPrime(n)\n{\n    // alleven numbers are not prime\n    if (n % 2 == 0) return false;\n\n    // check odd divisors b/w 3 and sqrt(n)\n    let limit = Math.sqrt(n);\n    for (let i = 3; i <= limit; i=i+2)\n    {\n        // if evenly divisible then not prime\n        if (n % i == 0) return false;\n    }\n\t\n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] How would you check if an array contains a specific value in JavaScript? [/INST] Using the Array.prototype.includes() method:\n\nfunction checkIfArrayContainsValue(arr, value) {\n  if(arr.includes(value)) {\n    return true;\n  }\n  return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a html form that gets user's name, email, and a valid phone number. [/INST] <form action=\"action_page.php\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" id=\"name\" name=\"Name\" required><br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" id=\"email\" name=\"Email\" required><br>\n  <label for=\"phone\">Phone:</label><br>\n  <input type=\"number\" name=\"phone\" pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\" required><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Design a class with 3 data members in Python. [/INST] class MyClass: \n  def __init__(self, member1, member2, member3): \n    self.member1 = member1\n    self.member2 = member2\n    self.member3 = member3</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to select all HTML elements with the class name \"button\" from an HTML document. [/INST] // Select all elements with class name \"button\"\nconst buttons = document.querySelectorAll(\".button\");\n// Loop through the element list\nfor (let i = 0; i < buttons.length; i++) {\n  const button = buttons[i];\n  // Do something with the elements\n  // ...\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a function that takes a character and returns true if the character is an uppercase letter. [/INST] function isUpperCase(ch) {\n  if (ch.charCodeAt(0) >= 65 && ch.charCodeAt(0) <= 90) {\n    return true;\n  }\n  return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML radio button that allows users to select between two options. [/INST] <input type=\"radio\" name=\"selection\" value=\"option1\"> Option 1\n<input type=\"radio\" name=\"selection\" value=\"option2\"> Option 2</s>"
  },
  {
    "text": "<s>[INST] How would you check if two strings are anagrams in JavaScript? [/INST] function isAnagram(str1, str2) { \n  // Compare the length of the two string\n  if (str1.length !== str2.length) { \n    return false; \n  } \n \n  // Convert both strings to lowercase\n  str1 = str1.toLowerCase(); \n  str2 = str2.toLowerCase(); \n \n  // Store the frequency of characters\n  // in the first string\n  const frequencyCounter1 = {}; \n  for (let char of str1) { \n    frequencyCounter1[char] = (frequencyCounter1[char] || 0) + 1; \n  } \n \n  // Store the frequency of characters\n  // in the second string\n  const frequencyCounter2 = {}; \n  for (let char of str2) { \n    frequencyCounter2[char] = (frequencyCounter2[char] || 0) + 1; \n  }\n \n  // Compare the frequency of characters \n  for (let key in frequencyCounter1) { \n    if (!(key in frequencyCounter2)) { \n      return false; \n    } \n   \n    if (frequencyCounter2[key] !== frequencyCounter1[key]) { \n      return false; \n    } \n  }  \n  return true; \n}</s>"
  },
  {
    "text": "<s>[INST] Resolve the given linked list into a cycle using the Floyd's Cycle algorithm. [/INST] // initialise slow and fast pointers \nlet slow = head;\nlet fast = head;\n\nwhile (fast !== null && fast.next !== null) {  \n  fast = fast.next.next;  \n  if(slow === fast) { \n    break;\n  }  \n  slow = slow.next;  \n} \n\n// check if there is a cycle  \nif (slow === null || fast === null || fast.next === null) { \n  return;\n}  \n// initialize slow pointer to head  \nslow = head;  \nwhile (slow !== fast) {  \n  slow = slow.next;  \n  fast = fast.next;  \n} \n\n// assign the cycle end  \nfast.next = slow;</s>"
  },
  {
    "text": "<s>[INST] What is the highest peak in the world? [/INST] The highest peak in the world is Mount Everest, which has a summit elevation of 8,848 meters (29,029 feet).</s>"
  },
  {
    "text": "<s>[INST] Create a Python list of 10 numbers from 0 to 9. [/INST] numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all the customers who are over 50 years of age. [/INST] SELECT * FROM Customers WHERE age > 50;</s>"
  },
  {
    "text": "<s>[INST] Reverse a string without using the reverse() function. [/INST] def reverse_string(s): \n    str = \"\" \n    for i in s: \n        str = i + str\n    return str</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to generate a random number between 25 and 75. [/INST] public class RandomNumber {\n    public static void main(String[] args) {\n        // Generate a random number between 25 and 75\n        int max = 75;\n        int min = 25;\n        int range = max - min + 1;\n\n        int randomNumber = (int) (Math.random() * range) + min;\n\n        System.out.println(randomNumber);\n     }\n }</s>"
  },
  {
    "text": "<s>[INST] Add comments to this C++ code segment to explain what it does:\n\nint x = 5;\nwhile x > 0\nx--; [/INST] // This code segment sets the value of the variable x to 5, \n// and then decrements it until it becomes 0.\nint x = 5;\nwhile (x > 0) { // loop runs until x is 0\n     x--;       // decrement x\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to remove all spaces from a string. [/INST] function removeSpaces(str) { \n  return str.replace(/ /g,\"\"); \n}</s>"
  },
  {
    "text": "<s>[INST] What is the maximum number of threads simultaneously running in a single process? [/INST] The maximum number of threads that can simultaneously run in a single process is limited by the resources of the system, such as the amount of available memory and the scheduling algorithm employed. Generally, a typical modern system will allow up to hundreds or even thousands of threads to run concurrently.</s>"
  },
  {
    "text": "<s>[INST] Generate a valid HTML form for a login page.\n\nUsername:\nPassword: [/INST] <form action=\"login.php\" method=\"post\">\n    <label for=\"username\">Username:</label><br>\n    <input type=\"text\" name=\"username\" id=\"username\"><br>\n    <label for=\"password\">Password:</label><br>\n    <input type=\"password\" name=\"password\" id=\"password\"><br>\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Use CSS to create a table with 3 columns and 5 rows. [/INST] <table> \n  <tr> \n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th> \n  </tr>\n  <tr> \n    <td>Row 1, Column 1</td>\n    <td>Row 1, Column 2</td>\n    <td>Row 1, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 2, Column 1</td>\n    <td>Row 2, Column 2</td>\n    <td>Row 2, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 3, Column 1</td>\n    <td>Row 3, Column 2</td>\n    <td>Row 3, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 4, Column 1</td>\n    <td>Row 4, Column 2</td>\n    <td>Row 4, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 5, Column 1</td>\n    <td>Row 5, Column 2</td>\n    <td>Row 5, Column 3</td> \n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Create a regular expression to validate an e-mail address. [/INST] ^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a form that validates a user's email address. [/INST] <html>\n  <head>\n    <title>Email Validation Form</title>\n  </head>\n  <body>\n    <h1>Email Validation Form</h1>\n    <form action=\"/\" method=\"POST\">\n      <input type=\"text\" name=\"email\" placeholder=\"Enter your email address\">\n      <button type=\"submit\">Submit</button>\n    </form>\n    <script>\n      let inputField = document.querySelector('input');\n\n      inputField.addEventListener('input', function() {\n        let emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n        let isEmailValid = inputField.value.match(emailRegex);\n        inputField.style.borderColor = (isEmailValid) ? \"green\" : \"red\";\n      });\n    </script>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a program in Ruby that encrypts the given data using AES-256 encryption algorithm.\n\n\"Hello, I'm a secret message to be encrypted!\" [/INST] require 'openssl'\nrequire 'base64'\n\ndef aes_encrypt(data, key)\n  aes = OpenSSL::Cipher::AES.new(256, :ECB)\n  aes.encrypt\n  aes.key = key\n\n  encrypted_data = aes.update(data) + aes.final\n  Base64.encode64(encrypted_data).gsub(\"\\n\", '')\nend\n\nputs aes_encrypt(\"Hello, I'm a secret message to be encrypted!\", '1234567890123456')</s>"
  },
  {
    "text": "<s>[INST] In Java, write a function for calculating the Fibonacci number for a given input n. [/INST] public static long fibonacci(int n) \n    { \n        if (n <= 1) \n            return n; \n        return fibonacci(n-1) + fibonacci(n-2); \n    }</s>"
  },
  {
    "text": "<s>[INST] Design a database schema for storing user information such as their email, name and avatar. [/INST] CREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  email VARCHAR(50),\n  name VARCHAR(50),\n  avatar BLOB\n);</s>"
  },
  {
    "text": "<s>[INST] Code a method in Python that determines the number of words in a given string. [/INST] def word_count(s):\n  return len(s.split())</s>"
  },
  {
    "text": "<s>[INST] Describe in Python a custom exception for handling database connection errors. [/INST] class DBConnectionError(Exception):\n  def __init__(self, message):\n    self.message = message\n    \n  def __str__(self):\n    return 'An Error Occured:\\n\\t' + self.message</s>"
  },
  {
    "text": "<s>[INST] Sort a list of integers in ascending order using selection sort.\n\n[ 9, 5, 2, 0, 7, 4, 1, 8, 6, 3] [/INST] def selection_sort(list): \n\n    for i in range(len(list)): \n  \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j\n        list[i], list[min_idx] = list[min_idx], list[i]\n\nlist = [9, 5, 2, 0, 7, 4, 1, 8, 6, 3]\nselection_sort(list) \nprint (\"Sorted array:\", list)</s>"
  },
  {
    "text": "<s>[INST] Create a program in Java that validates an input string for containing only numbers. [/INST] public class NumberValidation {\n\n    public boolean isNumeric(String str) {\n        try {\n            Double.parseDouble(str);\n            return true;\n        } catch(NumberFormatException e){\n            return false;\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write C++ code to calculate the sum of the elements in an array. [/INST] int sumArrayElements(int arr[], int n) { \n    int sum = 0; \n    for (int i = 0; i < n; i++) \n        sum += arr[i]; \n  \n    return sum; \n}</s>"
  },
  {
    "text": "<s>[INST] Generate a URL in JavaScript for an API endpoint to fetch data from a given database table.\n\nTable Name: users [/INST] const generateURL = (tableName) => {\n  return `https://website.com/api/v1/table/${tableName}`;\n}\n\nconst url = generateURL('users');\n// Output: https://website.com/api/v1/table/users</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page that containsthe loading icon for a web page request. [/INST] <!DOCTYPE html>\n<html>\n  <head>\n    <title>Loading Icon</title>\n  </head>\n  <body>\n  <div id=\"loading-icon\">\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n  </div>\n  <style type=\"text/css\">\n    #loading-icon {\n      margin: auto;\n      text-align: center;\n      width: 120px;\n    }\n\n    #loading-icon span {\n      background-color: #E3EEF6;\n      border-radius: 50%;\n      display: inline-block;\n      height: 10px;\n      margin-right: 10px;\n      width: 10px;\n      animation: loader 2s ease-in infinite;\n    }\n\n    #loading-icon span:nth-child(1) {\n      animation-delay: 0s;\n    }\n\n    #loading-icon span:nth-child(2) {\n      animation-delay: 0.3s;\n    }\n\n    #loading-icon span:nth-child(3) {\n      animation-delay: 0.6s;\n    }\n\n    #loading-icon span:nth-child(4) {\n      animation-delay: 0.9s;\n    }\n\n    #loading-icon span:nth-child(5) {\n      animation-delay: 1.2s;\n    }\n\n    @keyframes loader {\n      25% { transform: scale(1.3); }\n      50% { transform: scale(1.1); }\n      75% { transform: scale(1.3); }\n    }\n  </style>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Implement a function in JavaScript that flips a given binary tree. [/INST] function invertBinaryTree(tree) {\n  if (!tree) {\n    return;\n  }\n  let temp = tree.left;\n  tree.left = tree.right;\n  tree.right = temp;\n\n  invertBinaryTree(tree.left);\n  invertBinaryTree(tree.right);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript that displays an alert with a given message. [/INST] function alertMe(message) {\n  alert(message);\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the third highest salary in a table. [/INST] SELECT salary \nFROM employee \nORDER BY salary DESC \nLIMIT 2,1;</s>"
  },
  {
    "text": "<s>[INST] Translate the following C++ program into Java.\n\n#include <iostream>\n \nint main() {\n  int num1 = 0;\n  int num2 = 0;\n  int result = 0;\n \n  std::cout << \"Enter two numbers separated by a space: \";\n  std::cin >> num1 >> num2;\n \n  result = num1 + num2;\n \n  std::cout << \"The sum of \" << num1 << \" and \" << num2 \n            << \" is \" << result;\n \n  return 0;\n} [/INST] import java.util.Scanner;\n\npublic class Program {    \n    public static void main(String[] args) {      \n        Scanner scanner = new Scanner(System.in);\n        int num1 = 0;\n        int num2 = 0;\n        int result = 0;\n       \n        System.out.print(\"Enter two numbers separated by a space: \");\n        num1 = scanner.nextInt();\n        num2 = scanner.nextInt();\n       \n        result = num1 + num2;\n       \n        System.out.println(\"The sum of \" + num1 + \" and \"\n         + num2 + \" is \" + result);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML code to include a new form field.\n\n<html>\n<head>\n    <title>My Form</title>\n</head>\n<body>\n    <form>\n        <label for=\"name\">Name</label>\n        <input type=\"text\" id=\"name\">\n    </form>\n</body>\n</html> [/INST] <html>\n<head>\n    <title>My Form</title>\n</head>\n<body>\n    <form>\n        <label for=\"name\">Name</label>\n        <input type=\"text\" id=\"name\">\n        <label for=\"address\">Address</label>\n        <input type=\"text\" id=\"address\">\n    </form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Generate a list containing the squares of numbers from 0 to 10. [/INST] [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to generate a randomized list of 10 integers. [/INST] import random\n\nrandom_numbers = random.sample(range(0, 101), 10)\nprint(random_numbers)</s>"
  },
  {
    "text": "<s>[INST] What is an API? [/INST] API stands for Application Programming Interface. It is a set of routines, protocols, and tools for building software applications. APIs specify how software components should interact and are used when programming graphical user interface (GUI) components. APIs are used for accessing web-based services, such as entering and retrieving data from a remote database.</s>"
  },
  {
    "text": "<s>[INST] Write a function to compute the maximum of two given numbers in JavaScript. [/INST] function max(num1, num2) {\n  return (num1 > num2) ? num1 : num2;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to count the number of rows in a table called 'users'. [/INST] SELECT COUNT(*) FROM users;</s>"
  },
  {
    "text": "<s>[INST] What is Machine Learning? [/INST] Machine Learning is a subset of Artificial Intelligence that enables computers to learn from patterns in data without explicitly being programmed. It enables them to improve over time by recognizing patterns and adjusting to new data. Machine Learning algorithms are used in a wide variety of applications, such as facial recognition, image recognition, natural language processing, predictive analytics, and robotics.</s>"
  },
  {
    "text": "<s>[INST] Generate a JavaScript object with two properties. [/INST] const myObject = {\n    name: 'John',\n    age: 25\n};</s>"
  },
  {
    "text": "<s>[INST] Write CSS code to change the background color of a div element. [/INST] #myDiv {\n    background-color: #00F;\n}</s>"
  },
  {
    "text": "<s>[INST] How does a for loop work? [/INST] A for loop is a type of loop used in programming languages to execute a set of instruction multiple times. It consists of an initialization statement, condition expression, and a loop body. The code block of the loop is executed until the condition expression evaluates to false. The initialization statement is processed once, while the condition expression is evaluated each time before the loop body is executed. If the condition expression is true, the loop is executed; otherwise, the loop is terminated.</s>"
  },
  {
    "text": "<s>[INST] Create a variable in Python with the name “studentName” and assign it your name as a string. [/INST] studentName = \"John\"</s>"
  },
  {
    "text": "<s>[INST] Extract the type of the following object in Python.\n\na = [1, 2, 3] [/INST] list</s>"
  },
  {
    "text": "<s>[INST] Identify the datatype of the following object.\n\n124 [/INST] integer</s>"
  },
  {
    "text": "<s>[INST] Write a function to count the occurence of an item in a given list.\n\n[1, 2, 3, 2, 4] [/INST] def count_occurrence(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n# Driver Code \narr = [1, 2, 3, 2, 4]  \nx = 2\nprint(\"Occurrence of the number is: \", count_occurrence(arr, x))</s>"
  },
  {
    "text": "<s>[INST] Describe the difference between a class and object in object oriented programming. [/INST] A class is a blueprint for an object. It defines the data type of a particular object including the kinds of data it can store and the operations it can perform. An object is an instance of a class with actual values for the data elements it contains. It also has behavior, which is associated with the class functions that operates on the data elements of the object. Therefore, a class is a template used to create objects that share the same characteristics.</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to print all integer numbers from a given range.\n\nfrom 1 to 10 [/INST] for i in range(1, 11):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Convert the following statement into valid Python syntax.\n\nx = \"string\" [/INST] x = 'string'</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to sort a given list of numbers in ascending order.\n\n[3, 7, 1, 5, 4] [/INST] def sort_numbers_ascending(numbers): \n    # Sort the list \n    numbers.sort() \n    return numbers\n  \n# Driver code \nnums = [3, 7, 1, 5, 4] \n\nprint(sort_numbers_ascending(nums))</s>"
  },
  {
    "text": "<s>[INST] Modify the following code so that it can accept two parameters.\n\ndef print_message():\n    print(\"Hello there!\") [/INST] def print_message(message, name):\n    print(f\"{message}, {name}!\")</s>"
  },
  {
    "text": "<s>[INST] Parse the following HTML string and extract the text of the given tag.\n\n<div class=\"header\">Hello!</div> [/INST] from bs4 import BeautifulSoup\n\nhtml_string = \"<div class=\"header\">Hello!</div>\"\nsoup = BeautifulSoup(html_string)\n\nheader_tag = soup.find('div', {'class': 'header'})\n\nif header_tag is not None:\n    print(header_tag.text)</s>"
  },
  {
    "text": "<s>[INST] Create a Python dictionary with the following elements\n\nName: John\nAge: 25\nCity: New York [/INST] data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all records from the \"people\" table that have a last name that begins with \"Smith\". [/INST] SELECT *\n FROM people\n WHERE last_name LIKE 'Smith%';</s>"
  },
  {
    "text": "<s>[INST] Count the occurrences of the word \"love\" in the given text.\n\nI love you so much, my love! [/INST] 2</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to print out the sum of the first 100 integers. [/INST] #include <iostream> \nusing namespace std; \n  \nint main() \n{ \n    int i, sum = 0; \n      \n    //Computes the sum \n    for (i = 1; i <= 100; i++) \n    { \n        sum += i; \n    } \n      \n    cout << \"Sum of first 100 natural numbers = \"\n         << sum << endl; \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Calculate the dot product of two vectors.\n\n[1, 2, 3], [2, 4, 6] [/INST] 28</s>"
  },
  {
    "text": "<s>[INST] Write a PHP code snippet to validate an email address. [/INST] <?php\nfunction validateEmail($email) {\n    // regex for validating email addresses\n    return filter_var($email, FILTER_VALIDATE_EMAIL); \n}</s>"
  },
  {
    "text": "<s>[INST] Generate the output for the following code.\n\nvar array = [2,4,6,8];\nfor(i=0;i<array.length;i++){\nconsole.log(array[i] + 2);\n} [/INST] 4\n6\n8\n10</s>"
  },
  {
    "text": "<s>[INST] Write a Python function that takes a list of floats as an argument and returns the sum of all elements.\n\nsome_list = [1.5, 5.9, 3.7, 5.2] [/INST] def sum_list(some_list):\n    result = 0\n    for num in some_list:\n        result += num\n    return result\n\nprint(sum_list(some_list)) # Prints 15.3</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code snippet to set the font size for all elements to 12px. [/INST] * {\n  font-size: 12px;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script to get the sum of two numbers.\n\nnum1 = 12\nnum2 = 8 [/INST] <?php\n$num1 = 12;\n$num2 = 8;\n$sum = $num1 + $num2;\necho \"The sum of $num1 and $num2 is: \".$sum;\n?></s>"
  },
  {
    "text": "<s>[INST] Create an object in JavaScript to store a student's information.\n\nname = \"John Doe\"\nage = 18 [/INST] let studentObj = {\n  name: \"John Doe\",\n  age: 18\n}</s>"
  },
  {
    "text": "<s>[INST] Using R, calculate the average of a list of numbers given as an argument.\n\nlist_num = c(4, 5, 9, 10, 2) [/INST] average_num <- function(list_num){\n  mean(list_num)\n}\n\n# call the function \naverage_num(list_num) # Prints 6</s>"
  },
  {
    "text": "<s>[INST] Write an expression in JavaScript to check if a number is divisible by 2 or not.\n\nnumber = 12 [/INST] (number % 2 === 0) ? true : false</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the average salary from the 'employee' table where the job type is 'manager'. [/INST] SELECT AVG(salary) FROM employee WHERE job_type=\"manager\";</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet using Python to pop an element from a list.\n\nsome_list = [1, 2, 3] [/INST] some_list.pop() # pops 3</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script to find the largest number in a list of numbers.\n\nnums = [6, 15, 4, 1, 22] [/INST] #!/bin/bash\n\nnums=(6 15 4 1 22)\nlargest=${nums[0]}\n \nfor i in ${nums[@]}\ndo\n    if [ $i -gt $largest ] \n    then \n        largest=$i \n    fi\ndone\n \necho \"Largest number in list is: $largest\"</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet in C to find the number of elements in an array.\n\narray[] = {2, 7, 3, 8, 11} [/INST] #include <stdio.h> \n \nint array[] = {2, 7, 3, 8, 11};\nint array_size = (sizeof(array)/sizeof(array[0]));\n \nprintf(\"Number of elements in array: %d\\n\", array_size);</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to convert a Celsius temperature to Fahrenheit. [/INST] function celsiusToFahrenheit(celsius) {\n  let temperatureInFahrenheit = celsius * (9 / 5) + 32;\n  return temperatureInFahrenheit;\n}</s>"
  },
  {
    "text": "<s>[INST] Given an array of numbers, write a function to find the maximum, minimum and average values.\n\nnumbers = [1, 15, 4, 5, 28, 35, 25] [/INST] def find_max_min_avg(numbers):\n    max_val = max(numbers)\n    min_val = min(numbers)\n    avg_val = sum(numbers) / len(numbers)\n\n    return max_val, min_val, avg_val</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the average salary from the \"employee\" table. [/INST] SELECT AVG(salary)\nFROM employee;</s>"
  },
  {
    "text": "<s>[INST] What is the best data structure to store a dictionary? [/INST] The best data structure to store a dictionary is a hash table. A hash table is an efficient data structure that uses key-value pairs to store data. It provides fast insertion, deletion and search operations, allowing it to be used to search for a specific key in a dictionary quickly and easily.</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script to log user activity. [/INST] <?php\n// create a new file\n$log_file = fopen(\"log.txt\", \"a\") or die(\"Unable to open file!\");\n\n// write the data to the log file\n$data = time() . \" : User activity logged \\n\";\nfwrite($log_file, $data);\n\n// close the log file\nfclose($log_file);\n?></s>"
  },
  {
    "text": "<s>[INST] Implement a function that takes two strings and checks whether they are anagrams.\n\nstr1 = \"cinema\"\nstr2 = \"iceman\" [/INST] def anagram_checker(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        char_list1 = [0] * 26\n        for char in str1:\n            char_list1[ord(char)-97] += 1\n        for char in str2:\n            if char_list1[ord(char)-97] == 0:\n                return False\n            char_list1[ord(char)-97] -= 1\n        return True</s>"
  },
  {
    "text": "<s>[INST] Given a list of student class enrollments, group students into classes that correspond with their major.\n\nstudent_list = [{\"name\":\"John\", \"major\":\"Computer Science\"}, {\"name\":\"Alice\", \"major\":\"Business Administration\"},\n {\"name\":\"Bob\", \"major\":\"Computer Science\"}, {\"name\":\"Claire\", \"major\":\"Business Administration\"}] [/INST] def group_students_by_major(student_list):\n    # create a dictionary with two empty lists \n    student_groups = {\"Computer Science\": [], \"Business Administration\": []}\n    # iterate through the student list\n    for student in student_list:\n        # for each student in the list, add their name to the respective list\n        student_groups[student[\"major\"]].append(student[\"name\"])\n    # return the dictionary of groups\n    return student_groups</s>"
  },
  {
    "text": "<s>[INST] Implement a function that calculates the greatest common divisor of two integers.\n\nn1 = 15\nn2 = 10 [/INST] def cal_gcd(n1, n2): \n   if n2 == 0: \n       return n1 \n   else: \n       return cal_gcd(n2, n1 % n2) \n \ngcd = cal_gcd(n1, n2) \nprint (\"GCD of \" + str(n1) + \" and \" + str(n2) + \" is \" + str(gcd))</s>"
  },
  {
    "text": "<s>[INST] Implement a function that takes a number and returns its multiplication table up to 10.\n\nn = 5 [/INST] def print_multiplication_table(n):\n    # iterate through 0 to 10\n    for i in range(1, 11):\n        print(str(n) + 'x' + str(i) + ' = ' + str(n*i))\n\nprint_multiplication_table(n)</s>"
  },
  {
    "text": "<s>[INST] Implement a function that finds the index of an item in a list.\n\nlst = [1,2,3,4]\nitem = 3 [/INST] def search(lst, item):\n    for index, element in enumerate(lst):\n        if element == item:\n            return index\n    return -1\n\nsearch(lst, item)</s>"
  },
  {
    "text": "<s>[INST] Implement a function that takes a list and reverses its order\n\nlst = [1,2,3,4] [/INST] def reverse(lst):\n    return lst[::-1]\n\nreverse(lst)</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java to represent a circle with two fields for its radius and color. [/INST] public class Circle { \n    private double radius; \n    private String color; \n  \n    public Circle(double r, String c) \n    { \n        this.radius = r; \n        this.color = c; \n    } \n  \n    public double getRadius() \n    { \n        return this.radius; \n    } \n  \n    public String getColor() \n    { \n        return this.color; \n    } \n  \n    public double getArea() \n    { \n        return Math.PI * this.radius * this.radius; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Define a JavaScript function to sort an array of strings in alphabetical order.\n\n[\"Tony\", \"Steve\", \"Peter\", \"Bruce\"] [/INST] function sortStrings(arr) {\n  return arr.sort((a, b) => a.localeCompare(b));\n}</s>"
  },
  {
    "text": "<s>[INST] Using HTML, create a simple table showing a list of countries and their population. [/INST] <table> \n    <tr> \n        <th>Country</th> \n        <th>Population</th> \n    </tr> \n    <tr> \n        <td>United States</td> \n        <td>328.2 million</td> \n    </tr> \n    <tr> \n        <td>China</td> \n        <td>1.44 billion</td> \n    </tr> \n    <tr> \n        <td>India</td> \n        <td>1.39 billion</td> \n    </tr> \n    <tr> \n        <td>Indonesia</td> \n        <td>269.9 million</td> \n    </tr> \n</table></s>"
  },
  {
    "text": "<s>[INST] Using CSS, create a basic box shadow effect. [/INST] box-shadow: 10px 10px 20px 10px #000000;</s>"
  },
  {
    "text": "<s>[INST] Print the decimal equivalent of a given binary number.\n\n11100011 [/INST] def binToDecimal(num): \n    # Initializing base  \n    # value to 1, i.e 2^0 \n    base = 1; \n      \n    dec_val = 0; \n      \n    # Extracting digits of  \n    # binary number from   \n    # the right most side \n    # and keeping  \n    # incrementing the base \n    # by multiply of 2 \n    temp = num \n    while(temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n          \n        dec_val += last_digit * base; \n        base = base * 2; \n      \n    return dec_val\nnum = 11100011\nprint('Decimal Equivalent of',num,'is',binToDecimal(num))</s>"
  },
  {
    "text": "<s>[INST] Create a CSS animation which will rotate a shape when the user hovers over it. [/INST] .shape {\n  width: 100px;\n  height: 100px;\n  background: red;\n\n  /* Animation */\n  animation: rotation 2s linear;\n  animation-iteration-count: infinite;\n}\n\n/* Animation Code */\n@keyframes rotation {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\n/* Specifying Hover to animate shape */\n.shape:hover {\n animation-play-state: running; \n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form with two input fields for email and password. [/INST] <form>\n  <label>Email:\n    <input type=\"email\" name=\"email\">\n  </label>\n  <label>Password:\n    <input type=\"password\" name=\"password\">\n  </label>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Program a function that takes a list of numbers as an argument, then returns a dictionary which contains the number in the list as a key and its square root as the value.\n\n[4, 9, 16, 25] [/INST] {4: 2, 9: 3, 16: 4, 25: 5}</s>"
  },
  {
    "text": "<s>[INST] Write a script for displaying the current datetime in RFC2822 format. [/INST] var date = new Date();\nvar RFC2822currentDateTime = date.toUTCString();\nconsole.log(RFC2822currentDateTime);</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string as an argument and removes all vowels (a, e, i, o, u) from it.\n\nhello world [/INST] hll wrld</s>"
  },
  {
    "text": "<s>[INST] Classify the given sentence according to the Syntactic parse tree and label each part of the sentence.\n\nI bought a car yesterday. [/INST] [ NP: I] [ VP: bought] [ NP: a car] [ AdvP: yesterday]</s>"
  },
  {
    "text": "<s>[INST] Debug the given code to output the correct result.\n\ndef temperature_converter(temperature):\n    kelvin = temperature + 273.15\n    return celsius [/INST] def temperature_converter(temperature):\n    celsius = temperature\n    kelvin = temperature + 273.15\n    return kelvin</s>"
  },
  {
    "text": "<s>[INST] Create a web page with a form for user input of a modified text. [/INST] <html>\n<body>\n  <form action = \"processText.php\" method = \"post\">\n    <textarea rows = \"10\" cols = \"30\" name = \"modifiedText\"></textarea><br>\n    <input type = \"submit\" value = \"Submit\" />\n  </form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Using an OOP approach, create an Animal class with properties of name and a virtual property age that gets calculated based on the creation date. [/INST] class Animal {\n  constructor(name) {\n    this.name = name;\n    this.age = Date.now() - this.creationDate;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Program a function to convert a given string with no spaces to a string with underscores (_) in all spaces between words.\n\nHelloWorld [/INST] Hello_World</s>"
  },
  {
    "text": "<s>[INST] Implement a sorting algorithm for a given array in Python.\n\n[3, 2, 1, 4] [/INST] sorted_array = [1, 2, 3, 4]\n\ndef SortArray(array):\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n\nsorted_array = SortArray(array)</s>"
  },
  {
    "text": "<s>[INST] Program a function to add three integers and return the sum.\n\n2, 3 and 6 [/INST] def addThree(a, b, c):\n    return a + b + c\n\nsum = addThree(2, 3, 6)</s>"
  },
  {
    "text": "<s>[INST] What is the complexity of the algorithm to reverse a given string? [/INST] The complexity of the algorithm to reverse a given string is O(n).</s>"
  },
  {
    "text": "<s>[INST] Create a program for calculating the hypotenuse of a right-angle triangle using its two sides.\n\na = 5, b = 6 [/INST] def calculateHypotenuse(a, b):\n    return (a**2 + b**2)**0.5\n\nhypotenuse = calculateHypotenuse(5, 6)</s>"
  },
  {
    "text": "<s>[INST] Name the main features of a class-based programming language. [/INST] The main features of a class-based programming language are encapsulation, inheritance, polymorphism and abstract classes. Encapsulation refers to the way code is organized and data is organized into objects and the methods used to access and manipulate the data. Inheritance is the ability for classes to inherit some of the properties of other classes. Polymorphism allows for objects of different types to act the same way in certain scenarios. Abstract classes provide an outline for other classes to follow, without having to directly use or implement all of the same functions as the parent class.</s>"
  },
  {
    "text": "<s>[INST] Generate a Python code to remove the given substring from the string.\n\nString: \"The quick brown fox jumped over the lazy dog\"\nSubstring: \"brown\" [/INST] string = \"The quick brown fox jumped over the lazy dog\"\nsubstring = \"brown\"\nnew_string = string.replace(substring, \"\")\nprint(new_string)\n# Output: The quick  fox jumped over the lazy dog</s>"
  },
  {
    "text": "<s>[INST] Detect the sentiment of the given text.\n\nThe movie was a total disaster. [/INST] The sentiment of the text is negative.</s>"
  },
  {
    "text": "<s>[INST] Edit the following JSON code to include the given data.\n\n{\n  \"users\": \n  [\n    { \n      \"name\": \"John\"\n    } \n  ]\n}\n\nNew data to add:\nname: \"Jane\",\nage: 25 [/INST] {\n  \"users\": \n  [\n    { \n      \"name\": \"John\"\n    },\n    { \n      \"name\": \"Jane\",\n      \"age\": 25\n    }\n  ]\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a thread pool in Java. [/INST] import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadPool {\n  private ExecutorService executor;\n\n  public ThreadPool(int size) {\n    this.executor = Executors.newFixedThreadPool(size);\n  }\n\n  public void submit(Runnable task) {\n    this.executor.execute(task);\n  }\n\n  public void shutdown() {\n    this.executor.shutdown();\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a dictionary from the given list.\n\n[(1, 'a'), (2, 'b'), (3, 'c')] [/INST] my_dictionary = {1: 'a', 2: 'b', 3: 'c'}</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to fetch all data from the given table.\n\nTable name: employees [/INST] SELECT * FROM employees;</s>"
  },
  {
    "text": "<s>[INST] Establish a connection between the web and database server. [/INST] To establish a connection between the web and database server, the web server needs to be configured to access the database server. This can be done using a variety of methods such as using a connection string, using an ODBC or JDBC driver, or using a web application framework. Once the connection is established, commands can be sent from the web server to the database server to fetch or store data.</s>"
  },
  {
    "text": "<s>[INST] Access the data present in the given dictionary.\n\ndictionary = {\n  'name': 'John',\n  'age': 25\n} [/INST] name = dictionary['name'] \nage = dictionary['age']</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the sum of all the values in the given array.\n\n[2, 4, 6, 8] [/INST] def sum_of_array(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total\n\n# Output:</s>"
  },
  {
    "text": "<s>[INST] Calculate the LCM (Least Common Multiple) of two integers.\n\nint x = 15;\nint y = 10; [/INST] def lcm(x, y): \n    if x > y:\n        greater = x \n    else:\n        greater = y \n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1 \n    return lcm \n  \nx = 15\ny = 10\nprint(\"The L.C.M. is\", lcm(x, y))</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to check if a given number is prime.\n\nint n = 17; [/INST] public class PrimeNumber {\n    public static void main(String[] args) {\n        int n = 17; \n        boolean flag = false;\n        for(int i = 2; i <= n/2; ++i) {\n            if(n % i == 0) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag)\n            System.out.println(n + \" is a prime number.\");\n        else\n            System.out.println(n + \" is not a prime number.\");\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C# program to test if a given string contains the specified substring.\n\nString x = \"Hello, World!\";\nString y = \"World\"; [/INST] using System;\n \npublic class Program\n{\n    public static void Main()\n    {\n        string x = \"Hello, World!\"\n        string y = \"World\";\n        if (x.Contains(y))\n        {\n            Console.WriteLine(\"String x contains the substring y.\");\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a PHP function that takes two strings and returns the first string repeated the number of times specified by the length of the second string.\n\nString x = \"Hi\";\nString y = \"World!\"; [/INST] <?php\nfunction repeatString($x, $y) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($y); $i++) {\n        $result .= $x;\n    }\n    return $result;\n}\necho repeatString(\"Hi \", \"World!\");\n?></s>"
  },
  {
    "text": "<s>[INST] Write a C program to find the longer of two strings.\n\nString x = \"Hello\";\nString y = \"World!\"; [/INST] #include <stdio.h>\n#include <string.h>\n\nint main()\n{\n    char x[20] = \"Hello\";\n    char y[20] = \"World!\";\n\n    int result = strlen(x) > strlen(y) ? 0 : 1;\n    if (result == 0)\n        printf(\"%s is longer than %s\\n\", x, y);\n    else \n        printf(\"%s is longer than %s\\n\", y, x);\n\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the rows that have a specific value in a column.\n\ntable: users\ncolumn: age\nvalue: 18 [/INST] SELECT * FROM users\nWHERE age = 18;</s>"
  },
  {
    "text": "<s>[INST] Generate a Python dictionary containing the squares of the numbers from 1 to n.\n\nint n = 10; [/INST] def generateDict(n):\n    dict = {}\n    for i in range(1, n+1):\n        dict[i] = i**2\n    return dict\n\nn = 10\nprint(generateDict(n))</s>"
  },
  {
    "text": "<s>[INST] Write a shell command to list all the running services in a Linux system. [/INST] Command: service --status-all</s>"
  },
  {
    "text": "<s>[INST] Design a Java function to convert a string to uppercase. [/INST] public String toUpperCase(String str){ \n    char[] charArr = str.toCharArray(); \n\n    for(int i=0; i<str.length(); i++){ \n        if(charArr[i] >= 'a' && charArr[i] <= 'z'){ \n            charArr[i] = (char)(charArr[i] - 32); \n        } \n    } \n\n    return new String(charArr); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression for matching email addresses. [/INST] \"^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"</s>"
  },
  {
    "text": "<s>[INST] Generate the code to find the number of days between two dates. [/INST] def daysBetween(date1, date2): \n    startDate = pd.to_datetime(date1) \n    endDate = pd.to_datetime(date2)\n    delta = endDate - startDate\n    return delta.days</s>"
  },
  {
    "text": "<s>[INST] Develop a script to remove duplicate elements from an array.\n\narr = [1, 2, 3, 4, 4, 1, 5] [/INST] def remove_duplicate(arr):\n    newArr = []\n    for i in arr:\n        if i not in newArr:\n            newArr.append(i)\n    return newArr</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script to create a directory [/INST] mkdir directory_name</s>"
  },
  {
    "text": "<s>[INST] Develop a code in Python to update all the elements of an array by a number\n\na = [1, 4, 5, 7, 9] [/INST] def update(a):\n    n = 2\n    a[:] = [x + n for x in a]\n    return a</s>"
  },
  {
    "text": "<s>[INST] Create a formula to calculate the surface area of a triangular prism [/INST] Surface Area = a*h + b*h + c*h + d*h, \nwhere a,b and c are three sides of the triangular face and h is the height of the prism</s>"
  },
  {
    "text": "<s>[INST] Develop a C program for swapping two variables. [/INST] #include <stdio.h>\n \nvoid swap(int *x, int *y)\n{\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\n \nint main()\n{\n    int x = 10, y = 20;\n \n    // Call swap function to swap 'x' and 'y'\n    swap(&x, &y);\n \n    printf(\"x = %d, y = %d\", x, y);\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Complete the following line of code to successfully initiate a pandas dataframe without specifying column names or data. [/INST] df = pd.DataFrame(data=None, columns=None)</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes three parameters; a list of strings, an index of integers, and an alphabet string. The function should return only the items from the list at the specified indexes using letters from the alphabet as keys.\n\nlist_of_strings = [\"Foo\", \"Bar\", \"Baz\"]\nindexes = [0,2]\nalphabet_string = \"abc123\" [/INST] def select_list_items(list_of_strings, indexes, alphabet_string):\n    new_list = []\n    for index in indexes: \n        new_list.append(list_of_strings[alphabet_string.index(str(index))])\n    return new_list\n\nprint(select_list_items(list_of_strings, indexes, alphabet_string)) # Output: [\"Foo\", \"Baz\"]</s>"
  },
  {
    "text": "<s>[INST] Calculate the mean of the following list of numbers using a for loop.\n\nnumbers = [3, 5, 8, 11, 15] [/INST] total = 0\nfor number in numbers:\n    total += number\nmean = total / len(numbers)\nprint(mean) # Output: 8.4</s>"
  },
  {
    "text": "<s>[INST] Create an array of 5 integers. [/INST] array = [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Write a function to check if all the items in a list are of the same data type. [/INST] def check_type(items):\n  # get the type of first item\n  item_type = type(items[0])\n  \n  # check if all items are of the same type\n  for item in items[1:]:\n    if item_type != type(item):\n      return False\n  return True\n\n# Test\nprint(check_type([1, 2, 3, 4])) # Output: True</s>"
  },
  {
    "text": "<s>[INST] Find the sum of all the numbers from 55 to 79. [/INST] total = 0\nfor i in range(55, 80):\n    total += i\nprint(total) # Output: 2370</s>"
  },
  {
    "text": "<s>[INST] Print the following dictionary in a readable format.\n\nperson = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"hobbies\": [\"reading\", \"biking\", \"yoga\"]\n} [/INST] print(\"Name:\", person[\"name\"])\nprint(\"Age:\", person[\"age\"])\nprint(\"Hobbies:\")\nfor hobby in person[\"hobbies\"]:\n  print(\"-\", hobby)</s>"
  },
  {
    "text": "<s>[INST] Give an example of a valid URL. [/INST] https://www.example.com</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the Pythagorean theorem given two legs [/INST] def calculate_pythagorean_theorem(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c</s>"
  },
  {
    "text": "<s>[INST] Write a function to extract the digits of a number in an array.\n\nNumber = 4396 [/INST] def extract_digits(number): \n   return [int(x) for x in str(number)] \n# Returns [4, 3, 9, 6]</s>"
  },
  {
    "text": "<s>[INST] Categorize the following sentence into either positive or negative\n\nThis game is way too difficult [/INST] negative</s>"
  },
  {
    "text": "<s>[INST] Create a program that reads a string input and replaces all instances of a word with a given replacement\n\nOriginal string = \"Merry Christmas everyone, what a lovely day!\" Replacement word = \"Happy\" [/INST] def replace_word(originalString, replacementWord): \n    return originalString.replace('Christmas', replacementWord)\n# Output: \"Merry Happy everyone, what a lovely day!\"</s>"
  },
  {
    "text": "<s>[INST] Generate a program in Python that takes two parameters and prints the result of their addition. [/INST] def add_two_numbers(a, b):\n    return a + b</s>"
  },
  {
    "text": "<s>[INST] Create a program to detect if an array contains duplicate values [/INST] def is_duplicate_array(arr): \n    return len(arr) != len(set(arr))</s>"
  },
  {
    "text": "<s>[INST] Create a program to validate a string for a specific length [/INST] def is_valid_string(string, length):\n    return len(string) == length</s>"
  },
  {
    "text": "<s>[INST] Generate a program that merges two sorted lists into one sorted list\n\nlist1 = [1, 6, 10] list2 = [3, 5, 7] [/INST] def merge_two_lists(list1, list2): \n    list3 = list1 + list2 \n    list3.sort() \n    return list3</s>"
  },
  {
    "text": "<s>[INST] Create a program that takes a string and prints the number of words the string contains\n\nstring = \"This is a sentence.\" [/INST] def count_words(string):\n    string = string.split(\" \")\n    return len(string)</s>"
  },
  {
    "text": "<s>[INST] Create a program to print all prime numbers from 1 to a given number. [/INST] def print_prime_numbers(n): \n    for num in range(2,n+1): \n        if is_prime(num): \n            print(num)</s>"
  },
  {
    "text": "<s>[INST] Write an example of a for loop in JavaScript. [/INST] for (let i = 0; i < 10; i++) {\n  console.log(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java that takes an integer and returns its square. [/INST] public static int calculateSquare(int num) {\n    return num * num;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java method to check if a numerical value is within a specified range. [/INST] public static boolean isWithinRange(int val, int min, int max) {\n    return (val >= min && val <= max);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a PHP function that finds the maximum of three numbers. [/INST] function maxOfThree($num1, $num2, $num3) {\n    $max = max($num1, $num2, $num3);\n    return $max;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Haskell function that takes a list and returns its first element. [/INST] head :: [a] -> a\nhead (x:_) = x</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to finish the following instruction.\n\nCreate a Java program to [/INST] Create a Java program to calculate the sum of all the elements in an array.</s>"
  },
  {
    "text": "<s>[INST] Combine the two functions into a single function.\n\ndef add(x, y):\n    return x + y \n\ndef subtract(x, y):\n    return x - y [/INST] def calculate(x, y, op):\n    if op=='+':\n        return x + y \n    if op =='-':\n        return x - y</s>"
  },
  {
    "text": "<s>[INST] Write a function to find the length of the longest word in a sentence.\n\nsentence = \"Today is a beautiful day\" [/INST] def find_longest_word(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\n    for word in words:\n        if (len(word) > max_len):\n            max_len = len(word)\n            longest_word = word\n    \n    return max_len, longest_word\n\nif __name__ =='__main__':\n    sentence = \"Today is a beautiful day\"\n    max_len, longest_word = find_longest_word(sentence)\n    print(\"The longest word is '{}' with a length of {}\".format(longest_word, max_len))</s>"
  },
  {
    "text": "<s>[INST] Create a function which will take two strings as parameters and will return a concatenated string. [/INST] def concat_strings(str1, str2):\n    \"\"\"Function to concatenate two strings\"\"\"\n    return str1 + str2\n\nif __name__ == '__main__':\n    result = concat_strings('Hello ', 'World!')\n    print(result) #Hello World!</s>"
  },
  {
    "text": "<s>[INST] Write a code in which the values in the dictionaries will be swapped.\n\ndic = {'x': 10, 'y': 20} [/INST] def swap_dictionary_values(dic):\n    \"\"\"Function to swap the values in the dictionaries\"\"\"\n    dic['x'], dic['y'] = dic['y'], dic['x']\n    return dic\n\nif __name__ == '__main__':\n    dic = {'x': 10, 'y': 20}\n    swapped_dic = swap_dictionary_values(dic)\n    print(swapped_dic) # {'x': 20, 'y': 10}</s>"
  },
  {
    "text": "<s>[INST] Edit the code to allow users to enter their name and age and print a greeting with their name and age.\n\nname = ''\nage = 0 [/INST] name = input(\"Enter your name: \")\nage = int(input(\"Enter your age: \"))\n\nprint(\"Hello \" + name + \"! You are \" + str(age) + \" years old.\")</s>"
  },
  {
    "text": "<s>[INST] Create a for loop to print all the elements of the list.\n\nmy_list = [1,2,3,4,5] [/INST] my_list = [1,2,3,4,5]\nfor elem in my_list:\n    print(elem)</s>"
  },
  {
    "text": "<s>[INST] Create a class which will take 3 parameters, name, size, and price. [/INST] class Item:\n    \"\"\"Class which will take three parameters, name, size and price\"\"\"\n    def __init__(self, name, size, price):\n        self.name = name\n        self.size = size\n        self.price = price</s>"
  },
  {
    "text": "<s>[INST] Sort a given list in increasing order.\n\nmy_list = [3, 4, 2, 6] [/INST] def sort_list(my_list):\n    \"\"\"Function to sort the list in increasing order\"\"\"\n    for i in range(len(my_list)):\n        min_idx = i\n        for j in range(i+1, len(my_list)):\n            if my_list[min_idx] > my_list[j]:\n                min_idx = j\n        my_list[i], my_list[min_idx] = my_list[min_idx], my_list[i]\n    return my_list\n    \nif __name__ == '__main__':\n    my_list = [3, 4, 2, 6]\n    sorted_list = sort_list(my_list)\n    print(sorted_list)  # [2, 3, 4, 6]</s>"
  },
  {
    "text": "<s>[INST] Sum up the digits in the given integer.\n\n12345 [/INST] 15</s>"
  },
  {
    "text": "<s>[INST] Calculate the area of a circle whose radius is 3. [/INST] 28.274333882308138</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to print out each item in a given array.\n\n[7, 4, 10, 3] [/INST] for(let item of arr) {\n  console.log(item);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in C++ to calculate the volume of a rectangular box. [/INST] class Rectangle { \n  public: \n    double length; \n    double breadth; \n  \n    double volume() { \n      return length * breadth; \n    } \n};</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to find the element that appears most frequently in the array.\n\n[9, 5, 1, 0, 4, 5, 9, 2, 8] [/INST] public static int mostFrequentElement(int[] arr) { \n  int count = 0; \n  int maxCount = 0; \n  int mostFrequent = arr[0]; \n  \n  for (int i = 0; i < arr.length; i++) { \n    count = 0; \n    for (int j = 0; j < arr.length; j++) { \n      if(arr[i] == arr[j]) { \n        count++; \n      } \n      if (count > maxCount) { \n        maxCount = count; \n        mostFrequent = arr[i]; \n      } \n    } \n  } \n  return mostFrequent; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to remove a given element from a list.\n\nlist = ['A', 'B', 'C', 'D']\nelement = 'B' [/INST] def remove_element(list, element): \n  if element in list: \n    list.remove(element)\n  return list\n\nprint(remove_element(list, element))</s>"
  },
  {
    "text": "<s>[INST] Edit the given SQL statement to select the top 3 entries with lowest price.\n\nSELECT * FROM products [/INST] SELECT * FROM products ORDER BY price ASC LIMIT 3;</s>"
  },
  {
    "text": "<s>[INST] Convert the given temperature in Celsius to Fahrenheit.\n\nTemperature in Celsius: 28 [/INST] 82.4</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression that finds all the words in a given sentence that start with a lowercase letter.\n\nSentence: Hello World. [/INST] \\b[a-z]\\w+\\b</s>"
  },
  {
    "text": "<s>[INST] Create a class called 'Student' with attributes name and grade. [/INST] class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade</s>"
  },
  {
    "text": "<s>[INST] Change the following code snippet to convert a given string in lower case.\n\nstring = \"HELLO WORLD\" [/INST] string = string.lower()</s>"
  },
  {
    "text": "<s>[INST] Create a conditional statement to print 'hello world' if the variable 'x' equals 5. [/INST] if x == 5: \n    print(\"Hello World\")</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary with keys 'a' and 'b' and values 1 and 2 respectively. [/INST] dict = {'a': 1, 'b': 2}</s>"
  },
  {
    "text": "<s>[INST] Check if each item in the following list is a string.\n\n[3, \"apple\", 5] [/INST] for item in [3, \"apple\", 5]:\n    if isinstance(item,str):\n        print(item, \"is a string\")\n    else:\n        print(item, \"is not a string\")</s>"
  },
  {
    "text": "<s>[INST] Find the index of the element 'c' in the following list.\n\n[\"a\", \"b\", \"c\"] [/INST] lst = [\"a\", \"b\", \"c\"]\nindex = lst.index(\"c\")</s>"
  },
  {
    "text": "<s>[INST] Print a list of numbers from 1 to 10 except for 5 and 6. [/INST] for num in range(1, 11):\n    if num != 5 and num != 6:\n        print(num)</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary of the declared states of India. [/INST] states_dict = { \n    'Maharashtra': 'Maharashtra', \n    'Tamil Nadu': 'Tamil Nadu', \n    'Karnataka': 'Karnataka', \n    'Uttar Pradesh': 'Uttar Pradesh', \n    'Rajasthan': 'Rajasthan', \n    'Gujarat': 'Gujarat', \n    'Madhya Pradesh': 'Madhya Pradesh', \n    'Bihar': 'Bihar', \n    'West Bengal': 'West Bengal', \n    'Andhra Pradesh': 'Andhra Pradesh', \n    'Haryana': 'Haryana', \n    'Assam': 'Assam', \n    'Jammu and Kashmir': 'Jammu and Kashmir', \n    'Kerala': 'Kerala', \n    'Odisha': 'Odisha', \n    'Telangana': 'Telangana', \n    'Punjab': 'Punjab', \n    'Goa': 'Goa', \n    'Tripura': 'Tripura', \n    'Jharkhand': 'Jharkhand', \n    'Chandigarh': 'Chandigarh', \n    'Himachal Pradesh': 'Himachal Pradesh', \n    'Uttarakhand': 'Uttarakhand', \n    'Ladakh': 'Ladakh'\n}</s>"
  },
  {
    "text": "<s>[INST] Describe what a quicksort algorithm does? [/INST] Quicksort is a widely used sorting algorithm that employs the divide-and-conquer approach. It works by partitioning a given array into two subarrays, the left consisting of smaller elements and the right consisting of larger elements. The sorting algorithm then recursively sorts each subarray until the array is completely sorted. Quicksort has a time complexity of O(n log n) in the best case, making it one of the most efficient sorting algorithms.</s>"
  },
  {
    "text": "<s>[INST] Convert the following Python statement into C code.\n\nx = x + 1 [/INST] x++;</s>"
  },
  {
    "text": "<s>[INST] What is the time complexity of a binary search tree? [/INST] The time complexity of a binary search tree is O(log n), where n is the number of elements in the tree. This is because in a binary search tree, each node can have up to two children, so the depth of the tree is bounded by the logarithm of n. This means that the time required to search the tree is bounded by the logarithm of n.</s>"
  },
  {
    "text": "<s>[INST] Write a code to convert a string to a list of characters. [/INST] def str_to_list(s):\n    return list(s)</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the Fibonacci series from 0 to n. [/INST] def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b</s>"
  },
  {
    "text": "<s>[INST] What are type hints in Python? [/INST] Type hints in Python are optional pieces of information that can be specified when declaring a class, function or method, that allow Python to better understand the code and provide better type safety. Type hints allow the IDE or interpreter to provide better autocompletion and code checking features, as well as allow the compiler to optimize the code better.</s>"
  },
  {
    "text": "<s>[INST] Create a for loop in Java using the given array.\n\nint[] nums = {2, 4, 8, 16, 32}; [/INST] for (int i = 0; i < nums.length; i++) {\n    int num = nums[i];\n    System.out.println(num);\n}</s>"
  },
  {
    "text": "<s>[INST] Explain how to use callbacks in JavaScript. [/INST] A callback is a function passed as an argument to another function. It is called after the other function has finished executing. Callback functions can be used to help make asynchronous code more organized and easier to read. The callback function will be called with the result of the other function once it is complete. For example, if a function needs to wait for a response from an API before continuing, a callback can be passed in as an argument to execute when the response is received. The callback can outline exactly what happens after the response is received. This helps the code stay organized and readable.</s>"
  },
  {
    "text": "<s>[INST] Create a method in Python to round a number to 4 decimal points. [/INST] def round_to_4_dp(num):\n    return round(num, 4)</s>"
  },
  {
    "text": "<s>[INST] Create a C++ function that takes in an array and a value and returns the index of the value (if it exists) in the array.\n\nint arr[] = {10, 20, 80, 30, 60, 50, 110, 100, 130,};\nint value = 80; [/INST] int get_index(int arr[],int size,int value)\n{\n    for(int i=0;i<size;i++)\n    {\n        if(arr[i] == value)\n        {\n            return i;\n        }\n    }\n    return -1;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to display the current date in the following format: yyyy-mm-dd. [/INST] const date = new Date();\nconst dateString = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\nconsole.log(dateString);</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select all items from a table named \"products\" that have a price greater than 50. [/INST] SELECT * FROM products WHERE price > 50;</s>"
  },
  {
    "text": "<s>[INST] Format the following HTML code into a valid HTML document.\n\n<title>My Website!</title><h1>Welcome</h1> [/INST] <html>\n  <head>\n    <title>My Website!</title>\n  </head>\n  <body>\n    <h1>Welcome</h1>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a Python class that has an initialization method which takes in two parameters and sets them as class variables. [/INST] class ExampleClass:\n    def __init__(self, param1, param2):\n        self.param1 = param1\n        self.param2 = param2</s>"
  },
  {
    "text": "<s>[INST] Encode the following string in Base64.\n\nThis is an example string. [/INST] VGhpcyBpcyBhbiBleGFtcGxlIHN0cmluZy4=</s>"
  },
  {
    "text": "<s>[INST] Create a C# function to find the index of the first element of an array that is greater than a given value.\n\ndouble[] arr = {1.1, 2.00, 1.3, 9.7, 12.4};\ndouble value = 5.0; [/INST] int findFirstGreaterThan(double[] arr, double value) {\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] > value) {\n      return i;\n    }\n  }\n  return -1;\n}</s>"
  },
  {
    "text": "<s>[INST] Given a sentence, remove all punctuation using JavaScript.\n\nThis is a sentence! [/INST] function removePunctuation(sentence) {\n  return sentence.replace(/[^\\w\\s]/gi, '');\n}\n\nconsole.log(removePunctuation(\"This is a sentence!\"));</s>"
  },
  {
    "text": "<s>[INST] Create a Python function to check if a given array is sorted in ascending order.\n\narr = [1, 3, 5, 7, 6] [/INST] def is_sorted_ascending(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Given 2 string variables, write a function to find out if the 2 strings are anagrams.\n\nstr1 = 'schoolmaster', str2 = 'the classroom' [/INST] def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        counts = dict()\n        for char in str1:\n            counts[char] = counts.get(char, 0) + 1\n        for char in str2:\n            if char not in counts or counts[char] == 0:\n                return False\n            counts[char] -= 1\n    return True</s>"
  },
  {
    "text": "<s>[INST] Write a Node.js program to find the sum of first n natural numbers. [/INST] const calculateSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nconsole.log(calculateSum(5));</s>"
  },
  {
    "text": "<s>[INST] Use Java's built-in sorting algorithm and write a code that sorts a list in ascending order.\n\nList = [5, 10, 1, 8] [/INST] import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class SortListAscending {\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(5);\n        list.add(10);\n        list.add(1);\n        list.add(8);\n\n        Collections.sort(list);\n\n        System.out.println(\"The list in ascending order is: \" + list);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function to generate the Cartesian product of 2 sets in Python.\n\nA = {1, 2}; B = {'a', 'b'} [/INST] from itertools import product\n \ndef get_cartesian_product(A, B):\n  return set(product(A, B))\n \nA = {1, 2}; B = {'a', 'b'}\nprint(get_cartesian_product(A,B))</s>"
  },
  {
    "text": "<s>[INST] Given a number n, write a function that finds the sum of the first n odd numbers. [/INST] def odd_sum(n):\n    return sum(list(range(1, 2*n, 2)))</s>"
  },
  {
    "text": "<s>[INST] Write a PHP script that prints the current hour, minute, and second. [/INST] <?php\n$time = getdate(); \necho \"Hour: \".$time['hours'].\"<br>\"; \necho \"Minutes: \".$time['minutes'].\"<br>\"; \necho \"Seconds: \".$time['seconds']; \n?></s>"
  },
  {
    "text": "<s>[INST] Given a string, edit it so that every first letter of each word is capitalized.\n\nstring = \"this is a test string\" [/INST] def capitalize_string(string):\n    words = string.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nstring = \"this is a test string\" \ncapitalize_string(string)</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script that prints the numbers 1 to 10 on one line. [/INST] #!/bin/bash\nfor i in {1..10}; do echo -n \"$i \"; done\necho</s>"
  },
  {
    "text": "<s>[INST] Using Python, classify the following sentence \"The cat is a mammal\" into either Animal or Plant. [/INST] def classify_sentence(sentence):\n  if \"animal\" in sentence.lower():\n    return \"Animal\"\n  elif \"plant\" in sentence.lower():\n    return \"Plant\"\n\nsentence = \"The cat is a mammal\"\nprint(classify_sentence(sentence))</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form to accept an email address. [/INST] <form>\n  <label for=\"email\">Enter your email address:</label>\n  <input type=\"email\" name=\"email\" id=\"email\" required>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a C program to sum the digits of a positive integer. [/INST] #include <stdio.h> \n \nint main() \n{ \n    int num, sum = 0, r; \n  \n    printf(\"Enter a positive number: \"); \n    scanf(\"%d\", &num); \n  \n    while (num > 0) { \n        r = num % 10; \n        sum += r; \n        num = num / 10; \n    } \n  \n    printf(\"Sum of digits of the number: %d\\n\", sum); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL statement to list all the tables in a database. [/INST] SELECT * FROM information_schema.tables WHERE table_schema = \"your_database_name\";</s>"
  },
  {
    "text": "<s>[INST] Create a looping structure to display numbers from 1-10. [/INST] \"\"\"\nCreate a looping structure to display numbers from 1-10\n\"\"\"\n\n# loop from 1 to 10\nfor num in range(1, 11):\n    print(num)</s>"
  },
  {
    "text": "<s>[INST] Write a code to search a word in a given string and get the index position.\n\nword = 'Hello'\n\nstring = 'Hello World' [/INST] \"\"\"\nWrite a code to search a word in a given string and get the index position\n\"\"\"\n\ndef search_word(word, string):\n    return string.find(word)\n\nword = 'Hello'\nstring = 'Hello World'\n\nprint(search_word(word, string)) # print 0</s>"
  },
  {
    "text": "<s>[INST] Given a string, remove all spaces from it.\n\nstring = 'This is a sample string' [/INST] \"\"\"\nGiven a string, remove all spaces from it\n\"\"\"\n\ndef remove_spaces(string):\n    result = ''\n    for c in string:\n        if c != ' ':\n            result += c\n    return result\n\nstring = 'This is a sample string'\nprint(remove_spaces(string)) # print Thisisasamplestring</s>"
  },
  {
    "text": "<s>[INST] Rearrange the given string in alphabetical order.\n\nstring = 'zxcvbnmlkjhgfdsaqwertyuiop' [/INST] \"\"\"\nRearrange the given string in alphabetical order\n\"\"\"\n\ndef alphabetical_order(string):\n    result = ''.join(sorted(string))\n    return result\n\nstring = 'zxcvbnmlkjhgfdsaqwertyuiop'\nprint(alphabetical_order(string)) # print abcdefghijklmnopqrstuvwxyz</s>"
  },
  {
    "text": "<s>[INST] Create a function to compute the area of a triangle when the length of its three sides are known.\n\na = 6, b = 8, c = 10 [/INST] \"\"\"\nCreate a function to compute the area of a triangle when the length of its three sides are known\n\"\"\"\n\ndef TriangleArea(a, b, c):\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n\na, b, c = 6, 8, 10\n\nprint(TriangleArea(a, b, c)) # print 24.0</s>"
  },
  {
    "text": "<s>[INST] Write a function to convert a list of characters into a string.\n\ncharacters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'] [/INST] \"\"\"\nWrite a function to convert a list of characters into a string\n\"\"\"\n\ndef list_to_string(characters):\n    result = ''.join(characters)\n    return result\n\ncharacters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\n\nprint(list_to_string(characters)) # print Hello World</s>"
  },
  {
    "text": "<s>[INST] Print the third item of the list.\n\nmy_list = [\"apple\",\"banana\",\"cherry\"] [/INST] print(my_list[2]) # cherry</s>"
  },
  {
    "text": "<s>[INST] Here is a list of strings and a specific string pattern. Write a code to return a list of all strings that match the pattern.\n\nstrings = [\"abc\",\"bcd\",\"cde\",\"def\",\"efg\"]\npattern = \"?ef\" [/INST] matched_strings = []\nfor string in strings:\n    if string[1:3] == pattern[1:3]:\n        matched_strings.append(string)\nprint(matched_strings) # [\"bcd\", \"def\"]</s>"
  },
  {
    "text": "<s>[INST] Outpus true if the given number is a power of two, False otherwise.\n\nn = 16 [/INST] print(n > 0 and (n & (n - 1)) == 0) # True</s>"
  },
  {
    "text": "<s>[INST] Convert the following HTML to CSS.\n\n<body>\n    <h1>My Web Page</h1> [/INST] body h1 {\n    font-size: 20px;\n    font-weight: bold;\n    text-align: center;\n}</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to find the largest number in a given array.\n\narr = [2,4,6,9,3,7] [/INST] def max_in_array(arr):\n    max = 0\n    for i in range(len(arr)):\n        if arr[i] > max :\n            max = arr[i]\n    return max\n\nmaxValue = max_in_array(arr)\nprint(maxValue) # 9</s>"
  },
  {
    "text": "<s>[INST] Change the following directory path to absolute path.\n\npath = \"../images/example.png\" [/INST] import os\n\npath = os.path.abspath(\"../images/example.png\")\nprint(path) # \\user\\path\\to\\images\\example.png</s>"
  },
  {
    "text": "<s>[INST] Generate an 8-digit alphanumeric string. [/INST] import string\nimport random\n\nalphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\nprint(alphanumeric_string) # GH485TV6</s>"
  },
  {
    "text": "<s>[INST] Fix the following syntax error.\n\nmyList = [1, 2, 3 [/INST] myList = [1, 2, 3]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve the mean age of all customers. [/INST] SELECT AVG(age)\nFROM customers;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to display a welcome message to the user. [/INST] console.log('Welcome!');</s>"
  },
  {
    "text": "<s>[INST] Using HTML, create a table with 3 columns and 4 rows. [/INST] <table>\n  <tr><th>Column 1</th><th>Column 2</th><th>Column 3</th></tr>\n  <tr><td></td><td></td><td></td></tr>\n  <tr><td></td><td></td><td></td></tr>\n  <tr><td></td><td></td><td></td></tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to group all customers with the same age. [/INST] SELECT age, COUNT(*)\nFROM customers\nGROUP BY age;</s>"
  },
  {
    "text": "<s>[INST] Analyze the following code and explain what is wrong with it.\n\nfunction max_value(x, y){\nif (x > y){\nreturn x;\n}\nelse{\nreturn y;\n}\n} [/INST] The function will not work when x and y are equal as there is no else if statement to handle that condition. The code should be modified to either return x or y randomly or return a value that is not related to x or y like 'null' or '-1' when x and y are the same.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to list all the customers whose age is over 18. [/INST] SELECT * \nFROM customers \nWHERE age > 18;</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code snippet to create a checkbox with the label “Terms of Service” [/INST] <input type=\"checkbox\" id=\"terms\" name=\"terms\" value=\"agree\" />\n<label for=\"terms\">Terms of Service</label></s>"
  },
  {
    "text": "<s>[INST] Using Python, write a function to multiply two matrices. [/INST] def multiply_matrices(matrixA, matrixB): \n    \"\"\"\n    Matrix multiplication\n    :param matrixA: 2D array\n    :param matrixB: 2D array\n    :return: product of matrixA and matrixB\n    \"\"\"\n    \n    # Initialize matrix to store the result with size (m x n), where m and n are the rows and columns of matrixA and matrixB\n    result_matrix = [[0 for _ in range(len(matrixB[0]))] for _ in range(len(matrixA))]\n\n    for i in range(len(matrixA)): \n        for j in range(len(matrixB[0])): \n            for k in range(len(matrixB)): \n                result_matrix[i][j] += matrixA[i][k] * matrixB[k][j] \n  \n    return result_matrix</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to limit the maximum length a user can enter in an input field. [/INST] document.getElementById('inputField').maxLength = \"20\";</s>"
  },
  {
    "text": "<s>[INST] Create a method to sort the data by the public_id in descending order?\n\ndata = [{\"name\": \"John Smith\", \"public_id\": 4}, \n        {\"name\": \"Michael Jordan\", \"public_id\": 3}, \n        {\"name\": \"LeBron James\", \"public_id\": 5}] [/INST] def sort_by_public_id(data):\n    return sorted(data, key=lambda x: x['public_id'], reverse=True)</s>"
  },
  {
    "text": "<s>[INST] Given an array of strings and an integer n, implement a function to return the values with length greater than n as a new array.\n\ndata = [\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\"]\nn = 3 [/INST] def get_values_greater_than_n(data, n):\n  return [val for val in data if len(val) > n]</s>"
  },
  {
    "text": "<s>[INST] Change the following loop so that it prints out the numbers from 10 to 1 in descending order.\n\nfor i in range(1, 11):\n    print(i) [/INST] for i in range(10, 0, -1):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Write a function to parse a string of HTML and replace all occurrences of <b> with <strong>.\n\nhtml_string = \"<h1> This is a heading </h1> <b> This is a bold text </b>\" [/INST] def replace_b_tag_with_strong_tag(html_string):\n    return html_string.replace(\"<b>\", \"<strong>\").replace(\"</b>\", \"</strong>\")</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to count the number of times the letter 'e' appears in a given string.\n\nmy_string = \"Hello World\" [/INST] def count_letter_e(my_string):\n    count = 0\n    for char in my_string:\n        if char == 'e':\n            count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] For the following JSON object, write a function to get the average of all prices.\n\ndata = [\n  { \"name\": \"apple\", \"price\": 2},\n  { \"name\": \"banana\", \"price\": 4},\n  { \"name\": \"cucumber\", \"price\": 6},\n] [/INST] def avg_price(data):\n    sum = 0\n    for item in data: \n        sum += item[\"price\"] \n    return sum / len(data)</s>"
  },
  {
    "text": "<s>[INST] Describe what is recursion in programming and provide a simple example. [/INST] Recursion is a programming concept in which a function calls itself until a certain condition is met. It can be used to solve problems that lend themselves to divide and conquer, such as computing the Nth element of a Fibonacci sequence. For example, the code to compute the 5th element of the Fibonacci sequence can be written using recursion in Python as follows:\n\ndef fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(fibonacci(n-1) + fibonacci(n-2)) \n  \nprint(fibonacci(5))  \n\nThe output of this code is 5.</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code to use for-else statement.\n\narr = [1, 2, 3, 4]\n\ni = 0\nwhile True:\n    if i >= len(arr):\n        break\n    print(arr[i])\n    i += 1 [/INST] arr = [1, 2, 3, 4]\n\nfor i in arr:\n    print(i)\nelse:\n    break</s>"
  },
  {
    "text": "<s>[INST] Given a string, rearrange the characters in the string such that no two consecutive characters are the same.\n\nmy_str = \"ababab\" [/INST] def rearrange_string(my_str):\n    arr = list(my_str)\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n                if arr[j] != arr[i]:\n                    arr[i+1], arr[j] = arr[j], arr[i+1]\n                    break\n                j += 1\n        i += 1\n    return \"\".join(arr)</s>"
  },
  {
    "text": "<s>[INST] Create a program that can output the current date and time in a user-friendly format. [/INST] from datetime import datetime\n\ndef get_date_and_time():\n    current_date_and_time = datetime.now()\n    friendly_format = current_date_and_time.strftime('%c')\n    return friendly_format\n\nif __name__ == \"__main__\":\n    print(get_date_and_time())</s>"
  },
  {
    "text": "<s>[INST] Design a function to sum up an array of numbers.\n\nSum up [2, 3, 5, 10, 16]. [/INST] def calculate_sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 10, 16]\n    print(calculate_sum(arr))</s>"
  },
  {
    "text": "<s>[INST] Generate a character frequency histogram of a sentence.\n\nDistribution of characters in “The quick brown fox jumps over the lazy dog.” [/INST] def get_char_freq_histogram(string):\n    char_freq_dict = {}\n    for char in string:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n    return char_freq_dict\n\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    char_freq_histogram = get_char_freq_histogram(sentence)\n    print(char_freq_histogram)</s>"
  },
  {
    "text": "<s>[INST] Create a program that can convert a given number (integer) to binary.\n\nConvert 33 to binary numerals. [/INST] def convert_to_binary(n):\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n%2) + binary_num\n        n = n//2\n    return binary_num\n    \nif __name__ == \"__main__\":\n    print(convert_to_binary(33))</s>"
  },
  {
    "text": "<s>[INST] Rewrite existing code to make it more efficient.\n\nImprove the following code.\n```\nfor i in range(10):\n    print(i)\n``` [/INST] def print_nums(n):\n    for i in range(n):\n        print(i)\n\nif __name__ == \"__main__\":\n    print_nums(10)</s>"
  },
  {
    "text": "<s>[INST] Output a string that is the reversed version of a given sentence.\n\nReverse “Where the wild things are” [/INST] def reverse_string(sentence):\n    return ' '.join(sentence.split(' ')[::-1])\n\nif __name__ == \"__main__\":\n    sentence = \"Where the wild things are\"\n    print(reverse_string(sentence))</s>"
  },
  {
    "text": "<s>[INST] Design a program to find out how many times a pattern occurs in a given string.\n\nFind the number of times “quick” occurs in “The quick brown fox jumps over the lazy dog.” [/INST] def count_pattern(sentence, pattern):\n    count = 0\n    words = sentence.split(' ')\n    for word in words:\n        if word == pattern:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    pattern = \"quick\"\n    print(count_pattern(sentence, pattern))</s>"
  },
  {
    "text": "<s>[INST] Create a program that can identify the next number in a sequence.\n\nFind the next number in 3, 7, 11, 15. [/INST] def get_next_number(arr):\n    return arr[-1] + (arr[-1] - arr[-2])\n\nif __name__ == \"__main__\":\n    arr = [3, 7, 11, 15]\n    print(get_next_number(arr))</s>"
  },
  {
    "text": "<s>[INST] Create a program that can output the permutation of a given string.\n\nFind the permutation of “ABC” [/INST] def permutation(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    lst = [] \n    for i in range(len(str)):\n       m = str[i] \n       remLst = permutation(str[:i] + str[i+1:])\n       for p in remLst:\n           lst.append([m] + p)\n    return lst\n\nif __name__ == \"__main__\":\n    str = \"ABC\"\n    print(permutation(str))</s>"
  },
  {
    "text": "<s>[INST] Create a class in C++ called \"Vehicle\", and make it inherit from the class \"Object\". [/INST] class Vehicle : public Object {\n    public:\n    // constructor & destructor\n    Vehicle() { }\n    ~Vehicle() { }\n};</s>"
  },
  {
    "text": "<s>[INST] Write a machine learning model to classify whether a given email is spam or not using logistic regression. [/INST] from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(solver='liblinear')\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)</s>"
  },
  {
    "text": "<s>[INST] Create an array of 10 numbers between 0 and 20, both included. [/INST] [5, 10, 15, 20, 0, 3, 8, 1, 9, 11]</s>"
  },
  {
    "text": "<s>[INST] Build a decision tree model using Scikit-Learn to predict the type of iris plant based on petal length, petal width, sepal length and sepal width. [/INST] from sklearn import tree\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code snippet to add a shadow effect to all buttons on the page. [/INST] button {\n  -webkit-box-shadow: 0px 2px 5px 2px rgba(0,0,0,0.75);\n  -moz-box-shadow: 0px 2px 5px 2px rgba(0,0,0,0.75);\n  box-shadow: 0px 2px 5px 2px rgba(0,0,0,0.75);\n}</s>"
  },
  {
    "text": "<s>[INST] Find all top-level domains for the TLD \".org\". [/INST] aero.org, asia.org, biz.org, com.org, coop.org, info.org, jobs.org, mobi.org, museum.org, name.org, net.org, pro.org, tel.org, travel.org and org.org.</s>"
  },
  {
    "text": "<s>[INST] Generate five random numbers between 0 and 10 in Python. [/INST] import random\nrandom.sample(range(0, 10), 5)</s>"
  },
  {
    "text": "<s>[INST] How can you check if a number is an integer in C#? [/INST] We can use the \"int.TryParse\" method to check if a number is an integer in C#. We pass the number as a string to this method and it returns true if it is an integer or false if it is not. For example:\n\nbool result = int.TryParse(\"2\", out _);\n// result is true</s>"
  },
  {
    "text": "<s>[INST] Write a Java function to classify a given set of numbers into even and odd. [/INST] public static void classifyNumber(int[] numbers) {\n  for (int num : numbers) {\n      if (num % 2 == 0) {\n          System.out.println(num + \" is even\");\n      } else {\n          System.out.println(num + \" is odd\");\n      }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to calculate the total cost of a given product.\n\nproduct_id: 123\nprice: 100.50\nquantity: 10 [/INST] SELECT SUM(price * quantity) AS total_cost\nFROM products\nWHERE product_id = 123;</s>"
  },
  {
    "text": "<s>[INST] How can you sort a list of strings lexicographically in C++? [/INST] We can use the sort() method from the algorithm library to sort a list of strings lexicographically in C++. The syntax for this method is as follows: \n\nsort(listOfStrings.begin(), listOfStrings.end());</s>"
  },
  {
    "text": "<s>[INST] Modify the following JavaScript code to remove all whitespaces from a given string.\n\nvar mystring = \" This is a  string  with  extra spaces \"; [/INST] var mystring = mystring.replace(/\\s/g,'');</s>"
  },
  {
    "text": "<s>[INST] How can you convert a given list of integers into a comma-separated string in Python? [/INST] We can use the join() method to convert a given list of integers into a comma-separated string in Python. The syntax for this method is as follows:\n\nlistOfIntegers = [1, 2, 3, 4] \ns = ','.join(str(e) for e in listOfIntegers)\nprint(s)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to calculate the average age of all students in a given class. [/INST] SELECT AVG(age) AS average_age\nFROM students\nWHERE class = 'X';</s>"
  },
  {
    "text": "<s>[INST] Create a Node.js server that can listen on port 8080. [/INST] const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 8080;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});</s>"
  },
  {
    "text": "<s>[INST] How can you copy the contents of an array in JavaScript? [/INST] We can use the slice() method to copy the contents of an array in JavaScript. The syntax for this method is as follows:\n\nvar arrayCopy = array.slice();</s>"
  },
  {
    "text": "<s>[INST] Write a PHP script that inserts a given value into an array at a given index.\n\narray: [1, 2, 3, 4] \nindex: 2 \nvalue: 5 [/INST] <?php\n\n$array = [1, 2, 3, 4];\n$index = 2;\n$value = 5;\n\narray_splice($array, $index, 0, $value);\n\necho \"<pre>\";\nprint_r($array);\necho \"</pre>\";\n?></s>"
  },
  {
    "text": "<s>[INST] What is the correct way to find the length of an array in Java? [/INST] The correct way to find the length of an array in Java is to use the length field of the array.\nFor example:\n\nint[] arr = new int[10]; \nint len = arr.length; \n// len is now 10</s>"
  },
  {
    "text": "<s>[INST] How can you convert a given object to a JSON string in JavaScript? [/INST] We can use the JSON.stringify() method to convert a given object to a JSON string in JavaScript. The syntax for this method is as follows:\n\nvar jsonString = JSON.stringify(object);</s>"
  },
  {
    "text": "<s>[INST] Explain the difference between unidirectional and bidirectional recurrent neural networks. [/INST] A unidirectional recurrent neural network (RNN) accepts a single input and produces a single output. The input sequence is processed one step at a time and the output of each step depends only on the current input and the weights of the network. This type of network is often used in language models and other sequence-based predictions. \n\nIn contrast, a bidirectional recurrent neural network (BRNN) processes the input sequence in both the forward and backward directions. This allows the network to make use of both past and future context when making predictions. Additionally, it has the potential to learn longer-term dependencies since the state of the network is shared between both directions. This type of network is commonly used in areas like speech recognition and natural language understanding.</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of parameter estimation in machine learning. [/INST] Parameter estimation is the process of determining the optimal values for the parameters of a machine learning algorithm. The values that produce the best performance on the training data are typically used as the parameters for the model. By optimizing the parameters, the model can fit the data more accurately and lead to improved generalization performance. Parameter estimation can involve manual tuning, or the use of automated techniques such as grid search or stochastic optimization.</s>"
  },
  {
    "text": "<s>[INST] Design a function to convert a ternary tree to a doubly linked list. [/INST] def convertTernaryTreeToDoublyLinkedList(root):\n    # Edge case\n    if (root == None):\n        return \n    \n    # Create two empty lists to hold left and right list of root\n    left = []\n    right = []\n    # Add root to left list that will hold left subtree\n    left.append(root.val)\n    # Store the value of the root for later use\n    val = root.val\n    # Recur to get the left and right lists of the left\n    # and right subtree\n    getLeft(root.left, left)\n    getRight(root.right, right)\n\n    # To see the linked list join the left and right lists\n    left.extend(right)\n\n    # Get the length of the list\n    length = len(left)\n\n    # Join the left and right list with the middle element\n    # of the root.\n    for i in range(length):\n        if i<length-1:\n            left[i].next = left[i+1]\n        else:\n            left[i].next = None\n        if i>0:\n            left[i].prev = left[i-1]\n        else:\n            left[i].prev = None\n    \n    # Return the list\n    return left\n\ndef getLeft(root, left):\n    # Iterative way to traverse and get all left subtree elements\n    if root:\n        left.append(root) \n        root = root.left\n        getLeft(root, left)\n\ndef getRight(root, right):\n    # Iterative way to traverse and get all right subtree elements\n    if root:\n        right.append(root)\n        root = root.right\n        getRight(root, right)</s>"
  },
  {
    "text": "<s>[INST] How can one improve the performance of a machine learning algorithm? [/INST] There are several ways to improve the performance of a machine learning algorithm, such as:\n\n1. Increasing the quality/quantity of training data: Using more data can increase the accuracy of the model and better handle outliers and edge cases. \n\n2. Tuning the model hyperparameters: Adjusting parameters like learning rate, regularization strength can often improve the performance of the algorithm.\n\n3. Feature engineering: You can add or modify features which can not only improve the performance of the model but also allow it to capture different types of relationships among data points.\n\n4. Using better algorithms: Experimenting with different algorithms and techniques can often improve the performance of the model.</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to find the title of the books with the least number of pages. [/INST] SELECT title FROM books\nORDER BY pages ASC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Implement a function to traverse a binary tree in pre-order. [/INST] def traverse_preorder(root):\n    if (root == None):\n        return\n    else:\n        print(root.val)\n        traverse_preorder(root.left)\n        traverse_preorder(root.right)</s>"
  },
  {
    "text": "<s>[INST] Describe how reinforcement learning works. [/INST] Reinforcement learning is a type of machine learning algorithm that allows an agent to learn from its environment through trial and error. The agent takes an action within a given environment and receives a reward or punishment based on its performance. The agent uses this feedback to adjust its actions over time in order to maximize its future reward. Reinforcement learning works by interacting with the environment in a loop, taking actions, observing the results, updating the agent's estimates of its values and adjusting its behavior.</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of transfer learning. [/INST] Transfer learning is a machine learning method where a model is trained on a task, then the learned knowledge is transferred to a new task. This process of knowledge transfer is enabled by the use of pre-trained models that have already been trained on large datasets, which can then be adapted to a given task using only a few additional training examples. This is especially useful for tasks that do not have enough labeled data available, as the pre-trained model can act as a regularizer and help the model learn better.</s>"
  },
  {
    "text": "<s>[INST] Implement a function to sort an array in ascending order.\n\nArray: [7, 19, 5, 4, 16] [/INST] def sortArray(arr):\n    for i in range(len(arr)):\n        for j in range(1, len(arr)):\n            if arr[j] < arr[j-1]:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n    return arr\n\nsortArray([7, 19, 5, 4, 16]) # [4, 5, 7, 16, 19]</s>"
  },
  {
    "text": "<s>[INST] Name the parameter of a Python function? [/INST] The parameter of a Python function is the variable name listed after the function name in the function definition.</s>"
  },
  {
    "text": "<s>[INST] What is data serialization? [/INST] Data serialization is the process of transforming data structures into a format that can be stored, transmitted, or parsed. It is commonly used to send and receive data between different types of systems. The application programming interface of a system can determine which data is serialized and deserialized.</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python with two methods, one of which accepts an argument. [/INST] class MyClass:\n    def __init__(self):\n        pass\n\n    def my_method(self, arg):\n        # method code\n        pass</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of a loop in a programming language? [/INST] The purpose of a loop in a programming language is to repeatedly execute a set of instructions until a predetermined condition is met. Loops are used to iterate over a set of elements or a certain number of steps, and are often used to traverse data structures such as arrays and linked lists.</s>"
  },
  {
    "text": "<s>[INST] Explain recursion in programming. [/INST] Recursion is a programming technique where a function calls itself, either directly or indirectly. It is used to solve problems that involve repetition or breaking down a problem into simpler sub-problems. Recursion can be used to solve a wide range of problems, from sorting algorithms to defining recursive data structures. It can also reduce the amount of code needed to solve a problem, as the same code can be used to solve different sub-problems.</s>"
  },
  {
    "text": "<s>[INST] How do you convert a string to an integer in Python? [/INST] In Python, strings can be converted to integers using the int() function. This function takes a string as its argument and returns an integer object. The int() function can also take optional parameters that allow for conversion from one base or radix, or from different types of numbers (e.g. octal, hexadecimal, binary).</s>"
  },
  {
    "text": "<s>[INST] Generate a program to get the min and max values from a list in one line. [/INST] def get_min_max(lst):\n    return min(lst), max(lst)</s>"
  },
  {
    "text": "<s>[INST] What is the difference between a list and a tuple in Python? [/INST] The main difference between a list and a tuple in Python is that a list is mutable while a tuple is immutable. This means that a list can be changed or modified, while a tuple cannot. Tuples also have better performance than lists in terms of speed and memory usage. Tuples are also generally easier to read than lists, since they don't have commas separating their elements.</s>"
  },
  {
    "text": "<s>[INST] Explain polymorphism in Python. [/INST] Polymorphism in Python is the ability of an object to take on multiple forms. It is an object-oriented programming concept that allows for different implementations of a function or method to be used depending on the object type being used. In Python, this is done through sub-classing, the use of special methods such as the __init__ method, and by using type hints.</s>"
  },
  {
    "text": "<s>[INST] What is the advantage of using dictionary comprehension in Python? [/INST] The main advantage of using dictionary comprehension in Python is that it offers an efficient and concise way to create dictionaries. It can be used to create dictionaries from existing sequences or iterables, or to create new dictionaries from scratch. It also eliminates the need for writing multiple lines of code to create dictionaries.</s>"
  },
  {
    "text": "<s>[INST] Construct the following C++ class.\n\nClass: Student\nAttributes: firstName(String), lastName(String), age(int) [/INST] class Student {\n   private:\n      string firstName;\n      string lastName;\n      int age;\n\n   public:\n      Student(string firstName, string lastName, int age) {\n         this->firstName = firstName;\n         this->lastName = lastName;\n         this->age = age;\n      }\n\n      string getFirstName() {\n         return firstName;\n      }\n\n      string getLastName() {\n         return lastName;\n      }\n\n      int getAge() {\n         return age;\n      }\n};</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to return all rows in the table where the value of column A is not null and column B is 2.\n\nTable Name: myTable; Columns: A,B [/INST] SELECT * FROM myTable WHERE A IS NOT NULL AND B = 2;</s>"
  },
  {
    "text": "<s>[INST] Create a for loop to iterate over the following list and print each element.\n\nlist = [1, 2, 3, 4, 5] [/INST] for x in list:\n    print(x)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript statement to delete the key-value pair of age in the following object.\n\nlet person = {\n    name: \"John\",\n    age: 30\n} [/INST] delete person.age;</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to find all the students with an age between 20 and 22.\n\nTable Name: students; Columns: age [/INST] SELECT * FROM students WHERE age >= 20 AND age <= 22;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript expression to get the length of the following string.\n\nlet str = \"Hello World!\" [/INST] str.length</s>"
  },
  {
    "text": "<s>[INST] Construct a Tensorflow model to classify the following inputs.\n\nImages with labels “cat” and “dog”. [/INST] model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224, 224, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])</s>"
  },
  {
    "text": "<s>[INST] Create a loop to print the following array values.\n\narr = [3, 6, 9, 12] [/INST] for x in arr:\n    print(x)</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of lambda functions in Python. [/INST] Lambda functions are anonymous short functions that have no name. They are used when a user needs to define a function in just a single expression, usually a function that takes an argument and performs an action on it. Lambda functions can also be used in Python as an alternative to traditional functions when they’re used within a code block, making the code more concise and easier to understand. Lambda functions can also be used to pass a function as an argument to another function. Finally, lambda functions can also be used to create smaller, simpler anonymous functions when the full power of Python’s functions is not required.</s>"
  },
  {
    "text": "<s>[INST] Write an HTML link tag to open a link in a new tab. [/INST] <a href=\"http://example.com\" target=\"_blank\">Link</a></s>"
  },
  {
    "text": "<s>[INST] Write a Python script that prints the current date and time. [/INST] from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%d-%m-%Y %H:%M:%S\"))</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of binary search in an array. [/INST] Binary search is an algorithm used to find an element in a sorted array. It works by repeatedly dividing in half the array until the element being searched is found. Binary search starts by comparing the middle element of the array with the target value. If the target value matches the middle element, its position in the array is returned. If the target value is less than the middle element, the search continues in the lower half of the array. If the target value is greater than the middle element, the search continues in the upper half of the array. This process is repeated until the target element is found or until the entire array has been searched.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that sorts an array of strings alphabetically.\n\nmyArray = [\"cat\",\"apple\",\"dog\"] [/INST] function sortArray(arr) {\n    let sortedArray = arr.sort();\n    return sortedArray;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the name, email address and phone number of all employees with a salary of more than 1000. [/INST] SELECT name, email, phone_number FROM employees WHERE salary > 1000;</s>"
  },
  {
    "text": "<s>[INST] Explain what is a stack data structure in programming. [/INST] A stack is a linear data structure that works on the principle of last-in, first-out (LIFO). It is a collection of objects or elements which can be added or removed from the top of the stack. It is commonly used as a way to store temporary data, and allows for fast retrieval of the data, as it is only necessary to access the item at the top of the stack. In computer science, the stack is used for a wide range of applications, including memory and runtime storage management, expression evaluation, and more.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to check if a string ends with the given substring.\n\nmainStr = “Hello World”\nsubStr = “orld” [/INST] function endsWith(mainStr, subStr) {\n    let startIndex = mainStr.length - subStr.length;\n    let checkStr = mainStr.substring(startIndex);\n    return checkStr === subStr;\n}</s>"
  },
  {
    "text": "<s>[INST] Explain what are pointers in C++. [/INST] Pointers are variables that store the address of another variable in memory. They can be used to dynamically allocate memory, access a particular piece of data, or pass arguments to functions. In C++, pointers are used to extend the notion of an array by allowing to access memory outside of its bounds and to have a dynamic size. Pointers are also used to create data structures like linked lists and binary trees.</s>"
  },
  {
    "text": "<s>[INST] Write a C++ function that takes an array of strings and prints them out in reverse order.\n\nmyArray = [\"cat\",\"apple\",\"dog\"] [/INST] void print_reverse (string arr[], int size) { \n  if (size > 0) { \n    print_reverse (arr, size - 1); \n    cout<<arr[size-1]<<\" \"; \n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML form to collect a user's name, email address, and password. [/INST] <form>\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\" />\n  <label>Email:</label>\n  <input type=\"text\" name=\"email\" />\n  <label>Password:</label>\n  <input type=\"password\" name=\"passwd\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to implement a binary search algorithm. [/INST] def binary_search(arr, target): \n\tstart = 0\n\tend = len(arr) - 1\n\n\twhile start <= end: \n\t\tmid = start + (end-start)//2\n\t\tif arr[mid] == target: \n\t\t\treturn mid \n\t\telif arr[mid] < target: \n\t\t\tstart = mid + 1\n\t\telse: \n\t\t\tend = mid - 1\n          \n\treturn -1</s>"
  },
  {
    "text": "<s>[INST] Translate the following polar equation into a Cartesian equation.\n\nr = 2 sin(θ) [/INST] Given the equation r=2sin(θ), \nthe Cartesian equation can be determined to be\n\nx=2sin(θ)cos(θ) and y= 2sin²(θ).</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm that finds the greatest common divisor of two integers.\n\nx = 20 \ny = 12 [/INST] def find_gcd(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\n    while y > 0:\n        tmp = y\n        y = x % y\n        x = tmp\n    return x\n\ngcd = find_gcd(20,12)\nprint(\"The greatest common divisor of 20 and 12 is: \", gcd)</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to find all pairs of elements in a given array that sum up to a given target.\n\narray = [1, 6, 4, 5, 3, 2]\ntarget = 5 [/INST] def findSumPairs(arr, target): \n\n    # X stores elements and its \n    # frequencies in a dictionary \n    X = dict() \n    n = len(arr) \n    output = [] \n  \n    # Store counts of all elements \n    # of array in a hash \n    for i in range(0, n): \n        if arr[i] in X.keys(): \n            X[arr[i]] += 1\n        else: \n            X[arr[i]] = 1\n\n    # Loop over each element \n    for i in range(0, n): \n        # finding the compliment \n        k = target - arr[i] \n\n        # If compliment exists in X \n        # and it is not the same element \n        if (k in X.keys() and X[k] != 0\n            and k != arr[i]): \n            output.append([arr[i], k]) \n            X[k] = X[k] - 1\n  \n    # return content of output \n    return output \n\n# calling the findSumPairs function \nprint(findSumPairs(array, target)) \n\n# Output: [[1, 4], [2, 3]]</s>"
  },
  {
    "text": "<s>[INST] Create a Bash script that prints the first ten numbers. [/INST] #!/bin/bash\n\nfor i in {1..10}\ndo\n  echo $i\ndone</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML code snippet to change the color of the heading to blue.\n\n<h1>Heading</h1> [/INST] <h1 style=\"color: blue;\">Heading</h1></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to display the name and country of the customers who have purchased products in the last 24 hours. [/INST] SELECT name, country \nFROM customers \nWHERE orderDate > DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 DAY);</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program to convert temperatures between Celsius and Fahrenheit. [/INST] function convertTemp(temp, unit) {\n    let newTemp;\n    if (unit === \"C\") {\n        newTemp = temp * 9/5 + 32;\n    } else {\n        newTemp = (temp - 32) * 5/9;\n    }\n    return newTemp;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find out how many orders have been placed today? [/INST] SELECT COUNT(*) FROM orders\nWHERE DATE(order_date) = CURDATE()</s>"
  },
  {
    "text": "<s>[INST] Change the following JavaScript function so that it returns true if the number passed as a parameter is even, and false if it is odd.\n\nfunction isEven(number) {\n  return number % 2;\n} [/INST] function isEven(number) {\n  return number % 2 === 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to print out a 5x5 multiplication table. [/INST] for i in range(1, 6):\n    for j in range(1, 6):\n        print(i * j, end=\"\\t\")\n    print()</s>"
  },
  {
    "text": "<s>[INST] Edit this HTML document so the <h1> tag at the top of the page is aligned to the center.\n\n<html>\n  <head>\n    <title>My Page</title> \n  </head>\n  <body>\n    <h1>Page Title</h1>\n  </body>\n</html> [/INST] <html>\n  <head>\n    <title>My Page</title> \n  </head>\n  <body>\n    <h1 style=\"text-align: center;\">Page Title</h1>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that finds the most popular product sold today (in terms of quantity), along with the quantity sold. [/INST] SELECT product_name, SUM(quantity)\nFROM orders \nWHERE DATE(order_date) = CURDATE()\nGROUP BY product_name \nORDER BY SUM(quantity) DESC\nLIMIT 1</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java that returns the number of days between two given dates. [/INST] public int getDaysDifference(LocalDate startDate, LocalDate endDate) {\n    return (int) ChronoUnit.DAYS.between(startDate, endDate);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTTP GET request using Python. [/INST] import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nprint(response.text)</s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule that changes the font-family of the body element to sans-serif. [/INST] body {\n  font-family: sans-serif;\n}</s>"
  },
  {
    "text": "<s>[INST] Merge the following two sorted arrays into a single sorted array in Java.\n\n[1, 5, 8]\n[2, 3, 6] [/INST] int[] mergeArrays(int[] array1, int[] array2) {\n    int[] mergedArray = new int[array1.length + array2.length];\n    int index1 = 0, index2 = 0;\n    for (int i = 0; i < mergedArray.length; i++) {\n        if (index1 < array1.length \n            && (index2 >= array2.length || array1[index1] < array2[index2])) {\n            mergedArray[i] = array1[index1];\n            index1++;\n        } else {\n            mergedArray[i] = array2[index2];\n            index2++;\n        } \n    } \n    return mergedArray;\n}</s>"
  },
  {
    "text": "<s>[INST] What is the difference between an array and a list in Java? [/INST] Array is a data structure that stores elements of the same data type. It is a fixed length structure and once declared, the length of the array cannot be modified. A list is a data structure that stores elements of different types. The size of a list can be modified by adding or removing elements. Lists are more powerful than arrays as they are more flexible when it comes to inserting, deleting, and searching elements.</s>"
  },
  {
    "text": "<s>[INST] Write a script that prints out the first 100 prime numbers. [/INST] # Python program to print first n prime numbers\n  \nnum = 100\n# prime numbers are greater than 1\nif num > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           break\n   else:\n       print(num,\"is a prime number\")\n  \nelse:\n   print(num,\"is not a prime number\")\n\n# Program to print the first N prime numbers\n\n# Taking input from the user\nN = 100\n\n# Initializing a list to store prime numbers\nprime_list = []\n\n# Initializing a variable to store each prime number\nnum = 2\n\n# Iterating over the range of numbers\nwhile len(prime_list) < N:\n    # Initializing a flag to determine if the number is prime or not\n    flag = True\n    # Iterating over the already identified prime numbers and dividing the number by each\n    for prime_num in prime_list:\n        # Checking the remainder\n        if num % prime_num == 0:\n            flag = False\n            break\n    # Checking if the number is prime\n    if flag:\n        prime_list.append(num)\n    # Incrementing the number\n    num += 1\n\n# Printing the first N prime numbers\nprint(\"First\", N , \"prime numbers are:\")\nfor prime_num in prime_list:\n    print(prime_num, end=\" \")</s>"
  },
  {
    "text": "<s>[INST] Create a Python dictionary that contains the following key-value pairs: \"a\":1, \"b\":2, \"c\": 3. [/INST] d = {\n  \"a\": 1,\n  \"b\": 2,\n  \"c\": 3\n}</s>"
  },
  {
    "text": "<s>[INST] What is the difference between variables declared with let and const in JavaScript? [/INST] The difference between let and const is that variables declared with let can be reassigned a different value or reassigned a different value type. On the other hand, variables declared with const are fixed, and cannot be reassigned or reassigned a different value type.</s>"
  },
  {
    "text": "<s>[INST] Convert the following function from Python to C++.\n\ndef add_numbers(x, y):\n    return x + y [/INST] int add_numbers(int x, int y) {\n  return x + y;\n}</s>"
  },
  {
    "text": "<s>[INST] Using the array, sort it using insertion sort.\n\narr = [4, 2, 6, 7, 1] [/INST] def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \narr = [4, 2, 6, 7, 1] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])</s>"
  },
  {
    "text": "<s>[INST] Create a HTML tag to display a hyperlink.\n\njQuery website [/INST] <a href=\"https://jquery.com\">jQuery website</a></s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm for shuffling an array of numbers. [/INST] def shuffleArray(arr):\n    for i in range(len(arr) - 1, 0, -1): \n        j = random.randint(0, i + 1)  \n        arr[i], arr[j] = arr[j], arr[i]\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Describe the benefits of using JavaScript. [/INST] JavaScript has many advantages, such as being easy to learn and implement, being interpreted rather than compiled, and being supported by all major browsers. JavaScript also allows for dynamic and interactive webpages, enabling more user engagement and more sophisticated web experiences. Finally, JavaScript has the ability to run on both the server side and the client side, providing flexibility in how the code is used.</s>"
  },
  {
    "text": "<s>[INST] Remove the element \"red\" from the following array.\n\narr = ['blue', 'green', 'red', 'yellow'] [/INST] arr = ['blue', 'green', 'yellow']</s>"
  },
  {
    "text": "<s>[INST] List 3 prominent reasons to choose Reactjs as a web development library. [/INST] 1. React is fast - thanks to its virtual DOM and efficient diff algorithm.\n2. React is component-based, making it easy to create reusable, maintainable, and modular code.\n3. React is easy to learn and integrates well with other libraries and frameworks, such as Redux and Node.js.</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to solve the Tower of Hanoi problem. [/INST] def TowerOfHanoi(n , from_rod, to_rod, aux_rod): \n    if n == 1: \n        print (\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod) \n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print (\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod) \n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)</s>"
  },
  {
    "text": "<s>[INST] Modify the following code so that the output is 4, 4.\n\nimport math \ndef f(x): \n    return math.sqrt(x) * math.sqrt(x+1)\n  \nprint(f(3)) [/INST] import math \ndef f(x): \n    return math.pow(x, 2)\n  \nprint(f(4))</s>"
  },
  {
    "text": "<s>[INST] Create a function to sum all the numbers in an array.\n\narr = [1, 2, 3, 4] [/INST] def sumList(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nprint(sumList(arr))</s>"
  },
  {
    "text": "<s>[INST] Modify the code to return the most repeated character.\n\ndef max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    print(char_count) [/INST] def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    for char in char_count:\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char</s>"
  },
  {
    "text": "<s>[INST] Apply a filter to the following array of objects so that the output contains only the elements that have a value greater than 5 and a type string.\n\n[{type: 'string', value: 3}, {type: 'number', value: 4}, {type: 'number', value: 6}, {type: 'string', value: 8}] [/INST] [{type: 'string', value: 8}]</s>"
  },
  {
    "text": "<s>[INST] Given the following HTML structure, write a CSS selector that selects the h2 tags with class \"green\".\n\n<div>\n    <h2 class=\"green\">Title A</h2>\n    <h2>Title B</h2>\n    <h2 class=\"green\">Title C</h2>\n</div> [/INST] div h2.green</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to select all articles where the author is \"John Doe\". [/INST] SELECT * FROM articles WHERE author=\"John Doe\";</s>"
  },
  {
    "text": "<s>[INST] Calculate the minimum value of the following set of numbers: 4, -2, 6, 9. [/INST] -2</s>"
  },
  {
    "text": "<s>[INST] Given the following JSON structure, write a JavaScript expression that returns the value of the property \"firstName\".\n\n{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"age\": 25\n} [/INST] jsonObject.firstName</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript that takes two strings as parameters and returns the concatenation of both strings. [/INST] const concatStrings = (string1, string2) => {\n    return string1 + string2;\n}</s>"
  },
  {
    "text": "<s>[INST] Rearrange the following array of objects so that the output sorted in ascending order by the \"age\" property.\n\n[{name: 'John Doe', age: 25}, {name: 'Sarah Smith', age: 61}, {name: 'Jane Doe', age: 41}]; [/INST] [{name: 'John Doe', age: 25}, {name: 'Jane Doe', age: 41}, {name: 'Sarah Smith', age: 61}];</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program that displays the ASCII character corresponding to a given numerical character code. [/INST] #include <iostream>\n\nint main()\n{\n    int code;\n    \n    std::cout << \"Please enter a character code: \";\n    std::cin >> code;\n    \n    std::cout << \"The corresponding character is: \" << char(code) << std::endl;\n    \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a React component that is a simple form with two input fields (name and email). [/INST] import React, { Component } from 'react';\n\nclass Form extends Component {\n    render() {\n        return (\n            <form>\n            <label>Name: </label>\n            <input type=\"text\" id=\"name\" /><br />\n\n            <label>Email: </label>\n            <input type=\"text\" id=\"email\" /><br />\n            </form>\n        );\n    }\n}\n\nexport default Form;</s>"
  },
  {
    "text": "<s>[INST] Construct a query in MongoDB to select documents with a value greater than 3 for the property \"value\". [/INST] db.collection.find( { value: { $gt: 3 } } )</s>"
  },
  {
    "text": "<s>[INST] Write a Java program that displays the area of a triangle, given the three sides.\n\n3, 4, 5 [/INST] public class TriangleArea {\n \n public static void main(String[] args) {\n \n  int a = 3;\n  int b = 4;\n  int c = 5;\n \n  // calculate the semi-perimeter\n  double s = (a + b + c) / 2;\n \n  // calculate the area\n  double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n \n  // display the result\n  System.out.println(\"The area of the triangle: \" + area);\n }\n \n}</s>"
  },
  {
    "text": "<s>[INST] Create a JSON structure to store the following user data: name, age, and education.\n\nJohn Doe, 25, Masters [/INST] {\n \"name\": \"John Doe\",\n \"age\": 25,\n \"education\": \"Masters\"\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following JavaScript code in the Java language.\n\nconst numList = [1, 2, 3, 4];\n\nnumList.map((num) => {\n  return num * 2;\n}); [/INST] int[] numList = {1, 2, 3, 4};\n\nfor (int i = 0; i < numList.length; i++) {\n  numList[i] = numList[i] * 2;\n}</s>"
  },
  {
    "text": "<s>[INST] Convert the following list of numbers into a comma-separated string.\n\n[25, 32, 63, 18, 22] [/INST] '25,32,63,18,22'</s>"
  },
  {
    "text": "<s>[INST] Create a Python program that takes a given list of strings and prints out the string with the maximum length.\n\n['code', 'programming', 'computer science', 'javascript', 'HTML'] [/INST] max_len = 0\nmax_string = ''\nfor elem in ['code', 'programming', 'computer science', 'javascript', 'HTML']:\n    if len(elem) > max_len:\n        max_len = len(elem)\n        max_string = elem\n\nprint(max_string)</s>"
  },
  {
    "text": "<s>[INST] Create a for loop in JavaScript to iterate through the given array and print out their sum.\n\n[20, 32, 45, 16] [/INST] let result = 0;\nlet numList = [20, 32, 45, 16];\n\nfor (let i = 0; i < numList.length; i++){\n    result += numList[i];\n}\n\nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Select the code segment that outputs \"pass\". [/INST] let num = 4;\n\nif (num < 5) {\n    console.log('pass');\n} else {\n    console.log('fail');\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that reads an array of integers from the console and prints out the largest number. [/INST] import java.util.Scanner;\n\npublic class LargestNum {\n    public static void main(String[] args){\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Input the size of array: \");\n        int n = scanner.nextInt();\n\n        int[] arr = new int[n];\n        System.out.println(\"Input \"+n+\" elements in the array:\");\n        for(int i = 0; i < n; i++){\n            arr[i] = scanner.nextInt();\n        }\n\n        int max = arr[0];\n\n        for (int anArr : arr) {\n            if (anArr > max)\n                max = anArr;\n        }\n\n        System.out.println(\"Largest number in the array is \" + max);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code snippet to remove the use of \"while\" loop.\n\nlet sum = 0;\nlet i = 0;\nwhile (i <= 10) {\n   sum += i;\n   i += 1;\n} [/INST] let sum = 0; \nfor (let i = 0; i <= 10; i++) {\n   sum += i;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C# function that takes 2 input strings and returns true if one string is a permutation of the other. [/INST] static bool IsPermutation(string s1, string s2)\n{\n    if (string.ReferenceEquals(s1, s2))\n        return true;\n    if (s1 == null || s2 == null)\n        return false;\n    if (s1.Length != s2.Length)\n        return false;\n\n    int[] charCount = new int[256];\n\n    foreach (char c in s1){\n        charCount[c]++;\n    }\n\n    foreach (char c in s2) {\n        if (--charCount[c] < 0)\n            return false;\n    }\n\n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Write some C code to print the following pattern: [/INST] #include<stdio.h>\nint main(){\n\tfor(int i=1;i<=5;i++){\n\t\tfor(int j=1;j<=i;j++){\n\t\t\tprintf(\"*\");\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to count the number of people who have an age between 18 and 25. [/INST] SELECT COUNT(*) \nFROM person \nWHERE age BETWEEN 18 and 25;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that takes an array of strings and returns a new array containing the length of each string. [/INST] const getLengths = (arr) => {\n     return arr.map(elem => elem.length);\n}</s>"
  },
  {
    "text": "<s>[INST] Design a class to represent a point in 2D space.\n\nIt should store two variables—x and y. [/INST] class Point:\n    x = 0\n    y = 0\n    def Point(x, y):\n        self.x = x\n        self.y = y</s>"
  },
  {
    "text": "<s>[INST] Compute the distance between two points p1 and p2.\n\np1 = (3, 4), p2 = (6, 8). [/INST] import math\ndef distance(p1, p2):\n    xDiff = p2[0] - p1[0]\n    yDiff = p2[1] - p1[1]\n    return math.sqrt(xDiff**2 + yDiff**2)\n\ndistance((3,4), (6,8)) # Returns 5.0</s>"
  },
  {
    "text": "<s>[INST] Implement a stack using a linked list. [/INST] class Stack:\n\n    class Node:\n        def __init__(self, value):#, next=None):\n            self.value = value\n            self.next = None\n\n    def __init__(self):\n        self.head = None\n        self.count = 0\n\n    def isEmpty(self):\n        if self.count == 0:\n            return True\n        return False\n\n    def push(self, value):\n        node = self.Node(value)\n        node.next = self.head\n        self.head = node\n        self.count += 1\n\n    def pop(self):\n        if self.head == None:\n            return None\n        result = self.head.value\n        self.head = self.head.next\n        self.count -= 1\n        return result</s>"
  },
  {
    "text": "<s>[INST] Write a function that converts Fahrenheit to Celsius. [/INST] def FtoC(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius</s>"
  },
  {
    "text": "<s>[INST] Generate a random number from 1 to 1000. [/INST] import random\n\nrandom_number = random.randint(1, 1000)</s>"
  },
  {
    "text": "<s>[INST] Parse a JSON document and display its contents. [/INST] import json\n\nwith open('filename.json', 'r') as json_file:\n    data = json.load(json_file)\n\nfor key, value in data.items():\n    print(key, ':', value)</s>"
  },
  {
    "text": "<s>[INST] Write a code that finds all the prime numbers from 1 to n. [/INST] def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_primes(n):\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nfind_primes(10) # Returns [2, 3, 5, 7]</s>"
  },
  {
    "text": "<s>[INST] Calculate the running average of a given array of data.\n\n[1,6,3,5,2,7,8] [/INST] def calculate_running_average(arr):\n    running_sum = 0\n    for i in range(len(arr)):\n        running_sum += arr[i]\n        arr[i] = running_sum / (i+1)\n    return arr\n\narr = [1, 6, 3, 5, 2, 7, 8]\ncalculate_running_average(arr) # Returns [1.0, 3.5, 3.0, 3.75, 3.2, 4.16, 4.43]</s>"
  },
  {
    "text": "<s>[INST] Find the longest increasing subsequence of a given array of numbers.\n\n[10,22,9,33,21,50,41,60] [/INST] def longest_increasing_subsequence(arr):\n\n    n = len(arr)\n    lis = [1] * n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n    return max(lis)\n\narr = [10,22,9,33,21,50,41,60]\nlongest_increasing_subsequence(arr) # Returns 5</s>"
  },
  {
    "text": "<s>[INST] Convert the following pseudocode into Python code\n\nfor i = 0 to 9\n    print i [/INST] for i in range(10):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Create a program in python to find the longest common contiguous subarray between two integers.\n\nint arr1[7] = {1,2,4,4,4,4,7}\nint arr2[5] = {1,4,4,5,5} [/INST] def long_com_subarr(arr1, arr2):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    res = 0\n    count = 0 \n    \n    for i in range(len1):\n        for j in range(len2):\n            if arr1[i] == arr2[j]:\n                count += 1\n            else: \n                if result < count:\n                    res = count\n                count = 0\n    \n    return res</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of Base Class and Subclass [/INST] A base class is a class that serves as a parent class for one or more subclasses. A subclass is a class that is derived from one or more base classes and inherits the properties and methods of its base classes. A subclass can also override and add its own properties and methods, while inheriting the properties and methods of its parent classes.</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in python to find the second largest number of an unsorted list\n\narr = [1, 3, 4, 5, 9, 10, 11] [/INST] def find_sec_largest(arr):\n  max1 = max(arr[0], arr[1])\n  max2 = min(arr[0], arr[1])\n\n#Iterate over the array to find max2 and max1\nfor i in range(2, len(arr)):\n  if arr[i] > max1:\n    max2 = max1\n    max1 = arr[i]\n  elif arr[i] > max2 and arr[i]!=max1:\n    max2 = arr[i]\n  else:\n    continue\n\n# else return the second max\nreturn max2</s>"
  },
  {
    "text": "<s>[INST] Create a function in C++ that inserts a new student name and score in the given 2D vector\n\nstudents = [\n    [\"Sam\", 70],\n    [\"Tom\", 85],\n    [\"Jess\", 80]\n]\n\nnew_student_name = \"Jen\"\nnew_student_score = 92 [/INST] void add_student(vector<vector<string>>& students, string new_student_name, int new_student_score) {\n    vector<string>student;\n    student.push_back(new_student_name);\n    student.push_back(to_string(new_student_score));\n    students.push_back(student);\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following code snippet so that it prints \"Hello World\" three times\n\n#include <iostream>\n\nint main(){\n    std::cout << \"Hello world\" << std::endl;\n    return 0;\n} [/INST] #include <iostream>\n\nint main(){\n    for(int i=0; i < 3; i++)\n        std::cout << \"Hello world\" << std::endl;\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a repeatable random number generator in Python [/INST] import random\n\ndef repeatRandom(seed):\n  random.seed(seed)\n  return random.random()</s>"
  },
  {
    "text": "<s>[INST] List the different access modifiers in Java [/INST] The access modifiers in Java are public, private, protected, and default. Public members are accessible everywhere and can be inherited. Private members can only be accessed within the same class. Protected members are accessible within the same package but can be inherited to a subclass in a different package. Default, or package-private, members are accessible within the same package but cannot be inherited.</s>"
  },
  {
    "text": "<s>[INST] Change the following code so that it accepts a list as an argument and prints each element of the list.\n\ndef print_list(arr):\n\ti = 0\n\twhile (i < len(arr)):\n\t\tprint arr[i]\n\t\ti +=1 [/INST] def print_list(arr):\n\tfor ele in arr:\n\t\tprint(ele)</s>"
  },
  {
    "text": "<s>[INST] Construct an algorithm in python to find the length of the longest common substring between two strings\n\nstr1 = \"'abbcdefg\"\nstr2 = \"zabxdefujh\" [/INST] def longest_common_substring(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a search algorithm in Python to find an element in a sorted array in less than log(n) time.\n\narr = [1, 2, 3, 4, 5, 6, 7, 8] [/INST] def binarySearch(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n    return -1</s>"
  },
  {
    "text": "<s>[INST] Create a function in R to calculate the mean from a given list of numbers.\n\nnumlist = c(2, 5, 10, 17, 21) [/INST] mean <- function(numlist) {\n  mean_val <- sum(numlist)/length(numlist)\n  return (mean_val)\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to compute the gravitational force between two masses.\n\nm1 = 5 kg, m2 = 10 kg [/INST] def calc_grav_force(m1, m2):\n    G = 6.67 * 10 ** -11 # gravitational constant\n    force = G * m1 * m2 / (4 * 3.14 ** 2)\n    return force</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to convert a given string to a positive integer.\n\nstr = \"323\" [/INST] const convertStringToInteger = str => {\n  return  parseInt(str, 10);\n}</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in Java to sort an array in descending order.\n\narray = [10, 15, 7, 2, 13, 18] [/INST] public static void sortDesc(int[] array) {\n    for(int i = 0; i < array.length; i++) {\n        for(int j = 1; j < array.length; j++) {\n            if(array[j-1] < array[j]) {\n                int temp = array[j-1];\n                array[j-1] = array[j];\n                array[j] = temp;\n            }\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to create a subset of a given array.\n\narray = [1, 2, 3, 4, 5], k = 3 [/INST] const subset = (array, k) => { \n  const output = []\n  for (let i = 0; i < k; i++) { \n      let index = Math.floor(Math.random() * array.length);\n      output.push(array.splice(index, 1)[0]);\n  }\n  return output;\n}</s>"
  },
  {
    "text": "<s>[INST] You need to fix the following code to make it work correctly.\n\ndef mean(numbers):\n nums = numbers\n avg = sum(nums) / len(nums)\n return int(avg) [/INST] def mean(numbers):\n nums = numbers\n avg = sum(nums) / len(nums)\n return round(avg, 2)</s>"
  },
  {
    "text": "<s>[INST] You need to generate a list of all the even numbers between two given numbers. [/INST] def even_numbers(start, end):\n even_nums = []\n for num in range(start, end):\n if num % 2 ==0:\n even_nums.append(num)\n return even_nums</s>"
  },
  {
    "text": "<s>[INST] Generate a sentence that consists of repeated words with different properties. [/INST] The icy blue ocean glistened with sparkling diamond stars.</s>"
  },
  {
    "text": "<s>[INST] You need to implement a class for a numerical calculator. [/INST] class Calculator:\n def __init__(self):\n  self.result = 0\n\n def add(self, a, b):\n  self.result = a + b\n  return self.result\n\n def subtract(self, a, b):\n  self.result = a - b\n  return self.result\n\n def multiply(self, a, b):\n  self.result = a * b\n  return self.result\n\n def divide(self, a, b):\n  self.result = a / b\n  return self.result</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to generate a list that contains only the non-unique elements from a given list.\n\n[1,2,3,4,5,1,2,2,3,4] [/INST] def generate_non_unique_list(lst):\n new_list = []\n for i in lst:\n  if lst.count(i) > 1 and i not in new_list:\n   new_list.append(i)\n return new_list</s>"
  },
  {
    "text": "<s>[INST] Implement a function to convert a given string into a list of words.\n\nMy name is Anna. [/INST] def string_to_list(string):\n words = string.split(' ')\n return words</s>"
  },
  {
    "text": "<s>[INST] Categorize a given list of integers into odd and even numbers.\n\n[1,2,3,4,5,6,7,8,9] [/INST] def categorize_numbers(lst):\n odd = []\n even = []\n for num in lst:\n  if num % 2 == 0:\n   even.append(num)\n  else:\n   odd.append(num)\n return odd, even</s>"
  },
  {
    "text": "<s>[INST] You need to compute the sum of all odd elements in a given matrix.\n\n[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],] [/INST] def sum_odd_matrix(matrix):\n sum = 0\n for row in matrix:\n  for value in row:\n   if value % 2 != 0:\n    sum += value\n return sum</s>"
  },
  {
    "text": "<s>[INST] Write a function to compute the product of all elements in a matrix.\n\n[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],] [/INST] def product_matrix(matrix):\n product = 1\n for row in matrix:\n  for value in row:\n   product *= value\n return product</s>"
  },
  {
    "text": "<s>[INST] Create a C++ object class that stores information about different people.\n\nname: John Smith\nage: 30\naddress: 1234 Main Street [/INST] class Person {\n    string name;\n    int age;\n    string address;\n \npublic:\n    Person();\n    Person(string name, int age, string address);\n \n    string getName();\n    int getAge();\n    string getAddress();\n \n    void setName(string name);\n    void setAge(int age);\n    void setAddress(string address);\n};</s>"
  },
  {
    "text": "<s>[INST] Define a function in Ruby to return the sum of two numbers. [/INST] def add_numbers(x, y)\n  return x + y\nend</s>"
  },
  {
    "text": "<s>[INST] Write a HTML page to create a survey form. [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>Survey Form</title>\n</head>\n<body>\n  <form action=\"/action_page.php\">\n    <label for=\"name\">Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Your name..\" required><br>\n    <label for=\"email\">Email:</label><br>\n    <input type=\"text\" id=\"email\" name=\"email\" placeholder=\"Your email..\" required><br>\n    <label for=\"age\">Age:</label><br>\n    <input type=\"number\" id=\"age\" name=\"age\" placeholder=\"Your age..\" required><br><br>\n    <fieldset>\n      <legend>Gender:</legend>\n      <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\" checked>\n      <label for=\"male\">Male</label><br>\n      <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n      <label for=\"female\">Female</label><br>\n      <input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\">\n      <label for=\"other\">Other</label><br>\n    </fieldset>\n    <fieldset>\n      <legend>Interests:</legend>\n      <input type=\"checkbox\" id=\"tech\" name=\"tech\" value=\"tech\">\n      <label for=\"tech\">Technology</label><br>\n      <input type=\"checkbox\" id=\"sport\" name=\"sport\" value=\"sport\">\n      <label for=\"sport\">Sports</label><br>\n      <input type=\"checkbox\" id=\"science\" name=\"science\" value=\"science\">\n      <label for=\"science\">Science</label><br>\n    </fieldset><br>\n    <label for=\"comment\">Comment:</label><br>\n    <textarea id=\"comment\" name=\"comment\" placeholder=\"Write something..\" style=\"height:90px\"></textarea>\n    <br><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form> \n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Generate a PHP array containing 20 random integers in the range 0 to 100. [/INST] $numbers = array();\nfor ($i = 0; $i < 20; $i++) {\n    $numbers[$i] = rand(0, 100);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Swift code to find the maximum number from an array of integers. [/INST] func maximumNumber(fromArray array:[Int]) -> Int {\n    var max = array[0]\n    for number in array {\n        if number > max {\n            max = number\n        }\n    }\n    return max\n}</s>"
  },
  {
    "text": "<s>[INST] Correct the following Python code so it prints out the current hour in 24-hour format.\n\nimport datetime\n\ncurrent_hour = datetime.now()\nprint(\"Current hour is\")\nprint(current_hour.hour) [/INST] import datetime\n\ncurrent_time = datetime.datetime.now()\nprint(\"Current hour is\")\nprint(current_time.strftime(\"%H\"))</s>"
  },
  {
    "text": "<s>[INST] Create a CSS class for displaying large text in an HTML page. [/INST] .large-text {\n    font-size: 22px;\n    font-weight: bold;\n}</s>"
  },
  {
    "text": "<s>[INST] Find the sum of the following array elements in MATLAB.\n\nA = [100,200,300] [/INST] A = [100,200,300];\nsumA = sum(A);\nfprintf('Sum of elements: %d\\n', sumA);</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to delete the record of a person whose id is 1234. [/INST] DELETE FROM Person WHERE id = 1234;</s>"
  },
  {
    "text": "<s>[INST] Design a data structure to hold a user's name, age, and city. [/INST] struct User {\n    string name;\n    int age;\n    string city;\n};</s>"
  },
  {
    "text": "<s>[INST] Create a virtual environment with Python version 2.7. [/INST] pip install virtualenv\nvirtualenv -p python2.7 venv\nsource venv/bin/activate</s>"
  },
  {
    "text": "<s>[INST] Write a for loop in Perl for printing all the elements of a list.\n\nmy @myList = (4, 7, 12); [/INST] foreach my $element (@myList){\n  print $element;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java for a circle. [/INST] class Circle{\n    double radius; \n \n    public Circle(double r){\n        this.radius = r; \n    } \n       \n    public double getArea(){ \n        return Math.PI*radius*radius; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Calculate the Fibonacci sequence till 10 using Python. [/INST] def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nfor i in range(1,11): \n    print(Fibonacci(i))</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select the most recent entry from a table.\n\nTable Name - user_table\nField Names - name, date [/INST] SELECT name, date \nFROM user_table \nORDER BY date DESC \nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write a function in Javascript to check if a given list is palindrome.\n\nlet list = [1, 2, 3, 3, 2, 1] [/INST] function isPalindrome(list) {\n    for (let i = 0; i < Math.floor(list.length / 2); i++) {\n        if (list[i] !== list[list.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary with two key-value pairs in Python. [/INST] my_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}</s>"
  },
  {
    "text": "<s>[INST] Define a function in Ruby that takes two arguments and returns their sum. [/INST] def add_numbers(num1, num2) \n  return num1 + num2\nend</s>"
  },
  {
    "text": "<s>[INST] Use python to call a API to get the current temperature in New York City? [/INST] import requests\n\n# API call to get current temperatures in New York City\nurl = 'http://api.openweathermap.org/data/2.5/weather?q=New York City,NY&units=imperial'\nresponse = requests.get(url)\ndata = response.json()\ncurrent_temperature = data['main']['temp']\nprint(current_temperature)</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to check if a number is a palindrome.\n\n7337 [/INST] def is_palindrome(num):\n    num_str = str(num)\n    # compare the first and last characters\n    if num_str[0] != num_str[-1]:\n        return False\n    # go to the next pair of characters\n    if len(num_str) >= 3:\n        return is_palindrome(num_str[1:-1])\n    # all characters have been compared, number is a palindrome\n    return True</s>"
  },
  {
    "text": "<s>[INST] Create a React component to display a list of 5 user names.\n\n[\n    {name: \"John Doe\"},\n    {name: \"Mary Smith\"},\n    {name: \"Jane Watson\"},\n    {name: \"Bob Williams\"},\n    {name: \"Jill Taylor\"}\n] [/INST] import React from 'react';\n\nconst UserList = (props) => {\n    const users = props.users.map((user, index) => {\n        return (\n            <div key={index}>{user.name}</div>\n        );\n    });\n    return (\n        <div>\n            {users}\n        </div>\n    )\n};\n\nexport default UserList;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript regex to match an email address. [/INST] let regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;</s>"
  },
  {
    "text": "<s>[INST] Build a mobile app with React Native to display the current temperature of a given city. [/INST] import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, Platform } from 'react-native';\nimport { fetchWeather } from './utils/api';\n\nexport default function App() {\n    const [temp, setTemp] = useState('');\n\n    useEffect(() => {\n        fetchWeather('New York City, NY')\n            .then(temp => setTemp(temp));\n    }, []);\n\n    return (\n        <View style={styles.container}>\n            <Text>The current temperature in New York City is {temp}°F</Text>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        marginHorizontal: 10,\n        padding: 20,\n        backgroundColor: (Platform.OS === 'ios') ? '#e3e3e3' : '#f3f3f3',\n    }\n});</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to calculate the median of a column in a table. [/INST] SELECT AVG(sub.median) \nFROM\n    (SELECT AVG(t.rating) as median\n     FROM ratings t\n     LEFT JOIN ( SELECT id,\n                        @rownum := @rownum + 1 AS row_number,\n                        @total_rows := @total_rows + 1 AS total_rows\n                    FROM ratings t1, \n                    (SELECT @rownum := 0) r\n                    ) \n        r ON t.id = r.id\n    WHERE 1=1\n    GROUP BY row_number\n    ORDER BY row_number\n    ) sub\nWHERE sub.median > 0\nAND sub.row_number IN ( FLOOR((@total_rows+1)/2), FLOOR((@total_rows+2)/2) );</s>"
  },
  {
    "text": "<s>[INST] Create a shell script to find the size of all folders in a directory. [/INST] #!/bin/bash\n\nfor i in $(find . -type d); do\n    echo -n \"$i: \"\n    du -sh $i\n done</s>"
  },
  {
    "text": "<s>[INST] Create an object-oriented design in Python to represent a customer. [/INST] class Customer:\n    def __init__(self, name, address, email):\n        self.name = name\n        self.address = address\n        self.email = email\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        self.name = name\n\n    def get_address(self):\n        return self.address\n\n    def set_address(self, address):\n        self.address = address\n\n    def get_email(self):\n        return self.email\n\n    def set_email(self, email):\n        self.email = email</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to shuffle an array.\n\n[1, 2, 3, 4, 5, 6] [/INST] import random\n\ndef shuffleArray(arr):\n    # Create a copy of the array\n    temp_arr = arr.copy()\n\n    # Iterate through the array and randomly\n    # swap elements\n    for i in range(len(temp_arr)):\n        j = random.randint(0, len(temp_arr)-1)\n        temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n\n    return temp_arr</s>"
  },
  {
    "text": "<s>[INST] What is the average of the numbers in list l?\n\nl = [1,2,3,4,5] [/INST] Average = sum(l) / len(l) = 15 / 5 = 3.0</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a string and returns the first letter of each word in the string.\n\nstring = \"This is an example\" [/INST] def first_letters(string):\n    words = string.split()\n    first_letters = [word[0] for word in words]\n    return \"\".join(first_letters)\n\nfirst_letters(string) # Returns \"Tiiae\"</s>"
  },
  {
    "text": "<s>[INST] Find the duplicate in the array.\n\narr = [1,2,3,4,2] [/INST] def find_duplicate(arr):\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    return None # if no duplicate\n\nfind_duplicate(arr) # Returns 2</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, return the first number that appears an odd number of times.\n\narr = [2,4,4,4,2,2,8,4] [/INST] def find_odd_occurrence_num(arr):\n    seen = {}\n    for item in arr:\n        if item not in seen:\n            seen[item] = 1\n        else:\n            seen[item] += 1\n    for item, count in seen.items():\n        if count % 2 != 0:\n            return item\n    return None\n\nfind_odd_occurrence_num(arr) # Returns 8</s>"
  },
  {
    "text": "<s>[INST] Is a valid ISBN-10 number?\n\nisbn = \"0478156686\" [/INST] import re \n\ndef is_valid_isbn(isbn):\n    pattern = r\"^\\d{9}[\\d|X]$\" # ISBN is a string with 10 digits\n    return True if re.match(pattern, isbn) else False\n\nis_valid_isbn(isbn) # Returns True</s>"
  },
  {
    "text": "<s>[INST] Parse and convert a string containing a valid JSON to a Python dictionary.\n\nstring = '{ \"a\": 1, \"b\": 2, \"c\": 3 }' [/INST] import json\n\ndef convert_json_string(string):\n    return json.loads(string)\n\nconvert_json_string(string) # Returns { \"a\": 1, \"b\": 2, \"c\": 3 }</s>"
  },
  {
    "text": "<s>[INST] Create a function to retrieve the first value from a dictionary that starts with a given letter.\n\ndictionary = { \"a\": 1, \"b\": 2, \"c\": 3 }\nstarting_letter = “b” [/INST] def get_first_value(dictionary, starting_letter):\n    for key, value in dictionary.items():\n        if key.startswith(starting_letter):\n            return value\n    return None # if no value found\n\nget_first_value(dictionary, starting_letter) # Returns 2</s>"
  },
  {
    "text": "<s>[INST] Find the maximum element in a Binary Search Tree. [/INST] def findMax(root): \n    if root == None: # if tree is empty\n        return -1\n    while root.right: # Move right in  BST till the last node\n        root = root.right\n    return root.key</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two parameters, an array and an object key, and returns an object containing all the elements in the array whose value is the same as the given object key.\n\narray = [\"a\", \"b\", \"c\", \"a\", \"b\", \"d\"]\nkey = \"b\" [/INST] def group_by_key(array, key):\n    returned_object = {}\n    for item in array:\n        if item == key:\n            returned_object[item] = key\n    return returned_object\n\ngroup_by_key(array, key) # Returns {\"b\": \"b\"}</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary comprehension to capture all the words in a sentence.\n\nThe quick brown fox jumps over the lazy dog [/INST] {word: word for word in sentence.split()}</s>"
  },
  {
    "text": "<s>[INST] Design a CSS class that will set the font family of an HTML element to ‘Arial’, font size to 12 pts and font weight to bold. [/INST] .arial-12-pt { \n  font-family: Arial; \n  font-size: 12pt; \n  font-weight: bold;\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a Java method to calculate the square root of a given number n. [/INST] public static double sqrt(double n) { \n  if (n <= 0); \n  return 0; \n  double g = n; \n  while (Math.abs(g*g - n) > 0.01) {\n    g = (g + n / g) / 2.0; \n  }\n  return g;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript method to return the sum of array elements. [/INST] function sumArray (arr) {\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a quick-sort algorithm in Python to sort a given array in ascending order. [/INST] def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query that finds the average number of orders for each customer over the last year. [/INST] SELECT\n    c.customer_id,\n    AVG(o.total_items)\nFROM\n    customers c JOIN\n    orders o ON c.customer_id = o.customer_id  \nWHERE \n    o.order_date > DATE_SUB(NOW(), INTERVAL 1 YEAR)\nGROUP BY\n    c.customer_id</s>"
  },
  {
    "text": "<s>[INST] Create a class named Dog in Python. [/INST] class Dog:\n    def __init__(self):\n        pass\n    \n    def bark(self):\n        print(\"Bark!\")</s>"
  },
  {
    "text": "<s>[INST] Create a distributed system using Python [/INST] import multiprocessing\n\ndef send_task(task):\n    # Send the task to a worker process \n    pass\n\ndef process(task):\n    # Process the task \n    pass\n\nif __name__ == '__main__': \n    processes = []\n    # Create two processes\n    process1 = multiprocessing.Process(target=send_task, args=(task,))\n    process2 = multiprocessing.Process(target=process, args=(task,))\n    processes.append(process1) # Put processes in a list \n    processes.append(process2)\n\n    # Run processes\n    for process in processes:\n        process.start()\n\n    # Exit the completed processes\n    for process in processes:\n        process.join()</s>"
  },
  {
    "text": "<s>[INST] Create a neural network using TensorFlow. [/INST] import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(units=128, activation='relu', input_shape=(10,)),\n    tf.keras.layers.Dense(units=128, activation='relu'),\n    tf.keras.layers.Dense(units=128, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to implement a text-based game [/INST] import random\n\ndef intro():\n    print(\"Welcome to the game! You are stuck in a dungeon and must find a way out. Type 'help' for instructions.\")\n\ndef help_command():\n  print(\"Type 'north', 'south', 'west', or 'east' to move in that direction. Type 'check inventory' to view items in your inventory. Type 'quit' to quit.\")\n\ndef move(direction):\n  if direction == 'north':\n    print(\"You moved north.\")\n  elif direction == 'south':\n    print(\"You moved south.\")\n  elif direction == 'west':\n    print(\"You moved west.\")\n  elif direction == 'east':\n    print(\"You moved east.\")\n\ndef check_inventory():\n  print(\"You have nothing in your inventory.\")\n\ndef quit_game():\n  print(\"Thanks for playing!\")\n  return False\n\nintro()\nplaying = True\nwhile playing:\n  command = input(\"What would you like to do? > \").lower()\n  if command == 'help':\n    help_command()\n  elif command == 'north' or command == 'south' or command == 'west' or command == 'east':\n    move(command)\n  elif command == 'check inventory':\n    check_inventory()\n  elif command == 'quit':\n    playing = quit_game()</s>"
  },
  {
    "text": "<s>[INST] Rewrite the code below to use a for loop.\n\nnum = 0\nwhile num < 5: \n    print(num) \n    num+=1 [/INST] for num in range(5):\n  print(num)</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to calculate the least common multiple of two numbers. [/INST] def lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm\n\ndef gcd(a,b): \n    if a == 0 : \n        return b \n          \n    return gcd(b%a, a)</s>"
  },
  {
    "text": "<s>[INST] Write a Python class to represent a 2-dimensional point. [/INST] class Point: \n    def __init__(self, x, y): \n        self.x = x \n        self.y = y \n        \n    def distance(self, other_point):\n        x1, y1 = self.x, self.y\n        x2, y2 = other_point.x, other_point.y\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5</s>"
  },
  {
    "text": "<s>[INST] Generate a random set of 7 unique numbers between 0 and 10. [/INST] import random\n\ndef generate_random_set():\n  generated_set = set()\n  while len(generated_set) < 7:\n    generated_set.add(random.randint(0, 10))\n  return generated_set</s>"
  },
  {
    "text": "<s>[INST] Analyze the sentiment of this statement using Python.\n\nI am truly happy with the amazing results [/INST] import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"I am truly happy with the amazing results\"\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(sentence)\n\nprint(\"The sentiment of the statement is:\", sentiment['compound'])</s>"
  },
  {
    "text": "<s>[INST] Implement a binary search algorithm using Python.\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9] [/INST] def binary_search(nums, target): \n    start = 0\n    end = len(nums) - 1\n\n    while start <= end:\n        mid = start + (end - start)//2\n\n        if nums[mid] == target:\n            return mid\n\n        if nums[mid] > target:\n            end = mid - 1\n\n        else: \n            start = mid + 1\n\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Sort this list of strings alphabetically.\n\nstrings = ['hello', 'world', 'this', 'is', 'a', 'list', 'of', 'strings'] [/INST] strings.sort(key=lambda x: x.lower())</s>"
  },
  {
    "text": "<s>[INST] Create a stack data structure using Python. [/INST] class Stack: \n  \n    def __init__(self): \n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def is_empty(self):\n        return self.stack == []\n  \n    def pop(self): \n        if self.is_empty():\n            return None\n          \n        return self.stack.pop()</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a string and displays it twice in the output.\n\nHello World [/INST] def double_string(string):\n    return string * 2\n\nprint(double_string(\"Hello World\"))</s>"
  },
  {
    "text": "<s>[INST] Modify the following code so that it returns the lowest common multiple of two given numbers?\n\ndef lowest_common_multiple(x, y):\n    pass [/INST] def lowest_common_multiple(x, y): \n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n    return lcm</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to return the names of all customers sorted in descending order by their balance? [/INST] SELECT name \nFROM customers \nORDER BY balance DESC;</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to turn it into an Insertion Sort algorithm.\n\ndef sort_numbers(arr):\n    pass [/INST] def insertion_sort(arr): \n    for i in range(1, len(arr)):\n        x = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > x:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = x\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to check if a given number is divisible by 5 and 11 or not? [/INST] def checkDivisibility(n):\n    if n % 5 == 0 and n % 11 == 0: \n        print(\"It is divisible by 5 and 11.\")\n    else: \n        print(\"It is not divisible by 5 and 11.\")\n     \n# Driver code \nn = 55\ncheckDivisibility(n)</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to simulate a dice roll with a random number generator? [/INST] function rollDice() {\n  let max = 6;\n  let min = 1;\n  let randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n  return randomNumber;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve the names and addresses of customers from the \"customer\" table who live in the same city as the customer with ID 3. [/INST] SELECT name, address \nFROM customers \nWHERE city = (SELECT city \n               FROM customers \n               WHERE id = 3);</s>"
  },
  {
    "text": "<s>[INST] Create a database table with the following fields: id, name, age [/INST] CREATE TABLE TABLE_NAME (\n    id INT(11) NOT NULL AUTO_INCREMENT,\n    name VARCHAR(255) NOT NULL,\n    age INT(11) NOT NULL,\n    PRIMARY KEY(id)\n);</s>"
  },
  {
    "text": "<s>[INST] Modify the C++ program below to print the average value of an array.\n\nint array[4] = {2, 3, 5, 7}; [/INST] #include <iostream> \n \nint main() \n{ \n    int array[4] = {2, 3, 5, 7}; \n    int sum = 0; \n    for(int i = 0; i < 4; i++)\n    {\n        sum += array[i];\n    }\n    double avg = (double)sum / 4;\n    std::cout << \"Average value of array : \" <<  avg; \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the average population of a city.\n\nTable \"Cities\":\ncity_name | population\n--------------------------\nNew_York  | 8000000\nLondon     | 9000000\nBerlin    | 700000 [/INST] SELECT AVG(population) FROM Cities;</s>"
  },
  {
    "text": "<s>[INST] Compute the maximum of the following integers using Java.\n\n[6, 3, 8, 4, 7] [/INST] public static int findMax(int[] arr){\n    int max = arr[0];\n    for(int i = 1; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return max;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Ruby program to get the length of a given string. [/INST] def get_length(str)\n  return str.length\nend\n\nputs get_length(\"Hello World\")</s>"
  },
  {
    "text": "<s>[INST] Write an SQL statement to display all the records from the 'Cars' table. [/INST] SELECT * FROM Cars;</s>"
  },
  {
    "text": "<s>[INST] Write a C# program to calculate the area of a triangle. [/INST] using System;\n \npublic class Program\n{\n    public static double AreaOfTriangle(double b, double h)  \n    {  \n        double area = (b * h) / 2;  \n        return area;  \n    }  \n      \n    public static void Main(string[] args)  \n    {  \n        double b = 10.0;  \n        double h = 12.0;  \n          \n        Console.WriteLine(AreaOfTriangle(b, h));  \n    }  \n}</s>"
  },
  {
    "text": "<s>[INST] Create an assembler program to count the number of vowels in a given string. [/INST] section .data\n\nstr: db \"Hello World\", 0\nlen: equ $-str\n\nvowels db 0\n\nsection .text\n\nglobal main\n\nmain:\n    mov edx, len\n    mov esi, str\n    \n    xor eax, eax\n    xor ebx, ebx\n\nwhile_check:\n   cmp ebx, edx \n    je result_print\n    \n    mov al, [esi + ebx]\n    inc ebx\n    cmp al, 'a'\n    je increment_vowel\n    cmp al, 'e'\n    je increment_vowel\n    cmp al, 'i'\n    je increment_vowel\n    cmp al, 'o'\n    je increment_vowel\n    cmp al, 'u'\n    je increment_vowel\n    jmp while_check\n\nincrement_vowel:\n    inc [vowels]\n    jmp while_check\n\nresult_print:\n    mov edx, [vowels]\n    mov eax, 4\n    mov ebx, 1\n    int 80h\n\nmov eax, 1\nmov ebx, 0\nint 80h</s>"
  },
  {
    "text": "<s>[INST] Update the HTML code below to add a chrome frame.\n\n<head>\n  <title>My website</title>\n  \n</head> [/INST] <head>\n  <title>My website</title>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE-edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <!--[if IE]>\n  <script src=\"path/to/chrome_frame.js\"></script>\n  <![endif]-->\n  \n</head></s>"
  },
  {
    "text": "<s>[INST] Replace the following code with its equivalent Ternary Expressions\n\nif (x > 0):\n    result = \"positive\"\nelse:\n    result = \"negative\" [/INST] result = \"positive\" if (x > 0) else \"negative\"</s>"
  },
  {
    "text": "<s>[INST] Find the time complexity for the folllowing function.\n\ndef myFunc(n):\n    product = 1\n    for i in range(2, n+1):\n        product *= i\n    return product [/INST] O(n)</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code in the form of list comprehension.\n\nnames = [\"Max\",\"John\",\"Monica\",\"Harry\",\"Steve\"]\nupper_names = []\nfor name in names:\n    upper_names.append(name.upper()) [/INST] upper_names = [name.upper() for name in names]</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code to use a dictionary comprehension.\n\nnames = [\"Max\",\"John\",\"Monica\",\"Harry\",\"Steve\"]\nname_lengths = {}\nfor name in names:\n    name_lengths[name] = len(name) [/INST] name_lengths = {name: len(name) for name in names}</s>"
  },
  {
    "text": "<s>[INST] Write a function to create a frequency table from a list of integers.\n\nlist = [1, 2, 3, 1, 4, 5, 5, 2] [/INST] def create_freq_table(lst): \n    freq_table = {} \n    for item in lst: \n        if (item in freq_table): \n            freq_table[item] += 1\n        else: \n            freq_table[item] = 1\n  \n    return freq_table</s>"
  },
  {
    "text": "<s>[INST] Translate the following word problem into Python code.\n\nGary has 45 dollars, John has 11 dollars and Sam has 3 dollars. They decide to split their money equally. [/INST] gary_share = 45 // 3\njohn_share = 11 // 3\nsam_share = 3 // 3\ntotal_share = gary_share + john_share + sam_share\n\nprint('Gary has {} dollars, John has {} dollars and Sam has {} dollars. The each get {} dollars in total.'.format(gary_share, john_share, sam_share, total_share))</s>"
  },
  {
    "text": "<s>[INST] Update the following code, to use Python's modern type hint annotation.\n\ndef my_func(list):\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result [/INST] def my_func(list: list) -> int:\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a function to search for an element within a linked list. [/INST] def search(head, target): \n    curr = head\n    while (curr!= None): \n        if (curr.data == target): \n            return curr.data \n        curr = curr.next\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Create a Chrome extension that highlights hyperlinks in green. [/INST] // Create a new class to extend Google's Chrome Extension\nclass LinkHighlighter extends Chrome Extension {\n\n// Initialize Manifest.json\n\tmanifest: {\n\t\"name\": \"Link Highlighter\",\n\t\"author\": \"Your Name Here\",\n\t\"version\" : \"1.0\",\n    \"description\" : \"Highlights all hyperlinks in green.\",\n\t\"browser_action\": {\n\t\t\"default_title\": \"Link Highlighter\"\n\t}\n}\n\n// Use 'onStartup()' to set rules for all hyperlinks\nonStartup() {\n\tbrowser.webNavigation.onCommitted.addRules([\n\t  {\n\t\tconditions: [\n\t\t  new browser.webNavigation.PageStateMatcher({\n\t\t\tpageUrl: {urlContains: 'http://'},\n\t\t  })\n\t\t],\n\t\tactions: [ new browser.declarativeContent.ShowPageAction() ]\n\t  }\n\t]);\n}\n\n// Create the engine to inject a CSS into the page\n  injectCSS() {\n\tvar headElmts = document.getElementsByTagName(\"head\");\n\tvar styleElmt;\n\tif (headElmts.length) {\n\t  styleElmt = document.createElement(\"style\");\n\t  headElmts[0].appendChild(styleElmt);\n\t}\n\t\n\t// Include the CSS to style the link.\n\tstyleElmt.innerHTML  = 'a { color : green !important; }';\n  }\n  \n  // Execute the engine to inject the CSS\n  injectCSS();\n\n}</s>"
  },
  {
    "text": "<s>[INST] Replace 'x' with the correct input from an API request.\n\nUrl: https://exampleAPI.com/user?id=2\nResponse: {\n    \"name\": \"John Doe\",\n    \"age\": 50\n} [/INST] name = response['name']\nage = response['age']\nprint(\"Name: \"+name+\", Age: \"+str(x))\n\n# Name: John Doe, Age: 50</s>"
  },
  {
    "text": "<s>[INST] Merge the two given arrays and remove duplicates.\n\n[1,3,4,2,9,4]\n[2,10,7,9,8] [/INST] merged_arr = list(set(arr1+arr2))\nprint(merged_arr)\n\n# [1, 2, 3, 4, 7, 8, 9, 10]</s>"
  },
  {
    "text": "<s>[INST] Generate a random string of 5 characters containing a-z and 0-9. [/INST] import string \nimport random\n  \n# Get all ASCII uppercase letters\nstring_all = string.ascii_letters + string.digits\n  \n# Get random 5 upper case letters\nrandom_string = ''.join(random.choice(string_all) for i in range(5))\nprint(random_string)\n\n# Ex: ZV7b1</s>"
  },
  {
    "text": "<s>[INST] Create a new array after doubling the value of all numbers in the given array.\n\n[1,3,5,2,7,9] [/INST] double_arr = [a*2 for a in arr] \nprint(double_arr)\n\n# [2, 6, 10, 4, 14, 18]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to format a number to a specific number of decimal places.\n\n3.14159\n2 decimal places [/INST] function formatNumber(num, decimalPlaces){\n   var result = num.toFixed(decimalPlaces);\n   return result;\n}\n\nconsole.log(formatNumber(3.14159, 2));\n\n# 3.14</s>"
  },
  {
    "text": "<s>[INST] Write a query to display the first three rows from the table \"employees\". [/INST] SELECT * \nFROM employees \nLIMIT 3</s>"
  },
  {
    "text": "<s>[INST] Evaluate the sum of two numbers using a JavaScript expression.\n\nx = 3;\ny = 5; [/INST] x + y</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to display all the distinct items from the table \"Orders\". [/INST] SELECT DISTINCT item \nFROM orders</s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query to find all documents where \"sale_price\" is greater than 10. [/INST] db.collection.find({ \"sale_price\": { \"$gt\": 10 } })</s>"
  },
  {
    "text": "<s>[INST] Write a function to perform regex match in Python. [/INST] def regex_match(string, pattern):\n  return re.match(pattern, string)</s>"
  },
  {
    "text": "<s>[INST] Write a C# expression to check if a given number is divisible by 7.\n\nx = 16 [/INST] x % 7 == 0</s>"
  },
  {
    "text": "<s>[INST] Convert the following if-else scenerio into switch statements.\n\nif (x == 1) {\n    y = 10;\n} else if (x == 2) {\n    y = 20;\n} else if (x == 3) {\n    y = 30;\n} [/INST] switch (x) {\n  case 1:\n    y = 10;\n    break;\n  case 2:\n    y = 20;\n    break;\n  case 3: \n    y = 30;\n    break;\n  default:\n    // no default required\n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML list using the given numbers.\n\n[3, 12, 13] [/INST] <ul>\n  <li>3</li>\n  <li>12</li>\n  <li>13</li>\n</ul></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript ternary operator to add 10 if a number is even else subtract 10 from it.\n\nx = 8 [/INST] (x % 2 == 0) ? x + 10 : x - 10;</s>"
  },
  {
    "text": "<s>[INST] Create a PHP array for the given strings.\n\n\"apple\", \"banana\", \"cherry\" [/INST] $fruits = array(\"apple\", \"banana\", \"cherry\");</s>"
  },
  {
    "text": "<s>[INST] Generate a unique key for each item in the given array.\n\n[“cat”, “dog”, “bird”] [/INST] foreach ($array as $item) {\n    $key = md5($item);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a query to select all artworks whose titles starting with a 'C'. [/INST] SELECT * \nFROM artworks\nWHERE title LIKE 'C%';</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to extract the text from a given HTML element. [/INST] function extractText(element) {\n  return element.textContent || element.innerText;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to extract the numbers in the given string.\n\n\"a1b2c3\" [/INST] function extractNumbers(string) {\n  return string.replace(/\\D/g, '');\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to find the highest common factor (HCF) of two numbers.\n\na = 30 / b = 12 [/INST] def hcf(a, b):\n    j = min(a,b)\n    hcf = 1\n    for i in range(2, j+1):\n        if(a%i == 0 and b%i == 0):\n            hcf = i\n    \n    return hcf</s>"
  },
  {
    "text": "<s>[INST] Edit the givenjava program to print the count of a specified character.\n\npublic class Main\n{\npublic static void main(String[] args)\n{\n    String str = \"codersarts\";\n    System.out.println(\"Number of s in the given string: \" + str);\n}\n} [/INST] public class Main\n{\npublic static void main(String[] args)\n{\n    String str = \"codersarts\";\n    int count = 0;\n    for (int i=0; i<str.length(); i++) \n    {\n        if (str.charAt(i) == 's') \n        {\n            count++;\n        }\n    }\n    System.out.println(\"Number of s in the given string: \" + count);\n}\n}</s>"
  },
  {
    "text": "<s>[INST] Create a shell script to display welcome message. [/INST] #!/bin/bash\n# display welcome message\necho \"Welcome to Coding!\"</s>"
  },
  {
    "text": "<s>[INST] Generate a code using C language to check whether a string is palindrome or not. [/INST] #include <stdio.h> \n#include <string.h> \n  \nint check_palindrome(char str[]) \n{ \n    int l = 0; \n    int h = strlen(str) - 1; \n  \n    while (h > l) \n    { \n        if (str[l++] != str[h--]) \n        { \n            return 0; \n        } \n    } \n    return 1; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to convert month numbers to month names. [/INST] function monthName(num) {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return months[num - 1];\n}</s>"
  },
  {
    "text": "<s>[INST] Generate Delphi code to count the number of times a specific character occurs in a given sentence.\n\nsentence = \"coding is fun\" / character = 'o' [/INST] function CountCharacter(sentence: string, character : char) : integer;\nvar\n    i : integer;\n    count : integer;\nbegin\n    count := 0;\n    for i := 1 to Length(sentence) do\n\tbegin\n\t\tif sentence[i] = character then\n\t\tbegin\n\t\t\tcount := count + 1;\n\t\tend;\n\tend;\n\tresult := count;\nend;</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby program to convert the temperature from Fahrenheit to Celsius. [/INST] def fahrenheit_to_celsius(fahrenheit)\n  (fahrenheit - 32) / 1.8\nend</s>"
  },
  {
    "text": "<s>[INST] Modify the given python program to accept an input string and output the length of that string.\n\ndef func():\n    print(\"Hello World!\") [/INST] def func(s):\n    print(\"Length of the string is: \" + str(len(s)))</s>"
  },
  {
    "text": "<s>[INST] Generate a R code to create a vector containing unique elements from another vector. [/INST] unique_vec <- unique(vec)</s>"
  },
  {
    "text": "<s>[INST] Program a C# procedure to display the multiplication table of a given number. [/INST] void DisplayTable(int num)\n{\n    for (int i = 1; i <= 10; i++)\n    {\n        Console.WriteLine($\"{num} x {i} = {num * i}\");\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Use PHP to convert a given number to binary. [/INST] function dec_to_bin($num) {\n    $bin = \"\";\n    while($num>0) {\n        $bin = ($num%2).$bin;\n        $num= (int)($num/2);\n    }\n    return $bin;\n}</s>"
  },
  {
    "text": "<s>[INST] Make a Perl program to detect whether a given string is numerical. [/INST] sub is_numerical {  \n    $input = $_[0];\n    \n    if ($input =~ /^[0-9]+$/) {  \n        return 1;\n    } else {\n        return 0;     \n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript code to accept a number and check if it is a prime number. [/INST] function is_prime(num) {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate an array of numbers from 0-10 in Python. [/INST] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</s>"
  },
  {
    "text": "<s>[INST] Create a for loop in JavaScript to print out numbers from 0-10. [/INST] for (let i = 0; i <= 10; i++) { \n  console.log(i); \n}</s>"
  },
  {
    "text": "<s>[INST] Create an object in JavaScript with properties name, age, and location.\n\nName = Sam, Age = 30, Location = New York [/INST] let person = {\n  name: \"Sam\",\n  age: 30,\n  location: \"New York\"\n};</s>"
  },
  {
    "text": "<s>[INST] Create a while loop in C++ to iterate through the numbers from 0-10. [/INST] int i = 0;\n\nwhile (i <= 10) \n{\n    std::cout << i;\n    i++;  \n}</s>"
  },
  {
    "text": "<s>[INST] Generate a random number between 0-100 in Python. [/INST] import random \n  \n#Generate a random number between 0-100\nrandomNum =  random.randint(0, 100) \nprint (\"Random number:\", randomNum)</s>"
  },
  {
    "text": "<s>[INST] Create a class in C++ to compare two dates.\n\nFirst Date = 10/10/2020, Second Date = 10/11/2020 [/INST] #include <iostream>\nusing namespace std;\n\n// Class to compare two dates \nclass CompareDates \n{ \n    int fMonth, fDate, fYear; \n    int sMonth, sDate, sYear; \n  \npublic: \n    CompareDates(int fMonth, int fDate, int fYear, \n                 int sMonth, int sDate, int sYear); \n    int compare()const;\n};\n\nCompareDates::CompareDates(int fMonth, int fDate, int fYear, \n                           int sMonth, int sDate, int sYear)\n{\n    this->fMonth = fMonth;\n    this->fDate = fDate;\n    this->fYear = fYear;\n    this->sMonth = sMonth;\n    this->sDate = sDate;\n    this->sYear = sYear;\n}\n  \n// Compare two dates \nint CompareDates::compare()const\n{ \n    if (fYear != sYear) \n        return (fYear > sYear)? 1: -1; \n  \n    if (fMonth != sMonth)\n        return (fMonth > sMonth)? 1: -1; \n  \n    if (fDate != sDate)\n        return (fDate > sDate)? 1: -1; \n  \n    return 0; \n} \n\n// driver function\nint main() \n{ \n    CompareDates d1(10, 10, 2020, 10, 11, 2020); \n    int result = d1.compare();\n    if (result == 1) \n        cout << \"The date is later\" << endl; \n    else if (result == -1) \n        cout << \"The date is earlier\" << endl; \n    else\n        cout << \"The two dates are same\" << endl; \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to return the first name, last name and salary of employees from a database with the given conditions\n\nTable Name = Employees, Salary > 50000 [/INST] SELECT firstName, lastName, salary FROM Employees WHERE salary > 50000;</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to multiply two matrices.\n\nmatrixA = [[1, 2], [3, 4]], matrixB = [[5, 6], [7, 8]] [/INST] def multiplyMatrix(A, B):\n    rowsA = len(A)\n    columnsA = len(A[0])\n    rowsB = len(B)\n    columnsB = len(B[0])\n    \n    if columnsA != rowsB:\n        print(\"Cannot multiply\")\n        return\n    \n    result = [[0 for row in range(columnsB)] for col in range(rowsA)]\n    \n    # Compute matrix multiplication\n    for i in range(rowsA):\n        for j in range(columnsB):\n            for k in range(columnsA):\n                result[i][j] += A[i][k] * B[k][j]\n    \n    return result\n\nA = [[1, 2], [3, 4]]\nB = [[5, 6], [7, 8]]\n\n print(\"Result:\")\n result = multiplyMatrix(A, B) \n  \nfor i in result: \n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all the customers whose order total is greater than 1000. [/INST] SELECT *\nFROM customers\nWHERE (SELECT SUM(amount) from orders WHERE orders.customer_id = customers.id) > 1000</s>"
  },
  {
    "text": "<s>[INST] Debug the following program so that it prints the correct output\n\nx = [5, 4, 3, 2, 1]\nfor i in x\n    print(i) [/INST] x=[5,4,3,2,1]\nfor i in x:\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Output the multiplication table of 5. [/INST] print(\"Multiplication Table of 5\")\nfor i in range(1,11):\n    print(\"5 *\",i,\"=\",5 * i)</s>"
  },
  {
    "text": "<s>[INST] Output the ASCII character corresponding to the decimal value 65. [/INST] print(\"The ASCII character for decimal 65 is\",chr(65))</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to calculate the sum of the first 10 even numbers. [/INST] let sum = 0;\nfor (let i = 0; i <= 10; i += 2) {\n   sum += i;\n}\nconsole.log(sum);</s>"
  },
  {
    "text": "<s>[INST] You need to make a function which takes two integers, a and b and prints out their sum. [/INST] def add_numbers(a, b):\n    print(a + b)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the oldest customer. [/INST] SELECT *\nFROM customers\nORDER BY date_of_birth ASC\nLIMIT 1</s>"
  },
  {
    "text": "<s>[INST] Output the ASCII value of a given character.\n\nA [/INST] print(\"The ASCII value of A is\", ord('A'))</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program to validate the username entered by the user. [/INST] function validateUsername(username) {\n    let rx =\n        new RegExp('^[A-Za-z0-9_]{3,20}$');\n    return rx.test(username);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function which takes two lists and outputs all the common elements.\n\nlist1=[2,4,6,8]\nlist2=[1,2,3,4] [/INST] def common_elements(list1, list2):\n    list3 = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list3.append(i)\n    return list3</s>"
  },
  {
    "text": "<s>[INST] How would you make the following function more efficient?\n\ndef find_longest_word(words):\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word [/INST] def find_longest_word(words):\n    longest_word = words[0]\n    for word in words[1:]:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word</s>"
  },
  {
    "text": "<s>[INST] According to the following code, how is an object of type “Point” instantiated?\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y [/INST] An object of type \"Point\" is instantiated by calling the __init__() method, with arguments for the x and y coordinates, e.g. Point(1,2) to create an instance with x=1 and y=2.</s>"
  },
  {
    "text": "<s>[INST] Delete redundant if-else statements from the following code.\n\nif x < 0:\n    result = 0\nelif x == 0:\n    result = 0\nelif x == 1:\n    result = 1\nelse:\n    result = 2 [/INST] if x < 0:\n    result = 0\nelif x in [0, 1]:\n    result = x\nelse:\n    result = 2</s>"
  },
  {
    "text": "<s>[INST] Convert the following list of strings to a dictionary whose keys are numbers and whose values are strings.\n\nlist1 = [\"One\", \"Two\", \"Three\"] [/INST] dict1 = {} \nfor i, s in enumerate(list1): \n    dict1[i+1] = s \n\nInput:\nlist1 = [\"One\", \"Two\", \"Three\"]\n\nOutput:\ndict1 = {1: \"One\", 2: \"Two\", 3: \"Three\"}</s>"
  },
  {
    "text": "<s>[INST] Clean up the following code so it follows PEP-8 guidelines.\n\ndef sumofSeven(x,y): return x+y+7 [/INST] def sumofSeven(x, y): \n    return x + y + 7</s>"
  },
  {
    "text": "<s>[INST] Classify the following statement as either a string or a number.\n\n\"42\" [/INST] String</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of all odd numbers from 1 to 10. [/INST] 25</s>"
  },
  {
    "text": "<s>[INST] How would you sort the following list of strings in alphabetical order?\n\nlist1 = [\"Ruby\", \"Python\", \"JavaScript\"] [/INST] def sort_list(list1): \n    return sorted(list1) \n\nInput:\nlist1 = [\"Ruby\", \"Python\", \"JavaScript\"]\n\nOutput:\n[\"JavaScript\", \"Python\", \"Ruby\"]</s>"
  },
  {
    "text": "<s>[INST] Write a for loop to print each letter of a string.\n\nstring_example = \"GPT\" [/INST] for letter in string_example:\n    print(letter)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to toggle a div's visibility. [/INST] const toggleDiv = () => {\n    const div = document.querySelector('.div');\n    if (div.style.display === 'none') {\n        div.style.display = 'block';\n    } else {\n        div.style.display = 'none';\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an object of class 'Car' that has a color property of 'red'. [/INST] car = Car(color='red')</s>"
  },
  {
    "text": "<s>[INST] Create a function called ' say_hello' that prints \"Hello World!\" when invoked. [/INST] def say_hello():\n    print(\"Hello World!\")</s>"
  },
  {
    "text": "<s>[INST] Convert the following csv data into a JSON object.\n\nid,name,age\n1,John,12\n2,Jack,15 [/INST] import json\n\ncsv_data = '''id,name,age\n1,John,12\n2,Jack,15'''\n\n# Split the CSV data into individual lists.\ncsv_rows = [row.strip().split(',') for row in csv_data.split('\\n')]\n# Create a dictionary from the list of values.\ndata_objects = [dict(zip(csv_rows[0], row)) for row in csv_rows[1:]]\n# Convert the dictionary to a JSON object.\njson_data = json.dumps(data_objects)\nprint(json_data)</s>"
  },
  {
    "text": "<s>[INST] Calculate the maximum product of two numbers in a list.\n\n[4, -2, 3, -1] [/INST] max_product = 4 * -2 = -8</s>"
  },
  {
    "text": "<s>[INST] Implement a function to replace every occurrence of an old string in a given string with a new string.\n\ntext = “The quick brown fox jumps over the lazy dog”\nold = “dog”\nnew = “cat” [/INST] def replace_string(text, old, new):\n    return text.replace(old, new)\n\n# Output\nThe quick brown fox jumps over the lazy cat</s>"
  },
  {
    "text": "<s>[INST] Create a program to create a dictionary with words and their frequencies from a given sentence.\n\nsentence = \"Python is an easy, powerful language with a simple syntax and high readability\" [/INST] def create_dict(sentence):\n    words = sentence.split()\n    res = {}\n    for word in words:\n        res[word] = words.count(word)\n    return res\n\n# Output\n{'Python': 1, 'is': 1, 'an': 1, 'easy,': 1, 'powerful': 1, 'language': 1, 'with': 1, 'a': 1, 'simple': 1, 'syntax': 1, 'and': 1, 'high': 1, 'readability': 1}</s>"
  },
  {
    "text": "<s>[INST] Write a function to print the maximum and minimum number in a given list.\n\nmy_list = [5, 4, 7, 1, 2] [/INST] def print_extremes(my_list):\n    print(\"Maximum:\", max(my_list))\n    print(\"Minimum:\", min(my_list))\n\n# Output\nMaximum: 7\nMinimum: 1</s>"
  },
  {
    "text": "<s>[INST] Create a function to print all permutations of a string without duplicates.\n\nstring = \"abc\" [/INST] def permutations(string):\n    res = set()\n    if len(string) == 1:\n        res.add(string)\n    else:\n        for i, char in enumerate(string):\n            for perm in permutations(string[:i], string[i+1:]):\n                res.add(char + perm)\n    return res\n\n# Output\n{'abc', 'acb', 'bac', 'bca', 'cab', 'cba'}</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the sum of the Triangle Series up to the given number n. [/INST] def sum_triangle(n): \n    if n<=0: \n        return 0\n    res = (n * (n + 1)) // 2\n    return res</s>"
  },
  {
    "text": "<s>[INST] Create a list comprehension to generate the first 10 Fibonacci numbers. [/INST] fibonacci_numbers = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nfirst_10_fibonacci = [fibonacci_numbers[i] for i in range(10)]</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to retrieve the names of all the people in the Users table who are over the age of 25. [/INST] SELECT Name\nFROM Users\nWHERE age > 25</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code snippet for creating a <button> element with the text \"Click me!\" [/INST] <button>Click me!</button></s>"
  },
  {
    "text": "<s>[INST] Create a class in Python for representing a 2-dimensional point. [/INST] class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y</s>"
  },
  {
    "text": "<s>[INST] Create a NumPy array with all the elements set to 0. [/INST] import numpy as np\narr = np.zeros(shape=(10, 10))</s>"
  },
  {
    "text": "<s>[INST] Write a function to group a list of strings based on the first two characters of each string.\n\nlist = [\"aa12\", \"bd32\", \"ca53\", \"db34\"] [/INST] def group_list(list):\n    grouped = {}\n    for item in list:\n        key = item[:2]\n        if key not in grouped:\n            grouped[ key ] = [item]\n        else:\n            grouped[ key ].append(item)\n    return grouped</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the titles and release dates of all the movies from the Movies table released in the year 2019. [/INST] SELECT title, release_date \nFROM Movies \nWHERE YEAR(release_date) = 2019</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the longest common prefix of two strings.\n\nstr1 = \"hello\", str2 = \"helmet\" [/INST] def longest_common_prefix(str1, str2):\n    lcp = \"\"\n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        lcp += str1[i]\n        i += 1\n    return lcp</s>"
  },
  {
    "text": "<s>[INST] Create an array in Python containing the cube of all the integers from 1 to 10. [/INST] import array\nint_array = array.array(\"i\", [i*i*i for i in range(1, 11)])</s>"
  },
  {
    "text": "<s>[INST] Create an array which contains the squares of the numbers 0 to 10. [/INST] squares = [i*i for i in range(11)]</s>"
  },
  {
    "text": "<s>[INST] Given a string s and a character c, write a Python program to count the number of occurrences of c in s.\n\ns = 'apple'\nc = 'p' [/INST] count = 0 \nfor char in s:\n if char == c:\n count += 1\nprint(count)</s>"
  },
  {
    "text": "<s>[INST] Create a for loop that prints the numbers 0 to 10 and prints if the number is even or odd. [/INST] for i in range(11):\n if i % 2 == 0:\n print(f'{i} is even')\n else:\n print(f'{i} is odd')</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query that lists the employee names with their corresponding department and salary. [/INST] SELECT employee_name, department, salary\nFROM employees;</s>"
  },
  {
    "text": "<s>[INST] Create a function in C++ that capitalizes the first letter of every word in a given string. [/INST] #include <iostream>\n#include <string>\n\nstd::string capitalize(std::string s)\n{\n std::string result;\n for (int i = 0; i < s.length(); i++) {\n if (i == 0 || s[i - 1] == ' ')\n result += toupper(s[i]);\n else\n result += s[i];\n }\n return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Find any two numbers in an array such that their sum is equal to a given value.\n\narray = [3, 4, 5, 6, 7, 8]\nvalue = 11 [/INST] for i in range(len(array)):\n for j in range(i+1, len(array)):\n  if array[i] + array[j] == value:\n   print(array[i], array[j])</s>"
  },
  {
    "text": "<s>[INST] Write a function that sums the elements of an array [/INST] def array_sum(array):\n res = 0\n for el in array:\n  res += el\n return res</s>"
  },
  {
    "text": "<s>[INST] Given a string s and a character c, create a new string with all the occurrences of c in s removed.\n\ns = 'caat'\nc = 'a' [/INST] new_string = \"\"\nfor char in s:\n if char != c:\n  new_string += char\nprint(new_string)</s>"
  },
  {
    "text": "<s>[INST] Create a function that reverses the elements of a given array [/INST] def reverse_array(array):\n return array[::-1]</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to select the names of employees with a salary greater than $50,000 [/INST] SELECT employee_name\nFROM employees\nWHERE salary > 50000;</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query that selects the names of all employees from the accounting department. [/INST] SELECT employee_name\nFROM employees\nWHERE department = 'Accounting';</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to print out the nth Fibonacci number.\n\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) [/INST] def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(n))</s>"
  },
  {
    "text": "<s>[INST] Calculate the total number of possible binary trees with n nodes. [/INST] def numTrees(n): \n    if n == 0: \n        return 1\n    else: \n        num = 0\n        for roots in range(1, n+1): \n            leftNum = numTrees(roots - 1) \n            rightNum = numTrees(n - roots) \n            num += leftNum * rightNum \n    return num</s>"
  },
  {
    "text": "<s>[INST] Create a function that checks whether two strings are anagrams of each other.\n\nstr1 = \"cinema\"\nstr2 = \"iceman\" [/INST] function isAnagram(str1, str2) { \n  \n   let arr1 = [...str1].sort(); \n   let arr2 = [...str2].sort(); \n  \n   return (arr1.length == arr2.length && \n           arr1.every((v,i)=> v === arr2[i])) ? true : false; \n }</s>"
  },
  {
    "text": "<s>[INST] Determine whether the given string is a valid IPv4 address\n\nip_address = \"192. 426.4.4\" [/INST] No, the string is not a valid IPv4 address.</s>"
  },
  {
    "text": "<s>[INST] Implement a class that stores values of all data types. [/INST] class DataStorage {\n  constructor() {\n    this.storage = {};\n  }\n\n  setData(key, value) {\n    this.storage[key] = value;\n  }\n\n  getData(key) {\n    return this.storage[key];\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to open a web page and print its content.\n\nurl = \"www.wikipedia.org\" [/INST] import requests\n\nurl = \"www.wikipedia.org\"\n\ntry:\n    response = requests.get(url)\n    if response.status_code == 200:\n        print(response.text)\n    else:\n        print(\"Oops! Something went wrong!\")\n\nexcept Exception as e:\n    print(\"Exception occurred: %s\" % (e))</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet for sorting an array of integers.\n\narr = [12,9,7,8,6] [/INST] arr = [12,9,7,8,6];\narr.sort(function(a, b){return a - b});\nconsole.log(arr);</s>"
  },
  {
    "text": "<s>[INST] Write a nod.js code to return the current system time. [/INST] let currentTime = new Date().toLocaleTimeString();\nconsole.log(currentTime);</s>"
  },
  {
    "text": "<s>[INST] Write a code to detect the data type of a given variable.\n\nvar = 10 [/INST] let var = 10;\nconsole.log(typeof var);</s>"
  },
  {
    "text": "<s>[INST] Generate a function to convert seconds to time format in JavaScript. [/INST] function convertSecondsToTime(seconds) {\n const hours = Math.floor(seconds / 3600);\n const minutes = Math.floor((seconds % 3600) / 60);\n const seconds = seconds % 60;\n return { hours, minutes, seconds };\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a method to find the shortest path between two points in a two-dimensional array using Dijkstra's\nalgorithm.\n\nThe two-dimensional array:\n[[1, 8, 3],\n [4, 5, 6],\n [9, 5, 0]]\nStart point: [0, 0]\nEnd point: [2, 2] [/INST] # the weights array will be used to store the distances\n# from the start cell to any other cell in the array\nweights = [[float('inf')] * 3 for _ in range(3)]\nweights[0][0] = 0\n# Directions are up, down, left and right\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n# The queue for Dijkstra's algorithm\nq = [(0, 0)]\nwhile q:\n # curr is the current cell in consideration\n curr = q.pop(0)\n # curr_dist is the distance of the current cell\n # from the start cell\n curr_dist = weights[curr[0]][curr[1]]\n # check all the adjacent cells\n for direction in directions:\n  row = curr[0] + direction[0]\n  col = curr[1] + direction[1]\n  # if the adjacent cell is within the array\n  if 0 <= row < 3 and 0 <= col < 3:\n   # if the distance of the adjacent cell is bigger\n   # than current cell distance + 1, update it\n   if weights[row][col] > curr_dist + 1:\n    weights[row][col] = curr_dist + 1\n    q.append((row, col))\n\n# the distance from the start to the end point will\n# be stored in the weights array at the given location\ndistance = weights[2][2]\nprint(f\"The shortest path from start to end is {distance}\")</s>"
  },
  {
    "text": "<s>[INST] Correct the syntax errors in the following JavaScript snippet.\n\nlet outpt;\nif(val == 1)\n outpt = 1;\nelse\n outpt = 2; [/INST] let output;\nif(val == 1) {\n output = 1;\n} else {\n output = 2;\n}</s>"
  },
  {
    "text": "<s>[INST] Find the calculations of the time complexity of the following coded snippet.\n\nfor (i = 0; i < n; i++) {\n for (j = 0; j < n; j++) {\n  console.log(i, j);\n }\n} [/INST] The time complexity calculation of the following snippet is O(n²).</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the elements from the table whose ID is not present in the given python list.\n\nTable: 'products'\nColumns: 'id', 'name', 'category', 'price'\nPython List: [2, 3, 8] [/INST] SELECT * FROM products WHERE id NOT IN (2,3,8);</s>"
  },
  {
    "text": "<s>[INST] Construct a C program to print all permutations of a given string. [/INST] #include<stdio.h>\n#include<string.h>\n \n//Function to print all the permutations of the given string\nvoid printPermutations(char *str, int l, int r) {\n   \n    if (l == r)\n      printf(\"%s\\n\", str);\n    else\n    {\n        for (int i = l; i <= r; i++)\n        {\n            //swap the characters at positions l and i\n            char temp = str[l];\n            str[l] = str[i];\n            str[i] = temp;\n \n            //Recursively call the function to generate all permutations\n            printPermutations(str, l+1, r);\n \n            //Again swap the characters to their original positions\n            temp = str[l];\n            str[l] = str[i];\n            str[i] = temp; \n        } \n    }\n}\n \n//Main program\nint main()\n{\n   char str[] = “ABC”;\n   \n   int n = strlen(str);\n   printPermutations(str, 0, n-1);\n   \n   return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to remove specified nodes from a linked list.\n\nLinked List:\n10 -> 21 -> 14 -> 35 -> 19 -> 63 -> null\nNode: 14 [/INST] def deleteNode(head, node):\n prev = None\n current = head\n # traverse the list until node is found\n while current is not None:\n  if current.data == node:\n  break\n  prev = current\n  current = current.next\n # if the node is the first node\n if prev is None:\n  head = current.next\n else:\n prev.next = current.next\n return head\n\nhead = {\n data: 10,\n next : { \n  data: 21, \n  next: { \n   data: 14, \n   next: { \n    data: 35, \n    next: { \n     data: 19, \n     next: { \n      data: 63, \n      next: None\n     } \n   }\n }\n}\n}\n\nprint(deleteNode(head, 14)) \n\nOutput:\ndata: 10,\nnext : { \n  data: 21, \n  next: { \n   data: 35, \n   next: { \n    data: 19, \n    next: { \n     data: 63, \n     next: None\n    } \n  }\n}\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an algorithm to search for the Given Normalised Word in a Normalised Trie.\n\nNormalised Trie:\nroot \n|\ns -- a - l -- u -- t\n|\ns -- e - l -- e -- c\nGiven Normalised Word: sault [/INST] def searchWord(node, word):\n if len(word) == 0:\n  return True\n  \n # Check if the character at first position is in the children of the current node\n if word[0] in node.children:\n  # Get the node of the character at first position\n  nextNode = node.children[word[0]]\n  \n  # Check if the rest of the string is present in the \n  # remaining children of the current node\n  return searchWord(nextNode, word[1:])\n # If the character is not found\n else:\n  return False\n  \n# Function to normalize the word\ndef normalize(word):\n # If the word contains only lower case letters\n if word.islower():\n  return word\n \n word = word.lower()\n return word\n \n# Main program\ntrie = Trie() \ntrie.add(\"sault\")\n\n# The word to be searched\nword = \"sault\"\n\n# Normalize the word\nword = normalize(word)\n\n# Search the normalized word in the trie\nif searchWord(trie.root, word):\n print(\"Found!\")\nelse:\n print(\"Not Found!\")\n\nOutput: Found!</s>"
  },
  {
    "text": "<s>[INST] Design a program to find the longest palindrome inside a given string.\n\nString: \"abcaaacbcb\" [/INST] def longestPalindrome(string):\n # set up the N^2 matrix to store the boolean\n # values of the characters that are palindromes\n n = len(string)\n matrix = [[False for i in range(n)] for j in range(n)]\n\n max_length = 1\n start = 0\n\n # Every single character is a palindrome of length 1\n for i in range(n):\n  matrix[i][i] = True\n\n # Check for substrings of length 2\n for i in range(n - 1):\n  if string[i] == string[i + 1]:\n   matrix[i][i + 1] = True\n   start = i\n   max_length = 2\n\n # Check for substrings of length 3 and more\n for substring_length in range(3, n + 1):\n  for i in range(n - substring_length + 1):\n   end = i + substring_length - 1\n   if matrix[i + 1][end - 1] and string[i] == string[end]:\n    matrix[i][end] = True\n \n    if substring_length > max_length:\n     start = i\n     max_length = substring_length\n \n print(\"Longest palindrome substring is:\", \n\tstring[start:start + max_length])\n\nlongestPalindrome(\"abcaaacbcb\")\n\nOutput: Longest palindrome substring is: aaacbcaaa</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to sort an array using Quick Sort.\n\nArray: [5, 3, 6, 2, 1, 4] [/INST] def quickSort(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\n    # Pivot is the middle element\n    pivot = arr[(low + high) // 2]\n    i = low # Left pointer\n    j = high # Right pointer\n\n    while i <= j:\n        # If the current value is smaller or equal than the pivot\n        while arr[i] < pivot:\n            i += 1\n        # If the current value is larger than the pivot\n        while arr[j] > pivot:\n            j -= 1\n\n        # If values are not in the correct order\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    # Recursively sort the left and right halves\n    quickSort(arr, low, j)\n    quickSort(arr, i, high)\n\narr = [5, 3, 6, 2, 1, 4]\nquickSort(arr, 0, len(arr)-1)\nprint(arr)\n\nOutput: [1, 2, 3, 4, 5, 6]</s>"
  },
  {
    "text": "<s>[INST] Compute the maximum sum of elements of a given subarray of length k in an array of integers.\n\narr = [22, 4, 65, -12, 8, 99, 103], k = 2 [/INST] def find_max_sum(arr, k):\n    max_sum = 0\n    window_sum = 0\n    \n    # Compute the sum of first k elements \n    for i in range(k):\n        window_sum += arr[i]\n        \n    max_sum = window_sum\n    \n    # Add new element while removing the first\n    for i in range(k, len(arr)):\n        window_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, window_sum)\n        \n    return max_sum</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page displaying a table with the following values\n\n[{name: 'John', age: 25, country: 'US'}, \n{name: 'Jane', age: 32, country: 'Canada'},\n{name: 'David', age: 28, country: 'Mexico'}] [/INST] <html>\n<head>\n<title>Table</title>\n</head>\n \n<body>\n \n    <table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n                <th>Country</th>\n            </tr>\n        </thead>\n \n        <tbody>\n            <tr>                                                            \n                <td>John</td>\n                <td>25</td>\n                <td>US</td>\n            </tr>   \n            <tr>\n                <td>Jane</td>\n                <td>32</td>\n                <td>Canada</td>\n            </tr>\n            <tr>\n                <td>David</td>\n                <td>28</td>\n                <td>Mexico</td>\n            </tr>\n        </tbody>\n    </table>\n \n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a Java program to convert an array of integers into an integer.\n\n[1,2,3,4] [/INST] public static int convertToInt(int[] arr) {\n    int result = 0;\n    for (int i=0; i<arr.length; i++) {\n        result += arr[i]*Math.pow(10, arr.length-1-i);\n    }\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Add functionality to a given Python class to retrieve a book ISBN by its title. [/INST] class Book:\n    def __init__(self, title, isbn):\n        self.title = title\n        self.isbn = isbn\n        \n    def get_ISBN_by_title(self, title):\n        if self.title == title:\n            return self.isbn\n        else:\n            return None</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find out the total number of books purchased by each customer in a book store. [/INST] SELECT custid, COUNT(*) AS 'Number of Purchases'\nFROM orders\nGROUP BY custid;</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to convert a given decimal number into its binary form. [/INST] def decimal_to_binary(num):\n    binary = []\n\n    while num > 0:\n        binary.append(num%2)\n        num //= 2\n    binary.reverse()\n    return binary</s>"
  },
  {
    "text": "<s>[INST] Implement a function in Python that takes an array of numbers and returns the index of the maximum element.\n\n[4,7,9,2,10] [/INST] def find_index_max(arr):\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[max_index] < arr[i]:\n            max_index = i\n    return max_index</s>"
  },
  {
    "text": "<s>[INST] Recreate the following code using Java.\n\ndef get_person(name):\n    person = {\"name\":name}\n    return person [/INST] public class Person{\n    public String name;\n    public Person(String name){\n        this.name = name;\n    }\n    \n    public static Person getPerson(String name){\n        Person person = new Person(name);\n        return person;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate an HTTP request to delete a customer account.\n\ncustomer_id = 3 [/INST] DELETE /customers/3 HTTP/1.1\nHost: example.com\nContent-Type: application/json\nAuthorization: Bearer <Access Token></s>"
  },
  {
    "text": "<s>[INST] Translate this code snippet into a pseudocode.\n\nfor x in range(3, 10):\n    print(x) [/INST] for x from 3 to 10\n    print x</s>"
  },
  {
    "text": "<s>[INST] Write a regex expression to extract any URL from a string. [/INST] (https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})</s>"
  },
  {
    "text": "<s>[INST] Create an API call in Python to search for a movie by title. [/INST] import requests\n\ndef search_movie_by_title(title):\n    url = 'https://api.themoviedb.org/3/search/movie?api_key=<api_key>&query=' + title\n    response = requests.get(url).json()\n    return response</s>"
  },
  {
    "text": "<s>[INST] Write a SQL statement to find employees whose salary is greater than a given threshold.\n\nsalary_threshold = 60000 [/INST] SELECT * FROM employees WHERE salary > 60000;</s>"
  },
  {
    "text": "<s>[INST] Compare two JSON objects in Python.\n\nfirst_obj = {\n    'name': 'John',\n    'age': 30\n}\nsecond_obj = {\n    'name': 'John',\n    'age': 34\n} [/INST] import json\n\n# Compare two JSON objects and return `True` if equal, `False` if not\ndef compare_json_objects(first_obj, second_obj):\n    first_obj_str = json.dumps(first_obj)\n    second_obj_str = json.dumps(second_obj)\n    if first_obj_str == second_obj_str:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    first_obj = {\n        'name': 'John',\n        'age': 30\n    }\n    second_obj = {\n        'name': 'John',\n        'age': 34\n    }\n    print(compare_json_objects(first_obj, second_obj))</s>"
  },
  {
    "text": "<s>[INST] Write a code to convert an integer to a float in Python. [/INST] # Convert an integer to a float in Python\ndef int_to_float(num):\n    return float(num)\n\nif __name__ == '__main__':\n    integer = 5 # Sample integer\n    print(int_to_float(integer))</s>"
  },
  {
    "text": "<s>[INST] Write a code to count repeated words in a given sentence.\n\n\"This is a sentence. This is a test sentence.\" [/INST] def count_words(sentence):\n    words = sentence.split()\n    counts = dict()\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n\nif __name__ == '__main__':\n    sentence = \"This is a sentence. This is a test sentence.\"\n    word_counts = count_words(sentence)\n    print(word_counts)</s>"
  },
  {
    "text": "<s>[INST] Write a function to measure the similarity between two strings. [/INST] def similarity(string1, string2):\n    common_chars = set(string1).intersection(string2)\n    return len(common_chars) / (len(string1) + len(string2) - len(common_chars))\n\nif __name__ == \"__main__\":\n    string1 = \"test\"\n    string2 = \"testimony\"\n    sim = similarity(string1, string2)\n    print(sim)</s>"
  },
  {
    "text": "<s>[INST] Create a function to extract the top 10 keywords from a given text.\n\ntext = \"This is some text that I am using to test the extractKeywords function.\" [/INST] import nltk\n\ndef extractKeywords(text):\n    tokens = nltk.word_tokenize(text)\n    tags = nltk.pos_tag(tokens)\n    keywords = [word for word,pos in tags \n            if (pos == 'NN' or pos == 'NNP' or pos == 'NNS' or pos == 'NNPS')]\n    freqs = nltk.FreqDist(keywords)\n    top_ten = freqs.most_common(10)\n    return top_ten\n \nif __name__ == \"__main__\": \n    text = \"This is some text that I am using to test the extractKeywords function.\"\n    top_ten = extractKeywords(text)\n    print(top_ten)</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to find the name of all users in a table named \"users\". [/INST] SELECT name FROM users;</s>"
  },
  {
    "text": "<s>[INST] Create a JSON string containing the data below\n\nuser_id: 12345, name: John Doe, age: 41 [/INST] {\"user_id\": 12345, \"name\": \"John Doe\", \"age\": 41}</s>"
  },
  {
    "text": "<s>[INST] Find the maximum value from a Python dictionary.\n\nsample_dict = {'a': 10, 'b': 20, 'c': 40, 'd': 30} [/INST] def find_max(sample_dict):\n  max_val = 0\n  for key, val in sample_dict.items():\n    if val > max_val:\n      max_val = val\n  return max_val</s>"
  },
  {
    "text": "<s>[INST] Find the number of words in a given sentence using a Python function.\n\nsentence = \"This is a test sentence\" [/INST] def word_count(sentence):\n  return len(sentence.split())</s>"
  },
  {
    "text": "<s>[INST] Convert the following Celsius temperature to Fahrenheit using a JavaScript function.\n\ntemperature = -4.5 [/INST] function celsiusToFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\nvar fahrenheit = celsiusToFahrenheit(-4.5);</s>"
  },
  {
    "text": "<s>[INST] Create a query to find all users younger than 19 years old in a database table called \"users\". [/INST] SELECT * FROM users WHERE age < 19;</s>"
  },
  {
    "text": "<s>[INST] Generate a function to implement the following purpose in Java\n\nFind the square root of a number [/INST] public static double squareRoot(double x) { \n    return Math.sqrt(x);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a CSS rule to make the text of an element bold. [/INST] font-weight: bold;</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to declare two string variables. [/INST] string1 = \"a\"\nstring2 = \"b\"</s>"
  },
  {
    "text": "<s>[INST] Write a query to extract data from a table called \"inventory\" which contains the columns: id, item, quantity [/INST] SELECT id, item, quantity\nFROM inventory</s>"
  },
  {
    "text": "<s>[INST] In the following snippet, make the necessary changes to store the result as a float value\n\na = 5\nb = 20\nresult = a / b; [/INST] a = 5\nb = 20\nresult = float(a / b);</s>"
  },
  {
    "text": "<s>[INST] Compare the following two strings and list the differences.\n\nstring1 = \"Hello World\"\nstring2 = \"Hello World!\" [/INST] The strings are different as the second string has an exclamation mark at the end.</s>"
  },
  {
    "text": "<s>[INST] Extract the first 4 characters from the string \"Hello World\".\n\nstring = \"Hello World\" [/INST] Substring = \"Hell\".</s>"
  },
  {
    "text": "<s>[INST] Output the 3 world most populous cities [/INST] The world's three most populous cities are Tokyo (37.4 million), Delhi (29.8 million) and Shanghai (26.3 million).</s>"
  },
  {
    "text": "<s>[INST] What is the name of the attribute for creating a hover effect for an element in CSS? [/INST] The attribute used in CSS to create a hover effect for an element is the ':hover' pseudo-class.</s>"
  },
  {
    "text": "<s>[INST] Write a code line to loop over an array of strings.\n\narr = [\"a\", \"b\", \"c\", \"d\"] [/INST] arr.forEach(string => {\n   // code\n});</s>"
  },
  {
    "text": "<s>[INST] Edit the code to check whether the given number is a triangle number.\n\ndef is_triangle_number(num):\n    return num == num [/INST] def is_triangle_number(num):\n    number = 0\n    for i in range(num+1):\n        number += i\n        if number == num:\n            return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Find the most frequent character in an inputted string.\n\ninput_string = \"Hello, world\" [/INST] def find_most_frequent_character(input_string):\n    char_count_dict = {}\n    for char in input_string:\n        if char in char_count_dict.keys():\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n    max_count = 0\n    max_char = ''\n    for char in char_count_dict.keys():\n        if char_count_dict[char] > max_count:\n            max_count = char_count_dict[char]\n            max_char = char\n    return max_char</s>"
  },
  {
    "text": "<s>[INST] Write a code to calculate the average of three given integers [/INST] def calculate_average(a,b,c):\n    return (a+b+c)/3</s>"
  },
  {
    "text": "<s>[INST] Given a string, find the word with the longest length.\n\ninput_string = \"Hello World\" [/INST] def find_longest_word(input_string):\n    longest_word = ''\n    for word in input_string.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word</s>"
  },
  {
    "text": "<s>[INST] Given a list of lists, find the longest sublist.\n\nlist = [[1,2,3], [2,3,4,5], [4,5,6]] [/INST] def find_longest_sublist(list):\n    longestList = []\n    for subList in list:\n        if len(subList) > len(longestList):\n            longestList = subList\n    return longestList</s>"
  },
  {
    "text": "<s>[INST] Find all occurrences of a substring in a given string.\n\nstring = \"the cat in the hat\"\nsubstring = \"cat\" [/INST] def find_substring_occurrences(string, substring):\n    occurrence_list = []\n    index = 0\n    while string.find(substring, index) != -1:\n        index = string.find(substring, index)\n        occurrence_list.append(index)\n        index += 1\n    return occurrence_list</s>"
  },
  {
    "text": "<s>[INST] Edit the code to add each item to a dictionary.\n\ndef add_to_dict(input_dict, key, value):\n    return [/INST] def add_to_dict(input_dict, key, value):\n    if key in input_dict:\n        input_dict[key].append(value)\n    else:\n        input_dict[key] = [value]\n    return input_dict</s>"
  },
  {
    "text": "<s>[INST] Create a program that prints out an Egyptian multiplication table up to twelve [/INST] def print_egyptian_table():\n    print(\"Egyptian Multiplication Table\")\n    print(\"----------------------------\")\n\n    for i in range(1,13):\n        for j in range(1,13):\n            product = i * j\n            print(f\"{i} x {j} = {product}\")\n        print(\"----------------------------\")\n\nif __name__ == \"__main__\":\n    print_egyptian_table()</s>"
  },
  {
    "text": "<s>[INST] Generate a function that takes a list of strings and returns a list that includes capitalized version of all strings\n\n['hello', 'world', 'my', 'name', 'is'] [/INST] def capitalize_list(words):\n    \"\"\"This function takes a list of strings and returns a list that \n    includes capitalized version of all strings\n    \"\"\"\n\n    capitalized_list = []\n\n    for word in words:\n        capitalized_word = word.capitalize()\n        capitalized_list.append(capitalized_word)\n    \n    return capitalized_list</s>"
  },
  {
    "text": "<s>[INST] Suggest two input values for the following code snippet such that it generates the output '2, 4'.\n\nx = int(input())\ny = int(input())\nprint(x*2, y*2) [/INST] The two input values that generate the output '2, 4' are x = 1, y = 2.</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in a list of strings and returns a new list of only the strings longer than 4 characters.\n\n['Python', 'JavaScript', 'C++', 'Scala', 'Haskell'] [/INST] def filter_long_words(str_list):\n    \"\"\"This function takes a list of strings and returns a new list of only the strings longer than 4 characters\"\"\"\n    result = []\n    for word in str_list:\n        if len(word) > 4:\n            result.append(word)\n    return result</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm that finds the maximum element of an array.\n\n[2, 3, 5, 1, 4] [/INST] def find_max_element(arr):\n    \"\"\"This function takes an array and returns the maximum element\"\"\"\n    max_el = arr[0]\n    for el in arr:\n        if el > max_el:\n            max_el = el\n    return max_el</s>"
  },
  {
    "text": "<s>[INST] Write code to assign a variable the value of the cube of 5. [/INST] cube_of_5 = 5**3 # assign a variable the value of the cube of 5.</s>"
  },
  {
    "text": "<s>[INST] Write code for sorting an array in-place. [/INST] def quicksort(arr):\n    \"\"\"This function takes an array as parameter and sorts it in-place\"\"\"\n    if len(arr) <= 1:\n        return\n    pivot = arr[0]\n    left, right = [], []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    quicksort(left)\n    quicksort(right)\n    arr[:] = left + [pivot] + right</s>"
  },
  {
    "text": "<s>[INST] Generate code to generate a random number between 0 and 5, both inclusive. [/INST] import random\n\ndef random_num0_to_5():\n    \"\"\"This function generates a random number between 0 and 5, both inclusive\"\"\"\n    return random.randint(0, 5)</s>"
  },
  {
    "text": "<s>[INST] Create a code to find all prime numbers between 2 and a given integer. [/INST] def find_primes_below(n):\n    \"\"\"This function finds all prime numbers between 2 and a given integer\"\"\"\n    primes = [True] * n\n    primes[0], primes[1] = False, False\n\n    # Find prime numbers\n    for i, is_prime in enumerate(primes):\n      if is_prime:\n        for num in range(i*i, n, i):\n            primes[num] = False\n\n    # Filter out primes\n    return [i for i, prime in enumerate(primes) if prime]</s>"
  },
  {
    "text": "<s>[INST] Write a python program to determine whether a given number is a perfect square or not. [/INST] def is_perfect_square(n):\n    \"\"\"This function takes a number as input and determines whether it is a perfect square or not\"\"\"\n    i = 1\n    while i*i < n:\n        i += 1\n    if i*i == n:\n        return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Generate a code that concatenates a reversed copy of a given string to itself.\n\nPython [/INST] def concatenate_reversed(s):\n    \"\"\"This function takes a string as input and concatenates a reversed copy of it to itself\"\"\"\n    return s + s[::-1]</s>"
  },
  {
    "text": "<s>[INST] Use the given function to convert an integer to a string.\n\nint num = 5 [/INST] def int_to_string(num):\n    return str(num)</s>"
  },
  {
    "text": "<s>[INST] Replace the \"TODO\" with the appropriate code for implementing a binary search algorithm in Python.\n\n# TODO [/INST] def binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        elif arr[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to print the multiplication table of a number. [/INST] def print_mult_table(n):\n    for i in range(1, 11):\n        print('{} x {} = {}'.format(n, i, n*i))</s>"
  },
  {
    "text": "<s>[INST] Use the given function to generate a random password of the specified length. [/INST] import random\n\ndef generate_password(length):\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\n    password = ''\n    for i in range(length):\n        password += random.choice(alphabet)\n    return password</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the total number of books in the library. [/INST] SELECT COUNT(*) FROM books;</s>"
  },
  {
    "text": "<s>[INST] Use the given function to detect if a given string is a palindrome. [/INST] def is_palindrome(str):\n    reversedStr = str[::-1]\n    if reversedStr == str:\n        return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Create a React component to accept a list of items and render them in a table. [/INST] import React from 'react';\n\nfunction TableComponent(props) {\n  const items = props.items;\n  const tableRows = items.map((row, index) => (\n    <tr key={index}>\n      {row.map((cell, index) => <td key={index}>{cell}</td>)}\n    </tr>\n  ));\n  return (\n    <table>\n      <tbody>{tableRows}</tbody>\n    </table>\n  );\n}\n\nexport default TableComponent;</s>"
  },
  {
    "text": "<s>[INST] Generate a program to convert a date in the format 'dd/mm/yyyy' to a date in the format 'yyyy/mm/dd'.\n\n02/12/2020 [/INST] def convert_date(date):\n  date_list = date.split('/')\n  return '{}/{}/{}'.format(date_list[2],date_list[1],date_list[0])</s>"
  },
  {
    "text": "<s>[INST] Create a function to generate a list of all prime numbers in a given range. [/INST] def prime_nums(n): \n    prime_list = [] \n    for i in range(2, n + 1): \n        for j in range(2,i): \n            if (i % j) == 0: \n                break\n        else: \n            prime_list.append(i)\n    return prime_list</s>"
  },
  {
    "text": "<s>[INST] Create a function to merge two dictionaries in Python. [/INST] def merge_dicts(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict</s>"
  },
  {
    "text": "<s>[INST] What is the output of the following code?\n\nlist1 = [1, 2, 3]\nlist2 = list1\nlist1[0] = 'a' [/INST] The output of the code is ['a', 2, 3] because list2 is just a reference to the same object as list1, so when list1 is changed the changes are reflected in the list2 as well.</s>"
  },
  {
    "text": "<s>[INST] Create a function to return the largest element from a list.\n\n[3, 9, 6, 2, 5] [/INST] def largest_element(lst):\n    largest = lst[0]\n    for num in lst:\n        if num > largest:\n            largest = num\n    return largest</s>"
  },
  {
    "text": "<s>[INST] Can you explain the bubble sort algorithm? [/INST] Bubble sort is a simple sorting algorithm which iterates through a list and compares adjacent elements, swapping them if they are in the incorrect order. This process is repeated until the list is sorted in its correct order. It is a slow algorithm as it requires multiple iterations of the list, but it is simple to understand and implement.</s>"
  },
  {
    "text": "<s>[INST] Construct a program to remove leading zeros from a string.\n\n'00abc' [/INST] def remove_leading_zeros(str):\n    return str.lstrip('0')</s>"
  },
  {
    "text": "<s>[INST] What are the differences between a class and an object? [/INST] A class is a blueprint or template for objects. It is a definition of the object’s properties, methods and behaviors. An object is an instance of a class, meaning it takes on the properties, methods and behaviors defined by the class. A class can have multiple objects, and each object can have different values for its properties. Objects allow us to model real-world objects in software.</s>"
  },
  {
    "text": "<s>[INST] Given a JavaScript string, replace all instances of the word \"today\" with the word \"tomorrow\".\n\nlet str = \"Today is a great day.\" [/INST] let str = \"Tomorrow is a great day.\"</s>"
  },
  {
    "text": "<s>[INST] Write a short SQL query to find the row with the highest value in a column \"Quantity\". [/INST] SELECT *\nFROM table\nORDER BY Quantity DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Create a Python class called \"Person\" with name and age as attributes. [/INST] class Person:\n def __init__(self, name, age):\n     self.name = name\n     self.age = age</s>"
  },
  {
    "text": "<s>[INST] Find the average of a given list of numbers in Java.\n\nint[] numbers = {2, 4, 6}; [/INST] int sum = 0;\nfor (int number : numbers) {\n sum += number;\n}\nint average = sum / numbers.length;</s>"
  },
  {
    "text": "<s>[INST] Write a Node.js script that takes an array of numbers [1,3,7] and multiplies each number by 2. [/INST] let numbers = [1,3,7];\nlet result = numbers.map(number => number * 2);\nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script that checks if a given directory exists. [/INST] if [ -d \"$1\" ]; then\n  echo \"The directory exists.\"\nelse\n  echo \"The directory does not exist.\"\nfi</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML markup to add a \"Welcome!\" heading.\n\n<section>\n <span>This is a sample section</span>\n</section> [/INST] <section>\n <h1>Welcome!</h1>\n <span>This is a sample section</span>\n</section></s>"
  },
  {
    "text": "<s>[INST] Create a MySQL statement to find the row with the lowest value in a column \"Price\". [/INST] SELECT * \nFROM table\nORDER BY Price ASC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Create an XML structure with the root element \"recipes\". [/INST] <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<recipes>\n\n</recipes></s>"
  },
  {
    "text": "<s>[INST] Given a Python dictionary with integer keys, write a function to convert the dictionary into a list of tuples.\n\nd = {1: 'a', 2: 'b'} [/INST] def dict_to_tuple(d):\n  return list(d.items())</s>"
  },
  {
    "text": "<s>[INST] Write a short JavaScript program to detect browser type. [/INST] function detectBrowser() { \n        // return the browser version \n        var browserName = navigator.appName;\n        var browserVersion = navigator.appVersion;\n        return (browserName + \" \" + browserVersion);\n    }</s>"
  },
  {
    "text": "<s>[INST] Edit the following string by replacing the spaces with an underscore.\n\nThis is a sample string [/INST] This_is_a_sample_string</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of declaring an enum in Java? [/INST] The purpose of declaring an enum in Java is to clearly identify a set of related constants that can be tracked. Enums are used to define a special type that contains a fixed set of constants. Enums provide type safety and make the code more self-documenting. They also make it easier for the compiler to check for correct usage since enums can be easily identified.</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to find the 10 numbers closest to the given number.\n\n50 [/INST] import java.util.Arrays; \n\nclass CloseNumber { \n    \n    // function to find 10 numbers closest to x \n    static void closeNums(int x, int arr[], int n) \n    { \n        // array which stores 10 numbers \n        // closest to x \n        int result[] = new int[10]; \n        int index = 0; \n  \n        // initialize difference between \n        // x and arr[i] \n        int dif = Integer.MAX_VALUE; \n  \n        // traverse in the array and \n        // find the 10 closest numbers \n        for (int i = 0; i < n; i++) { \n            if (x == arr[i]) \n                continue; \n            if (Math.abs(x - arr[i]) < dif) { \n                result[index++] = arr[i]; \n                if (index == 10) { \n                    Arrays.sort(result); \n                    index--; \n                } \n  \n                // update dif \n                if (index > 0) \n                    dif = Math.abs(x - result[index - 1]); \n            } \n        } \n  \n        // print the 10 closest numbers \n        for (int i = 0; i < 10; i++) \n            System.out.print(result[i] + \" \"); \n    } \n  \n    // Driver Code \n    public static void main(String[] args) \n    { \n        int arr[] = { 43, 3, 11, 15, 78, \n                    88, 24, 50, 36, 44 }; \n        int x = 50; \n  \n        int n = arr.length; \n        closeNums(x, arr, n); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a C++ function to print all possible paths from top left to bottom right of a MxN matrix. [/INST] #include <iostream> \n  \n// Maximum size of the matrix \n#define M 4 \n#define N 4 \n  \n// Function to Print all the paths from top left to bottom right \nvoid printPathsUtil(int mat[M][N], int x, int y, int m, int n, int path[M][N]) \n{ \n   // Reached the bottom of the matrix so we are left with \n   // only option to move right \n   if (x == m - 1) \n   { \n      for (int j = y; j < n; j++) \n         path[x][j] = mat[x][j]; \n  \n      for (int i = 0; i < m; i++) \n      { \n         for (int j = 0; j < n; j++) \n            std::cout << path[i][j] << \" \"; \n         std::cout << std::endl; \n      } \n  \n      return; \n   } \n  \n   // Reached the right corner of the matrix we are left with \n   // only the downward movement. \n   if (y == n - 1) \n   { \n      for (int i = x; i < m; i++) \n         path[i][y] = mat[i][y]; \n  \n      for (int i = 0; i < m; i++) \n      { \n         for (int j = 0; j < n; j++) \n            std::cout << path[i][j] << \" \"; \n         std::cout << std::endl; \n      } \n  \n      return; \n   } \n  \n   // Add the current cell to the path being generated \n   path[x][y] = mat[x][y]; \n  \n   // Print all the paths that are possible after moving down \n   printPathsUtil(mat, x + 1, y, m, n, path); \n  \n   // Print all the paths that are possible after moving right \n   printPathsUtil(mat, x, y + 1, m, n, path); \n  \n   // Remove the current cell from the path[] \n   path[x][y] = 0; \n} \n  \n// Function to print all paths from top left to bottom right in a \n// given two dimensional array \nvoid printPaths(int mat[M][N], int m, int n) \n{ \n   // Create an array to store paths \n   int path[M][N]; \n  \n   // Initialize the path array to all -1's \n   for (int i = 0; i < m; i++) \n      for (int j = 0; j < n; j++) \n         path[i][j] = -1; \n  \n   // Call to print all paths \n   printPathsUtil(mat, 0, 0, m, n, path); \n} \n \nint main() \n{ \n   int mat[M][N] = { {1, 2, 3, 4}, \n                     {5, 6, 7, 8}, \n                     {9, 10, 11, 12}, \n                     {13, 14, 15, 16} }; \n   \n   // Print all paths \n   printPaths(mat, M, N); \n  \n   return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of an immutable object in Python? [/INST] The purpose of an immutable object in Python is to make sure that once an object is created, it cannot be modified. This is useful when data must not change between multiple parts of a program. Immutable objects can also help ensure thread safety by preventing different threads from modifying the same data.</s>"
  },
  {
    "text": "<s>[INST] Write an R program to find the square of a number [/INST] x <- 5\nsquare_x <- x * x;\nprint(paste0('The square of ',x,' is ',square_x))</s>"
  },
  {
    "text": "<s>[INST] Determine the sum of the squares of all even numbers in a given array.\n\n[1, 2, 3, 4, 5, 6] [/INST] int sum = 0;\nfor (int i = 0; i < array.length; i++){\n    if (array[i] % 2 == 0){\n        sum += Math.pow(array[i], 2);\n    }\n}\nreturn sum;</s>"
  },
  {
    "text": "<s>[INST] Generate a JavaScript program to check if a number is within a given range\n\nLower bound x = 10 \nUpper bound y = 20 [/INST] function withinRange(number, x, y) \n{\n    return (number >= x && number <= y);\n}</s>"
  },
  {
    "text": "<s>[INST] Convert a LinkedList to an array of objects [/INST] Object[] array = linkedList.toArray();</s>"
  },
  {
    "text": "<s>[INST] Compute the average of a group of numbers\n\n[10, 13, 45, 36, 27] [/INST] double average = 0;\nfor (int i = 0; i < numbers.length; i++) {\n    average += numbers[i];\n} \naverage /= numbers.length;</s>"
  },
  {
    "text": "<s>[INST] Use jQuery to toggle a div with the class 'hide' [/INST] $('.hide').toggle();</s>"
  },
  {
    "text": "<s>[INST] Create a .Net console application to print a greeting according to the user’s input [/INST] Console.WriteLine(\"What is your name?\");\nstring name = Console.ReadLine();\n\nif (name == \"John\")\n    Console.WriteLine(\"Hello John!\");\nelse if (name == \"Sarah\")\n    Console.WriteLine(\"Good morning Sarah!\"); \nelse\n    Console.WriteLine(\"Hi there!\");</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to list the names, address, and phone numbers of all customers in the ‘customer’ table. [/INST] SELECT name, address, phone_number FROM customer;</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to find the common elements between two arrays.\n\nint[] arr1 = {1, 2, 3, 4, 5}\nint[] arr2 = {2, 5, 6, 7} [/INST] import java.util.Arrays;\n\npublic class CommonElements {\n    \n    public static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] arr2 = {2, 5, 6, 7};\n        \n        for(int i=0; i < arr1.length; i++){\n            for(int j = 0; j < arr2.length; j++) \n                if(arr1[i] == arr2[j]) \n                    System.out.println(arr1[i]);\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to read an array of strings and sort them lexicographically (alphabetically).\n\nString[] arr = {\"apple\", \"cat\", \"hello\"}; [/INST] import java.util.Arrays;\n\npublic class SortStrings {\n    \n    public static void main(String[] args) {\n        String[] arr = {\"apple\", \"cat\", \"hello\"};\n        Arrays.sort(arr);\n        for(String s: arr){\n            System.out.println(s);\n        }\n    }\n}\n\n// Output:\napple\ncat\nhello</s>"
  },
  {
    "text": "<s>[INST] Write a Python code snippet to calculate the area of a triangle with side lengths 3, 4, and 5. [/INST] def area(a, b, c):\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\nprint(area(3, 4, 5)) # 6.0</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet using Python to print the following sentence \"Programming is fun!\". [/INST] print(\"Programming is fun!\")</s>"
  },
  {
    "text": "<s>[INST] Create an object data structure in JavaScript to represent a student and store details such as student's name, age, gender, and program. [/INST] let student = {\n  name: '',\n  age: 0,\n  gender: '',\n  program: ''\n};</s>"
  },
  {
    "text": "<s>[INST] Implement a linear search algorithm in C language that takes an array and a value as input and returns the index of the value’s first occurrence in the given array.\n\nArray: [3, 4, 6, 9, 10]\nvalue: 9 [/INST] int linearSearch(int array[], int size, int key)\n{\n  for (int i = 0; i < size; i++) {\n    if (array[i] == key) \n      return i;\n  }\n  return -1;\n}</s>"
  },
  {
    "text": "<s>[INST] What is the time complexity of insertion sort algorithm in big O notation? [/INST] O(n^2).</s>"
  },
  {
    "text": "<s>[INST] Rearrange the given array in an ascending order using selection sort algorithm.\n\nArray: [2, 8, 5, 3, 9] [/INST] function SelectionSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let min = i;\n    for (let j = i+1; j < arr.length; j++) {\n      if (arr[j] < arr[min])\n        min = j;\n    }\n    let temp = arr[i];\n    arr[i] = arr[min];\n    arr[min] = temp;\n  } \n  return arr;\n}\n\nSelectionSort([2, 8, 5, 3, 9]); // Output: [2, 3, 5, 8, 9]</s>"
  },
  {
    "text": "<s>[INST] Design a data structure using JavaScript to represent a binary tree. [/INST] class Node {\n  constructor(data, left = null, right = null) {\n      this.data = data;\n      this.left = left;\n      this.right = right;\n  }\n}\n\nclass BinaryTree {\n  constructor() {\n      this.root = null;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a random array of 10 integers using JavaScript. [/INST] let randomArray = []; \nfor(let i = 0; i < 10; i++) { \n    randomArray.push(Math.floor(Math.random() * 100)); \n} \nconsole.log(randomArray);</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to check if a given string is a palindrome (a word, phrase, or sequence that reads the same backward as forward). [/INST] public static boolean isPalindrome(String str) {\n  for(int i=0; i<str.length()/2;i++) {\n    if(str.charAt(i) != str.charAt(str.length()-i-1)) \n      return false;\n  }\n  return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to remove the characters from specific index within a string.\n\nmystring = \"Hello, World!\"\nindex = 5 [/INST] mystring = \"Hello, World!\"\nindex = 5\n\nresult = mystring[:index] + mystring[index+1:]\n\nprint(\"Result after removing characters from index {}: {}\".format(index, result))</s>"
  },
  {
    "text": "<s>[INST] Create a Python class with the same content as a JSON string.\n\nmyjson_string = '{\"name\": \"John\", \"age\": 20}' [/INST] import json\n\nclass Person:\n def __init__(self, json_string):\n  data = json.loads(json_string)\n  self.name = data['name']\n  self.age = data['age']\n\nmyjson_string = '{\"name\": \"John\", \"age\": 20}'\nperson = Person(myjson_string)\nprint(person.name, person.age)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet for validating an email address. [/INST] function validateEmail(email) {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to find the maximum element of an array.\n\narr = [2, 3, 1, 4, 5] [/INST] public class Maximum {\n\tpublic static int findMax(int[] arr) {\n\t\tint max = arr[0];\n\t\tfor(int i = 1; i < arr.length; i++) {\n\t\t\tif(arr[i] > max)\n\t\t\t\tmax = arr[i];\n\t\t}\n\t\treturn max;\n\t}\n\n\tpublic static void main(String args[]) {\n\t\tint arr[] = {2, 3, 1, 4, 5};\n\t\tint max = findMax(arr);\n\t\tSystem.out.println(\"Maximum Element: \" + max);\n\t}\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the given Python code to make the algorithm run faster.\n\ndef slow_algo(n):\n    result = 0\n    for i in range(n):\n        result += i\n    return result [/INST] def fast_algo(n):\n    result = (n * (n + 1))// 2\n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to convert JSON data into a Python dictionary.\n\njson_data = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}' [/INST] import json\n\ndef json_to_dict(json_data):\n return json.loads(json_data)\n\ndata = json_to_dict(json_data)\nprint(data)</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find all users from the user table whose age is greater than 30. [/INST] SELECT * FROM user WHERE age > 30;</s>"
  },
  {
    "text": "<s>[INST] Construct a boolean expression using 'or', 'and' and 'not' operators to check if a given number is even. [/INST] (num % 2 == 0) or ((not num % 2 == 0) and (not num % 2 == 1))</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all columns from the table student except the column grade. [/INST] SELECT * FROM student WHERE NOT grade IS NULL;</s>"
  },
  {
    "text": "<s>[INST] Create a Python function to insert a new element in a list at the given index.\n\nlist1 = [1, 2, 3, 4, 5]\nindex = 3\nelement = 6 [/INST] def insert_element(lst, idx, element):\n lst.insert(idx, element)\n return lst\n\nlist1 = insert_element(list1, index, element)\nprint(list1)</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to calculate the Euclidean Distance between two points.\n\npoint1 = [-1, 0]\npoint2 = [4, 7] [/INST] def euclidean_distance(point1, point2):\n from math import sqrt\n return sqrt(sum([(x - y)**2 for x, y in zip(point1, point2)]))\n\ndistance = euclidean_distance(point1, point2)\nprint(distance)</s>"
  },
  {
    "text": "<s>[INST] Construct an HTTP request to fetch the HTML of a given web page.\n\nurl = \"example.com\" [/INST] GET / HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nConnection: keep-alive</s>"
  },
  {
    "text": "<s>[INST] Create a function in C++ to find the maximum and minimum elements in a given array. [/INST] #include<iostream>\n \nusing namespace std;\n \nvoid minMax(int arr[], int n, int *min, int *max)\n{\n\t*min = arr[0];  // Initialize minimum element\n\t*max = arr[0];  // Initialize maximum element\n \n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tif (arr[i] > *max)\n\t\t\t*max = arr[i];\n \n\t\tif (arr[i] < *min)\n\t\t\t*min = arr[i];\n\t}\n}\n\n// Driver code\nint main()\n{\n\tint arr[] = {10, 314, 2, 6, 5};\n\tint n = sizeof(arr) / sizeof(arr[0]);\n\tint min, max;\n minMax(arr, n, &min, &max);\n\tcout << \"Minimum element = \" << min << endl;\n\tcout << \"Maximum element = \" << max << endl;\n\treturn 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the number of books published after the year 2000. [/INST] SELECT COUNT(*) FROM books WHERE year > 2000;</s>"
  },
  {
    "text": "<s>[INST] Write the output of this Python code.\n\na = 10\nb = 5\nc = 6\n\nprint(a + b * c) [/INST] 56</s>"
  },
  {
    "text": "<s>[INST] Run the same transormation to the text using the provided code.\n\nText: \"He was very happy!\"\nCode: \ntext = text.lower()\ntext = text.replace('!', '.') [/INST] \"he was very happy.\"</s>"
  },
  {
    "text": "<s>[INST] Identify the language used in this code snippet.\n\nstring a = \"Hello\";\nstring b = \" World\";\n\ncout << a + b << endl; [/INST] C++</s>"
  },
  {
    "text": "<s>[INST] Read through the code and write the expected output.\n\n#include <iostream>\n\nint main() \n{\n    int x[] = {3, 5, 7, 8};\n    for (int i = 0; i < 4; i++) \n    {\n        std::cout << x[i] << '\\n';\n    }\n    return 0;\n} [/INST] 3\n5\n7\n8</s>"
  },
  {
    "text": "<s>[INST] Complete this function to add two matrices.\n\ndef add_matrices(a, b):\n    # TODO: write code to add two matrices\n    # matrix a and b have the same dimensions [/INST] def add_matrices(a, b):\n    # create a new empty matrix, use the same dimensions as a and b\n    result = [[0 for x in range(len(a[0]))] for y in range(len(a))]\n\n    # iterate over a and b to complete the matrix addition \n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n\n    return result</s>"
  },
  {
    "text": "<s>[INST] Run this SQL query and write the output.\n\nSELECT DISTINCT course_name\nFROM course_list\nWHERE semester=’Winter’; [/INST] Database Management\nStatistics\nComputer Programming\nApplied Algorithms</s>"
  },
  {
    "text": "<s>[INST] Identify the standard algorithm used to solve the following problem.\n\nProblem: DNA sequencing [/INST] Dynamic Programming (DP).</s>"
  },
  {
    "text": "<s>[INST] Complete the function so that it returns the minimum element in the provided list.\n\ndef min_element(lis):\n    # TODO: write code to find and return the minimum element in the list [/INST] def min_element(lis):\n    # set min to first element in the list\n    min = lis[0]\n  \n    # iterate over the list and compare each element to \n    # the current minimum. If a smaller element is found, \n    # update min. \n    for x in lis:\n        if x < min: \n            min = x\n  \n    # return min\n    return min</s>"
  },
  {
    "text": "<s>[INST] What is the class of the word \"training\" in the following sentence?\n\nShe was going for a training session. [/INST] Noun, NN.</s>"
  },
  {
    "text": "<s>[INST] Write a function that calculates the sum of the digits of a number.\n\nNumber: 13 [/INST] def sum_of_digits(n): \n    # handle negative numbers \n    n = abs(n)\n\n    # base case when n has only one digit\n    if n < 10: \n        return n \n\n    # calculate the sum of the digits recursively  \n    else: \n        return (n % 10 + sum_of_digits(int(n / 10))) \n\nprint(sum_of_digits(13))</s>"
  },
  {
    "text": "<s>[INST] Identify the correct regular expression for a string that starts with a letter and is followed by any number of letters and numbers.\n\n- [/INST] ^[a-zA-Z][a-zA-Z0-9]*$</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the most popular language in a given year.\n\nTable Name: Language_Usage\nTable Schema: language VARCHAR(100), uses INT, year INT [/INST] SELECT language, MAX(uses) as max_uses \nFROM Language_Usage \nWHERE year = given_year \nGROUP BY language\nORDER BY uses DESC</s>"
  },
  {
    "text": "<s>[INST] Perform a web scraping to retrieve the prices of a specific product.\n\nWebsite: www.amazon.com\nProduct: iPhone 12 [/INST] import requests\nfrom bs4 import BeautifulSoup\n\nwebsite = requests.get('https://www.amazon.com/Apple-iPhone-12-Unlocked-128GB/dp/B08HeG719F/ref=sr_1_1')\nsoup = BeautifulSoup(website.content, 'html.parser')\n\nprice_divs = []\nprice_divs = soup.find_all('span', {'class': 'a-price-whole'})\n\nfor price_div in price_divs:\n    print(price_div.text)</s>"
  },
  {
    "text": "<s>[INST] Generate a list of all possible combinations of the given set of numbers.\n\nSet of numbers: [1,2,3] [/INST] [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]</s>"
  },
  {
    "text": "<s>[INST] Merge the two JSON objects into one object.\n\nObject 1:\n{\n    \"name\": \"fruits\"\n    \"data\": []\n}\nObject 2:\n{\n    \"name\": \"vegetables\"\n    \"data\": []\n} [/INST] {\n    \"name\": [\"fruits\", \"vegetables\"],\n    \"data\": []\n}</s>"
  },
  {
    "text": "<s>[INST] Convert the given XML structure into JSON.\n\n<article>\n    <title>Car</title>\n    <body>\n        <section>\n            <header>Headline</header>\n            <p>Text about cars</p>\n        </section>\n    </body>\n</article> [/INST] {\n    \"article\": {\n        \"title\": \"Car\",\n        \"body\": {\n            \"section\": {\n                \"header\": \"Headline\",\n                \"p\": \"Text about cars\"\n            }\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java and set its variable members.\n\nClass Name: Student\nVariables: \n- name: String\n- dob: Date\n- rollNo: int [/INST] public class Student {\n    private String name;\n    private Date dob;\n    private int rollNo;\n\n    public Student(String name, Date dob, int rollNo) {\n        this.name = name;\n        this.dob = dob;\n        this.rollNo = rollNo;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Assign a correct data type for the given variables.\n\nVariable 1: numberOfApples\nVariable 2: userName [/INST] Variable 1: int\nVariable 2: String</s>"
  },
  {
    "text": "<s>[INST] Create a Recursive Function to print out the Fibonacci numbers.\n\nNumber: 10 [/INST] public static int fibonacci(int n) \n{ \n    if (n <= 1) \n       return n; \n    return fibonacci(n-1) + fibonacci(n-2); \n} \n  \n// Print first 10 numbers of the fibonacci sequence\nfor (int i = 0; i < 10; i++) \n    System.out.println(fibonacci(i));</s>"
  },
  {
    "text": "<s>[INST] Create an API endpoint for handling user authentication.\n\nEndpoint URL: www.example.com/auth [/INST] @app.route(\"/auth\", methods=['POST'])\ndef auth():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\n    user = User.check_user_auth(username, password)\n    if user:\n        session['username'] = username\n        return jsonify(success=True)\n    else:\n        return jsonify(success=False)</s>"
  },
  {
    "text": "<s>[INST] Create an android app with a search feature.\n\nSearch bar: Top of the app [/INST] SearchView searchView = findViewById(R.id.search_field); //Find search field\nsearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n        @Override\n        public boolean onQueryTextSubmit(String query) {\n            //Enter your search logics\n            return false;\n        }\n\n        @Override\n        public boolean onQueryTextChange(String newText) {\n            //Enter your logics\n            return false;\n        }\n});</s>"
  },
  {
    "text": "<s>[INST] Create a Sinatra App to send the form data to the server.\n\nForm Name: user_form [/INST] require 'sinatra'\n\npost '/user_form' do\n  # Process the submission\n  \"Form successfully submitted!\"\nend</s>"
  },
  {
    "text": "<s>[INST] Construct a lambda function to find all odd numbers in a given list.\n\nList of numbers: [2, 3, 7, 8, 10] [/INST] list_of_nums = [2, 3, 7, 8, 10]\nodd_nums = list(filter(lambda num: num % 2 != 0, list_of_nums))</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find all the flights departing from city X that are operated by carrier Y. [/INST] SELECT * FROM flights\nWHERE origin_city='X' AND carrier='Y';</s>"
  },
  {
    "text": "<s>[INST] Describe an algorithm to sort an array of integers in increasing order.\n\n[4, 3, 1, 9, 11] [/INST] A simple bubble sort algorithm can be used to sort an array of integers in increasing order. We start at the beginning of the array and compare each pair of adjacent items and swap them if they are in the wrong order. We repeat this process until the array is sorted. For the input array [4, 3, 1, 9, 11], a single pass of bubble sorting the array would go as follows:\n[4, 3, 1, 9, 11] -> [3, 4, 1, 9, 11] -> [3, 1, 4, 9, 11] -> [3, 1, 4, 9, 11] -> [1, 3, 4, 9, 11]. The algorithm is then done since no swaps have been made in the last pass. The final sorted array is [1, 3, 4, 9, 11].</s>"
  },
  {
    "text": "<s>[INST] Given two string parameters,  s1 and s2, construct a function that returns the longest common subsequence between the two strings.\n\ns1 = \"Hello there!\"\ns2 = \"Hi there!\" [/INST] def longest_common_subsequence(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a CSS rule that makes all h2's have a blue background color. [/INST] h2 {\n    background-color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to generate all possible subsets of a given set of elements. [/INST] The following algorithm can be used to generate all possible subsets of a given set of elements:\n1. Create an empty list to store the subsets.\n2. Iterate over each element in the given set and for each element:\n     a. Add the element to the list of subsets.\n     b. For each subset in the list:\n        i. Create a new subset with the element added to the existing subset.\n        ii. Add the new subset to the list of subsets.\n3. Return the list of subsets.</s>"
  },
  {
    "text": "<s>[INST] Suggest a possible solution to the following problem: Given an array of integers, find the maximum continuous sum that can be achieved by adding the numbers in the array. [/INST] A possible solution to the given problem is to use the Kadane's algorithm. This algorithm iterates through the array and at each iteration, it keeps track of the maximum continuous sum seen so far, and updates it accordingly. At the end of the iteration, the algorithm returns the maximum continuous sum.</s>"
  },
  {
    "text": "<s>[INST] Identify the names of different classes in the following code snippet.\n\nclass Student: \n    \n    def __init__(self, name, roll_number): \n        self.name = name \n        self.roll_number = roll_number \n        \n    def print_details(self): \n        print(\"Name:\", self.name) \n        print(\"Roll number:\", self.roll_number) [/INST] Student</s>"
  },
  {
    "text": "<s>[INST] In the following code, identify the list of variables present.\n\ndef f(x):\n    y = 2 * x  \n    z = x ** y \n    w = [x, y, z]\n    return w [/INST] x, y, z, and w</s>"
  },
  {
    "text": "<s>[INST] Convert this python code into Java code\n\nmy_list = [1, 2, 3, 4, 5]\n\nfor i in my_list:\n    if i % 2 == 0:\n        print(i) [/INST] int[] my_list = {1,2,3,4,5};\n\nfor(int i : my_list){\n   if(i % 2 == 0)\n       System.out.println(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to combine the elements of two lists of equal length into a dictionary.\n\nlist1 = ['a', 'b', 'c'] \nlist2 = [1, 2, 3] [/INST] dict = {}\nfor i in range(len(list1)): \n    dict[list1[i]] = list2[i] \n  \nprint(dict)</s>"
  },
  {
    "text": "<s>[INST] Create a function which takes a list and a value and returns true if the value is present in the list, otherwise false\n\nlist = [1, 2, 3, 4, 5]\nval = 3 [/INST] def check_val(lst, val): \n    return val in lst</s>"
  },
  {
    "text": "<s>[INST] Generate a function which takes three numbers and returns the smallest.\n\nn1 = 5\nn2 = 10\nn3 = 3 [/INST] def get_min(n1, n2, n3):\n    mins = [n1, n2, n3]\n    return min(mins)</s>"
  },
  {
    "text": "<s>[INST] Identify the data types of the following values:\n\nname = \"John\"\nage = 25 [/INST] name = str\nage = int</s>"
  },
  {
    "text": "<s>[INST] Create a function to determine the output of\n\ndef my_func(x):\n    if x == 0:\n        return 1\n    else:\n        return x * my_func(x-1)\n\nx = 5 [/INST] def my_func(x):\n    if x == 0:\n        return 1\n    else: \n        return x * my_func (x-1) \n\ndef solve(x): \n    return my_func(x)\n\nx = 5\nresult = solve(x)\nprint(result)</s>"
  },
  {
    "text": "<s>[INST] Our program should accept an arbitrary number of integers and output a list of the largest number from each.\n\n1 2 3 4 5 [/INST] def largest_number(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\nnums = [1,2,3,4,5]\nresult = largest_number(nums)\nprint(result)</s>"
  },
  {
    "text": "<s>[INST] Create a function which takes a string and returns a reversed version of it.\n\nstring = \"Hello World!\" [/INST] def reverse_string(string):\n    return string[::-1]\n\nstring = \"Hello World!\"\nresult = reverse_string(string)\nprint(result)</s>"
  },
  {
    "text": "<s>[INST] Create a function which takes a string as an input and checks if it is a palindrome.\n\nstring = \"level\" [/INST] def is_palindrome(string): \n    if string == string[::-1]: \n        return True\n    return False\n  \nstring = \"level\"\nresult = is_palindrome(string)\nprint(result)</s>"
  },
  {
    "text": "<s>[INST] Create a Python function to calculate the area of a triangle using Heron’s formula.\n\na = 4\nb = 5\nc = 7 [/INST] def triangle_area(a, b, c):\n    \"\"\"Calculate the area of a triangle using Heron's formula\"\"\"\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(a, b, c))</s>"
  },
  {
    "text": "<s>[INST] Create a css class to center the text in a given div. [/INST] .text-center {\n    text-align: center;\n    margin-left: auto;\n    margin-right: auto;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby method to check if a given list contains an integer.\n\nlist = [1, 2.5, \"Hello\"] [/INST] def list_contains_integer?(list)\n  list.each do |item|\n    return true if item.is_a? Integer\n  end\n  false\nend\n\nlist_contains_integer?(list)</s>"
  },
  {
    "text": "<s>[INST] Given a list of integers, find the largest number.\n\ntest_list = [2, 5, 10, 15] [/INST] def largest_number(test_list): \n    max_number = test_list[0] \n    for i in test_list: \n        if i > max_number: \n            max_number = i \n    return max_number</s>"
  },
  {
    "text": "<s>[INST] Write a function to print the first n perfect square numbers. [/INST] def print_perfect_squares(n):\n    for i in range(1,n+1):\n        square = i*i\n        print(square)</s>"
  },
  {
    "text": "<s>[INST] Create a function that prints a list of all the even numbers from a given list of integers.\n\ntest_list = [1, 2, 3, 4, 5, 6] [/INST] def print_even(test_list):\n    even_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            even_list.append(num)\n    print(even_list)</s>"
  },
  {
    "text": "<s>[INST] Create a function to print the Fibonacci numbers up to a given number n. [/INST] def print_fibonacci(n):\n    a = 0\n    b = 1\n    while a < n:\n        print(a) \n        c = a + b\n        a = b\n        b = c</s>"
  },
  {
    "text": "<s>[INST] Given a 2D array, write a program to find the maximum path sum.\n\ntest_array = [[5, 6, 1],\n              [4, 2, 3],\n              [7, 8, 9]] [/INST] def max_path_sum(test_array): \n    row = max_row = len(test_array) \n    col = max_col = len(test_array[0]) \n\n    for row in range(max_row - 1, -1, -1): \n        for col in range(max_col): \n            if (row == max_row - 1): \n                test_array[row][col] \n            else: \n           # Choose the route with maximum sum \n                test_array[row][col] += max(test_array[row + 1][col], test_array[row + 1][col + 1]); \n    # Displays the maximum sum \n    print(test_array[0][0]);</s>"
  },
  {
    "text": "<s>[INST] Create a function to insert an element at a given index into a given list.\n\ntest_list = [1, 2, 4, 5]\ninserted_element = 3\nindex = 2 [/INST] def insert_element(test_list, inserted_element, index):\n    test_list.insert(index, inserted_element)\n    return test_list</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to retrieve all emails from a customer table. [/INST] SELECT email FROM customer;</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a search bar. [/INST] <html>\n  <body>\n    <h1>Search Page</h1>\n    <form action=\"search.php\" type=\"GET\">\n      <input type=\"text\" name=\"text\"/>\n      <input type=\"submit\" name=\"submit\" value=\"Search\"/> \n    </form>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a css class to change a div's background color to green. [/INST] .green-background {\n  background-color: green;\n}</s>"
  },
  {
    "text": "<s>[INST] What is the first index of the substring \"mod\" in the string?\n\nstring = \"GPT MODEL\" [/INST] int index = 4</s>"
  },
  {
    "text": "<s>[INST] Write a function to delete a given character from a string.\n\nstring = \"GPT MODEL\"\ncharacter = 'M' [/INST] def delete_char(string, character):\n    new_string = \"\"\n    for char in string:\n        if char != character:\n            new_string += char\n    return new_string</s>"
  },
  {
    "text": "<s>[INST] Create an array of strings, containing exactly three elements. [/INST] string_array = [\"element1\", \"element2\", \"element3\"]</s>"
  },
  {
    "text": "<s>[INST] Train a linear regression model on a given dataset.\n\ndataset = pd.read_csv('dataset.csv') [/INST] X = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)</s>"
  },
  {
    "text": "<s>[INST] Sort a given array in ascending order using the Gnome sort algorithm.\n\narray = [8, 3, 6, 1, 5] [/INST] def gnome_sort(array):\n    i = 1\n    while i < len(array): \n        if array[i-1] <= array[i]: \n            i += 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n            if (i == 0): \n                i = 1\n    return array</s>"
  },
  {
    "text": "<s>[INST] Write a query to find all employees whose age is greater than 25. [/INST] SELECT * FROM employees WHERE age > 25;</s>"
  },
  {
    "text": "<s>[INST] Describe the method to find the factorial of a given number. [/INST] The factorial of a given number n is the product of all positive integers less than or equal to n. The factorial of a number can be calculated using a loop to multiple all of the integers up to the given number, or it can be calculated using a recursive method where the factorial(n) = n*factorial(n-1).</s>"
  },
  {
    "text": "<s>[INST] Create a function called \"sum\" which returns the sum of the two given numbers [/INST] def sum(x, y):\n    return x+y</s>"
  },
  {
    "text": "<s>[INST] Write a JS code that returns the items in an alphabetical order.\n\nlet items = [\"Cat\", \"Dog\", \"Elephant\", \"Rabbit\", \"Fox\"] [/INST] let items = [\"Cat\", \"Dog\", \"Elephant\", \"Rabbit\", \"Fox\"]\n\nfunction sortAlphabetically(items) {\n  return items.sort();\n}\n\nlet result = sortAlphabetically(items);\nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Design a class to represent a string with length 20 characters [/INST] public class String20 { \n   private String str;\n   private int length;\n\n   public String20(String str)  \n   {  \n      this.length = 20;\n      this.str = str.length()<=length ? str : str.substring(0, length);  \n   }  \n}</s>"
  },
  {
    "text": "<s>[INST] Generate an XML format to store the contact information of a customer\n\nName: John Smith\nPhone: 123456789\nEmail: john@example.com [/INST] <contact>\n <name>John Smith</name>\n <phone>123456789</phone>\n <email>john@example.com</email>\n</contact></s>"
  },
  {
    "text": "<s>[INST] Write code to increment the value in the variable \"x\" by 3. [/INST] x = x + 3;</s>"
  },
  {
    "text": "<s>[INST] Create a class, \"Person\", which represents a person and has two properties, \"name\" and \"age\" [/INST] public class Person {\n     private String name;\n     private int age;\n     \n     public Person(String name, int age){\n         this.name = name;\n         this.age = age;\n     }\n     \n     public String getName(){\n         return this.name;\n     }\n     \n     public int getAge(){\n         return this.age;\n     }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a method which takes 2 parameters and returns the greater one [/INST] def max_num(x, y):\n    if x>y:\n        return x\n    else:\n        return y</s>"
  },
  {
    "text": "<s>[INST] Generate a loop in which all the numbers from 1 to 10 will be printed [/INST] for x in range(1,11):\n    print(x)</s>"
  },
  {
    "text": "<s>[INST] Create an HTML element which displays a button with the text \"Submit\" [/INST] <button>Submit</button></s>"
  },
  {
    "text": "<s>[INST] Create a new class called \"Rectangle\" with two properties: width and height [/INST] class Rectangle {\n    int width;\n    int height;\n    \n    public Rectangle (int width, int height){\n        this.width = width;\n        this.height = height;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a python program that takes a sentence as input and returns the amount of vowels that occur in the sentence [/INST] def count_vowels(sentence):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in sentence:\n        if char in vowels:\n            count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to reverse a linked list in place. [/INST] class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None \n\ndef reverse_list(head):\n    prev = None\n    current = head\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    head = prev\n    return head</s>"
  },
  {
    "text": "<s>[INST] Subtract two numbers and return the result.\n\n97, 42 [/INST] 55</s>"
  },
  {
    "text": "<s>[INST] Call a user-defined function in Python.\n\ndef add_two_numbers(x, y):\nreturn x + y [/INST] result = add_two_numbers(3, 5)\nprint(result)  # Outputs 8</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript to print the Fibonacci sequence up to the given number. [/INST] function fibonacciSequence(n) {\n    let sequence = [0, 1]\n    let i = 2 \n    while (i < n) {\n        sequence.push(sequence[i - 2] + sequence[i - 1]);\n        i++;\n    }\n    return sequence;\n}</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of a given list containing any type of elements.\n\n[1, 2, 3, 'a', 'b', 4] [/INST] sum = 10</s>"
  },
  {
    "text": "<s>[INST] Write a regex pattern to match the strings that contain only alphabetic characters. [/INST] pattern = /^[a-zA-Z]+$/</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet for generating a random number between 1 and 100. [/INST] import random\nrandomNumber = random.randint(1, 100)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to update the employee's salary in the following table.\n\nTable name: Employees\n\nid  name    department    salary\n1   John    D1            3000\n2   Sam     D2            3500\n3   Tom     D1            4000\n4   Susan   D2            5000 [/INST] UPDATE Employees \nSET salary = salary * 1.07\nWHERE department = ‘D2’;</s>"
  },
  {
    "text": "<s>[INST] If a button is clicked, what code can you write to show an alert? [/INST] document.getElementById('button').addEventListener('click', (e)=>{\n    alert('Button is clicked!');\n});</s>"
  },
  {
    "text": "<s>[INST] Find the median of three numbers\n\n4, 8, 10 [/INST] 8</s>"
  },
  {
    "text": "<s>[INST] Create your own sorting algorithm\n\n[3, 6, 4, 7, 1, 2] [/INST] def my_sort(arr):\n    length = len(arr) \n\tfor i in range(length): \n\t\tmin_ind = i \n\t\tfor j in range(i+1, length): \n\t\t\tif arr[ min_ind ] > arr[j]: \n\t\t\t\tmin_ind = j \n\t\tarr[i], arr[min_ind] = arr[min_ind], arr[i]\n\treturn arr</s>"
  },
  {
    "text": "<s>[INST] Calculate the reverse of a string\n\nHello World [/INST] dlroW olleH</s>"
  },
  {
    "text": "<s>[INST] Write a code to read each character of a string\n\nHello World [/INST] for i in range(len(string)): \n   print(string[i], end = \"\")</s>"
  },
  {
    "text": "<s>[INST] Define the difference between call by value and call by reference [/INST] Call by value: In this method, a copy of the actual argument is passed to the formal argument. Any change made to the formal argument does not affect the actual argument. \n\nCall by reference: In this method, a reference to the actual argument is passed to the formal argument. Any change made to the formal argument changes the value of actual argument.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to compare the values of two strings [/INST] if (string1 === string2) {\n    console.log(\"The strings are equal.\")\n} else {\n    console.log(\"The strings are not equal.\")\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a valid SQL query to select data from table 'user_accounts' [/INST] SELECT * FROM user_accounts;</s>"
  },
  {
    "text": "<s>[INST] Write a code to check if the content of two strings is the same\n\nHello, World!\nHello World! [/INST] if string1.replace(' ', '') == string2.replace(' ', ''):\n    print(\"The strings have the same content\")\nelse: \n    print(\"The strings do not have the same content\")</s>"
  },
  {
    "text": "<s>[INST] Construct a JSON object [/INST] {\n    \"name\": \"John Doe\",\n    \"age\": 24,\n    \"address\": \"123 Any Street, Anytown, USA\"\n}</s>"
  },
  {
    "text": "<s>[INST] Calculate the area of the triangle.\n\nBase: 8cm\nHeight: 5cm [/INST] The area of the triangle is 20 square centimeters.</s>"
  },
  {
    "text": "<s>[INST] Change the variable name of the given example to a lowercase variable.\n\nlet MyFavoriteMovie = 'The Matrix'; [/INST] let myFavoriteMovie = 'The Matrix';</s>"
  },
  {
    "text": "<s>[INST] Explain the importance and use of an algorithm in computing. [/INST] An algorithm is a step-by-step process that a computer can use to solve a problem or achieve a goal. Algorithms are essential to computing systems, as they provide methods for inputting, storing, interpreting, manipulating, and outputting data. Algorithms can process data with speed, accuracy, and reliability, and can be used for a variety of tasks including calculations, simulations, database manipulation, decision making, and artificial intelligence.</s>"
  },
  {
    "text": "<s>[INST] Create a for loop for printing out the numbers from 0 to 10. [/INST] for(let i = 0; i < 11; i++){ \n    console.log(i); \n}</s>"
  },
  {
    "text": "<s>[INST] Create an array with 10 integers and sort them in ascending order. [/INST] let array = [9,4,5,6,1,8,2,0,3,7]; \n  \narray.sort((a,b) => a-b); \nconsole.log(array);</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to display the first name and last name of all employees in the Employees table. [/INST] SELECT first_name, last_name\nFROM Employees;</s>"
  },
  {
    "text": "<s>[INST] What is the corresponding HTML tag for this sentence?\n\nI am bold [/INST] <b>I am bold</b></s>"
  },
  {
    "text": "<s>[INST] Create a CSS code to set the font-family of the content inside a div. [/INST] div { \n   font-family: 'roboto', sans-serif; \n}</s>"
  },
  {
    "text": "<s>[INST] Print the elements in the array backwards.\n\narr=[1,2,3,4,5] [/INST] let arr = [1,2,3,4,5]; \n\narr.reverse(); \nconsole.log(arr);</s>"
  },
  {
    "text": "<s>[INST] Compute the total number of days in a given year. [/INST] def get_total_days_in_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        # leap year\n        return 366\n    else:\n        # non leap year\n        return 365</s>"
  },
  {
    "text": "<s>[INST] Fill the gaps in the following code to send an email with an attachment.\n\nimport smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nfrom_address = ''\nto_address = ''\n\n# create message object instance\nmessage = MIMEMultipart()\n\n# setup the parameters of the message\nmessage['From'] = from_address\nmessage['To'] = to_address\nmessage['Subject'] = \"Testing\"\n\n# add in the message body\nmessage.attach(MIMEText('Hello world','plain'))\n\n# TODO: attach a pdf file\n\n# create server\nserver = smtplib.SMTP('smtp.gmail.com', 587)\n\n# TODO: start server\n\n# TODO: send mail\n\n# TODO: close the connection [/INST] import smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\nfrom email import encoders\n\nfrom_address = ''\nto_address = ''\n\n# create message object instance\nmessage = MIMEMultipart()\n\n# setup the parameters of the message\nmessage['From'] = from_address\nmessage['To'] = to_address\nmessage['Subject'] = \"Testing\"\n\n# add in the message body\nmessage.attach(MIMEText('Hello world','plain'))\n\n# attach a pdf file\nfilename = \"example_file.pdf\" \nattachment = open(filename, \"rb\") \n\npart = MIMEBase('application', 'octet-stream')\npart.set_payload((attachment).read())\nencoders.encode_base64(part)\npart.add_header('Content-Disposition', \"attachment; filename= %s\" % filename)\n\nmessage.attach(part)\n\n# create server\nserver = smtplib.SMTP('smtp.gmail.com', 587)\n\n# start server\nserver.starttls() \n  \n# Login \nserver.login(from_address, \"password\") \n  \n# send mail\nserver.sendmail(from_address, to_address, message.as_string()) \n\n# close the connection\nserver.quit()</s>"
  },
  {
    "text": "<s>[INST] Create a method to calculate the area of a circle, given its radius as argument. [/INST] def calculate_area_of_circle(r):\n    return 3.14 * (r**2)</s>"
  },
  {
    "text": "<s>[INST] Given an array and a target, write a program to search the target in the array and return the index.\n\narr = [5, 10, 20, 25, 30]\ntarget = 20 [/INST] def search_target_in_array(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1  # element not found</s>"
  },
  {
    "text": "<s>[INST] Suggest an algorithm to remove duplicates from an array. [/INST] def remove_duplicates(arr):\n    # Create a seen set\n    seen = set()\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If element is already seen, remove it\n        if arr[i] in seen:\n            del arr[i]\n        # Else add element to seen set\n        else:\n            seen.add(arr[i])\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to find the maximum number in an array without using the built-in max() function. [/INST] def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max</s>"
  },
  {
    "text": "<s>[INST] Write a function to rotate a matrix by 90 degrees. [/INST] def rotate_matrix(matrix):\n    m = len(matrix)\n    # Create a new matrix\n    new_matrix = [[0 for _ in range(m)] for _ in range(m)]\n    # Rotate the matrix\n    for i in range(m):\n        for j in range(m): \n            new_matrix[j][m - i - 1] = matrix[i][j]\n    # Return the rotated matrix\n    return new_matrix</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to find the longest common subsequence between two given sequences.\n\nsequence1 = [1, 5, 9, 3, 2]\nsequence2 = [8, 2, 5, 7] [/INST] function longestCommonSubsequence(sequence1, sequence2) {\n let dp = [];\n\n for(let i=0; i<=sequence1.length; i++) {\n  dp.push([]);\n  for(let j=0; j<=sequence2.length; j++) {\n   dp[i][j] = 0;\n  }\n }\n\n for(let i=1; i<=sequence1.length; i++) {\n  for(let j=1; j<=sequence2.length; j++) {\n   if(sequence1[i-1] == sequence2[j-1]) {\n    dp[i][j] =1+ dp[i-1][j-1];\n   }\n   else {\n    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n   }\n  }\n }\n return dp[sequence1.length][sequence2.length];\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to calculate the total count of customers in each city.\n\ncustomers: \n\nid  name  city\n1    John  Paris\n2    Adam   London\n3   David  Paris\n4    Mary  Tokyo\n5   Sarah  London [/INST] select city, count(*) as total_count \nfrom customers\ngroup by city;</s>"
  },
  {
    "text": "<s>[INST] Edit the following line of code in a Java program to calculate the sum of all elements in an array.\n\nint sum = 0;\nfor int i = 0; i < nums.length; i-- [/INST] int sum = 0;\nfor(int i = 0; i < nums.length; i++) {\n sum += nums[i];\n}</s>"
  },
  {
    "text": "<s>[INST] What is the Big O notation for the following algorithm?\n\nfunction add(x, y):\n  result = x + y\n  return result [/INST] O(1)</s>"
  },
  {
    "text": "<s>[INST] How do you import the math module in a Python program? [/INST] import math</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select the most recent 5 orders for each customer.\n\ncustomers: \n\nid  name  city\n1    John  Paris\n2    Adam   London\n3   David  Paris\n4    Mary  Tokyo\n\norders: \n\nid  customer_id   date\n1      1           2020-02-20\n2      1           2020-03-15\n3      2           2020-02-09\n4      2           2020-02-23\n5      3           2020-01-14\n6      3           2020-04-25\n7      4           2019-11-15\n8      4           2019-12-12 [/INST] SELECT o.*\nFROM orders o,\n     (SELECT customer_id, MAX(date) as last_date \n      FROM orders\n      GROUP BY customer_id) as last\nWHERE o.customer_id = last.customer_id\nAND o.date  >= (SELECT MAX(date) FROM orders WHERE customer_id = last.customer_id AND date < last.last_date)\nORDER BY o.customer_id, o.date DESC</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression to match a string that contains only a-z and 0-9 characters. [/INST] ^[a-z0-9]+$</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to generate all possible combinations of a given set of elements. [/INST] function getCombinations(array) {\n  let result = [];\n  for (let i = 0;i < array.length; i++) {\n    let current = array.splice(i, 1);\n    let tempArray = array.slice();\n    if (array.length > 1) {\n      let tempPermutations = getCombinations(tempArray);\n      tempPermutations.forEach(permutations => {\n        result.push(current.concat(permutations));\n      });\n    } else {\n      result.push(current.concat(array));\n    }\n    array.splice(i, 0, current[0]);\n  }\n  return result;\n}</s>"
  },
  {
    "text": "<s>[INST] How would you write a SQL query to select all customers who have placed more than two orders? [/INST] SELECT customers.*\nFROM customers\nWHERE EXISTS \n(SELECT COUNT(*)\n FROM orders\n WHERE orders.customer_id = customers_id\n HAVING COUNT(*) > 2);</s>"
  },
  {
    "text": "<s>[INST] Search in the API documentation to find all possible parameters that can be used with the API call. [/INST] The API contains the following parameters that can be used with the API call: \n- search queries\n- sorting criteria\n- filters\n- categories\n- limit\n- offset\n- user information\n- timestamp</s>"
  },
  {
    "text": "<s>[INST] Add error handling to the code snippet.\n\ndef calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum/len(numbers) [/INST] def calculate_average(numbers):\n    sum = 0\n    if len(numbers) == 0:\n        raise ValueError(\"list of numbers should not be empty\")\n    for number in numbers:\n        sum += number\n    try:\n        return sum/len(numbers)\n    except ZeroDivisionError:\n        print(\"division by 0 attempted\")</s>"
  },
  {
    "text": "<s>[INST] Use the given test data to debug the following code.\n\ndef check_odd_even(number):\n    if number % 2 == 0:\n        print(\"even\")\n    else:\n        print(\"odd\")\n\nTest data: \n1. number: 4 \n2. number: -7 [/INST] Test 1:\ncheck_odd_even(4)\n\nOutput:\n'even'\n\nTest 2:\ncheck_odd_even(-7)\n\nOutput:\n'odd'</s>"
  },
  {
    "text": "<s>[INST] Return a valid URL with the given parameters.\n\nDomain: example.com \n\nEndpoint: /api/v1/users\n\nParameters:\n\nid: 4\n\nname: Alex [/INST] The URL is:\nhttps://example.com/api/v1/users?id=4&name=Alex</s>"
  },
  {
    "text": "<s>[INST] Create a loop to print a sequence of numbers from 3 to 10 [/INST] for i in range(3, 11):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Find the Big O notation of the following code\n\ndef factorial(n):\n    answer = 1\n    for i in range(1, n+1):\n        answer *= i\n    return answer [/INST] The Big O notation of the given code is O(n).</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code in to a recursive function.\n\ndef calculate_fibonacci(n):\n    a, b = 0, 1\n    for i in range(1, n+1):\n        a, b = b, a + b\n    return a [/INST] def calculate_fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n\n    elif n == 0:\n        return 0\n\n    elif n == 1:\n        return 1\n\n    else:\n        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)</s>"
  },
  {
    "text": "<s>[INST] Find the bug in the following code.\n\ndef multiply(x, y):\n    z = 0\n    while y > 0:\n        y = y - 1\n        z = z + x\n    return z [/INST] The bug in the code is that the loop completion condition should be 'while y > 0' and should be changed to 'while y != 0' otherwise the code will enter into an infinite loop when y is negative.</s>"
  },
  {
    "text": "<s>[INST] Write an if statement to check whether an entered string is in lowercase [/INST] if string == string.lower():\n    print(\"The string is in lower case\")\nelse:\n    print(\"The string is not in lower case\")</s>"
  },
  {
    "text": "<s>[INST] Find the minimum element of an array.\n\narr = [5, 2, 7, 4, 9, 1] [/INST] min_elem = arr[0]\nfor elem in arr[1:]:\n    if elem < min_elem:\n        min_elem = elem\nprint(min_elem)</s>"
  },
  {
    "text": "<s>[INST] Create a function to add the corresponding values of two lists.\n\nlist1 = [3, 5, 2, 4]\nlist2 = [5, 4, 8, 7] [/INST] def add_values(list1, list2):\n    result_list = []\n    for i in range(len(list1)):\n        result_list.append(list1[i] + list2[i])\n    return result_list\n\nadd_values(list1, list2)</s>"
  },
  {
    "text": "<s>[INST] Using the given function, find the transpose of the given matrix.\n\nmatrix = [[2, 3, 4], [1, 5, 3]]\n\ndef transpose(arr): [/INST] def transpose(arr): \n    transposed_matrix = [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))] \n    return transposed_matrix\n\ntranspose(matrix)</s>"
  },
  {
    "text": "<s>[INST] Create a function to sort a given array using selection sort.\n\narr = [5, 8, 1, 7, 2, 10, 3] [/INST] def selection_sort(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Manipulate the spreadsheet with Python to identify duplicates in column A. [/INST] def find_duplicates(spreadsheet):\n    df = pd.read_excel(spreadsheet)\n    return df['A'][df['A'].duplicated(keep=False)]</s>"
  },
  {
    "text": "<s>[INST] Write a parser to convert an XML document to a dictionary. [/INST] from xml.etree.ElementTree import fromstring\n\ndef xml_to_dict(xml_string):\n    xml_dict = {}\n    root = fromstring(xml_string)\n    for element in root:\n        xml_dict[element.tag] = element.text\n    return xml_dict</s>"
  },
  {
    "text": "<s>[INST] Generate code to create a 3 x 3 matrix with values 1 to 9. [/INST] matrix = [[1,2,3], [4,5,6], [7,8,9]]</s>"
  },
  {
    "text": "<s>[INST] Design a program to compute the median of 3 integers. [/INST] def median(a,b,c):\n    if a >= b:\n        if c >= a:\n            return a\n        elif b >= c:\n            return b\n        else:\n            return c\n    else:\n        if c >= b:\n            return b\n        elif a >= c:\n            return a\n        else:\n            return c</s>"
  },
  {
    "text": "<s>[INST] Write code to print the prime numbers in a given range. [/INST] def is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n\ndef print_primes(start, end):\n    for i in range(start, end + 1):\n        if is_prime(i):\n            print(i)</s>"
  },
  {
    "text": "<s>[INST] Generate a sorted list of numbers in an array using insertion sort?\n\narr = [5, 8, 1, 7, 2, 10, 3] [/INST] def insertion_sort(arr):\n    for i in range(len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > key:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the length of the longest substring that does not contain duplicate characters.\n\nstring = \"abcabcefghijklmnop\" [/INST] def longest_substring(string):\n    seen = set()\n    start = 0\n    max_length = 0\n    for end in range(len(string)):\n        if string[end] in seen:\n            start = max(start, seen[string[end]] + 1)\n        seen.add(string[end])\n        max_length = max(max_length, end-start+1)\n    return max_length</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program that calculates the mean and median of an array of integer numbers.\n\n[1, 3, 5, 7, 9] [/INST] #include <iostream> \n#include <vector> \n#include <algorithm> \n\nusing namespace std;\n\nint main() {\n  vector<int> numbers = {1, 3, 5, 7, 9};\n  int sum = 0;\n  for (auto const& n: numbers)\n    sum += n;\n\n  double mean = sum/numbers.size();\n  double median;\n  if (numbers.size() % 2 == 0)\n    median = (numbers[numbers.size()/2] + numbers[numbers.size()/2 - 1])/2.0;\n  else\n    median = numbers[numbers.size()/2];\n\n  cout<<\"Mean: \"<<mean<<endl;\n  cout<<\"Median: \"<<median;\n\n  return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with text \"Hello, World!\" [/INST] <html>\n<head>\n   <title>Hello, World!</title>\n</head>\n<body>\n   <h1>Hello, World!</h1>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get a list of all the employees with a salary greater than $50,000. [/INST] SELECT * \nFROM Employees \nWHERE Salary > 50000;</s>"
  },
  {
    "text": "<s>[INST] Develop a Java program to rotate a two-dimensional array clockwise by 90 degrees.\n\n[[1, 2], \n [3, 4]] [/INST] public class RotateMatrix \n{  \n    public static void rotate(int[][] arr, int n) \n    {  \n        for (int x = 0; x < n/2; x++) \n        {     \n            for (int y = x; y < n-x-1; y++) \n            { \n                int temp = arr[x][y];  \n                arr[x][y] = arr[y][n-1-x];  \n                arr[y][n-1-x] = arr[n-1-x][n-1-y];  \n                arr[n-1-x][n-1-y] = arr[n-1-y][x];  \n                arr[n-1-y][x] = temp;  \n            }  \n        }  \n    }  \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to convert a binary string to a decimal number. [/INST] public class BinaryToDecimal { \n\n\tpublic static int binToDecimal(String binaryNumber)  \n\t{  \n\t\tint decimal = 0;  \n\t\tint power = 0;  \n\t\tfor(int i = binaryNumber.length() - 1; i >= 0; i--)  \n\t\t{   \n\t\t\tif (binaryNumber.charAt(i) == '1') \n\t\t\t\tdecimal += Math.pow(2, power); \n\t\t\tpower++; \n\t\t}  \n\t\treturn decimal;  \n\t}  \n\t\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to merge two arrays into a third array.\n\narr1 = [“a”, “b”]\narr2 = [1, 2] [/INST] let arr3 = [...arr1, ...arr2];\n\nconsole.log(arr3); // [\"a\", \"b\", 1, 2]</s>"
  },
  {
    "text": "<s>[INST] Develop a Python code to replace all occurrences of a specified phrase in a string.\n\nstring = \"This is a sample string. This has to be replaced.\"\nphrase = \"This\"\nnewString = \"That\" [/INST] string = string.replace(phrase, newString) \nprint(string) \n\n# Output: \nThat is a sample string. That has to be replaced.</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a table containing five columns and four rows. [/INST] <html>\n<head>\n   <title>Table with Columns and Rows</title>\n</head>\n<body>\n   <table>\n      <tr>\n         <th>Column 1</th>\n         <th>Column 2</th>\n         <th>Column 3</th>\n         <th>Column 4</th>\n         <th>Column 5</th>\n      </tr>\n      <tr>\n         <td>Cell 1</td>\n         <td>Cell 2</td>\n         <td>Cell 3</td>\n         <td>Cell 4</td>\n         <td>Cell 5</td>\n      </tr>\n      <tr>\n         <td>Cell 6</td>\n         <td>Cell 7</td>\n         <td>Cell 8</td>\n         <td>Cell 9</td>\n         <td>Cell 10</td>\n      </tr>\n      <tr>\n         <td>Cell 11</td>\n         <td>Cell 12</td>\n         <td>Cell 13</td>\n         <td>Cell 14</td>\n         <td>Cell 15</td>\n      </tr>\n   </table>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the employee ID, first name and last name of the all employees with the last name starting with 'G' [/INST] SELECT employee_id, first_name, last_name \nFROM employees \nWHERE last_name LIKE 'G%';</s>"
  },
  {
    "text": "<s>[INST] Create a CSS class called \"container\" which has a width of 960px and margin auto. [/INST] .container {\n    width: 960px;\n    margin: 0 auto;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the name, age and job title of all employees who are over 35 years old. [/INST] SELECT name, age, job_title \nFROM employees \nWHERE age > 35;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to check if two numbers are equal.\n\n3 and 5 [/INST] function areEqual(x, y){\n    if (x === y){\n        return true;\n    }\n    else{\n        return false;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java method that takes a string and returns a copy of the string with all lowercase letters replaced with uppercase letters.\n\nmixed case [/INST] public static String toUpperCase(String s) {\n    return s.toUpperCase();\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that has an input field and a button. When the button is clicked, the text from the input field should be printed to the console. [/INST] <html>\n  <head>\n  </head>\n  <body>\n    <input type=\"text\" id=\"myInput\">\n    <button onclick=\"printInput()\">Print Input</button>\n    \n    <script>\n      function printInput(){\n        const inputVal = document.getElementById(\"myInput\").value;\n        console.log(inputVal);\n      }\n    </script>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Java program to add two large numbers of any length.\n\n12345 and 54321 [/INST] public static String addTwoLargeNumbers(String num1, String num2) { \n    String result= \"\";\n  \n    // make sure num1 is negative and num2 is positive \n    if (compareNumSize(num1, num2) < 0) \n        return addTwoLargeNumbers(num2, num1); \n  \n    // variables to maintain the carry  \n    int carry = 0; \n  \n    // traverse from the end of both the strings \n    int num1_len = num1.length(), num2_len = num2.length(); \n    for (int i = num1_len - 1, j = num2_len - 1; i >= 0 || j >= 0;) { \n  \n        int n1 = i >= 0 ? num1.charAt(i) - '0' : 0; \n        int n2 = j >= 0 ? num2.charAt(j) - '0' : 0; \n  \n        int sum = (n1 + n2 + carry) % 10; \n        carry = (n1 + n2 + carry) / 10; \n  \n        result = sum + result; \n  \n        if (i >= 0) \n            i--; \n        if (j >= 0) \n            j--; \n    } \n  \n    // to add carry if carry exists \n    if (carry > 0) \n        result = carry + result; \n  \n    return result; \n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form which accepts an input string and returns the longest word in the string\n\nHello world! [/INST] <html>\n  <head>\n    <title>Longest word finder</title>\n    <script type=\"text/javascript\">\n      function longestWordFinder() {\n        // Get user input\n        const inputString = document.getElementById(\"inputString\").value;\n\n        // Split the input string into an array of words\n        let words = inputString.split(\" \");\n\n        // Iterate through the words array and find the longest word\n        let longestWord = words[0];\n        for (let i = 1; i < words.length; i++) {\n            if (words[i].length > longestWord.length)\n                longestWord = words[i];\n        }\n\n        // Display the result\n        document.getElementById(\"result\").innerHTML = longestWord;\n      } \n    </script>\n  </head>\n  <body>\n    <h1>Longest Word Finder</h1>\n    <input type=\"text\" id=\"inputString\" />\n    <button type=\"submit\" onclick=\"longestWordFinder()\">Submit</button>\n    <p>The longest word is: <span id=\"result\"></span></p>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that takes in an array as an argument and counts the occurrence of a given element\n\n[1, 2, 2, 4, 6], element=2 [/INST] function countOccurrence(arr, element) {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == element) {\n      count++;\n    }\n  }\n  return count;\n}\n\nlet arr = [1, 2, 2, 4, 6];\nlet element = 2;\nconsole.log(countOccurrence(arr, element)); // Output: 2</s>"
  },
  {
    "text": "<s>[INST] Implement a python function to return \"true\" if the string is a palindrome and \"false\" if it is not [/INST] def is_palindrome(s): \n    # Reversing string \n    rev = s[::-1] \n  \n    # Checking if reversed string is equal to  \n    # original string \n    if (s == rev): \n        return \"true\"\n    else: \n        return \"false\"</s>"
  },
  {
    "text": "<s>[INST] Generate a valid code to sum two given numbers [/INST] def sum_two_numbers(num1, num2):\n    return num1 + num2</s>"
  },
  {
    "text": "<s>[INST] Create a code to print each word of a sentence on a new line\n\nThis is a sentence. [/INST] def print_sentence(s):\n    words = s.split(' ')\n    for word in words:\n        print(word)\n        \ns = \"This is a sentence.\"\nprint_sentence(s)\n\n# Output:\n# This\n# is\n# a\n# sentence.</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to remove an item from a given list [/INST] def remove_item_from_list(my_list, item):\n    if item in my_list:\n        my_list.remove(item)\n    return my_list</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript code snippet to generate a random number between 0 and 100 [/INST] function getRandomNumberBetween0And100() {\n  return Math.floor(Math.random() * 101);\n}\n\nlet randomNumber = getRandomNumberBetween0And100();\nconsole.log(randomNumber);</s>"
  },
  {
    "text": "<s>[INST] Create a program to print the sum of all first 10 natural numbers. [/INST] def sum_first_ten_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum = sum + i\n    return sum\n\nprint(sum_first_ten_natural_numbers()) \n# Output: 55</s>"
  },
  {
    "text": "<s>[INST] Create a code to check if a number is an Armstrong number or not [/INST] def isArmstrongNumber(num):  \n    # initialize\n    sum_times_powers = 0\n    temp = num  \n  \n    while (temp != 0):  \n        # find remainder and get it\n        remainder = temp % 10 \n        sum_times_powers += remainder ** 3 \n        temp //= 10\n  \n    if (sum_times_powers == num):  \n        return True\n    else: \n        return False</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the first 10 records from a table called \"Employees\". [/INST] SELECT * FROM Employees LIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a table that displays the given data.\n\nDessert  | Calories\nChocolate Cake | 450\nIce Cream Sundae | 300\nDonut | 350 [/INST] <html>\n<head>\n  <title>Calorie Table</title>\n</head>\n<body>\n  <h1>Calorie Table</h1>\n  <table>\n    <thead>\n      <th>Dessert</th>\n      <th>Calories</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Chocolate Cake</td>\n        <td>450</td>\n      </tr>\n      <tr>\n        <td>Ice Cream Sundae</td>\n        <td>300</td>\n      </tr>\n      <tr>\n        <td>Donut</td>\n        <td>350</td>\n      </tr>\n    </tbody>\n  </table>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Using the Java stream API, create a program that takes a list of integers and returns the number that appears most often in the list.\n\n[1, 3, 3, 3, 4, 5, 5, 5, 6] [/INST] import java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Solution {\n\n  public static int getMostFrequentNumber(List<Integer> list) {\n    return list.stream()\n        .collect(Collectors.groupingBy(Integer::intValue, Collectors.counting()))\n        .entrySet().stream()\n        .max(Map.Entry.comparingByValue())\n        .get().getKey();\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm using JavaScript that finds the largest number in an array.\n\n[1, 7, 4, 11, 18] [/INST] function findLargestNumber(nums) {\n    let largest = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] > largest) {\n            largest = nums[i];\n        }\n    }\n    return largest;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java that takes two arguments, a name of type String and an id of type int. [/INST] public class Person {\n  private String name;\n  private int id;\n\n  public Person(String name, int id) {\n    this.name = name;\n    this.id = id;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public int getId() {\n    return id;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select the name and email of employees with an id in the range [10, 20]. [/INST] SELECT name, email FROM Employees WHERE id BETWEEN 10 AND 20;</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a form to sign up for a newsletter. [/INST] <html>\n<head>\n  <title>Newsletter Sign Up</title>\n</head>\n<body>\n  <form action=\"submit.html\" method=\"POST\">\n    <h1>Newsletter Sign Up</h1>\n    Name: <input type=\"text\" name=\"name\"><br>\n    Email: <input type=\"email\" name=\"email\"><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Using the MapReduce programming model, calculate the total number of purchases in a given dataset. [/INST] def purchaseMapper(purchase):\n  return (purchase.entity_id, 1)\n\ndef purchaseReducer(entity, purchases):\n  return (entity, sum(purchases))</s>"
  },
  {
    "text": "<s>[INST] Write an algorithmic query in SQL to find the number of days since each employee joined the organization. [/INST] SELECT name, DATEDIFF(NOW(), date_joined) AS days_since_joining FROM Employees;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program to toggle a boolean value. [/INST] function toggleBoolean(val) {\n  return !val\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that displays a table of the 10 most visited countries.\n\nCountry | Number of Visitors\nUnited States| 206 million\nChina | 61 million\nSpain | 82 million\nUnited Kingdom | 37 million\nGermany | 37 million\nFrance | 86 million\nItaly | 58 million\nTurkey | 39 million\nJapan | 28 million\nRussia | 28 million [/INST] <html>\n<head>\n  <title>Top 10 Visited Countries</title>\n</head>\n<body>\n  <h1>Top 10 Visited Countries</h1>\n  <table>\n    <thead>\n      <th>Country</th>\n      <th>Number of Visitors</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>United States</td>\n        <td>206 million</td>\n      </tr>\n      <tr>\n        <td>China</td>\n        <td>61 million</td>\n      </tr>\n      <tr>\n        <td>Spain</td>\n        <td>82 million</td>\n      </tr>\n      <tr>\n        <td>United Kingdom</td>\n        <td>37 million</td>\n      </tr>\n      <tr>\n        <td>Germany</td>\n        <td>37 million</td>\n      </tr>\n      <tr>\n        <td>France</td>\n        <td>86 million</td>\n      </tr>\n      <tr>\n        <td>Italy</td>\n        <td>58 million</td>\n      </tr>\n      <tr>\n        <td>Turkey</td>\n        <td>39 million</td>\n      </tr>\n      <tr>\n        <td>Japan</td>\n        <td>28 million</td>\n      </tr>\n      <tr>\n        <td>Russia</td>\n        <td>28 million</td>\n      </tr>\n    </tbody>\n  </table>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Describe what the following C++ code does.\n\nint val = 0, sum = 0;\n\nfor (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) {\n    val = arr[i] * i;\n    sum += val; [/INST] This C++ code iterates through an array of values and calculates the sum of each value multiplied by its index in the array. So for the array [1,2,3], the value 0 would be multiplied by index 0, and the value 1 would be multiplied by index 1, and the value 3 would be multiplied by index 2. This loop would then produce the result of 0 + 2 + 6, which is 8.</s>"
  },
  {
    "text": "<s>[INST] Fix the following JavaScript bug.\n\nfunction helloWorld() {\n  console.log('Hello' + 'World') [/INST] function helloWorld() {\n  console.log('Hello' + ' ' + 'World')</s>"
  },
  {
    "text": "<s>[INST] Explain why the following CSS element is not displaying correctly.\n\n<div class=\"container\">\n  <div class=\"my-element\" style=\"position: absolute;></div>\n</div> [/INST] The \"my-element\" element is not displaying correctly because it is positioned absolutely, which removes it from the normal flow of the document. As a result, its containing \"container\" is not aware of the element's size and is unable to accurately position it. In order to fix this issue, the \"position\" value should be changed to \"relative\" or \"static\" to render the element correctly within its container.</s>"
  },
  {
    "text": "<s>[INST] Code a HTML form that collects the user's first name, last name, age, email address and an optional message. [/INST] <form>\n  <input type=\"text\" name=\"first_name\" placeholder=\"First name\">\n  <input type=\"text\" name=\"last_name\" placeholder=\"Last name\">\n  <input type=\"number\" name=\"age\" placeholder=\"Age\">\n  <input type=\"email\" name=\"email\" placeholder=\"Email address\">\n  <textarea name=\"message\" placeholder=\"Optional message\"></textarea>\n  <input type=\"submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a function that creates a random 4 digit pin using the following criteria: [/INST] def generate_pin():\n    import random\n    numbers = [str(i) for i in range(10)]\n    random.shuffle(numbers)\n    return \"\".join(numbers[:4])</s>"
  },
  {
    "text": "<s>[INST] Create a Python script that takes a list of numbers as an argument and returns the maximum number in the list.\n\nnumbers = [8, 1, 2, 3, 4, 5, 6, 7] [/INST] def maximum_number(numbers):\n    max_number = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_num:\n            max_number = numbers[i]\n    \n    return max_number\n\nmax_number = maximum_number(numbers)\nprint(max_number) # 8</s>"
  },
  {
    "text": "<s>[INST] Design and code a HTML table that displays a list of students. [/INST] <table>\n  <thead>\n    <tr>\n      <th>Student Name</th>\n      <th>Student ID</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>John Smith</td>\n      <td>12345</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <td>Mary Jones</td>\n      <td>45678</td>\n      <td>Sophomore</td>\n    </tr>\n  </tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Assign a variable 'name' with a value of your choice in JavaScript. [/INST] let name = \"John\";</s>"
  },
  {
    "text": "<s>[INST] Generate a random 8 character password using the following conditions: [/INST] import random\nimport string\n\ndef generatePassword():\n    chars = string.ascii_letters + string.digits + '!@#$%^&*/.:?|'\n    size = 8\n    random_string = \"\".join(random.choice(chars) for _ in range(size))\n    return random_string\n\nrandom_password = generatePassword()\nprint(random_password) # qr6.h^37</s>"
  },
  {
    "text": "<s>[INST] Code a for loop to print out the multiplication table of a given number.\n\nnumber = 5 [/INST] for i in range(1, 11):\n    print('{} x {} = {}'.format(number, i, number*i))\n\n# Output\n# 5 x 1 = 5\n# 5 x 2 = 10\n# 5 x 3 = 15\n# 5 x 4 = 20\n# 5 x 5 = 25\n# 5 x 6 = 30\n# 5 x 7 = 35\n# 5 x 8 = 40\n# 5 x 9 = 45\n# 5 x 10 = 50</s>"
  },
  {
    "text": "<s>[INST] Edit the following PHP code to add a custom header to the response.\n\n<?php\n  header(\"Content-Type: application/json\");\n  echo json_encode($data);\n?> [/INST] <?php\n  header(\"Content-Type: application/json\");\n  header(\"X-Custom-Header: Custom Value\");\n  echo json_encode($data);\n?></s>"
  },
  {
    "text": "<s>[INST] Create a while loop in Python to print all odd numbers between two numbers A and B (both inclusive). [/INST] a = int(input(\"Enter lower range: \"))\nb = int(input(\"Enter upper range: \"))\n\nwhile a <= b: \n    if a % 2 != 0: \n        print(a) \n    a += 1</s>"
  },
  {
    "text": "<s>[INST] Generate a list of prime numbers between two numbers A and B (both inclusive). [/INST] def generate_primes(lower, upper): \n    prime_numbers = [] \n    for num in range(lower, upper + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_numbers.append(num) \n    return prime_numbers</s>"
  },
  {
    "text": "<s>[INST] Develop a classifier in Python to predict the language of a given text. [/INST] import nltk\n\nclass LanguageClassifier(object):\n\t\n    def __init__(self):\n        self.languages = []\n\t\n    def train(self, data):\n        train_sents = []\n        train_tags = []\n\n        # extract sentences and tags from data\n        for lang, sentences in data.items():\n            self.languages.append(lang)\n            train_sents.extend(sentences)\n            train_tags.extend([lang] * len(sentences))\n\n        # build featureset\n        feature_set = []\n        for (words, lang) in zip(train_sents, train_tags):\n            words_dict = dict([(word, True) for word in words])\n            feature_set.append((words_dict, lang))\n\t\n        # train classifier\n        self.classifier = nltk.NaiveBayesClassifier.train(feature_set)\n\n    def predict(self, sentence):\n        words_dict = dict([(word, True) for word in sentence])\n        return self.classifier.classify(words_dict)</s>"
  },
  {
    "text": "<s>[INST] Generate a function to sort a 2-dimensional list in Python by the values of the second element in each sublist. [/INST] def sort_by_second_element(lst): \n    lst.sort(key = lambda x: x[1]) \n    return lst</s>"
  },
  {
    "text": "<s>[INST] Take the following algorithm and turn it into a Python program. [/INST] # Function to calculate \n# maximum number of edges \n# that can be added \n# to a graph without cycles \ndef max_edges(total_nodes): \n\t# initialize result to 0 \n\tresult = 0 \n\t\n\t# consider every pair of nodes \n\tfor i in range(total_nodes): \n\t\tfor j in range(i + 1, total_nodes): \n\t\t\tresult += 1  \n\t\t\n\t# return the result \n\treturn result</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following in-place insertion sort algorithm in Java. [/INST] public class InsertionSort { \n\tpublic static void inplaceInsertionSort(int[] array) { \n\t\t// Iterate over array elements \n\t\tfor (int i = 1; i < array.length; i++) { \n\t\t\tint value = array[i]; \n\t\t\tint j = i; \n\t\t\t// Check whether the adjacent element in \n\t\t\t// left side is greater or not \n\t\t\twhile (j > 0 && array[j - 1] > value) { \n\t\t\t\t// shifting the elements \n\t\t\t\tarray[j] = array[j - 1]; \n\t\t\t\tj--; \n\t\t\t} \n\t\t\t// moving the element in right side \n\t\t\tarray[j] = value; \n\t\t} \n\t} \n\t// Driver Code \n\tpublic static void main(String[] args) { \n\t\tint[] arr = { 20, 12, 10, 15, 2 }; \n\t\tinplaceInsertionSort(arr); \n\t\tfor (int i : arr) { \n\t\t\tSystem.out.print(i + \" \"); \n\t\t} \n\n\t}</s>"
  },
  {
    "text": "<s>[INST] Find the kth smallest element in an array. The array consists of integers only and the size of the array is given. [/INST] def kthSmallest(arr, k): \n\t# Sort the given array \n\tarr.sort() \n\n\t# Return k'th element in  \n\t# the sorted array \n\treturn arr[k-1]</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm to find the greatest common factor (GCF) of two numbers in Python. [/INST] def gcf(a,b):\n    if a == 0 :\n        return b \n    return gcf(b % a, a)</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following python program to convert UTC time to local time.\n\nfrom datetime import datetime, timedelta\n\nutc_time = datetime.utcnow() [/INST] from datetime import datetime, timedelta \nimport time \n\nutc_time = datetime.utcnow()\nlocal_time = time.localtime(time.mktime(utc_time.timetuple())) \n\nprint(\"Local time: \", local_time)</s>"
  },
  {
    "text": "<s>[INST] Construct a network to recognize handwritten digits using a convolutional neural network in TensorFlow. [/INST] import tensorflow as tf\nfrom tensorflow import keras \n\n# create a model\nmodel = keras.Sequential()\n\n# add a convolutional layer\nmodel.add(keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)))\n\n# add a max pooling layer\nmodel.add(keras.layers.MaxPool2D((2,2)))\n\n# add a flatten layer\nmodel.add(keras.layers.Flatten())\n\n# add a Dense layer\nmodel.add(keras.layers.Dense(128, activation='relu'))\n\n# add second Dense layer\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])</s>"
  },
  {
    "text": "<s>[INST] Develop a function to calculate the mean of a set of numbers in C#. [/INST] public static double mean(params int[] numbers)\n{\n    double result = 0;\n    foreach(int number in numbers)\n    {\n        result += number;\n    }\n    return result/numbers.Length;\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a condition for including an element in an array. [/INST] array.push(element) if element satisfies a certain condition, such as element.value === 5;</s>"
  },
  {
    "text": "<s>[INST] Implement a function for calculating the total number of digits in a number. [/INST] public int numDigits(int number) {\n    int digits = 0;\n    while (number > 0) {\n        number /= 10;\n        ++digits;\n    }\n    return digits;\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a code for removing the first element from an array. [/INST] arr.splice(0, 1);</s>"
  },
  {
    "text": "<s>[INST] Write a script in JavaScript for reversing an array. [/INST] const reverseArray = arr => \n    arr.slice().reverse();</s>"
  },
  {
    "text": "<s>[INST] Suggest a loop in JavaScript for traversing an array of objects. [/INST] for (let obj of array) {\n  // Your loop code here\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest code for finding the maximum element in a Python dictionary. [/INST] key_max = max(map_dictionary.keys(), key=(lambda k: map_dictionary[k])) \nval_max = map_dictionary[key_max]</s>"
  },
  {
    "text": "<s>[INST] Suggest a function in JavaScript for repeating a given string a specified number of times. [/INST] const repeat = (str, n) => \n    Array(n).fill(str).join('');</s>"
  },
  {
    "text": "<s>[INST] Suggest a statement for deleting an element from an array at a given index. [/INST] array.splice(index, 1);</s>"
  },
  {
    "text": "<s>[INST] How can you replace a specific element from an array in JavaScript? [/INST] The element can be replaced in JavaScript by using the Array.prototype.fill() method. \n\nFor example:\narr.fill(value, start, end); \n// start is the index of the first element to be replaced, end is the index of the last element to be replaced.</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to remove duplicate characters from a string in JavaScript. [/INST] The Set data structure can be used to remove duplicate characters from a string in JavaScript. \n\nFor example:\n[...new Set(\"string\")].join(\"\"); // returns \"strng\"</s>"
  },
  {
    "text": "<s>[INST] Write a script in PHP for converting a string to lowercase. [/INST] <?php\n  $string = \"STRING\";\n  $string = strtolower($string);\n  echo($string); \n  // output: string\n?></s>"
  },
  {
    "text": "<s>[INST] Write a script for reversing the order of alphabets in a string in Python. [/INST] def reverseAlphabets(string): \n    string = ''.join(reversed(string)) \n    return string \n \nstring = \"string\"\nprint(reverseAlphabets(string)) # Output: gnirts</s>"
  },
  {
    "text": "<s>[INST] Write a Python script for checking if a given number is an even or odd number. [/INST] \"\"\"\nCheck a given number is even or odd\n\"\"\"\ndef check_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number to check : \"))\n    print(\"The given number is\",check_even_or_odd(num))</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to list all the cars in the database with the make, model, and year. [/INST] SELECT make, model, year FROM cars;</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to get the sum of the items sold from the orders table. [/INST] SELECT SUM(quantity) FROM orders;</s>"
  },
  {
    "text": "<s>[INST] Create an array in JavaScript of 10 numbers ranging from 1 to 100. [/INST] // Create an array of 10 numbers ranging from 1 to 100\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\narray = array.map(num => num * 10);\nconsole.log(array); // [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]</s>"
  },
  {
    "text": "<s>[INST] Write a code to get the user input for two numbers and print the sum of the two numbers. [/INST] # Get user input for two numbers\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\n# Print the sum of the two numbers\nprint(\"The sum of the two numbers is:\", num1 + num2)</s>"
  },
  {
    "text": "<s>[INST] What is the syntax for declaring a constant in Java? [/INST] In Java, the syntax for declaring a constant is \n\npublic static final <data-type> <constant-name> = <value>;</s>"
  },
  {
    "text": "<s>[INST] Output the number of items in a hashmap with key-value pairs [\"Mon\", \"Monday\"], [\"Tue\", \"Tuesday\"], and [\"Wed\", \"Wednesday\"]. [/INST] //Create a hashmap\nHashMap<String, String> map = new HashMap<String, String>();\nmap.put(\"Mon\", \"Monday\");\nmap.put(\"Tue\", \"Tuesday\");\nmap.put(\"Wed\", \"Wednesday\");\n\n// Output the number of items in the hashmap\nSystem.out.println(\"Number of items in the hashmap: \" + map.size());  // Outputs 3</s>"
  },
  {
    "text": "<s>[INST] Write a code to get all the records from the users table with role \"admin\". [/INST] SELECT * FROM users WHERE role = 'admin';</s>"
  },
  {
    "text": "<s>[INST] What are three methods to reverse a string in JavaScript? [/INST] Three methods to reverse a string in JavaScript are: \n1. Using the reverse() method \n2. Using a for loop \n3. Using the split() and join() methods</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to get the average of all the prices in the products table. [/INST] SELECT AVG(price) FROM products;</s>"
  },
  {
    "text": "<s>[INST] Write a code in Ruby to find the area of a circle with radius 10. [/INST] # Define PI \nPI = 3.1415\n\n# Calculate the area of a circle with radius 10\narea = PI * 10**2\n\n# Print the area\nputs \"The area of the circle is #{area}\"</s>"
  },
  {
    "text": "<s>[INST] Edit the following Java program to output the sum of the two numbers.\n\nint firstnum = 5;\nint secondnum = 10; [/INST] int firstnum = 5;\nint secondnum = 10;\n\nint sum = firstnum + secondnum;\nSystem.out.println(\"The sum of the two numbers is: \" + sum);</s>"
  },
  {
    "text": "<s>[INST] Create an array of strings in Java. [/INST] String[] myArray = {\"Hello\", \"World\", \"Foo\", \"Bar\"};</s>"
  },
  {
    "text": "<s>[INST] Using JavaScript, create a function that takes two arguments and returns the greater one. [/INST] function getGreater(num1, num2) {\n return Math.max(num1, num2);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to change the font color of the h1 element to green. [/INST] h1 {\n  color: green;\n}</s>"
  },
  {
    "text": "<s>[INST] Using Java, create a method that takes an array of integers and returns the maximum value. [/INST] public static int getMaxValue(int[] array) {\n  int maxValue = array[0];\n  for(int i=1; i < array.length; i++) {\n    if(array[i] > maxValue)\n      maxValue = array[i];\n  }\n  return maxValue;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all Colleges from the table \"Universities\" whose enrollment is higher than 10,000 students. [/INST] SELECT Name \nFROM Universities \nWHERE Enrollment > 10000;</s>"
  },
  {
    "text": "<s>[INST] Convert the following JSON data to an HTML table.\n\n{\n  \"fruit\": [\"apple\", \"banana\", \"orange\"],\n  \"vegetable\": [\"potato\", \"carrot\", \"onion\"]\n} [/INST] <table>\n  <tr>\n    <th>Fruit</th>\n    <th>Vegetable</th>\n  </tr>\n  <tr>\n    <td>apple</td>\n    <td>potato</td>\n  </tr>\n  <tr>\n    <td>banana</td>\n    <td>carrot</td>\n  </tr>\n  <tr>\n    <td>orange</td>\n    <td>onion</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of using variable names in program code. [/INST] Variable names are used in programming code to identify specific pieces of data and make it easier to access and manipulate. They provide a concise way to reference a specific value, making the code more readable and understandable for other programmers.</s>"
  },
  {
    "text": "<s>[INST] Develop a function to remove the given string from another string.\n\nString to remove: \"cat\"\nString to modify: \"The crazy cat jumped to the roof\" [/INST] def remove_string(remove, string):\n    return string.replace(remove, \"\")\n\nremove_string(\"cat\", \"The crazy cat jumped to the roof\")\n# Output: \"The crazy  jumped to the roof\"</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of tokenization in relation to natural language processing. [/INST] Tokenization is the process of breaking down a given sentence or text into smaller chunks known as tokens. This is an important step in natural language processing as it allows for further processing such as stemming, part of speech tagging, sentiment analysis, etc. For example, tokenization can break a sentence \"The young cat jumped onto the fence\" into [\"The\", \"young\", \"cat\", \"jumped\", \"onto\", \"the\", \"fence\"].</s>"
  },
  {
    "text": "<s>[INST] Write a block of code to convert a given string to upper case.\n\nString to convert: \"The Quick Brown Fox Jumped\" [/INST] string = \"The Quick Brown Fox Jumped\"\n\nconverted_string = string.upper()\n\nprint(converted_string)  # Output: THE QUICK BROWN FOX JUMPED</s>"
  },
  {
    "text": "<s>[INST] Develop a program to generate the Fibonacci sequence up to n. [/INST] def fibonacci(n):\n    fib_sequence = [1, 1]\n\n    for i in range(2, n):\n        new_num = fib_sequence[i-2] + fib_sequence[i-1]\n        fib_sequence.append(new_num)\n\n    return fib_sequence\n\nfibonacci(10) # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of try and except blocks when writing code. [/INST] Try and except blocks are used in Python to catch and handle errors in code. The basic structure of a try-except block is a try statement followed by one or more except statements. The try block includes code that may throw an error and the except block includes code that will be executed if an error is thrown. This is useful for code that needs to handle any potential errors that may arise from its execution.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose behind using comments while writing code? [/INST] Comments are used while writing code to explain the logic and purpose behind the code. This is important for multiple reasons, such as helping other developers better understand the code and providing helpful reminders for developers returning to the code at a later time. Additionally, good comments make it easier to debug and maintain the code.</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code to create a navigation bar with 3 links. [/INST] <nav>\n <ul>\n  <li><a href=\"#\">Link 1</a></li>\n  <li><a href=\"#\">Link 2</a></li>\n  <li><a href=\"#\">Link 3</a></li>\n </ul>\n</nav></s>"
  },
  {
    "text": "<s>[INST] Implement an iterator in Python for the following string.\n\nstring = 'Hello World!' [/INST] class Iterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\niterator = Iterator(string)\nfor char in iterator:\n    print(char)</s>"
  },
  {
    "text": "<s>[INST] Write a Java program that takes the following input parameters and prints their sum to the console.\n\nint a = 2; int b = 4; [/INST] public class Sum {\n public static void main(String[] args) {\n  int a = 2;\n  int b = 4;\n  \n  int sum = a + b;\n  System.out.println(\"Sum = \" + sum);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] How can a string be converted to a list in Python? [/INST] A string can be converted to a list in Python by using the list() function. The syntax for this is: \n\nlist(string);\n\nFor example, to convert the string \"apple\" to a list, you would use: \n\nlist(\"apple\");</s>"
  },
  {
    "text": "<s>[INST] Create a function to print a Diamond shape.\n\nSize: 5 [/INST] def print_diamond(size):\n    for i in range(1, size + 1):\n        print(\" \" * (size - i) + \"*\" * (2 * i - 1))\n    for i in range(size - 1, 0, -1):\n        print(\" \" * (size - i) + \"*\" * (2 * i - 1))</s>"
  },
  {
    "text": "<s>[INST] Compute the Fibonacci sequence upto n. [/INST] def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)</s>"
  },
  {
    "text": "<s>[INST] What is static typing in programming? [/INST] Static typing is a type of type system where the type of each variable is determined at compile-time instead of at runtime. This means that the variables and their types are checked at compile-time of the program and any type mismatch will result in an error. This leads to better performance as it prevents runtime errors due to type mismatch and also makes the code more readable.</s>"
  },
  {
    "text": "<s>[INST] Create a function to append a new element to a list. [/INST] def append_list(my_list, new_element):\n    my_list.append(new_element)\n    return my_list</s>"
  },
  {
    "text": "<s>[INST] Identify which is the given data type\n\nData: [1,2,3] [/INST] The given data is a list.</s>"
  },
  {
    "text": "<s>[INST] Rewrite this function using a recursive algorithm.\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result [/INST] def factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)</s>"
  },
  {
    "text": "<s>[INST] Create an expression tree for the expression (2+3)*4. [/INST] *\n        / \\\n       +   4\n      / \\\n     2   3</s>"
  },
  {
    "text": "<s>[INST] Compile a piece of code written in Python language. [/INST] python -c \"import py_compile; py_compile.compile('foo.py')\"</s>"
  },
  {
    "text": "<s>[INST] Analyze this code for potential runtime errors.\n\ndef factorial(n):\n    result = 1\n    if n >= 0:\n        for i in n:\n            result *= i\n        return result [/INST] This code may result in a runtime error because an iterable is expected as an argument for the for loop, but the argument passed is a number rather than an iterable. Additionally, the if-statement does not have an else block making it possible for the function to return None instead of a number. To fix the code, the argument passing to the for loop should be changed to range(n) and the if-statement should have an else block that returns 1 if n is smaller than 0.</s>"
  },
  {
    "text": "<s>[INST] Write a code to implement an LRU (Least Recently Used) cache. [/INST] class LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.lru = list()\n           \n    # get an item from the cache and update its timestamp\n    def get(self, key):\n        if key in self.cache:\n            self.lru.remove(key)\n            self.lru.append(key)\n            return self.cache[key]\n        else:\n            return -1\n             \n    # add a new item to the cache, discard the least recently used item if cache is full \n    def put(self, key, value):\n        if len(self.cache) >= self.capacity:\n            self.cache.pop(self.lru[0])\n            self.lru.pop(0)\n        if key in self.cache: \n            self.lru.remove(key)\n        self.cache[key] = value\n        self.lru.append(key)</s>"
  },
  {
    "text": "<s>[INST] Implement a method to sort a list of numbers using the quick sort algorithm.\n\n[10, 3, 9, -2, 8, 7] [/INST] def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)</s>"
  },
  {
    "text": "<s>[INST] Design a function to remove all duplicate words from a sentence.\n\n\"This is this is a sentence with with repeats repeats\" [/INST] def removeDuplicates(txt):\n    newTxt = []\n    txt = txt.split()\n\n    for x in txt:\n        if x not in newTxt:\n            newTxt.append(x)\n\n    return \" \".join(newTxt)</s>"
  },
  {
    "text": "<s>[INST] Create a function to parse and print the date in DD-MM-YYYY format.\n\ndate_string = '01 Jan 2018' [/INST] def parseDate(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\n    return day + \"-\" + month + \"-\" + year</s>"
  },
  {
    "text": "<s>[INST] Write a function to classify a news article by its tone. [/INST] def classifyArticle(article):\n    tone_dict = {\n        'positive': 0,\n        'neutral': 0,\n        'negative': 0\n    }\n    for token in article:\n        if token in pos_words:\n            tone_dict['positive'] += 1\n        elif token in neg_words:\n            tone_dict['negative'] += 1\n        else:\n            tone_dict['neutral'] += 1\n\n    sorted_tones = sorted(tone_dict.items(), key=lambda x:x[1], reverse=True)\n    return sorted_tones[0][0]</s>"
  },
  {
    "text": "<s>[INST] Implement a stack data structure using linked lists. [/INST] class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass Stack:\n\tdef __init__(self):\n\t\tself.head = None\n\t\tself.num_elements = 0\n\n\tdef push(self, element):\n\t\tnew_node = Node(element)\n\t\tif self.head == None:\n\t\t\tself.head = new_node\n\t\telse:\n\t\t\tnew_node.next = self.head\n\t\t\tself.head = new_node\n\t\tself.num_elements += 1\n\t\t\n\tdef pop(self):\n\t\tif self.is_empty():\n\t\t\treturn None\n\t\ttemp = self.head\n\t\tself.head = self.head.next\n\t\tself.num_elements -= 1\n\t\treturn temp.data\n\n\tdef is_empty(self):\n\t\tif self.num_elements == 0:\n\t\t\treturn True\n\t\treturn False\n\n\tdef top(self):\n\t\tif self.head:\n\t\t\treturn self.head.data\n\t\treturn None</s>"
  },
  {
    "text": "<s>[INST] Create a function called ask_age() that prints \"What is your age?\" and also returns the users input. [/INST] def ask_age(): \n    print('What is your age?')\n    age = input()\n    return age</s>"
  },
  {
    "text": "<s>[INST] Create a simple program to sort an array of integers from smallest to largest.\n\n[7,3,1,9,2] [/INST] def sort_array(arr):\n    arr.sort()\n    return arr \n\nresult = sort_array([7,3,1,9,2])\nprint(result)\n\n# Output: [1,2,3,7,9]</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, create a function that finds the two elements that sum to a given target number.\n\nnums = [2, 45, 7, 9, 15]\ntarget = 16 [/INST] def two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n\nresult = two_sum(nums, target)\nprint(result) \n\n# Output: [2, 3]</s>"
  },
  {
    "text": "<s>[INST] Explain what a linked list is and what operations can you perform on it. [/INST] A linked list is a linear data structure consisting of a sequence of nodes, where each node contains a data element and a pointer to the next node. Operations that can be performed on a linked list include insertion, deletion, traversal, and searching.</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm to find the number of occurrences of a substring in a string.\n\nstring = \"This is a test\"\nsubstring = \"is\" [/INST] def count_substring(string, substring):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\nresult = count_substring(string, substring)\nprint(result)\n\n# Output: 2</s>"
  },
  {
    "text": "<s>[INST] Given a string and an index, create a function to return the character at the given index in the string.\n\nstring = \"Hello\"\nindex = 3 [/INST] def get_char(string, index):\n    return string[index]\n\nresult = get_char(string, index)\nprint(result)\n\n# Output: l</s>"
  },
  {
    "text": "<s>[INST] Given the following HTML code, add a class attribute to the <nav> element:\n\n<nav>\n    <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/about/\">About</a></li>\n        <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n</nav> [/INST] <nav class=\"main-nav\">\n    <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/about/\">About</a></li>\n        <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n</nav></s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to extract all the \"first_name\" and \"last_name\" columns from the \"students\" table. [/INST] SELECT first_name, last_name\nFROM students;</s>"
  },
  {
    "text": "<s>[INST] Print the first 10 Fibonacci numbers using a loop. [/INST] a, b = 0, 1\nfor i in range(10):\n    print(a)\n    a, b = b, a + b</s>"
  },
  {
    "text": "<s>[INST] Create a HTML web page with four different headings. [/INST] <html>\n<head>\n    <title>Headings Page</title>\n</head>\n<body>\n    <h1>Heading 1</h1>\n    <h2>Heading 2</h2>\n    <h3>Heading 3</h3>\n    <h4>Heading 4</h4>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Identify the type of join used in the following SQL query:\n\nSELECT *\nFROM orders\nJOIN customers\nON orders.customer_id = customer.id [/INST] This is an inner join which is used to select rows from two or more related tables. The join allows rows from both tables to be retrieved if the two rows share a common value in the joined columns.</s>"
  },
  {
    "text": "<s>[INST] Determine the output of the following JavaScript code when x = 2:\n\nx = 2\nif (x < 0) {\n    console.log('x is negative');\n} else if (x > 0) {\n    console.log('x is positive');\n} else {\n    console.log('x is zero');\n} [/INST] x is positive</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that takes three parameters: a number, a sign, and another number. The function should use the sign to determine which arithmetic operation it should perform and output the result. [/INST] function calculate(num1, operator, num2) {\n    switch (operator) {\n        case '+':\n            return num1 + num2\n        case '-':\n            return num1 - num2\n        case '*':\n            return num1 * num2\n        case '/':\n            return num1 / num2\n        default:\n            return 'Operation invalid'\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a CSS style sheet to set font size of all headings to 20px, font weight to bold and color to blue. [/INST] h1, h2, h3, h4, h5, h6 {\n    font-size: 20px;\n    font-weight: bold;\n    color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet that will add two numbers. [/INST] let num1 = 5;\nlet num2 = 8; \nlet sum = num1 + num2;\nconsole.log(sum);</s>"
  },
  {
    "text": "<s>[INST] Given 3 lists a, b, and c, write a Python code to calculate the dot product of a and b and store the result in c.\n\na = [3, 4, 5] \nb = [6, 7, 8]\nc = [] [/INST] def dot_product(a, b, c):\n    if len(a) != len(b):\n        raise ValueError(\"Length of Lists cannot differ\")\n    dp = 0\n    for i in range(len(a)):\n        dp += a[i]*b[i]\n    c.append(dp)</s>"
  },
  {
    "text": "<s>[INST] Write a code to multiply two matrices, assuming the two matrices can be multiplied.\n\nA = [[1, 2], [3, 4]] \nB = [[5, 6], [7, 8]] [/INST] def multiply_matrices(A, B):\n    if len(A[0]) != len(B):\n        raise ValueError(\"Matrices cannot be multiplied\")\n\n    rows_A = len(A)\n    columns_A = len(A[0])\n    rows_B = len(B)\n    columns_B = len(B[0])\n\n    result = [[0 for column in range(columns_B)] for row in range(rows_A)]\n\n    for row in range(rows_A):\n        for column in range(columns_B):\n            for k in range(columns_A):\n                result[row][column] += A[row][k] * B[k][column]\n\n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a function to find the index of the point that lies closest to the origin.\n\npoints = [[1,1],[-1,2],[3,-4]] [/INST] def closest_point(points):\n    min_dist = float('inf')\n    for i in range(len(points)):\n        dist = points[i][0]**2 + points[i][1]**2 \n        if dist < min_dist:\n            min_dist = dist\n            closest_index = i\n\n    return closest_index</s>"
  },
  {
    "text": "<s>[INST] Given two strings, write a Python code to delete all occurrences of the second string from the first string.\n\nstr1 = \"abcabcabcabcabcabcabcabcabcabc\"\nstr2 = \"abc\" [/INST] def delete_occurrences(str1, str2):\n    return str1.replace(str2, '')</s>"
  },
  {
    "text": "<s>[INST] Write a function that sorts its arguments in descending order.\n\nnums = [4, 8, 10, 3, 5] [/INST] def sort_descending(*args):\n    args = list(args)\n    for i in range(len(args)-1):\n        for j in range(i+1, len(args)):\n            if args[i] < args[j]:\n                args[i], args[j] = args[j], args[i]\n    return args</s>"
  },
  {
    "text": "<s>[INST] Make a C++ program that counts the number of unique elements in an array.\n\nint arr[] = {1, 5, 3, 6, 2, 3, 5}; [/INST] #include <iostream>\n#include <unordered_set>\n\nint main()\n{\n    int arr[] = {1, 5, 3, 6, 2, 3, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    \n    // Create a unordered_set to store all elements\n    std::unordered_set<int> s;\n    \n    // Insert all elements in the set\n    for (int i = 0; i < size; i++)\n        s.insert(arr[i]);\n    \n    // Size of the set will be total count of distinct elements\n    std::cout << \"Number of distinct elements: \" << s.size();\n    \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to encourage work balance and productivity in remote work. [/INST] One algorithm to encourage work balance and productivity in remote work is a scheduling algorithm that assigns workloads over manageable working windows with rest periods in between to allow for breaks and recovery. This algorithm can be designed to set maximum and minimum limit for each allocated workload and for duration for the rest periods, based on the individual's productive and rest needs. It can be used to monitor and manage workloads to ensure that workers do not experience fatigue or workload overload. Additionally, the algorithm can be designed to keep track of work performance over time to provide appropriate feedback and recommendations in order to help workers optimize their performance.</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to calculate the mean, median, and mode of a given set of data.\n\ndata = [1, 4, 6, 3, 8, 9] [/INST] def calculate_mean(data):\n    '''Function to calculate mean of data'''\n    mean = sum(data) / len(data)\n    return mean\n\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\n    count_dict = {}\n    mode_list = []\n    # count the frequency of each element\n    for i in data:\n        count_dict[i] = data.count(i)\n    # find the maximum frequency\n    max_freq = max(count_dict.values())\n    # find all elements with maximum frequency\n    for k,v in count_dict.items():\n        if max_freq == v:\n            mode_list.append(k)\n    return mode_list\n\ndata = [1, 4, 6, 3, 8, 9]\nmean = calculate_mean(data)\nmedian = calculate_median(data)\nmode = calculate_mode(data)\n\nprint(f\"Mean of data is: {mean}\")\nprint(f\"Median of data is: {median}\")\nprint(f\"Mode of data is: {mode}\")</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the top 5 movies with highest ratings in a database. [/INST] SELECT name, rating \nFROM Movies \nORDER BY rating DESC \nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to get the current user's timezone offset from UTC in minutes. [/INST] let offset_minutes = new Date().getTimezoneOffset();\nconsole.log(offset_minutes);</s>"
  },
  {
    "text": "<s>[INST] Create a HTML email template with placeholder information from a JavaScript object.\n\nvar data = {\n    firstname: 'John',\n    lastname: 'Doe',\n    email: 'johndoe@example.com'\n}; [/INST] <!DOCTYPE html>\n<html>\n<head>\n    <title>Email Template</title>\n</head>\n<body>\n    <h1>Hello, {{data.firstname}} {{data.lastname}}!</h1>\n    <p>This is an automated email sent to you at {{data.email}}.</p>\n    <p>Thank you!</p>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to detect plagiarized text. [/INST] One algorithm to detect plagiarized text is to compare text fragments of the document to a database of known plagiarized content. The algorithm can be refined by using natural language processing methods like vectorization and clustering to identify text parallelism and code similarity between the document and the content in the database. The algorithm also can weight the comparison based on similarity scores and can be further improved by utilizing machine learning models to identify more subtle aspects of plagiarism, such as paraphrasing, translations, and synonyms.</s>"
  },
  {
    "text": "<s>[INST] Create a block of HTML code to display a table with 6 columns and 10 rows. [/INST] <table>\n <thead>\n  <tr>\n   <th>Column 1</th>\n   <th>Column 2</th>\n   <th>Column 3</th>\n   <th>Column 4</th>\n   <th>Column 5</th>\n   <th>Column 6</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>Row 1</td>\n   <td>Row 1</td>\n   <td>Row 1</td>\n   <td>Row 1</td>\n   <td>Row 1</td>\n   <td>Row 1</td>\n  </tr>\n  <tr>\n   <td>Row 2</td>\n   <td>Row 2</td>\n   <td>Row 2</td>\n   <td>Row 2</td>\n   <td>Row 2</td>\n   <td>Row 2</td>\n  </tr>\n  ...\n  <tr>\n   <td>Row 10</td>\n   <td>Row 10</td>\n   <td>Row 10</td>\n   <td>Row 10</td>\n   <td>Row 10</td>\n   <td>Row 10</td>\n  </tr>\n </tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the maximum salary of an employee in the same department as the given employee.\n\nEmployee name: ‘John Doe’\nDepartment: ‘Finance’ [/INST] SELECT MAX(salary)\nFROM employees\nWHERE department = 'Finance'\nAND NOT employee_name = 'John Doe';</s>"
  },
  {
    "text": "<s>[INST] Design a class in Python to store a user profile information such as name, age, city, etc. [/INST] class UserProfile:\n    def __init__(self, name, age, city):\n        self.name = name\n        self.age = age\n        self.city = city\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_city(self):\n        return self.city</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select one row from a table where two conditions are met.\n\nTable: ‘products’ \nCondition 1: category is ‘clothing’ \nCondition 2: rating is greater than 3 [/INST] SELECT * FROM products\nWHERE category = 'clothing'\nAND rating > 3\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write a script in Python to find the longest word in a given string.\n\nsample_string = \"This is a sample string containing a few words\" [/INST] def longest_word(sample_string):\n    words_list = sample_string.split()\n    longest_word = \"\"\n    for word in words_list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following SQL query into its equivalent MongoDB query.\n\nSELECT * FROM customers WHERE age > 30 [/INST] db.customers.find({ age: { $gt: 30 } });</s>"
  },
  {
    "text": "<s>[INST] Design a class in Python to store information about a car, such as its make, year, and mileage. [/INST] class Car:\n    def __init__(self, make, year, mileage):\n        self.make = make\n        self.year = year\n        self.mileage = mileage\n\n    def get_make(self):\n        return self.make\n\n    def get_year(self):\n        return self.year\n\n    def get_mileage(self):\n        return self.mileage</s>"
  },
  {
    "text": "<s>[INST] Write a script in JavaScript to find the sum of all the numbers in an array. [/INST] function arraySum(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to input two strings and output their combined length. [/INST] function combinedLength(string1, string2) {\n  return string1.length + string2.length;\n}</s>"
  },
  {
    "text": "<s>[INST] Design a class in Python to store a book's title, author, and number of pages. [/INST] class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_pages(self):\n        return self.pages</s>"
  },
  {
    "text": "<s>[INST] Write a function to concatenate two strings without using the concatenation operator \"+\". [/INST] def concat(string1, string2):\n    result = \"\"\n    for i in string1:\n        result += i\n    for j in string2:\n        result += j\n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a function that converts any number to its hexadecimal representation [/INST] def to_hexadecimal(num):\n    return hex(num)</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes an array of numbers and a target number as input, and returns true if the target number is present in the given array, false otherwise.\n\nlist1 = [1,2,3,4]\ntarget = 2 [/INST] def contains_target(list1, target):\n    return target in list1</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two strings and searches for all the occurrences of the first string in the second and returns the positions of the pattern within the string.\n\nstring1 = \"aa\"\nstring2 = \"aaaaaa\" [/INST] def pattern_occurences(string1, string2):\n    positions = []\n    for i in range(len(string2)):\n        if string1 == string2[i:i+len(string1)]:\n            positions.append(i)\n    return positions</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a string as input and returns a copy of the string with all punctuation marks removed [/INST] def remove_punctuation(text):\n    punctuation_chars = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    output = \"\"\n    for char in text:\n        if char not in punctuation_chars:\n            output += char\n    return output</s>"
  },
  {
    "text": "<s>[INST] Create a function that encodes a message into a Vigenere cipher [/INST] def vigenere_encode(message, key):\n    encoded_message = \"\"\n    key_index = 0\n    for character in message:\n        if character.isalpha():\n            shift_amount = ord(key[key_index]) % 26\n            key_index += 1\n            if key_index == len(key):\n                key_index = 0  \n            shifted_char_code = ord(character) + shift_amount\n            if shifted_char_code > ord('z'):\n                shifted_char_code -= 26\n            encoded_message += chr(shifted_char_code)\n        else:\n            encoded_message += character\n    return encoded_message</s>"
  },
  {
    "text": "<s>[INST] Create a numerical sequence using Ruby code with 4 elements. [/INST] [1, 2, 4, 8]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all records with age greater than 20 in the 'users' table. [/INST] SELECT * FROM users WHERE age > 20;</s>"
  },
  {
    "text": "<s>[INST] Console log \"Hello\" seven times in JavaScript. [/INST] for (let i = 0; i < 7; i++) { \n  console.log('Hello'); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a loop in PHP that prints out the numbers 0 to 10. [/INST] for($i = 0; $i <= 10; $i++){\n    echo $i.' ';\n}</s>"
  },
  {
    "text": "<s>[INST] Sort an array in C using selection sort.\n\nint nums[] = {5, 2, -3, 10, 23, 99, -1, 7, 93, 0}; [/INST] int nums[] = {-3, -1, 0, 2, 5, 7, 10, 23, 93, 99};\n\nvoid selection_sort(int nums[], int n) {\n    int i, j, min_idx; \n  \n    // One by one move boundary of unsorted sub-array \n    for (i = 0; i < n-1; i++) {\n        // Find the minimum element in unsorted array \n        min_idx = i; \n        for (j = i+1; j < n; j++) {\n            if (nums[j] < nums[min_idx]) \n            min_idx = j; \n        }\n  \n        // Swap the found minimum element with the first element \n        swap(&nums[min_idx], &nums[i]); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a C# program to create a function that takes an integer as parameter and prints its double value. [/INST] public static void DoubleValue(int val) \n{ \n    Console.WriteLine(val * 2); \n}</s>"
  },
  {
    "text": "<s>[INST] Generate 5 random numbers between 0 and 9 using JavaScript. [/INST] let randomNums = [];\n\nfor(let i = 0; i < 5; i++){\n  let num = Math.floor(Math.random() * 10);\n  randomNums.push(num);\n}\n\nconsole.log(randomNums);</s>"
  },
  {
    "text": "<s>[INST] Use HTML to create a webpage with a text input field and a button. [/INST] <html>\n  <body>\n    <input type=\"text\" id=\"text_input\" />\n    <button onclick=\"handleInput()\">Submit</button>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Java program to replace the first occurrence of a given character with '*'.\n\nString = \"Hello World!\"\nCharacter = 'o' [/INST] String str = \"Hello World!\";\n\nString newStr = str.replaceFirst(\"o\", \"*\");\n\nSystem.out.println(newStr);</s>"
  },
  {
    "text": "<s>[INST] How to find the number of elements within a list in Python? [/INST] The number of elements in a list can be obtained using the len() method in Python.\nFor example, if the list is named my_list, the number of elements can be obtained as len(my_list).</s>"
  },
  {
    "text": "<s>[INST] We have a given string. Replace every occurrence of 'a' with 'A'\n\nstring = 'I like apples' [/INST] string = 'I like Apples'</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to print out a triangle of stars.\n\n3 [/INST] *\n**\n***</s>"
  },
  {
    "text": "<s>[INST] You need add two numbers without using '+' operator.\n\n2 and 3 [/INST] The solution is to use the bitwise XOR operator. The XOR operator will return a 1 if either of the two given numbers is a 1, but will return a 0 if both of them are either 1 or 0.\n\nTherefore, the solution is:\n\nnum1 = 2\nnum2 = 3\nresult = num1 ^ num2</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the top 2 most recently hired employees. [/INST] SELECT FirstName, LastName\nFROM Employees\nORDER BY HireDate DESC\nLIMIT 2</s>"
  },
  {
    "text": "<s>[INST] You need to read a code and detect if there are any security vulnerabilities. Output true if there are any vulnerabilities, output false if there are none.\n\ndef secret_function(username, password):\n    if username == 'myusername' and password == 'mypassword':\n        return True\n    else:\n        return False [/INST] true</s>"
  },
  {
    "text": "<s>[INST] How to remove duplicates from a list in Python? [/INST] In Python, duplicates can be removed from a list by converting the list to a set. Sets are unordered collections of unique elements. They do not allow duplicate elements, thus when a list is converted to a set, all duplicates are removed.\n\nFor example, if the list is named my_list, then the set can be constructed as follows:\n\nmy_set = set(my_list)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select the employees with a monthly salary greater than or equal to $3000. [/INST] SELECT FirstName, LastName, Salary\nFROM Employees\nWHERE Salary >= 3000</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a number and returns the square of the number.\n\nx = 15 [/INST] def square(x):\n    \"\"\"This function takes an integer x and returns its square\"\"\"\n    return x * x\n    \nx = 15\nprint(square(x)) # prints 225</s>"
  },
  {
    "text": "<s>[INST] Create a loop in JavaScript that logs \"Hello, World!\" to the console 5 times. [/INST] for (let i=0; i<5; i++){\n  console.log('Hello, World!');\n}</s>"
  },
  {
    "text": "<s>[INST] Create a RegEx pattern to match any sequences of characters that contains an \"a\". [/INST] let pattern = /a+/;</s>"
  },
  {
    "text": "<s>[INST] Apply a style that changes the color of the text \"Hello, World!\" to red.\n\n<span>Hello, World!</span> [/INST] <span style=\"color:red;\">Hello, World!</span></s>"
  },
  {
    "text": "<s>[INST] Create a for loop in JavaScript that iterates through a given array and prints each element.\n\narr = [\"a\",\"b\",\"c\",\"d\"] [/INST] arr = [\"a\",\"b\",\"c\",\"d\"];\nfor (let i = 0; i < arr.length; i++){\n    console.log(arr[i]); \n}</s>"
  },
  {
    "text": "<s>[INST] Modify the code to make an HTTP request to a given URL.\n\nrequest = {\n    type: \"GET\"\n} [/INST] let request = {\n    type: \"GET\",\n    url: \"https://example.com\",\n    success: function(response) {\n      console.log(response);\n    }\n};\n$.ajax(request);</s>"
  },
  {
    "text": "<s>[INST] Design a SQL query to select all the rows from a table where the field \"ISBN\" is not equal to zero.\n\nSELECT * FROM table_name; [/INST] SELECT * \nFROM table_name \nWHERE ISBN <> 0;</s>"
  },
  {
    "text": "<s>[INST] Create a program in C++ to find the largest number in an array of integers.\n\narr = [10, 20, 15, 12, 5] [/INST] #include <iostream>\nusing namespace std;\n\nint findMax(int arr[], int n) \n{ \n    int max = arr[0]; \n  \n    for (int i = 1; i < n; i++) \n        if (arr[i] > max) \n            max = arr[i]; \n  \n    return max; \n} \n  \nint main() \n{  \n    int arr[] = {10, 20, 15, 12, 5}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    int max = findMax(arr, n); \n  \n    cout << \"Maximum element in array is \" << max; \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the code using a while loop to count down from the number 5 to 0. [/INST] let num = 5;\nwhile (num >= 0) {\n    console.log(num);\n    num--;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the given HTML structure to center the content in the page.\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My First Web Page</title>\n</head>\n<body>\n\n</body>\n</html> [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My First Web Page</title>\n</head>\n<body style =\"text-align:center;\">\n\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Generate a valid JSON object that describes the given user information.\n\nName: John\nAge: 33\nLocation: New York [/INST] {\n  \"name\": \"John\",\n  \"age\": 33,\n  \"location\": \"New York\"\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class to store and print information about a book. [/INST] class Book:\n    def __init__(self, title, author, publisher, pages):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.pages = pages\n   \n    def print_info(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Publisher: {self.publisher}\")\n        print(f\"Pages: {self.pages}\")</s>"
  },
  {
    "text": "<s>[INST] Create a function to sort the given array of numbers in descending order.\n\n[7, 2, 5, 1, 4] [/INST] def sort_number(arr): \n    arr.sort(reverse=True) \n    return arr \n\narr = [7, 2, 5, 1, 4]\n  \nprint(sort_number(arr)) \n\n# Output: [7, 5, 4, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the names of all students with a score higher than 75. [/INST] SELECT name\nFROM students\nWHERE score > 75;</s>"
  },
  {
    "text": "<s>[INST] Write a React component to show the current date. [/INST] import React from 'react';\n\nfunction CurrentDate(){\n  const date = new Date().toLocaleDateString();\n\n  return (\n    <div>\n      {date}\n    </div>\n  )\n}\n\nexport default CurrentDate;</s>"
  },
  {
    "text": "<s>[INST] Name four significant members of the Python community. [/INST] Guido van Rossum, Kenneth Reitz, Monty Python, and Brett Cannon.</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to select five distinct cities from the given table.\n\n+----+-----------+\n| id | city      |\n+----+-----------+\n|  1 | New York  |\n|  2 | London    |\n|  3 | Tokyo     |\n|  4 | Singapore |\n|  5 | Sydney    |\n|  6 | Moscow    |\n+----+-----------+ [/INST] SELECT DISTINCT city\nFROM table_name\nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript to switch between two div components. [/INST] function switchDiv(){ \n   if(document.getElementById(\"div1\").style.display == \"none\"){ \n      document.getElementById(\"div1\").style.display = \"block\"; \n      document.getElementById(\"div2\").style.display = \"none\"; \n   } else { \n      document.getElementById(\"div1\").style.display = \"none\"; \n      document.getElementById(\"div2\").style.display = \"block\"; \n   }\t\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all customers whose first name is 'John'. [/INST] SELECT * FROM customers\nWHERE first_name = 'John';</s>"
  },
  {
    "text": "<s>[INST] Write a java program to print the frequencies of all characters in a string.\n\nstring = \"mississippi\" [/INST] public class Frequency { \n\tstatic void characterFrequency(String str) \n\t{ \n\t\t// size of the string 'str' \n\t\tint n = str.length(); \n\n\t\t// 'freq[]' implemented as hash table \n\t\tint freq[] = new int[256]; \n\n\t\t// accumulate freqeuncy of each character \n\t\t// in 'str' \n\t\tfor (int i = 0; i < n; i++) \n\t\t\tfreq[str.charAt(i)]++; \n\n\t\t// traverse 'str' from left to right \n\t\tfor (int i = 0; i < n; i++) { \n\n\t\t\t// if frequency of character str.charAt(i) \n\t\t\t// is not equal to 0 \n\t\t\tif (freq[str.charAt(i)] != 0) { \n\n\t\t\t\t// print the character along with its \n\t\t\t\t// frequency \n\t\t\t\tSystem.out.print(str.charAt(i)); \n\t\t\t\tSystem.out.print(freq[str.charAt(i)] + \" \"); \n\n\t\t\t\t// update frequency of str.charAt(i) to \n\t\t\t\t// 0 so that the same character is not printed \n\t\t\t\t// again \n\t\t\t\tfreq[str.charAt(i)] = 0; \n\t\t\t} \n\t\t} \n\t} \n\n\t// Driver code \n\tpublic static void main(String args[]) \n\t{ \n\t\tString str = \"mississippi\"; \n\t\tcharacterFrequency(str); \n\t} \n}</s>"
  },
  {
    "text": "<s>[INST] Convert a 2D array into a 1D array.\n\narray = [[1, 2], [3, 4]] [/INST] array = array.reshape(-1, ).tolist()</s>"
  },
  {
    "text": "<s>[INST] Multiply two vectors of the same size.\n\nVector1 = [1, 2, 3] \nVector2 = [4, 5, 6] [/INST] resultantVector = [4, 10, 18]</s>"
  },
  {
    "text": "<s>[INST] Generate an algorithm that sorts the elements of an array.\n\n[6, 3, 8, 9, 4] [/INST] def sort_array(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in correct position\n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [6, 3, 8, 9, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),</s>"
  },
  {
    "text": "<s>[INST] Define a function that takes an array of integers and returns an array of the squares of the input values.\n\n[2, 4, 6] [/INST] def array_squares(arr):\n    return list(map(lambda x: x**2 , arr))</s>"
  },
  {
    "text": "<s>[INST] Explain how you would loop over a list of dictionaries to extract all the values [/INST] To loop through a list of dictionaries, you can use a for loop. For example:\n\nmy_list = [{\"name\": \"John Doe\"}, {\"age\": 25}]\nfor item in my_list:\n    for key, value in item.items():\n        print(key, \":\", value)\n\nThis will loop through each item in the list as a dictionary, and for each dictionary, it will loop through all the key-value pairs and print them out.</s>"
  },
  {
    "text": "<s>[INST] Provide an answer to the following question\n\nWhat is the maximum size of an array in Java? [/INST] The maximum size of an array in Java is determined by the amount of memory that the JVM has available to allocate. In practice, this means that the maximum size of an array is typically limited to the amount of free memory available on the heap. Generally speaking, the maximum size of an array can range from a few thousand to somewhere around 2 billion elements.</s>"
  },
  {
    "text": "<s>[INST] Generate a Python script that implements a Linked List data structure. [/INST] # define Node\nclass Node(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# define LinkedList\nclass LinkedList:\n\n    def __init__(self, head=None):\n        self.head = head\n    \n    def insert(self, node):\n        current = self.head\n        if not self.head:\n            self.head = node\n        else:\n            while current.next:\n                current = current.next\n            current.next = node\n\n     def delete_node(self, data):\n        current = self.head\n        while current.data != data and current.next is not None:\n            previous = current\n            current = current.next\n        if current.data == data:\n            if current == self.head:\n                self.head = current.next\n            else:\n                previous.next = current.next</s>"
  },
  {
    "text": "<s>[INST] Suggest an improvement for the following piece of code\n\ndef addTwoNumbers(a, b):\n    return a + b [/INST] def addTwoNumbers(a, b):\n    try:\n        if type(a) == str or type(b) == str:\n            raise TypeError('Inputs must be of type int or float')\n        return a + b\n    except TypeError as e:\n        print(e)</s>"
  },
  {
    "text": "<s>[INST] Write a function to produce a copy of an array\n\n[1, 2, 3, 4] [/INST] def copy_array(arr): \n    new_arr = list(arr) \n    return new_arr</s>"
  },
  {
    "text": "<s>[INST] Explain how to convert an expression from postfix notation to infix notation [/INST] Infix notation is a way of writing an expression in which the operators are placed between the operands, such as 2 + 5, whereas postfix notation is a way of writing an expression in which the operators are placed after the operands, such as 2 5 +. To convert an expression from postfix notation to infix notation, scan the expression from left to right. If an operand is encountered, simply push it onto a stack. If an operator is encountered, pop two operands from the stack and place the operator in between them. Finally, push the resulting expression back onto the stack and repeat this until the end of the expression is reached.</s>"
  },
  {
    "text": "<s>[INST] Provide a Python function to calculate the number of times a word appears in a given string\n\n\"This is a sample string. There are some words in this string.\" [/INST] def count_words(s): \n    tokens = s.split() \n    word_freq = {} \n    for token in tokens: \n        if token in word_freq: \n            word_freq[token] += 1\n        else: \n            word_freq[token] = 1\n        \n    return word_freq</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java that sorts a given array of integers. [/INST] public static int[] sortArray(int[] arr) { \n    int n = arr.length; \n  \n    for (int i = 0; i < n-1; i++) \n        for (int j = 0; j < n-i-1; j++) \n            if (arr[j] > arr[j+1]) \n            { \n                // swap arr[j+1] and arr[i] \n                int temp = arr[j]; \n                arr[j] = arr[j+1]; \n                arr[j+1] = temp; \n            } \n    return arr; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Tensorflow program to perform binary classification on a given dataset. [/INST] import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(2, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)\n\nmodel.evaluate(x_test,  y_test, verbose=2)</s>"
  },
  {
    "text": "<s>[INST] Create a function in PHP to check a given string for palindromes. [/INST] <?php\n \nfunction checkPalindrome($str)\n{\n    // Reverse the given string\n    $revstr = strrev($str); \n  \n    // Checking if the string is equal to its reverse  \n    if ($str == $revstr) \n        return true;\n    else\n        return false;\n}\n?></s>"
  },
  {
    "text": "<s>[INST] Modify the given C# program to count all the vowels in a given string.\n\nstring str = \"This is a sample string.\"; [/INST] string str = \"This is a sample string.\";\nint count = 0; \n \nforeach (char ch in str) \n{ \n    switch (ch) \n    { \n        case 'a': \n        case 'e': \n        case 'i': \n        case 'o': \n        case 'u': \n            count++; \n            break; \n    } \n} \n\nConsole.WriteLine(\"Number of vowels in the given string: \" + count);</s>"
  },
  {
    "text": "<s>[INST] Develop a C program to compute the factorial of a given number n. [/INST] #include <stdio.h>\n \nint factorial(int n)\n{\n    int res = 1, i;\n    \n    for (i = 2; i <= n; i++)\n        res *= i;\n    return res;\n}\n\nint main()\n{\n    int n;    \n    \n    scanf(\"%d\", &n);\n    printf(\"%d\", factorial(n));\n        \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Dockerfile to containerize an existing web application. [/INST] FROM ubuntu:latest\n\n# Install the necessary packages\nRUN apt-get update && apt-get install -y \\\n    apache2 \\\n    php \\\n    libapache2-mod-php\n\n# Copy the web application files from host to container\nCOPY . /var/www/html\n\n# Set Apache as the default startup command\nCMD [\"apachectl\", \"-D\", \"FOREGROUND\"]</s>"
  },
  {
    "text": "<s>[INST] Develop a Ruby program to check a given string for palindromes. [/INST] def palindrome?(str) \n    str_rev = str.reverse \n    str == str_rev\nend</s>"
  },
  {
    "text": "<s>[INST] Compile a given C++ program using the G++ compiler. [/INST] g++ program.cpp -o program</s>"
  },
  {
    "text": "<s>[INST] Implement a machine learning model in Python to predict customer churn. [/INST] import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\ncustomers = pd.read_csv(\"customers.csv\")\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    customers.drop('Churn', axis=1), \n    customers.Churn,\n    test_size=0.2, \n    random_state=42)\n\n# Create model\nmodel = LogisticRegression()\n\n# Fit and make predictions\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the top 3 performing products in a given store.\n\nTable Name: products [/INST] SELECT ProductName, SUM(QuantitySold) AS Popularity\nFROM products\nGROUP BY ProductName\nORDER BY Popularity DESC \nLIMIT 3;</s>"
  },
  {
    "text": "<s>[INST] Develop a JavaScript program to print the average of a given set of numbers. [/INST] function findAverage(numbers) {\n\tlet sum = 0;\n\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsum += numbers[i];\n\t}\n\n\treturn sum / numbers.length;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a list of 1000 random numbers between 1 and 1000 using Python. [/INST] import random\n\nrandom_list = [random.randint(1, 1000) for _ in range(1000)]</s>"
  },
  {
    "text": "<s>[INST] Convert a string representation of a JSON object to an actual JSON object in Python.\n\n'{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}' [/INST] import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\njson_object = json.loads(json_string)</s>"
  },
  {
    "text": "<s>[INST] Design a function in R to check if a variable is a character or not. [/INST] is.character <- function(x){\n  return(is.character(x))\n}</s>"
  },
  {
    "text": "<s>[INST] Calculate the sine of a given angle using JavaScript.\n\n45 [/INST] let angle = 45;\nlet sine = Math.sin(angle * (Math.PI/180));\nconsole.log(sine);</s>"
  },
  {
    "text": "<s>[INST] Write a C# function to find the largest among three given numbers.\n\n3, 10, 4 [/INST] public int LargestNumber(int a, int b, int c)\n{\n    if (a >= b && a >= c)\n        return a;\n    else if (b >= a && b >= c)\n        return b;\n    else\n        return c;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby function that reverses a string. [/INST] def reverse_string(str)\n    return str.reverse\nend</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve all the rows from the table \"Products\" that contain the product category \"Furniture\". [/INST] SELECT * FROM Products WHERE product_category = 'Furniture';</s>"
  },
  {
    "text": "<s>[INST] Normalize a column \"Weight\" in a Pandas dataframe. [/INST] import pandas as pd\n\n# Read data from csv file\ndf = pd.read_csv(\"data.csv\")\n\n# Normalize the column \"Weight\"\ndf['Weight']=(df['Weight']-df['Weight'].min())/(df['Weight'].max()-df['Weight'].min())\n\n# Print the dataframe\nprint(df)</s>"
  },
  {
    "text": "<s>[INST] Generate a random password of length 8 using Python. [/INST] import random\n\ndef generate_password(length):\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\n    password = \"\"\n    for i in range(length):\n        index = random.randint(0, len(chars)-1)\n        password += chars[index]\n    return password\n\nlength = 8\npassword = generate_password(length)\nprint(\"Here's your random password:\", password)</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object to store a user's information. [/INST] let user = {\n  firstName : 'John',\n  lastName : 'Doe',\n  age : 30,\n  job : 'Software Engineer'\n};</s>"
  },
  {
    "text": "<s>[INST] Edit a given HTML string so that every word is displayed in bold.\n\n<div>This is a sample sentence.</div> [/INST] <div>\n<strong>This</strong> <strong>is</strong> <strong>a</strong> <strong>sample</strong> <strong>sentence.</strong>\n</div></s>"
  },
  {
    "text": "<s>[INST] Create a function that determines if two words are anagrams.\n\nFire, fry [/INST] def is_anagram(word1, word2):\n    word1 = word1.upper()\n    word2 = word2.upper()\n    return sorted(word1) == sorted(word2)</s>"
  },
  {
    "text": "<s>[INST] Create a React component that renders a list of items.\n\nitems = [\"Apple\", \"Banana\", \"Cherry\"] [/INST] import React from 'react';\n\nconst ListView = (props) => {\n    return (\n        <div>\n            {\n                props.items.map((item, index) => (\n                    <li key={index}>{item}</li>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default ListView;</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm to sort the following array.\n\n[3, 5, 4, 6, 1, 2] [/INST] def sortArray(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n    return array</s>"
  },
  {
    "text": "<s>[INST] Find the maximum and minimum number in the following array with JavaScript.\n\n[20, 40, 10, 30, 50] [/INST] let numbers = [20, 40, 10, 30, 50];\n\nlet minNumber = Math.min(...numbers);\nlet maxNumber = Math.max(...numbers);</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form for entering first name and last name. [/INST] <form> \n  <label>First name:</label> \n  <input type=\"text\" name=\"first_name\" /> \n  <br><br> \n  <label>Last name:</label> \n  <input type=\"text\" name=\"last_name\" /> \n  <br><br> \n  <input type=\"submit\" value=\"Submit\" /> \n</form></s>"
  },
  {
    "text": "<s>[INST] List two advantages and two disadvantages of using a linked list data structure [/INST] Advantages of using a linked list data structure: \n1. A linked list can grow and shrink in size as needed since nodes can be dynamically allocated. \n2. Nodes can be added at any point in the list without traversing the whole list. \n\nDisadvantages of using a linked list data structure: \n1. Time efficiency is reduced  since nodes must be searched sequentially. \n2. Memory efficiency is reduced since each node requires additional space to store references to the next node.</s>"
  },
  {
    "text": "<s>[INST] What is the best approach to solve this problem?\n\nGiven an array of integers, find the longest continuous increasing subarray within the array. [/INST] The best approach to solve this problem is to use the sliding window technique. This involves iterating through the array and keeping track of the start and end points of a window. We check to see if the elements of the window are increasing and update the start and end points accordingly. When the window becomes longer than the longest subarray found so far, we update the longest subarray. The time complexity of this approach is O(n).</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of a priority queue [/INST] A priority queue is a type of data structure where each element has an associated priority. A priority queue can be used to store and manage data where the highest priority elements are retrieved first. Elements in the priority queue are ordered according to their priority, with the highest priority element at the front of the queue and the lowest priority element at the back.</s>"
  },
  {
    "text": "<s>[INST] Identify the key differences between a set and a dictionary in Python. [/INST] The key difference between a set and a dictionary in Python is that a set stores unordered elements while a dictionary stores key-value pairs. Additionally, dictionaries have a set of keys that are unique and immutable, while sets are unordered collections of unique and immutable elements. Sets are more efficient for searching and testing for membership, while dictionaries are more efficient for retrieving specific values.</s>"
  },
  {
    "text": "<s>[INST] How can you execute a beta test using a web application? [/INST] To execute a beta test using a web application, you can create a prototype or minimum viable version of the web application and allow a limited number of users to access it. You can gather feedback from these users on the usability and performance of the application, which can be then used to make improvements before launching the app. Additionally, you can invite more users to join the beta program, so that you can get a wide range of user experiences and insights that can help make the web application robust.</s>"
  },
  {
    "text": "<s>[INST] What is the most efficient sorting algorithm for a large data set? [/INST] The Quick Sort algorithm is one of the most efficient sorting algorithms for large data sets. It works by finding a pivot element in the array, and then dividing the array into two parts based on the pivot element. All elements that are lesser than the pivot element are placed to the left, and all elements that are greater than the pivot element are placed to the right. The Quick Sort algorithm then recursively divides and sorts the left and right parts until the entire array is sorted. It has a worst-case time complexity of O(n^2), but its average case time complexity is O(nlogn) which makes it an efficient sorting algorithm.</s>"
  },
  {
    "text": "<s>[INST] Convert a given string to its lowercase version\n\nPython [/INST] lower_case = \"python\"</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, find the number which appears the most times in the list.\n\n[2, 3, 4, 2, 3, 2, 3, 2] [/INST] The number which appears the most times in the list is 2, which appears 4 times.</s>"
  },
  {
    "text": "<s>[INST] Write Java code to calculate the sum of first n natural numbers. [/INST] public class SumNatural {\n    public static void main(String[] args) {\n        int num = 20, sum = 0;\n        for(int i = 1; i <= num; ++i)\n        {\n            sum += i;\n        }\n        System.out.println(\"Sum = \" + sum);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an infinite loop in C. [/INST] while (1) {\n  // code goes here\n  }</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to fetch the data from the following tables.\n\nTable A\nid name\n1 John\n2 Mary\n\nTable B\nid age\n1 20\n2 25 [/INST] SELECT a.name, b.age\nFROM tableA a\nINNER JOIN tableB b\nON a.id = b.id;</s>"
  },
  {
    "text": "<s>[INST] Write a piece of C++ code to find the absolute value of a number. [/INST] int absolute_value(int num)\n{\n    if (num < 0)\n    {\n        num = -num;\n    }\n\n    return num;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a search query in MySQL.\n\nTable users\nid name email\n1 John john@email.com\n2 Mary mary@somedomain.com [/INST] SELECT * FROM users WHERE name LIKE '%ary%';</s>"
  },
  {
    "text": "<s>[INST] Write code in Java to print all the unique elements in an array. [/INST] public void printUnique(int[] array) {\n  Set<Integer> set = new HashSet<>();\n\n  for (int i : array) {\n    set.add(i);\n  }\n\n  System.out.println(set);\n\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Node.js program to create a server. [/INST] const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n    console.log(`Server running at http://${hostname}:${port}/`);\n});</s>"
  },
  {
    "text": "<s>[INST] Design a web page using HTML and CSS. [/INST] <html>\n  <head>\n    <title>My webpage</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>Welcome to my webpage.</p>\n  </body>\n</html>\n<style>\n  body {\n    font-family: Arial, sans-serif;\n    font-size: 16px;\n  }\n</style></s>"
  },
  {
    "text": "<s>[INST] Write a short Java program to generate a random value from 1 to 10. [/INST] import java.util.Random;\n\npublic class genRandom {\n   public static void main(String[] args) {\n      // create instance of Random class\n      Random rand = new Random();\n\n      // Generate random integers in range 0 to 10\n      int randomNum = rand.nextInt(11);\n\n      // Print random integers\n      System.out.println(\"Random Number :\" + randomNum);\n   }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a sentence as a string and returns a string containing the sentence in reverse order.\n\n\"I am learning to code\" [/INST] public String reverse(String sentence) {\n    StringBuilder reversedSentence = new StringBuilder();\n    \n    String[] words = sentence.split(\" \");\n    \n    for (int i = words.length - 1; i >= 0; i--) {\n        reversedSentence.append(words[i]);\n        reversedSentence.append(\" \");\n    }\n    \n    return reversedSentence.toString().trim();\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to loop through an array and return the sum of all the elements.\n\n[1, 2, 3, 4] [/INST] let arr = [1, 2, 3, 4];\nlet sum = 0;\n \nfor (let i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\n\nconsole.log(sum);</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two arguments, a number and a string, and returns the string repeated the specified number of times.\n\n4, \"Hello\" [/INST] def repeatString(n, s):\n    return s * n\n\nrepeatString(4, \"Hello\")</s>"
  },
  {
    "text": "<s>[INST] Determine the type of an object.\n\n\"Hello\" [/INST] type(“Hello”)</s>"
  },
  {
    "text": "<s>[INST] Write an R code snippet to normalize data stored in a vector.\n\n[1,2,3,6] [/INST] normalize <- function(v) {\n  (v - min(v)) / (max(v) - min(v))\n}\n\nnormalize([1,2,3,6])</s>"
  },
  {
    "text": "<s>[INST] Create a list comprehension for the following code.\n\nnumber_list = []\nfor x in range(10):\n    if x % 2 == 0:\n        number_list.append(x) [/INST] number_list = [x for x in range(10) if x % 2 == 0]</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the standard deviation of a list of numbers\n\n[2,4,4,4,5,5,7,9] [/INST] def std_deviation(data): \n    n = len(data) \n\t \n    mean = sum(data) /n \n    sum_sqr = sum(pow(x-mean,2) for x in data) \n    stdev = sqrt(sum_sqr/n) \n\t\n    return stdev \n    \nstd_deviation([2,4,4,4,5,5,7,9])</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that takes two strings s and t as input and checks if t is an anagram of s\n\ns = \"abc\", t = \"bac\" [/INST] public class Anagram { \n  \n    static void isAnagram(String s1, String s2) { \n        // Removing all white spaces from s1 and s2 \n        String copyOfs1 = s1.replaceAll(\"\\\\s\", \"\"); \n        String copyOfs2 = s2.replaceAll(\"\\\\s\", \"\"); \n  \n        // Initially setting status as true \n        boolean status = true; \n  \n        if (copyOfs1.length() != copyOfs2.length()) { \n            // Setting status as false if copyOfs1 and copyOfs2 doesn't have same length \n            status = false; \n        }  \n        else { \n            // Changing the case of characters of both copyOfs1 and copyOfs2 and \n            // converting them to char array \n            char[] s1Array = copyOfs1.toLowerCase().toCharArray(); \n            char[] s2Array = copyOfs2.toLowerCase().toCharArray(); \n  \n            // Sorting both s1Array and s2Array \n            Arrays.sort(s1Array); \n            Arrays.sort(s2Array); \n  \n            // Checking whether s1Array and s2Array are equal \n            status = Arrays.equals(s1Array, s2Array); \n        } \n  \n        // Output the Message\n        if (status) \n            System.out.println(s1 + \" and \" + s2 + \" are anagrams\"); \n        else\n            System.out.println(s1 + \" and \" + s2 + \" are not anagrams\"); \n    } \n  \n    public static void main(String[] args) \n    { \n        isAnagram(\"abc\", \"bac\");\n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a Haskell function to calculate a number raised to a certain power [/INST] pow' :: (Num a, Integral b) => a -> b -> a\npow' x p = x^p</s>"
  },
  {
    "text": "<s>[INST] Write a function in SQL to find the maximum value in a table\n\nTable name: scores [/INST] SELECT MAX(score) \n  FROM scores;</s>"
  },
  {
    "text": "<s>[INST] Create a Macros in Excel to transpose a given set of data [/INST] Sub Transpose() \n \n    Dim ReadyRange As Range \n \n     \n \n    Set ReadyRange = Selection \n \n    ReadyRange.Copy \n \n    ReadyRange.PasteSpecial xlPasteAll, Transpose:=True \n \nEnd Sub</s>"
  },
  {
    "text": "<s>[INST] Create a vector in R to count the occurrences of a given number in an array\n\narr = c(1,1,2,2,2,2,3,3,4,4,4) [/INST] vector <- c()\nfor (i in arr) {\n  count <- length(which(arr == i))\n  vector <- c(vector, count)\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SAS Procedure to mean generate a boxplot [/INST] proc boxplot data=dataset;\n  plot y*x;\nrun;</s>"
  },
  {
    "text": "<s>[INST] Create a Regular Expression that validates a USA phone number [/INST] ^\\+?1?\\s?\\(?\\d{3}\\)?[\\s\\-]?\\d{3}[\\s\\-]?\\d{4}$</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to find the kth smallest element in an unsorted array using minimum number of comparisons. [/INST] #include<algorithm>\n#include<math.h>\n\nusing namespace std;\n\nint kthSmallest(int arr[], int n, int k) \n{ \n    sort(arr, arr + n); \n  \n    return arr[k - 1]; \n} \n\n// Function to find the kth smallest element \nint kthSmallestWComp(int arr[], int n, int k) \n{ \n    // Initialize values of left and right \n    int left = -2147483648, right = 2147483647, ans = -1; \n    while (left <= right) \n    { \n        int mid = (left + right) / 2; \n        int countLtEqMid = 0, countGtMid = 0; \n  \n        // Loop to count total less than equal mid \n        for (int i = 0; i < n; i++) \n            if (arr[i] <= mid) \n                countLtEqMid++; \n        // Loop to count total greater than mid \n        for (int i = 0; i < n; i++) \n            if (arr[i] > mid) \n                countGtMid++; \n  \n        if (countLtEqMid < k && k <= (countLtEqMid + countGtMid)) \n        { \n            ans = mid; \n            left = mid + 1; \n        } \n        else if (countLtEqMid >= k) \n            right = mid - 1; \n  \n        else\n            left = mid + 1; \n    } \n    return ans; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to find the name of a customer whose last name is 'Smith' and has the highest credit limit. [/INST] SELECT name\nFROM Customers\nWHERE lastname = 'Smith'\nORDER BY creditlimit DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to classify a given array of strings into two groups- one which contains elements that can be parsed into numbers and one which can't. [/INST] function classify(arr) {\n  let nums = [];\n  let strs = [];\n  arr.forEach(el => {\n    if (!isNaN(el)) nums.push(el);\n    else strs.push(el);\n  });\n  return [nums, strs];\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C# program to remove the leading and trailing spaces in a given string. [/INST] public static string RemoveLeadingAndTrailingSpaces(string str)  \n{  \n    // To remove leading spaces  \n    while (str.StartsWith(\" \"))  \n    {  \n        str = str.Substring(1);  \n    }  \n   \n    // To remove trailing spaces  \n    while (str.EndsWith(\" \"))  \n    {  \n        str = str.Substring(0, str.Length - 1);  \n    }  \n   \n    return str;  \n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML page to display a given data table. [/INST] <!DOCTYPE html>\n<html>\n    <head>\n        <title>Table Display</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>21</td>\n            </tr>\n            <tr>\n                <td>Jane</td>\n                <td>25</td>\n            </tr>\n            <tr>\n                <td>Joe</td>\n                <td>30</td>\n            </tr>\n        </table>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to list the customers who have not completed any orders. [/INST] SELECT * \nFROM Customers c\nLEFT JOIN Orders o ON c.customer_id = o.customer_id\nWHERE o.order_id IS NULL;</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to list the customer names and the total amount of orders placed by them. [/INST] SELECT c.name AS 'Customer Name', SUM(o.total_cost) AS 'Total Amount'\nFROM Customers c\nLEFT JOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY c.name;</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to filter out the common characters in two given strings. [/INST] public static String filterCommonCharacters(String str1, String str2) {\n    StringBuilder sb = new StringBuilder();\n    // Traverse both strings\n    for (int i = 0; i < str1.length(); i++) {\n        // Check if str2 contains str1[i]\n        boolean found = false;\n        for (int j = 0; j < str2.length(); j++) {\n            if (str1.charAt(i) == str2.charAt(j)) \n                found = true;\n        }\n        // Append the character if it is not present in str2\n        if (found == false)\n            sb.append(str1.charAt(i));  \n    }  \n    return sb.toString();\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java method which takes a String and an integer as inputs and concatenates the integer to the beginning of the string.\n\ninputString: \"This is a test\"\nnum: 38 [/INST] public static String prependIntToString(String inputString, int num) {\n    String outputString = num + \"\" + inputString;\n    return outputString;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to convert a string containing numbers in scientific notation to an integer.\n\ninputString: \"1.0e7\" [/INST] int convertSciNotation(String inputString) {\n    int outputInteger = (int)Math.pow(10, Double.parseDouble(inputString.substring(inputString.indexOf('e') + 1)));\n    return outputInteger;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a CSS class to set the font size of the <h1> element to double the size of the <body> element. [/INST] h1 {\n    font-size: 200%;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to list the name of customers and associated shipping addresses. [/INST] SELECT c.name, s.address\nFROM customers c\nINNER JOIN shipping_address s\nON c.id = s.customer_id</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm to split a string of numbers (integers or floats) in to two parts with an even sum\n\ninputString: '1,2,3,4,5,6' [/INST] public int[] splitEvenSum(string inputString) {\n    List<int> nums = new List<int>();\n    \n    // Split inputString at , and add elements to the list\n    foreach (var num in inputString.Split(',')) {\n        nums.Add(int.Parse(num));\n    }\n    \n    // Initialize variables\n    int targetSum = 0;\n    int sum1 = 0;\n    int sum2 = 0;\n    List<int> list1 = new List<int>();\n    List<int> list2 = new List<int>();\n    \n    // Loop through and calculate sums\n    foreach (var num in nums) {\n        targetSum += num;\n    }\n    targetSum /= 2;\n    \n    // Backtrack and find the two subarrays with the same sum\n    foreach (var num in nums) {\n        if (sum1 + num <= targetSum) {\n            sum1 += num;\n            list1.Add(num);\n        } else {\n            sum2 += num;\n            list2.Add(num);\n        }\n    }\n    \n    // Return results\n    int[] result = new int[2] {sum1, sum2};\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java method that takes a string and an integer as input, and returns the string in reverse with the integer repeated at the end.\n\ninputString: \"Hello\"\nnum: 3 [/INST] public static String repeatNumAtEnd(String inputString, int num) {\n    String outputString = \"\";\n    for(int i = inputString.length() - 1; i >= 0; i--){ \n        outputString += inputString.charAt(i); \n    } \n    for (int i = 0; i < num; i++){\n        outputString += num;\n    }\n    return outputString;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a ruby program to merge two sorted arrays in to one sorted array.\n\narr1: [1, 4, 6]\narr2: [2, 3, 7] [/INST] def mergeSortedArrays(arr1, arr2) \n    arr3 = arr1 + arr2 \n    arr3.sort!\n    return arr3\nend</s>"
  },
  {
    "text": "<s>[INST] What does a break statement do in C++? [/INST] A break statement in C++ is used to stop the execution of a loop and exit the loop. It can also be used to stop the switch statement execution.</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to calculate the total cost of an order taking into account the quantity and unit cost of each item. [/INST] SELECT sum(quantity * unit_cost) as total_cost\nFROM orders\nGROUP BY order_id</s>"
  },
  {
    "text": "<s>[INST] Classify the given sentence as short or long.\n\nSentence: She felt so excited that her application got approval. [/INST] Short sentence.</s>"
  },
  {
    "text": "<s>[INST] Create a function to check which HEX color can be generated from the given RGB value.\n\nrgb: 253, 199, 1 [/INST] def rgb_to_hex(rgb):\n r, g, b = rgb\n hex_val = \"#{:02x}{:02x}{:02x}\".format(r, g, b)\n return hex_val\n\n# Output: #fdc701</s>"
  },
  {
    "text": "<s>[INST] Convert the given text into a list of words, separating the words by whitespace.\n\ntext: This sentence contains five words [/INST] def to_words(text):\n return text.split()\n\n# Output: ['This', 'sentence', 'contains', 'five', 'words']</s>"
  },
  {
    "text": "<s>[INST] Build a neural network for binary classification using TensorFlow. [/INST] \"\"\"\nBuild a neural network for binary classification using TensorFlow\n\"\"\"\nimport tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(units=8, activation='relu', input_shape=(2,))) \nmodel.add(tf.keras.layers.Dense(units=4, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])</s>"
  },
  {
    "text": "<s>[INST] Compute the mean of the following set of numbers: 7, 15, 16, 23, 35. [/INST] The mean of the given set of numbers is 19.4. \n\nMean = (7+15+16+23+35)/5 = 19.4</s>"
  },
  {
    "text": "<s>[INST] Use the following JSON data and write a JavaScript function to parse it.\n\n{\n \"employees\": [\n  {\n   \"firstName\": \"John\",\n   \"lastName\": \"Doe\"\n  },\n  {\n   \"firstName\": \"Anna\",\n   \"lastName\": \"Smith\"\n  },\n  {\n   \"firstName\": \"Peter\",\n   \"lastName\": \"Jones\"\n  }\n ]\n} [/INST] function parseJSON(jsonString) {\n let employeeData = JSON.parse(jsonString);\n let employees = employeeData.employees;\n let parsedData = [];\n for (let i = 0; i < employees.length; i++){\n  let employee = employees[i];\n  let parsedEmployee = {};\n  parsedEmployee.firstName = employee.firstName;\n  parsedEmployee.lastName = employee.lastName;\n  parsedData.push(parsedEmployee);\n }\n return parsedData;\n};</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all records from a table with a given name. [/INST] SELECT * FROM <table_name>;</s>"
  },
  {
    "text": "<s>[INST] Use the following code and write a JavaScript function to reverse the order of the characters in a given string. [/INST] function reverseString(str) {\n return str.split('').reverse().join('');\n}</s>"
  },
  {
    "text": "<s>[INST] Use the following function and SQL query and write a JavaScript program to insert data into a given table.\n\nfunction insertData(arr) {\n let sqlQuery = \"INSERT INTO <table_name> (NAME,AGE) VALUES ?\";\n} [/INST] function insertData(arr) {\n let sqlQuery = \"INSERT INTO <table_name> (NAME,AGE) VALUES ?\";\n let values = [];\n arr.forEach(item => {\n  values.push([item.name, item.age]);\n });\n executeQuery(sqlQuery, [values]);\n}\n\nfunction executeQuery(query, values) {\n connection.query(query, [values], function (err, result) {\n  if (err) {\n   console.log(err);\n  }\n });\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to calculate the difference between two dates using the following function. [/INST] #include <iostream>\n#include <ctime>\n\nusing namespace std;\n\nint diffDates(time_t date1, time_t date2){\n  return difftime(date1, date2) / (60 *60 *24); // in days\n}\n\nint main(){\n  // example dates\n  time_t date1 = 0;\n  time_t date2 = time(0);\n  \n  cout << diffDates(date1, date2) << endl;\n  return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to find the most commonly occurring item in a given object. [/INST] function mostCommonlyOccuring(obj) {\n let count = {};\n let maxCount = 0;\n let mostCommon = null;\n \n for (const key in obj) {\n  if (obj.hasOwnProperty(key)) {\n   if (obj[key] in count) {\n    count[obj[key]]++;\n   } else {\n    count[obj[key]] = 1;\n   }\n   if (count[obj[key]] > maxCount) {\n    maxCount = count[obj[key]];\n    mostCommon = obj[key];\n   }\n  }\n }\n return mostCommon;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a JS code snippet to add a class \"active\" to an HTML element with an id \"example\". [/INST] document.getElementById(\"example\").classList.add(\"active\");</s>"
  },
  {
    "text": "<s>[INST] Build an HTML form containing 3 input elements (name, email, password) and a submit button. [/INST] <form action=\"\">\n    Name: <input type=\"text\" name=\"name\">\n    Email: <input type=\"email\" name=\"email\">\n    Password: <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Generate a JS code snippet to switch between two colours (red and blue) while hovering the mouse pointer over an HTML element. [/INST] <style>\n   .element:hover {\n      background-color: red;\n      transition: background-color 1s ease;\n   }\n   .element:hover:after {\n      background-color: blue;\n   }\n</style></s>"
  },
  {
    "text": "<s>[INST] Construct a sql query to select the names and age of all employees who have a salary greater than 45000 [/INST] SELECT name, age FROM employee WHERE salary > 45000;</s>"
  },
  {
    "text": "<s>[INST] Create a python function that takes a string of characters as an argument and returns a list of all unique combinations of characters possible.\n\nabc [/INST] def generate_unique_permutations(string):\n    output = []\n    for x in range(len(string)):\n        for y in range(x + 1,len(string)+1):\n            output.append(''.join(sorted(string[x:y])))  \n    return output\n\nprint(generate_unique_permutations(\"abc\")) #Output: ['a', 'ab', 'abc', 'ac', 'b', 'bc', 'c']</s>"
  },
  {
    "text": "<s>[INST] Construct a Python function to count the number of words in a given sentence\n\nThis is a sentence [/INST] def word_count(sentence):\n    return len(sentence.split())\n\nprint(word_count('This is a sentence')) # Output: 5</s>"
  },
  {
    "text": "<s>[INST] Write a Java method to replace all spaces from a given string with a provided character\n\nHello World!\nZ [/INST] public static String replaceCharacter(String str, char c) {\n    return str.replaceAll(\" \", String.valueOf(c));\n}\n\nSystem.out.println(replaceCharacter(\"Hello World!\", 'Z')); // Output: HelloZWorld!</s>"
  },
  {
    "text": "<s>[INST] Generate a css code block to create a white text shadow for a given HTML element [/INST] .element {\n    text-shadow: 1px 0 white, 0 1px white, 1px 1px white, -1px 0 white, 0 -1px white, -1px -1px white;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary where each key is a unique integer and the value of each key is the corresponding product of the two given numbers.\n\nx = 15 \ny = 2 [/INST] d = {}\n\nfor i in range(1, x + 1):\n  d[i] = i * y\n\nprint(d)</s>"
  },
  {
    "text": "<s>[INST] Write a single-line lambda expression that multiplies any two numbers. [/INST] mul = lambda x, y: x * y</s>"
  },
  {
    "text": "<s>[INST] Generate a list of numbers from 1 to 10 in reverse order. [/INST] lst = list(range(10, 0, -1))</s>"
  },
  {
    "text": "<s>[INST] Using the numpy library, reshape the given matrix array to 5 rows and 2 columns.\n\nimport numpy as np \narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]) [/INST] arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n\nreshaped_arr = arr.reshape(5, 2)\n\nprint(reshaped_arr)</s>"
  },
  {
    "text": "<s>[INST] Replace all empty strings with a default value using the following list.\n\nmy_list = [\"apple\", \"\", \"grapes\", \"\", \"bananas\"] [/INST] my_list = [\"apple\", \"\", \"grapes\", \"\", \"bananas\"]\n\nmy_list = [x if x != \"\" else \"default\" for x in my_list]\n\nprint(my_list)</s>"
  },
  {
    "text": "<s>[INST] Create a new list with the contents of the given list plus the new element at the beginning.\n\nmy_list = [3, 5, 6, 7]\nnew_element = 1 [/INST] my_list = [3, 5, 6, 7]\nnew_element = 1\n\nnew_list = [new_element] + my_list\n\nprint(new_list)</s>"
  },
  {
    "text": "<s>[INST] Using the re library, trim the following string of all whitespace.\n\nmy_string = \"  Hello, World!  \" [/INST] import re\n\nmy_string = \"  Hello, World!  \"\n\nmodified_string = re.sub('\\s+', '', my_string)\n\nprint(modified_string)</s>"
  },
  {
    "text": "<s>[INST] Is there an error in the following code?\n\nprice = 10\n\nif prive > 10:\n   print('Price must be 10 or less') [/INST] true</s>"
  },
  {
    "text": "<s>[INST] Write a code to form a triangle pattern with the character '$' [/INST] for i in range(5): \n    for j in range(i+1): \n        print('$', end=\"\") \n    print()</s>"
  },
  {
    "text": "<s>[INST] Suggest ways to debug the following code\n\nx = 'Address'\n    print(\"Topic:\", x) [/INST] - Add four spaces of indentation before the print statement to make it part of the block \n- Check the spelling of x to ensure there is no typo \n- Check the documentation for the correct syntax to print the value of x \n- Check the scope of x to ensure the value has been properly set outside the loop \n- Run the code in a debugger to find any issues that may arise during code execution</s>"
  },
  {
    "text": "<s>[INST] Suggest a more efficient code to solve the following task.\n\nx = 5\ny = 10\n\nif x > y:\n    result = x\nelse:\n    result = y [/INST] x = 5\ny = 10\nresult = max(x, y)</s>"
  },
  {
    "text": "<s>[INST] Write a code to reverse the order of characters in a string.\n\ntext = \"Hello World\" [/INST] text = \"Hello World\"\nrev_str = reversed(text)\nprint(''.join(rev_str))</s>"
  },
  {
    "text": "<s>[INST] How to check if a given year is a leap year in Python? [/INST] def leap_year(year):\n    if (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0):\n        return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Generate a key-value pair such that the key is a string of length 3 and the value is a random number from 0 to 9 [/INST] import random\n\nkey = ''.join(random.choices(string.ascii_letters, k = 3))\nvalue = random.randint(0, 9)\ndata = {key : value}</s>"
  },
  {
    "text": "<s>[INST] Write a Python function that takes an integer as an argument and returns the square of that number [/INST] def square(n):\n    return n ** 2</s>"
  },
  {
    "text": "<s>[INST] Generate a dictionary that has 5 string-string key-value pairs [/INST] import random\n\nkeys = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\nvalues = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\n\ndata = {key:value for key, value in zip(keys, values)}</s>"
  },
  {
    "text": "<s>[INST] Using the bubble sort algorithm, sort the following array.\n\n[3, 5, 2, 1, 4] [/INST] def bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    return arr\n  \n  \n# Driver code \narr = [3, 5, 2, 1, 4]\n  \nbubbleSort(arr)\n\nOutput: [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Add an element to a given list.\n\nList: ['a', 'b', 'c']\nElement: 'd' [/INST] list1 = ['a', 'b', 'c']\nlist1.append('d') \n\nprint(list1)\n\nOutput: ['a', 'b', 'c', 'd']</s>"
  },
  {
    "text": "<s>[INST] Using a while loop, write a program to print the Fibonacci sequence. [/INST] # function to print Fibonacci sequence \ndef fibo(n): \n    counter = 0\n    a = 0\n    b = 1\n      \n    while counter < n:\n        print(a, end = \" \")\n        fibonacci = a + b \n        a = b \n        b = fibonacci \n        counter += 1\nfibo(10)\n\nOutput: 0 1 1 2 3 5 8 13 21 34</s>"
  },
  {
    "text": "<s>[INST] Programmatically generate 10 random numbers between 0 and 1. [/INST] import random \n\nfor x in range(10): \n  print(random.random()) \n\nOutput: 0.06344054085111036 0.2881477132700741 0.17747003808770072 0.4838670382036148 0.8504676489597706 0.6951969864720918 0.3444948373996736 0.251203536083174 0.603054609456176 0.8579147959146845</s>"
  },
  {
    "text": "<s>[INST] Compress a given string by counting the occurrences of each character. [/INST] def compress_string(s):\n    l = len(s) \n    \n    # If operations length is 0 \n    if l == 0: \n        return \"\" \n  \n    # Erroneous characters in the  \n    #original string are ignored. \n    if l == 1 or s[0] == s[1]: \n        return s[0] + str(1) \n    \n    # Initialize the variable \n    count = 1\n    s1 = \"\" \n     \n    # Here i is the indexing variable \n    i = 1\n    while i < l: \n            # If the current character matches with the next one \n            if (s[i] == s[i - 1]): \n                count += 1\n            else: \n                s1 = s1 + s[i - 1] + str(count) \n                count = 1\n            i += 1\n    s1 = s1 + s[i - 1] + str(count)\n    \n    return s1 \n  \ns = \"geeksforgeeks\"\n\nprint(compress_string(s))\n\nOutput: g1e2k2s2f1o1r1g1e1e1k1s1</s>"
  },
  {
    "text": "<s>[INST] Create an object-oriented program in Java to calculate the area of a  rectangle. [/INST] public class Rectangle {\n    private int width;\n    private int height;\n\n    public Rectangle(int width, int height){\n        this.width = width;\n        this.height = height;\n    }\n\n    public int calculateArea(){\n        return this.width * this.height; \n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Given a sentence as input, check if the sentence is a palindrome\n\n\"Madam, I'm Adam\" [/INST] def is_palindrome(s):\n    s = s.replace(\" \", \"\")\n    return s == s[::-1]\n\nis_palindrome(\"Madam, I'm Adam\") # returns True</s>"
  },
  {
    "text": "<s>[INST] Write a Visual Basic Script to add two numbers [/INST] Function add(a As Integer, b As Integer)\n    add = a + b \nEnd Function\n\nMsgBox(add(5, 2))</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby script to calculate the square root of a number [/INST] def sqrt(number)\n  Math.sqrt(number)\nend \n\nputs sqrt(9) # output 3.0</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to generate a random password [/INST] def generate_password(length):\n  password = \"\"\n  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\"\n  for i in range(length):\n    password += choice(characters)\n  return password\n\nprint(generate_password(10)) // output 5s@N#s9J@2</s>"
  },
  {
    "text": "<s>[INST] Develop Python code to print out all the divisors of a given number\n\n30 [/INST] def get_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \n\nprint(get_divisors(30)) # output [1, 2, 3, 5, 6, 10, 15, 30]</s>"
  },
  {
    "text": "<s>[INST] Analyze an HTML text to check if it contains the tag <p>\n\n<p>This is a paragraph.</p> [/INST] def has_p_tag(html):\n    return \"<p>\" in html\n    \nhas_p_tag(\"<p>This is a paragraph.</p>\") # output True</s>"
  },
  {
    "text": "<s>[INST] Edit the output of a C program so that the last line prints \"Hello World!\"\n\n#include <stdio.h>\n\nint main()\n{\n    printf(\"Hello!\");\n    return 0;\n} [/INST] #include <stdio.h>\n\nint main() \n{ \n    printf(\"Hello!\"); \n    printf(\"Hello World!\"); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Given a sentence, separate the words and store them in an array.\n\nSentence: Programming is fun. [/INST] words = [\"Programming\", \"is\", \"fun\"]</s>"
  },
  {
    "text": "<s>[INST] Sort these integers in ascending order.\n\n6, 5, 10, 1 [/INST] [1, 5, 6, 10]</s>"
  },
  {
    "text": "<s>[INST] Describe what an abstract class is used for. [/INST] An abstract class is a class that contains abstract methods and variables. Abstract classes are meant to be inherited and customized by their subclasses. They are used to provide basic implementations of commonly used methods, as well as impose a common interface between different subclasses.</s>"
  },
  {
    "text": "<s>[INST] Generate an HTML form element to input a password. [/INST] <input type=\"password\" name=\"password\" /></s>"
  },
  {
    "text": "<s>[INST] How can one manage memory in C++? [/INST] In C++, memory can be managed by allocating and deallocating memory dynamically. This can be done either manually, using the new and delete operators, or by the use of smart pointers and other library functions. One can also free up memory by deleting unneeded objects, or by taking advantage of resource-managing classes like std::string, std::array, and std::vector.</s>"
  },
  {
    "text": "<s>[INST] Check if a given string is a numeric value.\n\nString: 12345678 [/INST] true</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the count of records in a table. [/INST] SELECT COUNT(*) FROM myTable;</s>"
  },
  {
    "text": "<s>[INST] Compare two strings and return the differences in the two strings.\n\nString1: \"Today is a great day!\"\nString2: \"Today is a beautiful day!\" [/INST] The differences are \"great\" and \"beautiful\".</s>"
  },
  {
    "text": "<s>[INST] Create a class with a method that returns the sum of its two parameters. [/INST] public class Sum {\n    public int getSum(int a, int b) {\n        return a + b;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] How can a user increase performance with SQL queries? [/INST] Performance can be improved by using proper indexes and query optimization techniques. Additionally, users can create more efficient queries by avoiding unnecessary joins and taking advantage of set-based operations. Finally, users can take advantage of caching if available.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to generate random alphanumeric characters of length 10. [/INST] function generateAlphaNum() {\n    let length = 10;\n    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in Ruby to store information about shopping items and their prices. [/INST] class ShoppingItem\n  attr_accessor :name, :price\n\n  def initialize(name, price)\n    @name = name\n    @price = price\n  end\nend</s>"
  },
  {
    "text": "<s>[INST] Write a C# program to remove all occurrences of an item from an array.\n\n[1,2,3,4,5,2,3,4] [/INST] public static void RemoveOccurrence(int[] array, int item)\n{\n    //Declare a new variable to store new list of items\n    List<int> result = new List<int>();\n\t\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] != item)\n        {\n            result.Add(array[i]);\n        }\n    }\n\t\n    //Print remaining items\n    Console.WriteLine(\"After removing, remaining elements are:\");\n    foreach (int num in result)\n    {\n        Console.Write(num + \" \");\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write SQL to create a database called Products that has three columns: id, name, and price. [/INST] CREATE TABLE Products (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(9,2)\n);</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to compare 2 strings to determine if they are anagrams (words with the same letters as each other). [/INST] function anagramCheck(str1, str2) {\n  // Remove whitespace, convert strings to lowercase, and split into arrays\n  let arr1 = str1.replace(/\\s/g, '').toLowerCase().split('');\n  let arr2 = str2.replace(/\\s/g, '').toLowerCase().split('');\n  \n  // If the arrays are different lengths, they cannot be anagrams\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  \n  // Sort both arrays, and check if they are the same\n  let sortedArr1 = arr1.sort();\n  let sortedArr2 = arr2.sort();\n  \n  for (let i=0; i<sortedArr1.length; i++) {\n    if (sortedArr1[i] !== sortedArr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java method to print a binary tree in level order. [/INST] public class BinaryTree { \n  \n    // Root of Binary Tree \n    Node root; \n  \n    // Function to print binary tree in level order \n    void printLevelOrder() { \n        int h = height(root); \n        int i; \n        for (i = 1; i <= h; i++) \n            levelOrder(root, i); \n    } \n  \n    // Print nodes at a given level \n    void levelOrder(Node root, int level) { \n        if (root == null) \n            return; \n        if (level == 1) \n            System.out.print(root.data + \" \"); \n        else if (level > 1) { \n            levelOrder(root.left, level - 1); \n            levelOrder(root.right, level - 1); \n        } \n    } \n  \n    // Compute the height of a tree--the number of nodes \n    // along the longest path from the root node down to \n    // the farthest leaf node \n    int height(Node root) { \n        if (root == null) \n            return 0; \n        else { \n            // compute height of each subtree \n            int lheight = height(root.left); \n            int rheight = height(root.right); \n  \n            // use the larger one \n            if (lheight > rheight) \n                return (lheight + 1); \n            else\n                return (rheight + 1); \n        } \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form that, when submitted, displays all the user input on the same page. [/INST] <!DOCTYPE html>\n<html>\n<head>\n    <title>User Input</title>\n</head>\n<body>\n    <h1>User Input</h1>\n    <form action=\"#\" method=\"post\">\n        <label>Name: </label>\n        <input type=\"text\" name=\"name\" /><br>\n        <label>Email: </label>\n        <input type=\"email\" name=\"email\" /><br>\n        <label>Country: </label>\n        <input type=\"text\" name=\"country\" /><br><br>\n        <input type=\"submit\" value=\"Submit\" name=\"submit\" />\n    </form>\n<?php\nif(isset($_POST['submit'])){\n    $name = $_POST['name'];\n    $email = $_POST['email'];\n    $country = $_POST['country'];\n    echo \"<p>Your name is: $name <br>\";\n    echo \"Your email is: $email <br>\";\n    echo \"Your country is: $country <br></p>\";\n}\n?>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to find all records whose name starts with 'A'. [/INST] SELECT *\nFROM tableName\nWHERE name LIKE 'A%';</s>"
  },
  {
    "text": "<s>[INST] Create an Angular Component to display a user's profile information. [/INST] import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'user-profile',\n  template: `\n    <div>\n      <img src=\"{{ user.avatar }}\" alt=\"Profile Image\" />\n      <h3>{{ user.name }}</h3>\n      <p>{{ user.email }}</p>\n    </div>\n  `\n})\nexport class UserProfileComponent {\n  @Input() user;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code snippet to create a heading with the text \"GPT Demo\". [/INST] <h1>GPT Demo</h1></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to add the numbers 8 and 4. [/INST] var num1 = 8;\nvar num2 = 4;\nvar sum = num1 + num2;\n \nconsole.log(sum);</s>"
  },
  {
    "text": "<s>[INST] Write a PHP code to loop through an associative array and print all the key-value pairs.\n\n$arr = array(\n 'name' => 'John',\n 'age' => 28,\n 'gender' => 'male'\n); [/INST] foreach($arr as $key=>$value){\n  echo $key.':'.$value.\"<br>\";\n}</s>"
  },
  {
    "text": "<s>[INST] Create a method to validate an email address in Java. [/INST] public static boolean isValidEmail(String str) {\n    String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.\"+\n                        \"[a-zA-Z0-9_+&*-]+)*@\" +\n                        \"(?:[a-zA-Z0-9-]+\\\\.)+[a-z\" +\n                        \"A-Z]{2,7}$\";\n    Pattern pat = Pattern.compile(emailRegex);\n    if (str == null)\n        return false;\n    return pat.matcher(str).matches();\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object with two properties and their respective values. [/INST] var myData = {\n  name: 'John',\n  age: 28\n};</s>"
  },
  {
    "text": "<s>[INST] Create a method to generate a random integer between 1 and 10 in Python. [/INST] import random\n\ndef random_int():\n    return random.randint(1, 10)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve the names of employees who have been employed in the organization for more than 5 years. [/INST] SELECT name\nFROM employees\nWHERE years_employed > 5;</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form to accept a username and password. [/INST] <form action=\"\">\n  <label for=\"username\">Username:</label><br>\n  <input type=\"text\" id=\"username\" name=\"username\"><br>\n  <label for=\"password\">Password:</label><br>\n  <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to return the ranking of the employees with highest salary.\n\nSELECT * \nFROM Employees \nORDER BY Salary DESC [/INST] SELECT e.*,\n  RANK() OVER (ORDER BY Salary DESC) AS Rank\nFROM Employees e</s>"
  },
  {
    "text": "<s>[INST] Find the length of the string in the given input.\n\nstring = \"Hello World\" [/INST] len_string = len(string)\nprint(len_string) # output: 11</s>"
  },
  {
    "text": "<s>[INST] Compute the absolute difference between two given numbers.\n\nx = 7\ny = 4 [/INST] diff = abs(x - y)\nprint(diff) # output: 3</s>"
  },
  {
    "text": "<s>[INST] Create an object structure to represent a 3X3 grid of numbers. This grid should contain two 2’s, two 4’s, and a 6. [/INST] ```\nlet grid = [\n  [2, 4, 6],\n  [4, 2, 6],\n  [2, 6, 4]\n];\n```</s>"
  },
  {
    "text": "<s>[INST] Create a class \"Car\" that has an attribute \"make\" and an attribute \"model\". [/INST] ```\nclass Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n```</s>"
  },
  {
    "text": "<s>[INST] Create an array of integers ranging from 0 to 20 and print it. [/INST] ```\narray = []\nfor i in range(0,21):\n    array.append(i)\n\nprint(array)\n\n```</s>"
  },
  {
    "text": "<s>[INST] Extract the first name, last name and age from a given string.\n\n\"John Smith, 33\" [/INST] ```\nimport re\n\ns = 'John Smith, 33'\n\nfirstName = re.match(\"^\\w+\", s).group(0)\nlastName = re.search(\"\\w+$\", s).group(0)\nage = re.findall(\"(\\d+)\", s)[0]\n\nprint(firstName, lastName, age)\n\n```</s>"
  },
  {
    "text": "<s>[INST] Implement a function to calculate the absolute value of a number.\n\n-7 [/INST] ```\ndef absValue(num): \n    if num >= 0: \n        return num \n    else: \n        return -num \n  \nprint( absValue(-7) )\n\n```</s>"
  },
  {
    "text": "<s>[INST] Create an object to store key/value pairs representing students and their grades. [/INST] ```\nlet grades = {\n    \"John\": {\n        \"math\": 80,\n        \"science\": 90\n    },\n    \"Alex\": {\n        \"math\": 75,\n        \"science\": 95\n    }\n};\n\n```</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python with a constructor and two methods. [/INST] class MyClass:\n  def __init__(self):\n    self.x = 0\n\n  def method_1(self):\n    self.x +=1\n\n  def method_2(self, arg1):\n    self.x += arg1</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to filter a given list of strings by the specified character?\n\nmy_list = ['Hello', 'World', 'Hi', 'Python']\ncharacter = 'o' [/INST] def filter_list_by_character(my_list, character):\n  return [item for item in my_list if character in item]</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to return a boolean indicating whether a substring is present within a given string.\n\nstring = 'Hello world'\nsubstring = 'world' [/INST] def contains_substring(string, substring):\n  return substring in string</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form that has two input fields, first name and last name, and a submit button. [/INST] <form action=\"\">\n  First name: <input type=\"text\" name=\"firstname\"><br>\n  Last name: <input type=\"text\" name=\"lastname\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] How would you implement a Binary Search Tree in Java? [/INST] public class BinarySearchTree { \n  \n  /* Class containing left, right and root nodes */\n  class Node { \n    int key; \n    Node left, right; \n  \n    public Node(int item) {\n\t\tkey = item; \n\t\tleft = right = null; \n\t} \n  } \n  \n  // Root of BST \n  Node root; \n  \n  // Constructor \n  BinarySearchTree() {  \n\troot = null;  \n  } \n  \n  // This method mainly calls insertRec() \n  void insert(int key) { \n\t root = insertRec(root, key); \n  } \n  \n  /* A recursive function to insert a new key in BST */\n  Node insertRec(Node root, int key) { \n  \n\t// When the tree is empty, return a new node \n\tif (root == null) { \n\t\troot = new Node(key); \n\t\treturn root; \n\t}\n  \n\t// Otherwise, recurr down the tree \n\tif (key < root.key) \n\t\troot.left = insertRec(root.left, key); \n\telse if (key > root.key) \n\t\troot.right = insertRec(root.right, key);\n  \n\t// return the root \n\treturn root; \n  } \n\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Ruby which takes an array of numbers as input and return the smallest number in that array.\n\nnumbers = [14, 25, 120, 66, 5] [/INST] def find_min(numbers)\n  min = numbers[0]\n  numbers.each do |num|\n    if num < min\n      min = num\n    end\n  end\n  min\nend</s>"
  },
  {
    "text": "<s>[INST] Create a CSS stylesheet to style a text so that its size is one font size larger than the default text size. [/INST] body {\n font-size: 1em;\n}\n\nh1 {\n font-size: 1.2em;\n}\n\nh2 {\n font-size: 1.3em;\n}\n\nh3 {\n font-size: 1.4em;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to find the minimum cost of a path from top left cell to bottom right cell of a matrix.\n\nmatrix = [[2, 0, 3, 5],\n          [4, 5, 1, 2],\n          [3, 1, 2, 7]] [/INST] def min_path_sum(matrix):\n\n    # initialize the solution matrix\n    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    # copying the first row elements\n    res[0] = matrix[0]\n\n    # iterate over the remaining rows\n    for i in range(1, len(matrix)):\n        # copy the first element\n        res[i][0] = res[i-1][0] + matrix[i][0]\n\n        for j in range(1, len(matrix[0])):\n            # choose the smaller of the two\n            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]\n\n    # return the bottom-right element\n    return res[len(matrix)-1][len(matrix[0])-1]</s>"
  },
  {
    "text": "<s>[INST] How would you transform a JSON object into an XML document with JavaScript? [/INST] function json2xml(json) {\n  // Create the return variable\n  let xml = '';\n\n  // Parse the input\n  if (typeof json == 'object') {\n    for (let key in json) {\n      // Add a start tag\n      xml += '<' + key + '>';\n\n      // Check for child elements\n      if (typeof json[key] == 'object') {\n        // Recursively traverse the child elements\n        xml += json2xml(json[key]);\n      } else if (typeof json[key] == 'string') {\n        // Add a value\n        xml += json[key];\n      } else {\n        // Add nothing\n      }\n\n      // Add an end tag\n      xml += '</' + key + '>';\n    }\n  } else if (typeof json == 'string') {\n    // Add the value\n    xml += json;\n  } else {\n    // Add nothing\n  }\n\n  // Return the XML\n  return xml;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a table showing the results of the following SQL query:\n\nSELECT student_name, grade \nFROM students\nORDER BY grade DESC [/INST] <html>\n  <head>\n    <title>Student Grades</title>\n  </head>\n  <body>\n    <h2>Student Grades</h2>\n    <table>\n      <thead>\n        <tr>\n          <th>Student Name</th>\n          <th>Grade</th>\n        </tr>\n      </thead>\n      <tbody>\n        <?php\n          // Connect to the database\n          // Run the query\n          // Loop through the results\n          ?>\n      </tbody>\n    </table>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a CSS style to highlight code blocks on a web page. [/INST] pre {\n  background-color: #f7f7f7;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\ncode {\n  color: #f80;\n  background-color: #fcfcfc;\n  padding: 3px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}</s>"
  },
  {
    "text": "<s>[INST] Read the code and delete the unnecessary code. Output should contain the refactored code.\n\ndef remove_duplicates(data):\n    \"\"\"\n    Return a new list with duplicates removed.\n    \"\"\"\n    output = []\n    for item in data:\n        if item not in output:\n            output.append(item)\n    return output [/INST] def remove_duplicates(data):\n    \"\"\"Return a new list with duplicates removed.\"\"\"\n    return list(set(data))</s>"
  },
  {
    "text": "<s>[INST] You need to answer the following question: what is the output of the following code?\n\ndef double_value(number):\n   return number * 2\n\nx = double_value(3)\nprint(x) [/INST] 6</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select all properties with a price between 500 and 1000. [/INST] SELECT * FROM properties WHERE price BETWEEN 500 AND 1000;</s>"
  },
  {
    "text": "<s>[INST] Modify the HTML code with the following: Make all the text bold without changing the fontsize.\n\n<div>\n    <h1>Welcome</h1>\n    <p>This is an example text</p>\n</div> [/INST] <div>\n    <h1><strong>Welcome</strong></h1>\n    <p><strong>This is an example text</strong></p>\n</div></s>"
  },
  {
    "text": "<s>[INST] You need to edit the following code so that it returns \"hello world\" as a string.\n\nfunction greet() {\n    return 'hello' \n} [/INST] function greet() {\n    return 'hello' + ' world'\n}</s>"
  },
  {
    "text": "<s>[INST] You need to use a for loop to create the following sequence: 1,4,7,10,13 [/INST] for (let i = 1; i <= 13; i += 3) {\n    console.log(i)\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all the distinct cities in the given dataset. [/INST] SELECT DISTINCT City FROM dataset;</s>"
  },
  {
    "text": "<s>[INST] Determine the number of times a specific value exists in an array.\n\narr = [1, 2, 3, 3, 4, 5, 3]\nnum = 3 [/INST] let num = 3;\nlet count = 0;\nfor (let i = 0; i < arr.length; i++) {\n   if (arr[i] === num) {\n      count++;\n   }\n}\nconsole.log(count);</s>"
  },
  {
    "text": "<s>[INST] You need to create a loop that prints out the square root of the numbers from 1 to 10. [/INST] for (let i = 1; i <= 10; i++) {\n    console.log(Math.sqrt(i));\n}</s>"
  },
  {
    "text": "<s>[INST] Output the following string in reverse order using loops.\n\nHello World [/INST] for (let i = 10; i >= 0; i--) {\n    console.log(msg[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Count how many words are in a given sentence.\n\nThis sentence contains five words. [/INST] let sentence = \"This sentence contains five words.\";\nlet words = sentence.split(\" \");\nconsole.log(words.length);</s>"
  },
  {
    "text": "<s>[INST] Create a function to compute the Fibonacci sequence for a given input [/INST] def compute_fibonacci(n):\n    fib_list = []\n    a, b = 0, 1\n\n    while a < n:\n        fib_list.append(a)\n        a, b = b, a+b\n    return fib_list</s>"
  },
  {
    "text": "<s>[INST] Create a boolean function to check whether a given string contains all alphabets\n\nphrase = \"The quick brown fox jumps over the lazy dog\" [/INST] def is_alphabetical(phrase):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in phrase:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Using the given information, write a function to calculate a 5-digit ISBN number.\n\nAuthor name: Bob Smith\nTitle of Book: Learn Programming\nPublisher: Aztec Publishing\nYear Published: 2020 [/INST] def calculate_isbn(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\n    isbn_total = 0\n\n    for letter in authorname_string:\n        isbn_total += ord(letter)\n\n    for letter in title_string:\n        isbn_total += ord(letter)\n\n    for letter in publisher_string:\n        isbn_total += ord(letter) \n\n    isbn_total += yearpublished\n\n    while isbn_total > 9999:\n        isbn_total = isbn_total % 10000\n\n    isbn_string = str(isbn_total).zfill(5)\n\n    return isbn_string</s>"
  },
  {
    "text": "<s>[INST] Write a function to find the n-th Fibonacci number for a given n [/INST] def get_fibonacci(n):\n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b</s>"
  },
  {
    "text": "<s>[INST] Write a C++ class to store student information [/INST] class Student {\n  private:\n    string name;\n    int age;\n    string address;\n  public:\n    Student();\n    Student(string name, int age, string address);\n    void setName(string name);\n    void setAge(int age);\n    void setAddress(string address);\n    string getName();\n    int getAge();\n    string getAddress();\n};</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to replace all instances of a specific character in a string.\n\nstring = \"Hello World!\"\ncharacter = \"o\"\nreplacement_character = \"_\" [/INST] def replace_character(string, character, replacement_character):\n    new_string = \"\"\n    for c in string:\n        if c == character:\n            new_string += replacement_character\n        else:\n            new_string += c\n    return new_string</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to print a pyramid of asterisks with a given height.\n\nheight = 5 [/INST] void print_pyramid(int height) {\n  for (int i = 0; i < height; i++) {\n    for (int j = 0; j < height - i - 1; j++)\n      cout << \" \";\n    for (int k = 0; k <= i; k++)\n      cout << \"* \";\n    cout << endl;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to print a multiline message in Python\n\nmessage = \"This is a multiline \nmessage.\" [/INST] def print_multiline_message(message):\n    print(message)</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program to print out the values of each key of an object\n\nmyObj = {\n    \"name\": \"Bob\",\n    \"age\": 20,\n    \"city\": \"New York\"\n} [/INST] function printObject(myObj) {\n    for (let key in myObj) {\n        console.log(myObj[key]);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Please fix the following broken HTML code.\n\n<html>\n  <head>\n    <title>Test HTML Page\n  </head>\n  <body>\n/body>\n</html> [/INST] <html>\n  <head>\n    <title>Test HTML Page</title>\n  </head>\n  <body>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to loop through an array in reverse order.\n\nvar arr = [5, 2, 6, 9, 3]; [/INST] var arr = [5, 2, 6, 9, 3];\n\nfor (var i = arr.length-1; i >= 0; i--) {\n    console.log(arr[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Describe a pipelined architecture for a processor [/INST] A pipelined Processor architecture is one in which the instruction set is divided into separate stages, each associated with a specific segment in the computation process. As an instruction is entered, it is routed to the appropriate stage in the pipeline and progresses sequentially, thereby allowing the processor to complete multiple instructions simultaneously. The stages, known as the pipeline stages, can include IF (Instruction Fetch), ID (Instruction Decode), EX (Execution), MEM (Memory Access) and WB (Write-Back). The IF and ID stages typically handle instruction fetch and decode, while EX and MEM perform instruction execution and memory access, respectively. The final stage, WB, is responsible for writing the result to memory or a register.</s>"
  },
  {
    "text": "<s>[INST] Add a function to the following JavaScript code to search a value in a given array\n\nconst arr = [12, 5, 8, 130, 44]; [/INST] const arr = [12, 5, 8, 130, 44];\n\nfunction searchValue(arr, value) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === value) {\n            return (i);\n        }\n    }\n    return -1;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a global function in Java to convert an integer number into its String equivalent. [/INST] public static String numberToString(int num) {\n    StringBuilder sb = new StringBuilder();\n    \n    // if num is negative, append '-' to sb\n    if (num < 0) {\n        sb.append('-');\n    }\n    \n    // obtain absolute value to accommodate for all numbers\n    num = Math.abs(num);\n    \n    // extract each digit and append to sb\n    while (num > 0) {\n        int digit = num % 10;\n        sb.append(digit);\n        num /= 10;\n    }\n    \n    return sb.reverse().toString();\n}</s>"
  },
  {
    "text": "<s>[INST] Design an approach in Python to retrieve a record from a database. [/INST] import sqlite3\n\ndef retrieve_record(db_name, table_name, id):\n    try:  \n        con = sqlite3.connect(db_name)\n        cur = con.cursor()\n        cur.execute(\"SELECT * FROM {} where id={};\".format(table_name, id))\n        record = cur.fetchone()\n    except:\n        record = None\n    finally:    \n        cur.close()\n        con.close()\n    return record</s>"
  },
  {
    "text": "<s>[INST] Create a function in C that creates a new string with all the characters in reverse order. [/INST] char* reverseString(char* str) {\n    int length = strlen(str);\n    char* revString = (char*) malloc(length + 1);\n    \n    for (int i = 0; i < length; i++) {\n        revString[i] = str[length - i - 1];\n    }\n    revString[length] = '\\0';\n    \n    return revString;\n}</s>"
  },
  {
    "text": "<s>[INST] Modify the following HTML to open the page with a single button in center that says \"GO!\".\n\n<body>\n<h1>Welcome!</h1>\n</body> [/INST] <body>\n<h1>Welcome!</h1>\n<div align=\"center\">\n    <button type=\"button\" onclick=\"window.open('https://example.com/')\">GO!</button> \n</div>\n</body></s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to delete a row in table \"book\" with an id of \"100\". [/INST] DELETE FROM book WHERE id=100;</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following ruby program:\n\nbegin \n  puts \"Hello World!\" \nend [/INST] puts \"Hello World!\"</s>"
  },
  {
    "text": "<s>[INST] Generate a pseudocode of a breadth first search algorithm. [/INST] 1. Create a queue Q\n\n2. Enqueue item S(source) onto Q\n\n3. For each element v in the adjacency list of S \n    3.1. Enqueue v onto Q\n    3.2. Set v's predecessor to S\n\n4. While Q is not empty\n    4.1. Dequeue an item u from Q \n    4.2. For each element v in the adjacency list of u\n       4.2.1. If v is unvisited, then\n           4.2.1.1. set v's predecessor to u\n           4.2.2.2. enqueue v onto Q\n\n5. Return each node's predecessor</s>"
  },
  {
    "text": "<s>[INST] Compile the following Java program.\n\nclass HelloWorld \n{ \n    public static void main(String args[]) \n    { \n        System.out.println(\"Hello, World\"); \n    } \n} [/INST] javac HelloWorld.java</s>"
  },
  {
    "text": "<s>[INST] Edit the code below to add an exception handling mechanism in it.\n\ndef divide(a, b):\n    return a/b [/INST] def divide(a, b):\n    try: \n        return a/b\n    except ZeroDivisionError:\n        print(\"Division by zero is undefined\")</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two integers and returns the remainder when the greater integer is divided by the smaller integer. [/INST] def remainder(a,b):\n    if a > b:\n        return a % b\n    else:\n        return b % a</s>"
  },
  {
    "text": "<s>[INST] Compose a query in SQL to delete all records from a table named \"students\". [/INST] DELETE FROM students;</s>"
  },
  {
    "text": "<s>[INST] Create a list of the first 10 perfect squares. [/INST] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that displays a table containing four columns: first name, last name, age, and city. Put your own data into the columns. [/INST] <html>\n <head>\n  <title>People Table</title>\n </head> \n <body>\n  <table>\n   <tr>\n    <th>First Name</th>\n    <th>Last Name</th>\n    <th>Age</th>\n    <th>City</th>\n   </tr>\n   <tr>\n    <td>John</td>\n    <td>Doe</td>\n    <td>50</td>\n    <td>New York</td>\n   </tr>\n   <tr>\n    <td>Jane</td>\n    <td>Smith</td>\n    <td>41</td>\n    <td>Los Angeles</td>\n   </tr>\n   <tr>\n    <td>Dave</td>\n    <td>Jackson</td>\n    <td>28</td>\n    <td>Boston</td>\n   </tr>\n  </table>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Ruby program to swap two given variables a and b.\n\na = 10, b = 5 [/INST] a, b = b, a\nputs a # => 5\nputs b # => 10</s>"
  },
  {
    "text": "<s>[INST] Write an HTML form to collect user input for a username and password. [/INST] <form action=\"\">\n  <label for=\"username\"> Username: </label>\n  <input type=\"text\" name=\"username\" id=\"username\" required />\n  <br />\n  <label for=\"password\"> Password: </label>\n  <input type=\"password\" name=\"password\" id=\"password\" required />\n  <br />\n  <input type=\"submit\" value=\"Submit\" />\n</form></s>"
  },
  {
    "text": "<s>[INST] Convert the following regular expression to match strings of 3 or 4 digits: \"(\\d{3,4})\". [/INST] ^\\d{3,4}$</s>"
  },
  {
    "text": "<s>[INST] Generate a Java program that creates a random array of 10 integers ranging from 0 to 9. [/INST] import java.util.Random;\n\nclass GenerateRandomArray{\n \n    public static void main(String[] args)\n    {\n        int[] arr = new int[10];\n        Random random = new Random();\n        for (int i=0; i<arr.length; i++){\n            arr[i] = random.nextInt(10);\n        }\n \n        // print the elements\n        for (int i=0; i<arr.length; i++){\n            System.out.print(arr[i]+ \" \");\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with an input field and a button, and write a JavaScript function that sets the font size of the entered text in the input field to 16pt when the button is clicked. [/INST] <html>\n<head>\n    <title>Change Font Size</title>\n    <script type=\"text/javascript\">\n        function changeFontSize() {\n            var inputField = document.getElementById(\"inputField\");\n            inputField.style.fontSize = \"16pt\";\n        }\n    </script>\n</head>\n<body>\n    <input type=\"text\" id=\"inputField\" placeholder=\"Enter Text Here\">\n    <button type=\"button\" onclick=\"changeFontSize()\">Change Font Size</button>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, write a Java method to find the largest three numbers.\n\n[3, 5, 9, 4, 8, 6, 1] [/INST] public static void largestThreeNumbers(int[] numbers) { \n    Arrays.sort(numbers); \n  \n    int size = numbers.length; \n    System.out.println(\"Largest three numbers: \"\n                        + numbers[size-1] + \" \"\n                        + numbers[size-2] + \" \"\n                        + numbers[size-3]); \n}</s>"
  },
  {
    "text": "<s>[INST] Design a Python function to return the list of values in two separate lists for even and odd numbers in a given list.\n\n[1, 2, 3, 4, 5] [/INST] def separateEvenOdd(nums):\n    evenList = []\n    oddList = []\n\n    for n in nums:\n        if n % 2 == 0:\n            evenList.append(n)\n        else:\n            oddList.append(n)\n\n    return evenList, oddList\n\nprint(separateEvenOdd([1,2,3,4,5]))</s>"
  },
  {
    "text": "<s>[INST] Produce a MySQL query to calculate the average age of people who have age greater than 23. [/INST] SELECT AVG(age) \nFROM people \nWHERE age > 23;</s>"
  },
  {
    "text": "<s>[INST] Convert the following regular expression to one that matches strings of at least 3 digits: \"\\d+\". [/INST] ^\\d{3,}$</s>"
  },
  {
    "text": "<s>[INST] Create a function in python that takes a string as an argument and prints out two copies of the string.\n\nstring = \"Hello World!\" [/INST] def print_twice(string):\n    print(string)\n    print(string)\n    \nprint_twice(string)</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to find the names of all students enrolled in a particular course.\n\ntable_name = \"students\"\ncourse_name = \"Data Science\" [/INST] SELECT name\nFROM students\nWHERE course_name = 'Data Science'</s>"
  },
  {
    "text": "<s>[INST] Using the given list, calculate the mode and median.\n\n[2, 4, 5, -6, 8, 9, -9, 10, 19] [/INST] Mode: -9 \nMedian: 7</s>"
  },
  {
    "text": "<s>[INST] Sort the given list.\n\n[7, 3, 5, 6, 2] [/INST] [2, 3, 5, 6, 7]</s>"
  },
  {
    "text": "<s>[INST] Using the comment as a guide, add the appropriate exception handling code.\n\ntry: \n\tdiv_num=5/0\nexcept ZeroDivisionError as e:\n\t# TODO:\n\t    print(\"Divide by zero error\") [/INST] try: \n\tdiv_num=5/0\nexcept ZeroDivisionError as e:\n\t# TODO:\n    print(\"Divide by zero error\")\n    print(\"Error message: \" + str(e))</s>"
  },
  {
    "text": "<s>[INST] Create a program that logs the time a user entered a program. [/INST] import time\n\ndef log_time():\n    current_time = time.time()\n    print(\"You entered the program at\", current_time)</s>"
  },
  {
    "text": "<s>[INST] Create a Python loop that will iterate through the following list and will print each item's value multiplied with 5.\n\nnumbers = [5, 10, 15, 20, 25] [/INST] for number in numbers:\n    print(number*5)</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript code snippet that will sum all the numbers in the following array and will then print the result.\n\nnumbers = [5, 10, 15, 20, 25] [/INST] let result = 0;\n\nfor (let number of numbers){\n result += number;\n}\n\nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Using the given array of numbers, write a JavaScript code to print the sum of all the numbers.\n\nnumbers = [5, 10, 15, 20, 25] [/INST] let result = 0;\n\nfor (let number of numbers){\n result += number;\n}\n\nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object with two keys, \"firstName\" and \"lastName\". The values should be two strings, your first and last name. [/INST] let user = {\n  firstName: 'Jane',\n  lastName: 'Doe'\n};</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the names of all customers whose last names start with the letter \"S\". [/INST] SELECT * FROM customers WHERE last_name LIKE 'S%';</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript to read the following JSON object and print its \"name\" key value\n\ndata = {\n  \"name\": \"John\",\n  \"age\": \"33\",\n  \"city\": \"New York\"\n} [/INST] console.log(data.name);</s>"
  },
  {
    "text": "<s>[INST] Using the given code, create a JavaScript to add an item to the data array.\n\nlet data = [\n  {name:\"John\", age:20},\n  {name:\"Amy\", age:21}\n] [/INST] data.push({name: 'Bob', age: 25});</s>"
  },
  {
    "text": "<s>[INST] Write a PHP function which receives an array as input and return a filtered array.\n\n<?php \n$temp_array = array (1, 2, 3, 4, 5, 6, 7, 8, 9); [/INST] <?php\nfunction filter_array($array) {\n    // This function will filter the array and remove values that are not a number\n    $filtered_array = array();\n    foreach ($array as $value) {\n        if (is_numeric($value)) {\n            $filtered_array[] = $value;\n        }\n    }\n    return $filtered_array;\n}\n\n$temp_array = array (1, 2, 3, 4, 5, 6, 7, 8, 9);\n$filtered_array = filter_array($temp_array);</s>"
  },
  {
    "text": "<s>[INST] Generate a query in SQL which can retrieve the maximum price for each product. [/INST] SELECT product_id, MAX(price)\nFROM product_table\nGROUP BY product_id;</s>"
  },
  {
    "text": "<s>[INST] Create a function in a Java class which can receive a string and remove punctuations. [/INST] public class StringUtils {\n\n    public static String removePunctuation(String input) {\n        String output = input.replaceAll(\"[^a-zA-Z0-9 ]\", \"\");\n        return output;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] You need to group an array of objects according to their property. Output an object containing the grouped items.\n\nlet array = [ \n    { name: \"John\", type: \"fruit\" }, \n    { name: \"Paul\", type: \"vegetable\" },\n    { name: \"Ringo\", type: \"fruit\" } \n] [/INST] let groupedItems = {\n    fruit: [{name: \"John\", type: \"fruit\"}, {name: \"Ringo\", type: \"fruit\"}],\n    vegetable: [{name: \"Paul\", type: \"vegetable\"}]\n}</s>"
  },
  {
    "text": "<s>[INST] In JavaScript, write a function which can split a string into its constituent words. [/INST] function split_string_to_words(string) {\n    return string.split(' ');\n}</s>"
  },
  {
    "text": "<s>[INST] You need to prefill an array with a given value.\n\nlet array = new Array(10);\nlet val = 'foo' [/INST] let prefilledArray = array.fill(val);</s>"
  },
  {
    "text": "<s>[INST] Create a script in Python which can generate random numbers in a given range. [/INST] import random\n\ndef generate_random_number_in_range(min_value, max_value):\n    return random.randint(min_value, max_value)</s>"
  },
  {
    "text": "<s>[INST] Use regular expression to match all valid URLs in a string.\n\n// This is a string containing valid and invalid URLs\nlet string = 'https://www.example.com/?q=test http://example.org#page http://example.com/# invalid_url' [/INST] let urls = string.match(/https?:\\/\\/(www\\.)?([a-zA-Z0-9][-a-zA-Z0-9]+\\.)+[a-zA-Z]+(\\/[-a-zA-Z0-9_:\\@&?=+,.!/~*'\\(\\)]*)?/g);</s>"
  },
  {
    "text": "<s>[INST] You need to generate an array of strings of length 5 to 10 characters. [/INST] import string\nimport random\n\ndef generate_string_array(length):\n    # This function will generate an array of strings\n    array_of_strings = []\n    for _ in range(length):\n        new_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(5,10)))\n        array_of_strings.append(new_string)\n    return array_of_strings</s>"
  },
  {
    "text": "<s>[INST] Reorder an array of numbers in descending order.\n\nlet array = [3, 8, 5, 1, 9] [/INST] let sortedArray = array.sort((a,b) => b - a);</s>"
  },
  {
    "text": "<s>[INST] You need to run a loop 'n' times and print a value each time.\n\nlet n = 10; [/INST] for (let i = 0; i < n; i++) {\n    console.log(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Write code to generate a random six-character string that contains at least one lowercase letter and one number. [/INST] import string\nimport random\n\ndef generate_code():\n    chars = string.ascii_lowercase + string.digits\n    return ''.join(random.choices(chars, k=6))</s>"
  },
  {
    "text": "<s>[INST] How can we remove all elements of a list that meet a certain condition? [/INST] def remove_condition(lst, condition):\n    return [x for x in lst if not condition(x)]</s>"
  },
  {
    "text": "<s>[INST] What is the syntax to create a list of numbers from 0 to n in Python? [/INST] def create_list(n):\n    return [i for i in range(n+1)]</s>"
  },
  {
    "text": "<s>[INST] Reverse the order of a list without using the built-in reverse function. [/INST] def reverse_list(lst):\n    rev = []\n    for x in lst:\n        rev.insert(0, x)\n    return rev</s>"
  },
  {
    "text": "<s>[INST] How can we check if a given string is a valid IP address or not? [/INST] import re\n\ndef isvalid_ip(string):\n    regex = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    if re.search(regex, string):\n        return True \n    else: \n        return False</s>"
  },
  {
    "text": "<s>[INST] How can we sort a given list of integers in ascending order? [/INST] def sort_list(lst):\n    return sorted(lst)</s>"
  },
  {
    "text": "<s>[INST] How can we trim a specified amount of characters from the beginning of a string in Python? [/INST] def trim_string(string, n):\n    return string[n:]</s>"
  },
  {
    "text": "<s>[INST] Design a MySQL query to retrieve the title of all subscribed books from the library database.\n\nTable: books\nFields: id, title, author, is_subscribed [/INST] SELECT title \nFROM books \nWHERE is_subscribed IS TRUE;</s>"
  },
  {
    "text": "<s>[INST] Create a node module for connecting to a MongoDB database [/INST] const MongoClient = require('mongodb').MongoClient;\n\n// Connect to the db\nmodule.exports.connect = function(opts, callback) {\n  MongoClient.connect(opts.db_url, (err, client) => {\n    if (err) {\n      return callback(err);\n    }\n    const db = client.db(opts.db_name);\n    return callback(null, db);\n  });\n};</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to list the names of all members who have not yet made a payment this month.\n\nTable:  members\nFields:  member_id, name, paid_this_month [/INST] SELECT name \nFROM members \nWHERE paid_this_month IS FALSE;</s>"
  },
  {
    "text": "<s>[INST] Edit the following CSS code to make all headings appear in bold.\n\nh1, h2, h3 {\n    font-size: 1em;\n    color: #111111;\n} [/INST] h1, h2, h3 {\n    font-size: 1em;\n    color: #111111;\n    font-weight: bold;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in C# to find the area of a triangle given 3 side lengths. [/INST] public static double Area(double a, double b, double c) \n{ \n    // Calculate the semiperimeter  \n    double s = (a + b + c) / 2; \n  \n    // Calculate the area  \n    double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c)); \n  \n    return area; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a method in Java that takes a string as input and returns its length. [/INST] public static int getStringLength(String str) \n{ \n    // Return the length of the string\n    return str.length(); \n}</s>"
  },
  {
    "text": "<s>[INST] Design a SQL query to list all the unique authors in the book table.\n\nTable: books\nFields: id, title, author, is_subscribed [/INST] SELECT DISTINCT author\nFROM books;</s>"
  },
  {
    "text": "<s>[INST] Construct a HTML form with three input fields and a submit button. [/INST] <form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n  <label for=\"age\">Age:</label>\n  <input type=\"number\" id=\"age\" name=\"age\"><br><br>\n  <label for=\"salary\">Salary:</label>\n  <input type=\"number\" id=\"salary\" name=\"salary\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a Java program that calculates the probability of rolling a pair of dice and getting the number 8. [/INST] public static double calculateProbability(int target) {\n    int numFavorableOutcomes = 0;\n    int numTotalOutcomes = 36;\n    for (int i = 1; i <=6; i++) {\n        for (int j = 1; j <= 6; j++) {\n            if (i + j == target) {\n                numFavorableOutcomes++;\n            }\n        }\n    }\n    return (double) numFavorableOutcomes/numTotalOutcomes;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a web page with three columns and a header. [/INST] <html>\n  <head>\n    <title>Three Column Page</title>\n  </head>\n  <body>\n    <h1> Three Column Page </h1>\n    <div>\n      <div style=\"float:left;width:33%;\">\n        Content for Column 1\n      </div>\n      <div style=\"float:left;width:33%;\">\n        Content for Column 2\n      </div>\n      <div style=\"float:left;width:33%;\">\n        Content for Column 3\n      </div>\n    </div>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Design a query in SQLite to retrieve information about the books with more than 10 pages.\n\nTable: books\nFields: id, title, author, num_pages [/INST] SELECT title, author, num_pages \nFROM books \nWHERE num_pages > 10;</s>"
  },
  {
    "text": "<s>[INST] Update the following Swift code to print the message \"Hello from Swift!\". [/INST] print(\"Hello from Swift!\")</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form for entering a user's age. [/INST] <form>\n    <label for=\"age\">Age: </label>\n    <input type=\"number\" name=\"age\" id=\"age\"/>\n</form></s>"
  },
  {
    "text": "<s>[INST] Explain with a code snippet how to execute an AJAX request in JavaScript. [/INST] const xhr = new XMLHttpRequest();\n\nxhr.open('GET', 'https://example.com/api');\nxhr.send();\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n        // Response is ready and request was successful \n        console.log(xhr.responseText);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of the \"head\" tag in HTML. [/INST] The \"head\" tag in HTML is used to contain metadata about a page. This metadata includes tags such as title, description, js/css resources to include,  additional search keywords, etc. This metadata is essential for web search engine optimization and helps improve the visibility of the page on search engines. Additionally, the \"head\" tag can also be used to include additional scripts and style sheets to be used in the page.</s>"
  },
  {
    "text": "<s>[INST] Write a Java Program to print the Fibonacci numbers for a given range. [/INST] public class Fibonacci {\n\n    public static void main(String[] args) {\n         \n        int range = 10;\n        int i = 0;\n        int fibo = 0;\n        int fibo1 = 1;\n        int fibo2 = 1;\n\n        while(i <= range) {\n            System.out.print(fibo + \" \");\n            fibo = fibo1 + fibo2;\n            fibo1 = fibo2;\n            fibo2 = fibo;\n            i++;\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] What data structure would be best used to store a phone book? [/INST] A hash table is a suitable data structure to store a phone book as it provides quick and efficient access to stored data via a simple hashing algorithm. This allows for simple lookups of data stored against a key, like a person's name. A hash table also provides quick insertion and deletion of data without impacting the efficiency of searches.</s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query to find all documents where the 'name' field contains the string 'alex'. [/INST] db.collection.find({\"name\": {$regex : /alex/i}})</s>"
  },
  {
    "text": "<s>[INST] Name 3 methods for making a web page more responsive [/INST] Three methods for making a web page more responsive are:\n\n1. Minimize the number and size of images used in the page. This reduces the page size and load time. \n2. Implement lazy loading of images, i.e. delay loading images until they are needed. This helps avoid loading images that are far down the page and will not be visible to the user.\n3. Make use of modern web technologies such as AJAX to asynchronously update elements on the page without requiring a full page refresh.</s>"
  },
  {
    "text": "<s>[INST] Describe 3 ways to make a web page more accessible [/INST] Three ways to make a web page more accessible are:\n\n1. Provide alternative text for images and videos. This ensures people with vision or hearing impairment can understand the content on the page.\n2. Ensure that the page is navigable with a keyboard. This allows people who cannot use a mouse to still use the web page.\n3. Structure the page elements following standards such as HTML5 and ARIA to aid assistive technology users in navigating the page. This also helps machines understand the content and structure of a page.</s>"
  },
  {
    "text": "<s>[INST] Using the data structure created in question 4, write a function to populate the person details.\n\nname: John\nage: 23\nstreet: 123 Main St\ncity: New York\nstate: NY\nzip: 10222 [/INST] def populate_person(name, age, street, city, state, zip):\n    person_data['name'] = name\n    person_data['age'] = age\n    person_data['address']['street'] = street\n    person_data['address']['city'] = city\n    person_data['address']['state'] = state\n    person_data['address']['zip'] = zip</s>"
  },
  {
    "text": "<s>[INST] You need to write a function to find the absolute difference between a number and its reverse. [/INST] def absolute_difference(n):\n    num = str(n)\n    rev = num[::-1]\n    diff = int(num) - int(rev)\n    return abs(diff)</s>"
  },
  {
    "text": "<s>[INST] You need to write a function to find the sum of the squares of even numbers in a given list.\n\nlist_example = [2, 3, 4, 5] [/INST] def sum_of_even_squares(lst):\n    sum = 0\n    for elem in lst:\n        if elem % 2 == 0:\n            sum += elem**2\n    return sum\n\ntotal_sum = sum_of_even_squares(list_example) #total_sum is equal to</s>"
  },
  {
    "text": "<s>[INST] Create a script to convert a number in scientific notation into a float\n\nNumber: 6.02e23 [/INST] x = float(6.02e23)\nprint(x) # 6.02E+23</s>"
  },
  {
    "text": "<s>[INST] What is the Euclidean distance between two points?\n\nTwo points: (1, 0) and (4, 3) [/INST] The Euclidean distance between two points (1, 0) and (4, 3) is 5.0.</s>"
  },
  {
    "text": "<s>[INST] What is the Python built-in function to swap two values? [/INST] The Python built-in function to swap two values is the \"tuple unpacking\" operator (x, y = y, x). This allows you to swap two variables without having to use a temporary variable.</s>"
  },
  {
    "text": "<s>[INST] How to generate a random string of a given length in Python?\n\nLength: 10 [/INST] import random\nimport string\n\nlength = 10\n\nx = ''.join(random.choices(string.ascii_letters + string.digits, k=length))\nprint(x) # 'sbMTWHmfrh'</s>"
  },
  {
    "text": "<s>[INST] Write a method to sum up two matrices\n\nMatrix A: [[3, 5, 7],\n           [1, 6, 9]]\nMatrix B: [[4, 8, 2],\n           [3, 5, 7]] [/INST] def matrix_addition(A, B):\n    if len(A) != len(B) or len(A[0]) != len(B[0]):\n        return 'Matrices cannot be added!'\n    else:\n        result = [[0 for i in range(len(A[0]))] for j in range(len(A))]\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                result[i][j] = A[i][j] + B[i][j]\n        return result\n\nA = [[3, 5, 7], [1, 6, 9]]\nB = [[4, 8, 2], [3, 5, 7]]\n\nprint(matrix_addition(A, B)) # [[7, 13, 9], [4, 11, 16]]</s>"
  },
  {
    "text": "<s>[INST] Who is the author of the book \"Alice in Wonderland\"? [/INST] The author of the book \"Alice in Wonderland\" is Lewis Carroll.</s>"
  },
  {
    "text": "<s>[INST] Create a Python function that takes one argument as an array of integers and returns the sum of all the integers.\n\n[2, 3, 4, 5] [/INST] def sum_array(array):\n    res = 0\n    for i in array:\n        res += i\n    return res</s>"
  },
  {
    "text": "<s>[INST] Create a data structure in C to store student information, including name, age, statistical data. [/INST] #include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char* name;\n    int age;\n    float statistics[];\n} student;</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in Python that sorts an array of n numbers using insertion sort.\n\n[5, 3, 2, 4, 1] [/INST] def insert_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key</s>"
  },
  {
    "text": "<s>[INST] Construct an HTML page with a table that displays employee information, including name, age, and salary. [/INST] <html>\n  <head>\n    <title>Employee Information</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Salary</th>\n      </tr>\n      <tr>\n        <td>John</td>\n        <td>32</td>\n        <td>50000</td>\n      </tr>\n      <tr>\n        <td>Karen</td>\n        <td>30</td>\n        <td>45000</td>\n      </tr>\n      <tr>\n        <td>Bob</td>\n        <td>35</td>\n        <td>55000</td>\n      </tr>\n    </table>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in JavaScript to merge two sorted arrays into one.\n\narr1 = [1, 3, 5, 7]\narr2 = [2, 4, 6, 8] [/INST] function mergeArrays(arr1, arr2) {\n    let result = [];\n    let index1 = 0;\n    let index2 = 0;\n\n    while (index1 < arr1.length && index2 < arr2.length) {\n        if (arr1[index1] < arr2[index2]) {\n            result.push(arr1[index1]);\n            index1++;\n        } else {\n            result.push(arr2[index2]);\n            index2++;\n        }\n    }\n\n    while (index1 < arr1.length) {\n        result.push(arr1[index1]);\n        index1++;\n    }\n\n    while (index2 < arr2.length) {\n        result.push(arr2[index2]);\n        index2++;\n    }\n\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Compute the median of an array of integers in Python.\n\n[1, 2, 3, 4, 5] [/INST] def median(arr): \n    arr.sort() \n    if (len(arr) % 2 != 0): \n        return arr[len(arr) // 2] \n    else: \n        return (arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 2.0</s>"
  },
  {
    "text": "<s>[INST] Construct a regex in Java that matches a valid email address. [/INST] String regex = \"^[\\\\w-_\\\\.+]*[\\\\w-_\\\\.]\\\\@([\\\\w]+\\\\.)+[\\\\w]+[\\\\w]$\";</s>"
  },
  {
    "text": "<s>[INST] Create a Bash script to delete the contents of a directory but preserve the directory structure. [/INST] #!/bin/bash\nDIRECTORY=$1\nfind $DIRECTORY -mindepth 1 -maxdepth 1 -type f -exec rm '{}' \\;</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to get the most recent entries from a table of blog posts. [/INST] SELECT * FROM blog_posts ORDER BY timestamp DESC LIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Design a class that stores information about a person. [/INST] class Person:\n    def __init__(self, first_name, last_name, age, gender):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.gender = gender</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a string and returns the longest set of characters in descending order.\n\nHello World [/INST] def longest_substring(string):\n    longest = ''\n    current = ''\n    for i in range(len(string)):\n        if (i==0 or string[i] >= string[i-1]):\n            current += string[i]\n            if (len(current) > len(longest)):\n                longest = current\n        else:\n            current = string[i]\n    return longest</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to find the maximum number from a set of numbers\n\nSet of numbers: [24, 5, 40, 15] [/INST] # Algorithm\n\n1. Initialize maximum as 0\n2. Iterate through each number in the set\n  a. if number > maximum:\n      i. set maximum as number\n3. Return maximum</s>"
  },
  {
    "text": "<s>[INST] Write Java code to generate a matrix of size n.\n\nn = 5 [/INST] public static int[][] generateMatrix(int n){\n    int[][] matrix = new int[n][n];\n    \n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            matrix[i][j] = i * n + j;\n        }\n    }\n    \n    return matrix;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a loop that prints odd numbers between 0 to 10. [/INST] for(int i = 0; i <= 10; i++){\n    if(i % 2 != 0)\n        System.out.println(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a program that adds two sets of numbers together.\n\nSet 1: [1, 3, 5]\nSet 2: [2, 4, 6] [/INST] def add_sets(set1, set2):\n    result=[]\n    for i in range(max(len(set1),len(set2))):\n        if i < len(set1):\n            result.append(set1[i])\n        if i < len(set2):\n            result.append(set2[i])\n    return result</s>"
  },
  {
    "text": "<s>[INST] Insert this line of code to the third place in the for loop.\n\nsum += i [/INST] for i in range(1, n):\n    sum += i - 1 \n    sum += i\n    sum += i + 1</s>"
  },
  {
    "text": "<s>[INST] Create a program that implements a Stack (LIFO) using an array [/INST] class Stack:\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n    \n    def is_empty(self):\n        return len(self.stack) == 0</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java for calculating the Modified Julian Date for a given date. [/INST] public double calculateModifiedJulianDate(String date) {\n    int year = Integer.parseInt(date.substring(0, 4));\n    int month = Integer.parseInt(date.substring(5, 7));\n    int day = Integer.parseInt(date.substring(8, 10));\n    int hour = Integer.parseInt(date.substring(11, 13));\n    int minute = Integer.parseInt(date.substring(14, 16));\n    int second = Integer.parseInt(date.substring(17));\n     \n    double julianDayNumber = 367*year - \n    (7.0/4.0) * (year + (month + 9)/12.0) + \n    (275.0/9.0)*(month) + day - 719561.5;\n \n    double modifiedJulianDayNumber = julianDayNumber + (hour + (minute + (second/60.0))/60.0)/24.0;\n \n    return modifiedJulianDayNumber;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find records from the given table with age greater than or equal to 30 and status is active.\n\nTable:\nname   |  age  |  status\nJohn   |  28   |  Active\nDoe    |  30   |  Inactive\nAlice  |  40   |  Active [/INST] SELECT * FROM table \nWHERE age >= 30 AND status = 'Active';</s>"
  },
  {
    "text": "<s>[INST] Create an API endpoint in Node.js that would accept a GET request and print out the current date and time. [/INST] app.get('/print-date-time', (req, res) => {\n    var newDate = new Date();\n    var currentDateTime = newDate.toLocaleString();\n    res.status(200).send(currentDateTime);\n});</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to join two tables on the customer_id column and print the name, age and income of all the customers.\n\nTable 1: customer \ncustomer_id | name  | age\n1           | John  | 25\n2           | Doe   | 30\nTable 2: income\ncustomer_id | income\n1           | 30,000\n2           | 40,000 [/INST] SELECT c.name, c.age, i.income\nFROM customer c\nINNER JOIN income i \nON c.customer_id = i.customer_id;</s>"
  },
  {
    "text": "<s>[INST] Generate a list of words that contain the substring \"al\" using Python. [/INST] words = [\"arrival\", \"essential\", \"animal\", \"pascal\", \"medieval\", \"festival\", \"final\", \"spirited\", \"downfall\", \"functional\", \"locational\", \"fundamental\"]</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to make it work with big integers.\n\ndef multiply(x, y):\n    return x * y [/INST] def multiply(x, y):\n    return int(x) * int(y)</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript for computing the average value of a given array. [/INST] function calculateAverage(arr) {\n    let sum = 0;\n    arr.forEach(element => {\n        sum += element;\n    });\n    return sum / arr.length;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Swift to split a string by the given delimiter. [/INST] func splitString(str: String, separator: String) -> [String] {\n    return str.components(separatedBy: separator)\n}</s>"
  },
  {
    "text": "<s>[INST] Implement an efficient sorting algorithm in Python. [/INST] def sort(arr): \n    if len(arr) == 0: \n        return [] \n    else: \n        pivot = arr[0] \n        lesser = sort([x for x in arr[1:] if x < pivot])\n        greater = sort([x for x in arr[1:] if x >= pivot])\n        return lesser + [pivot] + greater</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, write a function to determine whether the array is a palindrome.\n\narray = [1,2,3,2,1] [/INST] def isPalindrome(array): \n    return array == array[::-1]  # reversed array</s>"
  },
  {
    "text": "<s>[INST] Compute the absolute value of a given number.\n\nx = -2 [/INST] absX = abs(x)\nprint(\"Absolute value of\", x, \"is\", absX)</s>"
  },
  {
    "text": "<s>[INST] Convert a natural number to its binary representation.\n\nn = 4 [/INST] bin_n = bin(n)\nprint(bin_n) # Returns 0b100</s>"
  },
  {
    "text": "<s>[INST] Explain the differences between the list, set, and dictionary data structures in Python. [/INST] List is an ordered sequence of data that can hold duplicate values. It is one of the most widely used data structures in Python, and is created by placing all the items in a square bracket and separating them by commas. Set is an unordered collection of data that cannot hold duplicate values. Set is created by enclosing all the items in a set() function. Dictionary is an unordered collection of key:value pairs. It is similar to real-life dictionaries in that it stores key-value pairs and retrieves values based on the associated key. It is created with curly brackets and key:value pairs, separated by commas.</s>"
  },
  {
    "text": "<s>[INST] Determine whether a given number is divisible by 3.\n\nn = 15 [/INST] if n % 3 == 0:\n    print(str(n) + \" is divisible by 3.\")\nelse:\n    print(str(n) + \" is not divisible by 3.\")</s>"
  },
  {
    "text": "<s>[INST] Search for the index of a given element in a given array.\n\narray = [1,2,3,4,5]\nelement = 3 [/INST] index = array.index(element)\nprint(\"Index of the element\", element, \"is\", index)</s>"
  },
  {
    "text": "<s>[INST] Refactor this code to use the built-in functions.\n\ndef find_odd(array):\n    is_odd = False\n    for element in array:\n        if element % 2 == 1:\n            is_odd = True\n            break\n    return is_odd [/INST] def find_odd(array):\n    return any(element % 2 == 1 for element in array)</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to generate a dictionary that contains a number (x) of random numbers.\n\nx = 10 [/INST] import random\n\nrandom_numbers = {} \n  \nfor i in range(x + 1): \n    n = random.randint(1, 50) \n      \n    random_numbers[i+1] = n\n      \nprint(random_numbers)</s>"
  },
  {
    "text": "<s>[INST] Reverse the order of words in a given sentence.\n\nsentence = \"This is Python Language\" [/INST] words = sentence.split(\" \") \n   \nreverse_sentence = ' '.join(reversed(words)) \n   \nprint(reverse_sentence)</s>"
  },
  {
    "text": "<s>[INST] Using the provided data structure, create a class in Python to represent a car.\n\ncar = { \n    \"make\": \"Honda\", \n    \"model\": \"Civic\", \n    \"year\": 2011\n} [/INST] class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    \n    def __str__(self):\n        return f\"{self.make} {self.model} ({self.year})\"</s>"
  },
  {
    "text": "<s>[INST] Using the provided objects and classes, write a code snippet in Python to implement polymorphism.\n\nclass Animal:\n  def sound(self):\n    pass\n\nclass Cat(Animal):\n  def sound(self):\n    print(\"Meow\")\n\nclass Dog(Animal):\n  def sound(self):\n    print(\"Bark\") [/INST] def make_sound(animal):\n  animal.sound()\n  \nmake_sound(Cat())  #Prints \"Meow\"\nmake_sound(Dog())  #Prints \"Bark\"</s>"
  },
  {
    "text": "<s>[INST] Write a HTML code snippet for a navigation bar which contains three links with the text \"Home\", \"About\", and \"Contact\". [/INST] <nav>\n  <a href=\"index.html\">Home</a>\n  <a href=\"about.html\">About</a>\n  <a href=\"contact.html\">Contact</a>\n</nav></s>"
  },
  {
    "text": "<s>[INST] What is the time complexity of the Bubble Sort algorithm? [/INST] The time complexity of Bubble Sort is O(n^2).</s>"
  },
  {
    "text": "<s>[INST] Using the provided values and data structure, create a program in C to check if two points belong to the same quadrant.\n\nPoint1 = {1, -2}\nPoint2 = {-3, 4} [/INST] #include<stdio.h>\n\nint is_same_quadrant(int x1, int y1, int x2, int y2) \n{ \n    //determining quadrants for coordinates\n    int q1 = (y1 >= 0) ? (x1 >= 0 ? 1 : 2) : (x1 >= 0 ? 4 : 3); \n    int q2 = (y2 >= 0) ? (x2 >= 0 ? 1 : 2) : (x2 >= 0 ? 4 : 3); \n  \n    // If both the coordinates \n    // belongs to same quadrants \n    // then returns 1 \n    return (q1 == q2); \n} \n\nint main() \n{ \n    int x1 = 1, y1 = -2;\n    int x2 = -3, y2 = 4;\n  \n    if(is_same_quadrant(x1, y1, x2, y2)) \n        printf(\"Yes\"); \n    else\n        printf(\"No\"); \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to replace the given character in a string with another given character.\n\nstr = \"This is a string\"\nold_char = 's'\nnew_char = 'x' [/INST] str = str.replace(old_char, new_char)</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code snippet to override the default font-size attribute of the body tag. [/INST] <body style=\"font-size: 16px;\"></s>"
  },
  {
    "text": "<s>[INST] Write a Bash shell script that takes two integers as arguments and prints the sum of those two numbers. [/INST] #!/bin/bash\nif [ \"$#\" -ne 2 ]; then \n    echo \"Usage: sum.sh number1 number2\"\n    exit 1 \nfi\nsum=$(($1+$2))\necho \"Sum of $1 and $2 is $sum\"</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that takes an array of objects and returns an array of objects with unique values by a specified key.\n\nvar input = [\n { id: 1, name: 'John' }, \n { id: 2, name: 'John' },\n { id: 3, name: 'Alice'},\n] [/INST] function getUniqueValuesByKey(arr, key) {\n const set = new Set();\n return arr.filter((el) => {\n const valueToCheck = el[key];\n const isUnique = !set.has(valueToCheck);\n if (isUnique) set.add(valueToCheck);\n return isUnique;\n });\n}</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to select all students from a table named \"students\" whose age is greater than 18. [/INST] SELECT * FROM students WHERE age > 18;</s>"
  },
  {
    "text": "<s>[INST] Explain in brief the concept of type casting in programming languages. [/INST] Type casting is the process of converting one data type into another. It is generally used to convert values from one type to another in order to perform specific operations. In programming languages, type casting involves converting a value of one data type such as an integer or a string into a new data type such as a float or a boolean. Type casting ensures that the operations performed on the data are valid and helps reduce the chances of errors due to incompatibility of data types.</s>"
  },
  {
    "text": "<s>[INST] Create a Python class for a student that holds their name, age and grade. [/INST] class Student:\n def __init__(self, name, age, grade):\n  self.name = name\n  self.age = age\n  self.grade = grade\n\ndef get_student_info(self):\n  return (f\"{self.name}, {self.age}, {self.grade}\")</s>"
  },
  {
    "text": "<s>[INST] Write a SELECT query in MySQL to retrieve the names of all students whose last name is Jones [/INST] SELECT name FROM students WHERE last_name = 'Jones';</s>"
  },
  {
    "text": "<s>[INST] You need to create a function that takes a character as input and prints out all words from a given dictionary that start with the given character.\n\ndictionary = [\"apple\", \"ball\", \"cat\", \"dog\"]\ncharacter = 'd' [/INST] def search_dictionary(dictionary, character):\n    result = []\n    for word in dictionary:\n        if word[0] == character:\n            result.append(word)\n    return result</s>"
  },
  {
    "text": "<s>[INST] You need to remove duplicates from a list while preserving the order of the items. [/INST] def remove_duplicates(list):\n    output = []\n    seen = set()\n    for i in list:\n        if i not in seen:\n            seen.add(i)\n            output.append(i)\n        return output</s>"
  },
  {
    "text": "<s>[INST] You need to write a program to convert a given number to its binary representation. [/INST] def binary_representation(num):\n  if num > 1:\n    binary_representation(num//2)\n  print(num % 2, end = '')</s>"
  },
  {
    "text": "<s>[INST] You need to convert any given number to its octal representation. [/INST] def octal_representation(num):\n    output = \"\"\n    while num > 0:\n        output = str(num % 8) + output\n        num //= 8\n    return output</s>"
  },
  {
    "text": "<s>[INST] You need to create a regex (regular expression) to check if a given string contains a given substring. [/INST] import re\n\ndef check_substring(string, substring):\n    pattern = r\".*\"+substring+\".*\"\n    if re.match(pattern, string):\n        return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Write a python code to concatenate two strings and reverse the result.\n\nstring1 = \"Hello\"\nstring2 = \"World\" [/INST] res = string1+string2\nres = res[::-1] \nprint(res)</s>"
  },
  {
    "text": "<s>[INST] Write a java code to calculate the sum of two numbers provided as input.\n\nint num1 = 25;\nint num2 = 24; [/INST] int result = num1 + num2; \nSystem.out.println(result);</s>"
  },
  {
    "text": "<s>[INST] Create a HTML paragraph tag with the text \"This is a awesome place\". [/INST] <p>This is an awesome place</p></s>"
  },
  {
    "text": "<s>[INST] Design a SQL query to search for a specific character string in a table.\n\nTable name: usertable\nCharacter string: HelloWorld [/INST] SELECT * FROM usertable WHERE fieldname LIKE '%HelloWorld%'</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to detect whether a webpage contains a specific text or not.\n\nPage content: \"This is the awesome page.\"\nText to be searched: \"awesome\" [/INST] if(document.body.innerHTML.indexOf('awesome') > -1){\n    console.log('Text found!');\n} else {\n    console.log('Text not found!');\n}</s>"
  },
  {
    "text": "<s>[INST] Translate the following sentence into binary language.\n\nThis is a great day. [/INST] 01010100 01101000 01101001 01110011 00100000 01101001 01110011 00100000 01100001 00100000 01100111 01110101 01110100 01100101 01110011 00100000 01100100 01100001 01110100 00100001</s>"
  },
  {
    "text": "<s>[INST] Write a PHP code to fetch data from a database table.\n\nDatabase name: UsersTable\nTable name: Users [/INST] $query = \"SELECT * FROM Users\";\n$result = mysqli_query($conn, $query);\nwhile ($row = mysqli_fetch_array($result)) {\n    // Perform operations on the data\n}</s>"
  },
  {
    "text": "<s>[INST] Design a regular expression for validating email address. [/INST] ^[a-z0-9]+@[a-z]+\\.[a-z]+$</s>"
  },
  {
    "text": "<s>[INST] Construct a java method to convert alphabets to uppercase.\n\nString str = \"This is a great day\" [/INST] public static String convertToUpper(String str){ \n   char ch[]= str.toCharArray(); \n   for (int i=0; i < str.length(); i++){ \n      if (ch[i] >= 'a' && ch[i] <= 'z') { \n         // convert into uppercase \n         ch[i] = (char)(ch[i] - 'a' + 'A'); \n      } \n   } \n   String st = new String(ch); \n   return st; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a Swift method to sort a dictionary alphabetically.\n\nDictionary - key1: value1, key2: value2, key3: value3 [/INST] func sort(dict: [String: String]) -> [String: String] {\n    let sortedKeys = dict.keys.sorted { $0 < $1 }\n    var sortedDict = [String: String]()\n    for key in sortedKeys {\n        sortedDict[key] = dict[key]\n    }\n    return sortedDict\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that returns the 5 most popular books in the library.\n\nSELECT * FROM libraryBook [/INST] SELECT bookID, bookTitle, COUNT(*) AS Count \nFROM libraryBook \nGROUP BY bookID, bookTitle \nORDER BY Count DESC \nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Upon user entry, filter the array of objects to find the relevant object.\n\nconst array = [\n{name:\"John\", age: 20}, \n{name:\"Jane\", age: 21}, \n{name:\"Jim\", age: 22}, \n] [/INST] function filterArray(userInput) {\n  return array.filter(item => item.name === userInput);\n}</s>"
  },
  {
    "text": "<s>[INST] Using CSS, style the <h1> tag with font color, font size, and font family of your choice. [/INST] h1 {\n  color: #000000;\n  font-size: 24px;\n  font-family: Arial, Helvetica, sans-serif;\n}</s>"
  },
  {
    "text": "<s>[INST] Define a class in Python that takes a string and returns the length of the string. [/INST] class StringLength:\n  def __init__(self, string):\n    self.string = string\n\n  def getLength(self):\n    return len(self.string)</s>"
  },
  {
    "text": "<s>[INST] Create a script in PHP that checks if a number is odd or even. [/INST] <?php\n \nfunction checkNumber($number){\n   if($number % 2 == 0){\n     echo \"The number is even.\";\n   } else {\n     echo \"The number is odd.\";\n   }\n}\n\ncheckNumber(3);\n?></s>"
  },
  {
    "text": "<s>[INST] Create a program in Ruby that takes in a number and then checks if it is divisible by three. [/INST] def check_divisibility(number)\n  if (number % 3 == 0)\n    puts 'The number is divisible by three.'\n  else \n    puts 'The number is not divisible by three.'\n  end \nend\n\ncheck_divisibility(9)</s>"
  },
  {
    "text": "<s>[INST] Write a query in MySQL for finding all the customers who have ordered a specific product.\n\nSELECT * FROM orders [/INST] SELECT * \nFROM orders \nWHERE orders.productID = <Specific Product ID>;</s>"
  },
  {
    "text": "<s>[INST] Create a program in Assembly that adds two numbers and prints the result. [/INST] .data\n\nnumber1: .word 10\nnumber2: .word 20\n\n.text\n\nmain:\n\tADD word [number1], [number2] \n\tMOV EAX, 0 \n\tMOV EBX, 0 \n\tPUSH [number1] \n\tMOV EAX, [number1] \n\t ADD EBX, EAX\n\tPOP EAX \n\tPRINT num1 \n\tPRINT num2 \n\tPRINT result \n\n\tHALT</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java that takes two parameters, \"name\" and \"age\". [/INST] public class User {\n  private String name;\n  private int age;\n\n  public User(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public int getAge() {\n    return this.age;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a basic python program to accept a string input, use it to create a dictionary and sort it by alphabetical order\n\nToBeOrNotToBe [/INST] inp =raw_input(\"Enter String:\")\nmy_dict = {}\nfor character in inp:\n     if character not in my_dict:\n         my_dict[character] = 1\n     else:\n         my_dict[character] += 1\n\nsorted_order = sorted(my_dict.items(), key=lambda x: x[0])\n\nprint(\"Sorted Dictionary\")\nfor character in sorted_order:\n    print(\"{} : {}\".format(character[0], character[1]))</s>"
  },
  {
    "text": "<s>[INST] Create a program that takes no input and prints out the phrase \"Hello World\". [/INST] print(\"Hello World\")</s>"
  },
  {
    "text": "<s>[INST] Use a for loop to add up all odd elements in a list\n\nlist=[4,5,7,9,11,3] [/INST] odd_total = 0\nfor element in list:\n    if element % 2 != 0:\n        odd_total += element\nprint(odd_total) # Prints 25</s>"
  },
  {
    "text": "<s>[INST] Generate code to find the maximum element from a given list\n\nlist=[-2, 12, 3, 0, -5] [/INST] def find_max(list):\n    max_element = float('-inf')\n    for element in list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\nprint(find_max(list)) # Prints 12</s>"
  },
  {
    "text": "<s>[INST] Write a basic HTML structure with a header and a footer [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Document</title>\n</head>\n<body>\n <header>\n  <!-- Header Content Here -->\n </header>\n\n <main>\n  <!-- Page Content Here -->\n </main>\n\n <footer>\n  <!-- Footer Content Here -->\n </footer>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a basic JavaScript program to accept user input and print out the result [/INST] let userInput = prompt('Please enter some input.');\nalert(`The input entered was ${userInput}`);</s>"
  },
  {
    "text": "<s>[INST] Remove all duplicates from this list using Python\n\nlist=[5,5,5,7,8,8,9] [/INST] list=[5,7,8,9]\n\nlist = list(dict.fromkeys(list))</s>"
  },
  {
    "text": "<s>[INST] Write a basic HTML structure with two navigation links [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Document</title>\n</head>\n<body>\n <header>\n   <nav>\n     <a href=\"#\">Link 1</a>\n     <a href=\"#\">Link 2</a>\n   </nav>\n </header>\n\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query for finding the oldest student record in the table\n\nTable Name: Students [/INST] SELECT * \nFROM Students\nORDER BY age DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Edit this code so it prints the sum of the increasing odd numbers from 10 to 50\n\ntotal = 0\nfor num in range(10, 50):\n    if num % 2 == 0:\n        total += num [/INST] total = 0\nfor num in range(10, 50, 2):\n    total += num</s>"
  },
  {
    "text": "<s>[INST] Print the following statements in a sorted order\n\nI am learning Python\nI am learning Java [/INST] I am learning Java\nI am learning Python</s>"
  },
  {
    "text": "<s>[INST] Edit the code to produce the output of the following matrix multiplication\n\nX = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]] [/INST] X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]\n\ndef mat_mult(X, Y):\n    result = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n    for i in range(len(X)):\n        for j in range(len(Y[0])):\n            for k in range(len(Y)):\n                result[i][j] += X[i][k] * Y[k][j]\n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to generate a 3x3 Identity matrix [/INST] def generate_identity_matrix():\n    matrix = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i == j:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    \n    return matrix</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a two-dimensional array and returns its transpose.\n\narr = [[1,2,3], [4,5,6], [7,8,9]] [/INST] def transpose(arr):\n    transpose_arr = [[0] *len(arr) for _ in range(len(arr[0]))]\n    for row in range(len(arr)):\n        for col in range(len(arr[0])):\n            transpose_arr[col][row] = arr[row][col]\n    return transpose_arr</s>"
  },
  {
    "text": "<s>[INST] Write a function to reverse an integer.\n\nx = 12345 [/INST] def reverse_integer(x):\n    rev_int = 0\n    while x > 0:\n        rev_int = rev_int * 10 + (x % 10)\n        x //= 10\n    return rev_int</s>"
  },
  {
    "text": "<s>[INST] Write a function to simulate a dice roll. [/INST] import random\n\ndef roll_dice():\n    return random.randint(1, 6)</s>"
  },
  {
    "text": "<s>[INST] Develop a JS snippet to display the elements in an ordered list. [/INST] let list = document.getElementById('list');\nlist.innerHTML = '';\nlist.appendChild(document.createElement('ul'));\nfor (let i = 0; i < elements.length; i++) {\n    list.firstChild.appendChild(document.createElement('li')).innerHTML = elements[i];\n}</s>"
  },
  {
    "text": "<s>[INST] What is the most important concept in object-oriented programming? [/INST] The most important concept in object-oriented programming is encapsulation, which refers to the process of packaging related data and functionality together in an object. Encapsulation provides a high degree of abstraction and modularity, allowing developers to manage complexity and reduce the dependencies between various classes of objects.</s>"
  },
  {
    "text": "<s>[INST] Create a switch statement to convert a string input to its corresponding enumerated type.\n\nInput: \"Red\", \"Blue\", \"Green\", \"Yellow\" [/INST] enum Color {\n    Red,\n    Blue,\n    Green,\n    Yellow\n};\n\nColor color;\nstd::string str = \"Red\";\nswitch (str) {\n    case \"Red\":\n        color = Color::Red;\n        break;\n    case \"Blue\":\n        color = Color::Blue;\n        break;\n    case \"Green\":\n        color = Color::Green;\n        break;\n    case \"Yellow\":\n        color = Color::Yellow;\n        break;\n    default:\n        color = Color::Red;\n        break;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a script to calculate the sum of two numbers stored in variables.\n\nvar x = 4; \nvar y = 10; [/INST] function sum(x,y) {\n  return x + y;\n}\n\nconsole.log(sum(x,y));</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL statement to select the customers who have orders with a total price over $100. [/INST] SELECT c.name from customers as c\nLEFT JOIN orders as o\n    ON c.customer_id = o.customer_id\nWHERE o.total_price > 100</s>"
  },
  {
    "text": "<s>[INST] Write a Java code to find the longest common prefix in a string array.\n\nString [] arr = {\"flower\",\"flow\",\"flight\"} [/INST] public static String longestCommonPrefix(String[] arr) \n{ \n    if (arr.length == 0) \n        return \"\"; \n  \n    String prefix = arr[0]; \n  \n    for (int i = 1; i < arr.length; i++) \n    { \n        while (arr[i].indexOf(prefix) != 0) \n        {\n            prefix = prefix.substring(0, prefix.length() - 1); \n            if (prefix.isEmpty()) \n                return \"\";  \n        } \n    } \n    return prefix; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to evaluate a given expression written in infix notation.\n\nexp = \"5 + (7 * 8) / 3\" [/INST] def eval_exp(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\nprint(eval_exp(exp))</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to include user input.\n\ndef hello_world():\n    # Prints \"Hello, World!\"\n    print(\"Hello, World!\") [/INST] def hello_world():\n    # Prompt user for input\n    user_input = input(\"Please enter your name: \")\n\n    # Prints \"Hello, {user_input}!\"\n    print(\"Hello, {}!\".format(user_input))</s>"
  },
  {
    "text": "<s>[INST] Go through the following code and create test cases for it.\n\ndef reverse_string(string):\n  rev_str = \"\"\n\n  # Loop through the string in reverse order\n  for i in range(len(string)-1, -1, -1):\n    rev_str += string[i]\n\n  return rev_str [/INST] import unittest\n\nclass ReverseStringTests(unittest.TestCase):\n    def test_reverse_string_with_single_character_string(self):\n        result = reverse_string(\"a\")\n        self.assertEqual(result, \"a\")\n\n    def test_reverse_string_with_even_length_string(self):\n        result = reverse_string(\"hello\")\n        self.assertEqual(result, \"olleh\")\n\n    def test_reverse_string_with_odd_length_string(self):\n        result = reverse_string(\"world\")\n        self.assertEqual(result, \"dlrow\")\n\n\nif __name__ == '_main_':\nunittest.main()</s>"
  },
  {
    "text": "<s>[INST] Edit the following code so it prints out a message when the condition is true.\n\nif condition: [/INST] if condition:\n    print(\"Condition is true!\")</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes in two arrays of integers and returns the sum of the elements in both arrays.\n\narray1 = [1, 2, 3] \narray2 = [4, 5, 6] [/INST] def sum_arrays(arr1, arr2):\n    sums = []\n    for i in range(len(arr1)):\n        sums.append(arr1[i] + arr2[i])\n    return sums</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that takes in a string and returns a list of all unique characters in it.\n\nstring = \"banana\" [/INST] def unique_chars(string): \n    char_list = [] \n    for char in string: \n        if(char not in char_list): \n            char_list.append(char) \n    return char_list</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript class that takes in two strings and returns the longer string.\n\nstring1 = \"Hello\"\nstring2 = \"World\" [/INST] class LongerString {\n    constructor(str1, str2) {\n        this.string1 = str1;\n        this.string2 = str2;\n    }\n    \n    getLongerString() {\n        return (this.string1.length > this.string2.length) ? this.string1 : this.string2;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a module in Rust to identify palindromic strings. [/INST] fn is_palindrome(target: &str) -> bool {\n    let mut char_vec: Vec<char> = target.chars().collect();\n    char_vec.reverse();\n    let reversed_target: String = char_vec.into_iter().collect();\n    if target == reversed_target {\n        return true;\n    }\n    return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Go through the following code and make sure there is an appropriate return statement at the end.\n\ndef add_two_numbers(num1, num2):\n    num3 = num1 + num2\n    print(num3) [/INST] def add_two_numbers(num1, num2):\n    num3 = num1 + num2\n    print(num3)\n    return num3</s>"
  },
  {
    "text": "<s>[INST] Write a function in PHP that takes in two integers and prints the smallest one.\n\n$num1 = 5;\n$num2 = 10; [/INST] function smallest($num1, $num2) {\n    if ($num1 < $num2) {\n        echo \"$num1 is smaller\";\n    } else if ($num2 < $num1) {\n        echo \"$num2 is smaller\";\n    } else {\n        echo \"Both numbers are equal\";\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in C that takes in a number and returns \"true\" if it is divisible by 3 or else returns \"false\".\n\n$num = 9 [/INST] #include <stdbool.h>\n\nbool is_divisible_by_three(int num){\n\tif (num % 3 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Go that takes in a number and returns true if it is a prime number.\n\n$num = 13 [/INST] func isPrime(num int) bool {\n\tif num <= 1 {\n\t\treturn false\n\t}\n\n\tfor i := 2; i*i <= num; i++ {\n\t\tif num%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in C# with a time complexity of O(n2). [/INST] public static void printAllPairs(int[] array, int n) { \n    for (int i = 0; i < n; i++) \n        for (int j = i + 1; j < n; j++) \n            Console.Write(\"(\" + array[i] + \", \" + array[j] +\") \"); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Ruby that determines if a number is Sublime.\n\n$num = 21 [/INST] def is_sublime($num) \n    return $num % 3 == 0 && $num % 7 == 0\nend</s>"
  },
  {
    "text": "<s>[INST] Explain how to use selectors and filters in CSS. [/INST] Selectors are used to target specific elements in an HTML document, while filters are used to apply style rules to these elements. Selectors are identified by their attribute like ids, classes, and tags, while filters are indicated by attributes such as color, font size, and display type. Selectors commonly utilize combinators to further narrow down the selection of elements. Filters can be used to style one or more selections, or to specify what values should apply based on the properties of other elements.</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to list all customers who are located in the city of London.\n\nName of the table: customers [/INST] SELECT * FROM customers WHERE city = 'London';</s>"
  },
  {
    "text": "<s>[INST] Create a matrix in C++ that stores the numbers from 1 to 10. [/INST] int matrix[10][10]; \n\nint c = 1; \nfor (int i = 0; i < 10; i++) \n    for (int j = 0; j < 10; j++) \n        matrix[i][j] = c++;</s>"
  },
  {
    "text": "<s>[INST] Modify the program to take input from the user and create a two-dimensional array in Python. [/INST] rows, cols = (int(x) for x in input(\"Enter size of 2D array: \").split())\narr = [[None for x in range(cols)] for y in range(rows)]\nfor i in range(rows):\n    for j in range(cols):\n        arr[i][j] = int(input(\"Enter element: \"))</s>"
  },
  {
    "text": "<s>[INST] Explain how to use functions in Python to perform operations on dictionaries. [/INST] Python dictionaries are mappings between keys and values, allowing for efficient retrieval of values using its associated key. Various functions can be used to manipulate the data in the dictionaries, such as the get() function to retrieve the value for a given key, the clear() function to delete all values, the keys() and values() functions to retrieve all keys and values respectively, and the items() function to retrieve a list of key-value pairs.</s>"
  },
  {
    "text": "<s>[INST] Develop an HTML page with a navigation bar for a website.\n\nList of navigation options: Home, About, Services, Contact [/INST] <ul>\n<li><a href=\"index.html\">Home</a></li>\n<li><a href=\"about.html\">About</a></li>\n<li><a href=\"services.html\">Services</a></li>\n<li><a href=\"contact.html\">Contact</a></li>\n</ul></s>"
  },
  {
    "text": "<s>[INST] Describe how LSTMs are used to predict time-series data. [/INST] Long Short-Term Memory (LSTM) networks are a type of Recurrent Neural Network (RNN) that enable the model to learn long-term dependencies by remembering information from long periods of time. LSTMs are commonly used to model time-series data such as stock prices, sensor readings, or other sequences of data points that contain predictable patterns. The LSTM predicts the next step in the sequential data using the past data points, and can be used to perform tasks such as forecasting future data points and anomaly detection.</s>"
  },
  {
    "text": "<s>[INST] Explain how to use pointers for passed parameters in C++. [/INST] When passing parameters to a function in C++, it is possible to use pointers. This can be done by declaring the argument in the function as a pointer, and passing the address of the variable to be passed as the argument. This is beneficial over passing the parameter by value as passing a pointer is more efficient, as the function will be able to directly access the memory address of the passed parameter and there will be no need to make a copy.</s>"
  },
  {
    "text": "<s>[INST] Create a function that appends the input string to a given array.\n\nfind the string “hello world” [/INST] def append(array, string):  \n    array.append(string) \n    return array \n\narray = [] \nstring = \"hello world\"\nappend(array, string) \n \n# Output \narray = ['hello world']</s>"
  },
  {
    "text": "<s>[INST] Write a regex to detect valid email addresses. [/INST] ^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$</s>"
  },
  {
    "text": "<s>[INST] What is the syntax to print out the following string?\n\nstring = \"Hello World!\" [/INST] print(string)</s>"
  },
  {
    "text": "<s>[INST] What is the correct syntax to prompt and save a user's input? [/INST] name = input(\"What is your name? \")</s>"
  },
  {
    "text": "<s>[INST] What is the syntax to convert a string to an integer in Java? [/INST] int num = Integer.parseInt(string);</s>"
  },
  {
    "text": "<s>[INST] Describe the difference between the 'break' and 'continue' keywords in Python. [/INST] The 'break' keyword is used to end a loop and exit the loop, whereas the 'continue' keyword is used to skip the current iteration and continue with the next iteration.</s>"
  },
  {
    "text": "<s>[INST] Make a class that creates a list and has a maximum length. [/INST] class LimitedList:\n    def __init__ (self, max_len):\n        self.max_len = max_len\n        self.items = []\n\n    def add(self, item):\n        if len(self.items) < self.max_len:\n            self.items.append(item)\n        else:\n            self.items.pop(0)\n            self.items.append(item)\n\n    def get_list(self):\n        return self.items</s>"
  },
  {
    "text": "<s>[INST] Write a function to compare two lists of objects and return true if the objects in both lists are the same.\n\nlist1 = [{'id': 1, 'name': 'John'}, {'id': 3, 'name': 'Sara'}]\nlist2 = [{'id': 1, 'name': 'John'}, {'id': 3, 'name': 'Sara'}] [/INST] def compare_lists(list1, list2):\n    return list1==list2</s>"
  },
  {
    "text": "<s>[INST] Create a list comprehension for a given list that only contains odd numbers.\n\n[1, 2, 3, 4, 5, 6, 7, 8] [/INST] odd_nums = [num for num in [1, 2, 3, 4, 5, 6, 7, 8] if num % 2 != 0 ]</s>"
  },
  {
    "text": "<s>[INST] Convert a given list to a dictionary with items as keys and their corresponding position in the list as values.\n\n[‘a’, ‘b’, ‘c’, ‘d’] [/INST] def list_to_dict(lst):\n    return {k: v for v, k in enumerate(lst)}</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of squared differences between every number in a list and the mean of the list.\n\n[1, 2, 3, 4] [/INST] def sum_squared_diffs(nums):\n    mean = sum(nums) / len(nums)\n    return sum((num - mean)**2 for num in nums)</s>"
  },
  {
    "text": "<s>[INST] Create a class that has 3 methods. The first method should multiply two numbers, the second should add two numbers, and the third should calculate the modulus of two numbers. [/INST] class Calculator:\n    def multiply(self, num1, num2):\n        return num1 * num2\n        \n    def add(self, num1, num2):\n        return num1 + num2\n        \n    def modulus(self, num1, num2):\n        return num1 % num2</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to filter out all falsy values from an array.\n\n[NaN, 0, false, \"\", undefined] [/INST] function filterFalsy(arr) {\n  return arr.filter(el => Boolean(el));\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to convert an array of objects into a comma-separated values (CSV) string with column headers.\n\n[\n {name: 'John', age: 28, city: 'New York'}, \n {name: 'Mary', age: 34, city: 'London'}, \n {name: 'Bob', age: 23, city: 'Los Angeles'}\n] [/INST] function arrayToCSV(data) {\n  let csv = '';\n  const headers = Object.keys(data[0]);\n  csv += headers.join(',') + '\\n';\n  data.forEach((item) => {\n    let row = '';\n    Object.values(item).forEach((value) => {\n      row += `\"${value}\",`;\n    });\n    row = row.slice(0, -1);\n    csv += `${row}\\n`;\n  });\n  return csv;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression to find all the email addresses in a given text. [/INST] regex = r\"([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)\"</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to extract all the words from an HTML page using Python. [/INST] Using the BeautifulSoup library, you can parse the HTML page and extract all the words using the \"get_text()\" method.</s>"
  },
  {
    "text": "<s>[INST] Name four different types of sorting algorithms. [/INST] The four different types of sorting algorithms are Selection sort, Bubble sort, Insertion sort and Merge sort.</s>"
  },
  {
    "text": "<s>[INST] How can you find the sum of all numbers in a list? [/INST] The sum of all numbers in a list can be found by using the \"sum()\" function.</s>"
  },
  {
    "text": "<s>[INST] Create a function to print out words that include the letter \"e\" from a given list of strings.\n\nmylist = [\"hello\", \"world\", \"fire\", \"feline\"] [/INST] def print_words_with_e(mylist):\n for word in mylist:\n  if 'e' in word:\n   print(word)\n\nprint_words_with_e(mylist)\n\n#Output: \nhello\nfire\nfeline</s>"
  },
  {
    "text": "<s>[INST] Implement a switch-case statement in Java. [/INST] public static void main(String[] args) {\n    int day = 4; \n    \n    switch (day) {\n        case 1:\n            System.out.println(\"Monday\");\n            break;\n        case 2:\n            System.out.println(\"Tuesday\");\n            break;\n        case 3:\n            System.out.println(\"Wednesday\");\n            break;\n        case 4:\n            System.out.println(\"Thursday\");\n            break;\n        case 5:\n            System.out.println(\"Friday\");\n            break;\n        case 6:\n            System.out.println(\"Saturday\");\n            break;\n        case 7:\n            System.out.println(\"Sunday\");\n            break;\n        default:\n            System.out.println(\"Invalid day\");\n            break;\n        }\n    }</s>"
  },
  {
    "text": "<s>[INST] Manipulate a given list of strings to capitalize the first letter in each string.\n\nmylist = [\"this\", \"is\", \"a\", \"list\"] [/INST] def capitalize(mylist):\n  new_list = []\n  \n  for item in mylist:\n    new_list.append(item.capitalize())\n  \n  return new_list\n\nprint(capitalize(mylist))\n\n#Output:\n['This', 'Is', 'A', 'List']</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to get the sum of all integers in a given table over a condition.\n\ntable: books\ncondition: price > 20 [/INST] SELECT SUM(price)\nFROM books\nWHERE price > 20;</s>"
  },
  {
    "text": "<s>[INST] Use the zip function to combine two lists by index.\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6] [/INST] list3 = list(zip(list1, list2))\n\n#Output:\nlist3 = [(1, 4), (2, 5), (3, 6)]</s>"
  },
  {
    "text": "<s>[INST] Generate a correct Python code to turn a list of strings into a list of their lengths.\n\nmylist = [\"hello\", \"world\", \"fire\", \"feline\"] [/INST] length_list = [len(x) for x in mylist]\n\n#Output:\nlength_list = [5, 5, 4, 6]</s>"
  },
  {
    "text": "<s>[INST] Find the most common element in a list of strings.\n\nmylist = [\"red\", \"blue\", \"red\", \"green\", \"green\", \"red\"] [/INST] def most_common_element(mylist):\n    count = 0\n    common = None\n\n    for i in mylist:\n        curr_count = mylist.count(i)\n        if curr_count > count:\n            common = i\n            count = curr_count\n    return common\n\nprint(most_common_element(mylist))\n\n#Output:\nred</s>"
  },
  {
    "text": "<s>[INST] Create a for loop in JavaScript to iterate over the following array.\n\n[\"apple\", \"banana\", \"mango\", \"pear\"]; [/INST] for(let i=0; i<arr.length; i++){\n    let item = arr[i];\n    console.log(item);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in C++ named 'Animal' that has a method named getDescription(). [/INST] class Animal {\n    public:\n        // constructor\n        Animal(int age);\n        // member function\n        virtual string getDescription() const;\n};</s>"
  },
  {
    "text": "<s>[INST] Find all the occurrences of the word \"the\" in the following text.\n\nThe quick brown fox jumps over the lazy dog. [/INST] The word \"the\" occurs 2 times in the text.</s>"
  },
  {
    "text": "<s>[INST] Create an object in JavaScript named 'user' with the following attributes: name, age, and gender. [/INST] let user = {\n    name: \"\",\n    age: 0,\n    gender: \"\"\n};</s>"
  },
  {
    "text": "<s>[INST] Create a method in Python to generate all the prime numbers between 1 and 100. [/INST] def prime_generator(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\nprint(prime_generator(100))</s>"
  },
  {
    "text": "<s>[INST] Explain the difference between a variable and a constant in C++. [/INST] In C++, a variable is a named storage location for data that can be modified during the program execution. On the other hand, a constant is a named storage location for data that can not be modified once it has been declared. Constants are immutable and the value must be set when declared.</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java named 'Person' that has the following fields: name, age, and gender. [/INST] public class Person {\n  private String name;\n  private int age;\n  private String gender;\n\n  public Person(String name, int age, String gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest an improvement to the following C++ for-loop to make it more efficient.\n\nfor(int i = 0; i<arr.length; i++){\n    if(arr[i] == target){\n        return true;\n    }\n} [/INST] for(int i = 0; i<arr.length; i++){\n    if(arr[i] == target){\n        return true;\n    } \n    else if (arr[i] > target){\n        break;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite this code in JavaScript.\n\ndef find_max(nums):\n    maximum = 0\n\n    for num in nums:\n        if num > maximum:\n            maximum = num\n\n    return maximum [/INST] function find_max(nums) {\n    let maximum = 0;\n\n    for (let num of nums) {\n        if (num > maximum) {\n            maximum = num;\n        }\n    }\n\n    return maximum;\n}</s>"
  },
  {
    "text": "<s>[INST] Use this data to predict the weather for the next week.\n\nCurrent temperature: 34 degrees\nHumidity: 66%\nPrecipitation chance: 30% [/INST] The weather for the next week is predicted to be warm and mostly dry, with only a slight chance of rain scattered throughout the week. Temperatures will remain around the 34 degree mark, and humidity levels should stay fairly moderate, around 66%.</s>"
  },
  {
    "text": "<s>[INST] Change this code so that it uses an appropriate data structure.\n\nx = 0 \ny = 0 [/INST] coordinates = (0,0)</s>"
  },
  {
    "text": "<s>[INST] What type of data structure is this?\n\narray = [1, 2, 3, 4, 5] [/INST] This is an array data structure.</s>"
  },
  {
    "text": "<s>[INST] Using the input, create a function to calculate the average of the set.\n\nnums = [1, 2, 3, 4, 5] [/INST] def avg_nums(nums):\n  total = 0\n  for num in nums:\n    total += num\n  avg = total / len(nums)\n  return avg\n\nprint(avg_nums([1, 2, 3, 4, 5]))\n\n# Output: 3.0</s>"
  },
  {
    "text": "<s>[INST] Write a schema for a table to store student grades in a school. [/INST] CREATE TABLE grades (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    grade INT NOT NULL,\n    course VARCHAR(255) NOT NULL\n);</s>"
  },
  {
    "text": "<s>[INST] Describe the concept of static variables in Java. [/INST] In Java, static variables (also known as class variables) are variables that are declared with the static keyword and are available to access through the class name. These variables are shared between all objects. They are typically used for storing information that does not change between objects.</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, find the maximum value.\n\narr = [8, 1, 2, -1, 4, 9] [/INST] int max_value = arr.Max(); // 9</s>"
  },
  {
    "text": "<s>[INST] Create a data visualization comparing the population of California and New York. [/INST] import matplotlib.pyplot as plt \n  \n# X axis values \nx = ['California', 'New York'] \n# Y axis values \npop = [39.56, 19.45] \n  \n# plotting bars  \nplt.bar(x, pop) \n  \n# Naming the x-axis \nplt.xlabel('State') \n# naming the y-axis \nplt.ylabel('Population') \n  \n# giving a title to the figure \nplt.title('California vs. New York Population') \n  \n# function to show the plot \nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Develop a Chatbot that can respond to the user's queries about programming languages. [/INST] def chatbot():\n    while True: \n        # User's query \n        query = input(\"What would you like to know about programming languages? \")\n\n        # Checking if query is relevant \n        if \"language\" in query:\n            # Provide response \n            print(\"There are many different programming languages, and these can range from low-level languages such as assembly, to high-level languages such as Python and Java.\")\n        else: \n            # Provide different response for irrelevant query \n            print(\"I'm sorry, I don't understand your query. Please ask me something else.\")</s>"
  },
  {
    "text": "<s>[INST] Given a sentence, clean up any duplicate words.\n\nMy favorite favorite food is pizza. [/INST] my favorite food is pizza.</s>"
  },
  {
    "text": "<s>[INST] Given two strings, find the longest common substring between them.\n\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\" [/INST] def longest_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"\nprint(longest_substring(s1, s2))\n\n# Output: world</s>"
  },
  {
    "text": "<s>[INST] Implement an autocomplete feature for an input field. [/INST] input_field.addEventListener(\"input\", function(e) {\n    // Fetch the input value \n    var inputValue = e.target.value;\n\n    // Check the input value matches one from our list \n    if (list.includes(inputValue)) {\n        // If so, complete it \n        input_field.value = inputValue;\n    }\n});</s>"
  },
  {
    "text": "<s>[INST] Using MongoDB, create a database to store user information. [/INST] // Import the mongodb library \nconst { MongoClient } = require('mongodb'); \n\n// Create global connection variable \nlet db; \n\n// Connecting to the MongoDB instance \nMongoClient.connect('mongodb://localhost:27017', {useNewUrlParser: true, useUnifiedTopology: true}, (err, client) => { \n    if (err) { \n        console.log('Error occurred while connecting to the MongoDB instance'); \n    } else { \n        console.log('Successfully connected to the MongoDB instance'); \n        db = client.db('users_db'); \n    } \n}); \n\n// Create users collection \ndb.createCollection('users', { \n    name: { type: String, required: true }, \n    age: { type: Number }, \n    email: { type: String } \n});</s>"
  },
  {
    "text": "<s>[INST] Given a string and a number, print the string the number of times specified by the number.\n\nstr = \"Hello\"\nnum = 3 [/INST] console.log(str.repeat(num)); // HelloHelloHello</s>"
  },
  {
    "text": "<s>[INST] Use a RegEx function to identify all the words that contain at least 7 characters in a given sentence.\n\nSentence: This is a sample sentence to test. [/INST] import re\npattern = r\"\\b\\w{7,}\\b\"\n\nsentence = \"This is a sample sentence to test\"\nmatches = re.findall(pattern, sentence)\n \nprint(matches)</s>"
  },
  {
    "text": "<s>[INST] Use HTML to create a basic web page which displays a welcome message and a button to redirect the user to another page. [/INST] <html>\n  <header>\n    <title>Welcome Page</title>\n  </header>\n  <body>\n    <h1>Welcome to My Website</h1>\n    <p>This website offers a variety of resources.</p>\n    <button onclick=\"window.location.href='anotherpage.html'\">Redirect</button>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to display the SKU, product name, and price of all products with a price higher than $10. [/INST] SELECT SKU, product_name, price \nFROM Products \nWHERE price > 10;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to display the name and most recent transaction date of top 5 customers. [/INST] SELECT customer_name, MAX(transaction_date)\nFROM Customers\nGROUP BY customer_name\nORDER BY MAX(transaction_date) DESC\nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form which includes a dropdown list and a submit button. [/INST] <form>\n  <select>\n    <option value=\"volvo\">Volvo</option>\n    <option value=\"saab\">Saab</option>\n    <option value=\"mercedes\">Mercedes</option>\n    <option value=\"audi\">Audi</option>\n  </select>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a Python script to display the number of days between two given dates.\n\nDate 1: 21 May 2020\nDate 2: 13 June 2020 [/INST] import datetime \nstart_date = datetime.date(2020, 5, 21)\nend_date = datetime.date(2020, 6, 13)\ndelta = end_date - start_date\nprint(\"Number of days between two dates:\", delta.days)</s>"
  },
  {
    "text": "<s>[INST] Use PHP to create a login page which contains an input field to accept the username and a submit button. [/INST] <!DOCTYPE html>\n<html>\n<body>\n\n<form action=\"action_login.php\" method=\"post\">\n  Username: <input type=\"text\" name=\"username\">\n  <input type=\"submit\" value=\"Submit\">\n</form> \n\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Edit the given sql query to return all employee details having age greater than 30\n\nSELECT * FROM employees; [/INST] SELECT * FROM employees WHERE age > 30;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to compare two given strings, and count the number of common characters between them.\n\nstr1 = “Apple”, str2 = “Banana” [/INST] function countCommon(str1, str2) {\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str2.includes(str1[i])) {\n            count++;\n        }\n    }\n    return count;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C program to read in a 3x3 matrix composed of integers, and print it.\n\nInput Matrix: [[1, 2, 3], \n               [4, 5, 6], \n               [7, 8, 9]] [/INST] #include<stdio.h>\n \nint main()\n{\n  int a[3][3], i, j;\n \n  printf(\"Enter the elements of the 3x3 matrix : \\n\");\n \n  for (i = 0; i < 3; i++)\n    for (j = 0; j < 3; j++)\n      scanf(\"%d\", &a[i][j]);\n \n  printf(\"The matrix is: \\n\");\n \n  for (i = 0; i < 3; i++) {\n    for (j = 0; j < 3; j++)\n      printf(\"%d \", a[i][j]);\n    printf(\"\\n\");\n  }\n \n  return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following Java program to read 5 integers from the user and display the largest one. [/INST] import java.util.*;\n\npublic class LargestOfFive {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int [] numbers = new int [5];\n\n        for(int i=0; i<5; i++) {\n            System.out.print(\"Enter an integer: \");\n            numbers[i] = sc.nextInt();\n        }\n        sc.close();\n\n        int largest = numbers[0];\n\n        for (int i=1; i<5; i++) {\n            if (numbers[i] > largest) \n                largest = numbers[i];\n        } \n\n\n        System.out.println(\"The largest number is \" + largest);\n    }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a MySQL query to calculate the total number of employees from the \"employees\" table. [/INST] SELECT COUNT(*) FROM employees;</s>"
  },
  {
    "text": "<s>[INST] Create a C program to read two numbers and display the minimum of them.\n\nnum1 = 13, num2 = 23 [/INST] #include<stdio.h>\n \nint main()\n{\n\tint num1, num2;\n\t\n\tprintf(\"Enter two numbers: \\n\");\n\tscanf(\"%d %d\", &num1, &num2);\n\t\n\tif (num1 < num2)\n\t    printf(\"Minimum is: %d\", num1);\n\telse\n\t    printf(\"Minimum is: %d\", num2);\n\t  \n\treturn 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to print a right triangle star pattern with a given base.\n\nbase = 4 [/INST] public class RightTrianglePattern \n{ \n  \n    // Function to demonstrate printing pattern \n    public static void printPattern(int baseSize) \n    { \n        int i, j; \n  \n        // outer loop to handle the number of rows \n        for(i=0; i<baseSize; i++) \n        { \n            // inner loop to handle number spaces  \n            // values changing according to requirement \n            for(j=2*(baseSize-i); j>=0; j--) \n            { \n                // printing spaces \n                System.out.print(\" \"); \n            } \n              \n            //  inner loop to handle number of columns \n            //  values changing according to outer loop \n            for(j=0; j<=i; j++) \n            { \n                // printing stars \n                System.out.print(\"*\" + \" \"); \n            } \n            \n            System.out.println(); \n        }  \n    } \n  \n    // Driver Function\n    public static void main(String args[]) \n    { \n        int baseSize = 4;\n        printPattern(baseSize); \n    } \n\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the given MySQL query to return all employee details from the \"employees\" table having both salary and designation value \"Manager\".\n\nSELECT * FROM employees; [/INST] SELECT * FROM employees WHERE salary = 'Manager' AND designation = 'Manager';</s>"
  },
  {
    "text": "<s>[INST] Generate a Python program to extract the digits of a given number and print the extracted digits in descending order.\n\nnum = 318 [/INST] def extractDigits(num):\n    extracted_list = []\n    while num > 0:\n        extracted_list.append(num%10)\n        num //= 10\n    extracted_list.sort(reverse=True)\n    return extracted_list</s>"
  },
  {
    "text": "<s>[INST] Generate input data for a convolutional neural network (CNN).\n\nThe CNN will classify objects in an image. [/INST] Input data should include an image dataset of the objects to be classified. Each image should contain its corresponding label. Image labels can be one-hot encoded. The dataset should be split into separate training, validation and test datasets.</s>"
  },
  {
    "text": "<s>[INST] Edit the given data to ensure data integrity.\n\nGiven data:\nName\tLocation\nJohn   US\nJulia  Germany [/INST] Name\tLocation\nJohn   United States\nJulia  Germany</s>"
  },
  {
    "text": "<s>[INST] Create a two-dimensional array in Java with values corresponding to the given output.\n\nOutput: [4, 6, 10] [/INST] int[][] arr = {{4, 6, 10}};</s>"
  },
  {
    "text": "<s>[INST] Describe the concept of text mining. [/INST] Text mining is the process of extracting valuable information from textual data, typically through the application of natural language processing and machine learning algorithms. Text mining can identify hidden patterns and relationships in text, including key words, topics, and complex themes, by analyzing sentence structure, co-occurrences, metaphors and other characteristics of natural language.</s>"
  },
  {
    "text": "<s>[INST] Employ an algorithm to predict the customer churn rate.\n\nA dataset containing customer data such as demographics, spending patterns, customer lifetime value and customer satisfaction. [/INST] A supervised learning algorithm can be employed to predict customer churn rate. This will involve training the algorithm on the customer dataset, by providing features such as customer age, spending pattern, customer lifetime value and customer satisfaction, as well as a target the algorithm should learn from. The trained model can then be used to predict customer churn rate.</s>"
  },
  {
    "text": "<s>[INST] Implement a sorting algorithm in Python for the given data.\n\nData: [4, 2, 3, 8, 1] [/INST] def sort_data(data):\n    for i in range(len(data)):\n        min_index = i\n        for j in range(i+1, len(data)):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]\n       \n    return data</s>"
  },
  {
    "text": "<s>[INST] Using the given dataset, generate a tree chart visualization.\n\nDataset:\nName\tCategory\nJohn   A\nKate   B\nJake   B [/INST] A\n- John\nB\n- Kate\n- Jake</s>"
  },
  {
    "text": "<s>[INST] Using Django, develop a web application to manage a blog. [/INST] Create a Django project and develop an application with models to manage a blog. Write views to create and manage blog posts, categories and tags, and customize the URL routing. Create templates to display the blog posts, categories and tags. Implement authentication to protect access to the blog posts.</s>"
  },
  {
    "text": "<s>[INST] Given the following Python code, generate a function that will print the first 5 elements of a list.\n\nmy_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [/INST] def print_first_five(my_list):\n    \"\"\"This function prints the first five elements of a list.\"\"\"\n    print(my_list[:5])</s>"
  },
  {
    "text": "<s>[INST] Sort an array of integers in ascending order without using the built-in sort() function.\n\nmy_array = [1, 6, 9, 5, 8, 10, 4, 2, 7, 3] [/INST] def sort_ascending(my_array):\n    '''This function sorts an array of integers in ascending order without using the built-in sort() function.'''\n    n = len(my_array)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if my_array[j] > my_array[j+1]:\n                my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n    return my_array</s>"
  },
  {
    "text": "<s>[INST] Create a class named Person. [/INST] class Person:\n    '''This class represents a person with a name and age.'''\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in two variables and checks if they have the same type. [/INST] def type_checker(x, y):\n    '''This function takes in two variables and checks if they have the same type.'''\n    return type(x) == type(y)</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in a number and returns all the prime factors.\n\nnum = 30 [/INST] def prime_factorize(num):\n    '''This function takes in a number and returns all the prime factors.'''\n    primes = []\n    i = 2\n    while i * i <= num:\n        while num % i == 0:\n            primes.append(i)\n            num //= i\n        i += 1\n    if num > 1:\n        primes.append(num)\n    return primes</s>"
  },
  {
    "text": "<s>[INST] Create a function which will take in a string and returns a string in reverse order. [/INST] def reverse_string(s):\n    '''This function takes in a string and returns a string in reverse order.'''\n    return s[::-1]</s>"
  },
  {
    "text": "<s>[INST] Analyze a provided string of characters and return the number of occurrences of each character.\n\ninput_string = \"HelloWorld\" [/INST] def analyze_string(input_string):\n    '''This function analyzes a provided string of characters and \n    returns the number of occurrences of each character.'''\n    dict_count = {}\n    for char in input_string:\n        if char in dict_count:\n            dict_count[char] += 1\n        else:\n            dict_count[char] = 1\n    return dict_count</s>"
  },
  {
    "text": "<s>[INST] Convert the following string of HTML into a DOM tree.\n\nhtml_string = \"<p>Hello <b>World</b></p>\" [/INST] def convert_html_to_dom_tree(html_string):\n    '''This function converts a string of HTML into a DOM tree.'''\n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(html_string, 'html.parser')\n    return soup.prettify()</s>"
  },
  {
    "text": "<s>[INST] Calculate the value of the following expression: 2 to the power of 5. [/INST] def calculate_expression(expression):\n    '''This function calculates a given expression.'''\n    return eval(expression)</s>"
  },
  {
    "text": "<s>[INST] Write a function which will take an array as an argument and return an object with the keys being the elements of the array and the values being their counts.\n\nmy_array = [1, 2, 2, 3] [/INST] def count_elements(my_array):\n    '''This function takes an array as an argument and returns an object with the \n    keys being the elements of the array and the values being their counts.'''\n    counts = {}\n    for element in my_array:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    return counts</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in a positive integer up to 1000 and prints out its prime factorization.\n\nnum = 17 [/INST] def prime_factorization(num):\n    '''This function takes in a positive integer and prints out its prime factorization.'''\n    factors = []\n    dividend = num\n    divisor = 2\n    while divisor <= dividend:\n        if dividend % divisor == 0:\n            factors.append(divisor)\n            dividend //= divisor\n        else:\n            divisor += 1\n    return factors</s>"
  },
  {
    "text": "<s>[INST] Create a function for splitting a string into an array of characters. [/INST] def split_string_to_chars(string):\n    '''This function takes a string and splits it into an array of characters.'''\n    return list(string)</s>"
  },
  {
    "text": "<s>[INST] Write a function which will take an array of integers and returns an array with no repeated elements.\n\nmy_array = [1, 2, 3, 2, 4, 6, 1, 2] [/INST] def remove_duplicates(my_array):\n    '''This function takes an array of integers and returns an array with no repeated elements.'''\n    return list(set(my_array))</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression to match numbers between 10 and 100 [/INST] [1-9]\\d{1,2}</s>"
  },
  {
    "text": "<s>[INST] What is the maximum value a 32-bit signed integer can represent? [/INST] 2147483647</s>"
  },
  {
    "text": "<s>[INST] Compile and execute the following C++ program\n\n#include <iostream> \nusing namespace std; \n  \nint main() \n{ \n    cout << \"Hello world\" << endl; \n    return 0; \n} [/INST] Hello world</s>"
  },
  {
    "text": "<s>[INST] Normalize the following URL\n\nhttp://www.facebook.com/profile/pages? [/INST] http://www.facebook.com/profile/pages</s>"
  },
  {
    "text": "<s>[INST] Decompile the following HTML code\n\n<h1>Hello World</h1> [/INST] <html>\n    <head>\n    </head>\n    <body>\n        <h1>Hello World</h1>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Convert the following string \"Hello World!\" to an integer.\n\n\"Hello World!\" [/INST] 101946</s>"
  },
  {
    "text": "<s>[INST] Given the following code snippet, rewrite it using for loop.\n\nlet counter = 0\nwhile (counter < 10) {\n  console.log(counter);\n  counter++;\n} [/INST] for(let counter = 0; counter < 10; counter++) {\n  console.log(counter);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the sum of all the even numbers between 20 and 100. [/INST] const calculateSum = (start, end) => {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) sum += i\n  }\n  return sum;\n}\n\ncalculateSum(20, 100); // 1890</s>"
  },
  {
    "text": "<s>[INST] Create a server in Node.js to respond with status code 200 when a client hits the '/' endpoint. [/INST] const http = require(\"http\");\n\nconst server = http.createServer((req, res) => {\n  if (req.url === \"/\") {\n    res.writeHead(200, { \"Content-Type\": \"text/html\" });\n    res.end(\"hello world!\");\n  }\n});\n\nserver.listen(8080);</s>"
  },
  {
    "text": "<s>[INST] Write an array filter to remove any element with the value 0.\n\n[0,1,2,3,4,0,6] [/INST] const result = arr.filter(item => item !== 0); // result will be [1,2,3,4,6]</s>"
  },
  {
    "text": "<s>[INST] Create a Python class to represent a 3 x 3 matrix with variable values. [/INST] class Matrix:\n    def __init__(self, a00=0, a01=0, a02=0, a10=0, a11=0, a12=0, a20=0, a21=0, a22=0):\n        self.matrix = [[a00, a01, a02],\n                        [a10, a11, a12],\n                        [a20, a21, a22]]\n    \n    def __str__(self):\n        return str(self.matrix)</s>"
  },
  {
    "text": "<s>[INST] Write a JS function to make an API request.\n\nconst URL = \"https://example.com/api\" [/INST] function makeRequest(url) {\n    return fetch(url).then(response => response.json());\n}\n\nmakeRequest(URL);</s>"
  },
  {
    "text": "<s>[INST] Design a Python class to represent a rectangle with a length and width attribute. [/INST] class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length*self.width</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to take a string of numbers and convert it to an array of integers.\n\nconst inputString = '1 2 3 4 5' [/INST] function stringToArray(str) {\n    return str.split(' ').map(item => parseInt(item)); \n}\n\nstringToArray(inputString);</s>"
  },
  {
    "text": "<s>[INST] Generate a two-dimensional array of random integers in JavaScript. [/INST] function generateRandomArray(rows, cols) {\n    let array = []; \n    for (let i=0; i < rows; i++) {\n        array.push(Array.from({length: cols}, () => Math.floor(Math.random() * 10)));\n    }\n    return array; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python class to represent an employee record with fields name and salary. [/INST] class Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary</s>"
  },
  {
    "text": "<s>[INST] Design a Python class to represent a 3 x 3 chess board. [/INST] class ChessBoard:\n    def __init__(self):\n        self.board = [\n            [\"a1\",\"b1\",\"c1\"],\n            [\"a2\",\"b2\",\"c2\"],\n            [\"a3\",\"b3\",\"c3\"]\n        ]\n\n    def __str__(self):\n        board_string = \"\"\n        for row in self.board:\n            for col in row:\n                board_string += col + \" \"\n            board_string += \"\\n\"\n        return board_string</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code snippet to style all buttons in red. [/INST] button {\n    background-color: red; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to log a friendly message when the page is loaded. [/INST] window.onload = function () {\n    console.log('Welcome to my website!');\n}</s>"
  },
  {
    "text": "<s>[INST] Design a Python class to represent a user with fields name and age. [/INST] class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two strings and returns a boolean value indicating whether the two strings are anagrams or not. [/INST] def anagram(s1, s2):\n    \n    # Strip whitespaces and convert to lowercase\n    s1 = s1.replace(' ', '').lower()\n    s2 = s2.replace(' ', '').lower()\n    \n    # Return boolean indicating anagram status\n    return sorted(s1) == sorted(s2)\n\nif __name__ == '__main__':\n    print(anagram('tea', 'eat')) \n    # should print True</s>"
  },
  {
    "text": "<s>[INST] Categorize the following text into its corresponding sentiment\n\nThe newest addition to the concert line-up is incredibly disappointing. [/INST] Negative sentiment.</s>"
  },
  {
    "text": "<s>[INST] Create a web application that allows users to search for movies and save their favorites. [/INST] \"\"\"\nCreate a web application that allows users to search for movies and save their favorites\n\"\"\"\n\n# Import libraries\nimport flask\nimport sqlalchemy\n\n# Create Flask application\napp = flask.Flask(__name__)\n\n# Connect to database\nengine = sqlalchemy.create_engine('sqlite:///movies.db')\n\n# Define routes\n@app.route(\"/\")\ndef index():\n    # Return homepage\n    return flask.render_template(\"index.html\")\n\n@app.route(\"/search\")\ndef search():\n    # Get search terms from query string\n    terms = flask.request.args.get(\"terms\")\n    \n    # Query database\n    conn = engine.connect()\n    query = f\"SELECT * FROM movies WHERE title LIKE '%{terms}%'\"\n    results = conn.execute(query).fetchall()\n    conn.close()\n    \n    # Render results\n    return flask.render_template(\"search.html\", results=results)\n    \n@app.route(\"/save\")\ndef save():\n    # Get the movie id from query string\n    movie_id = flask.request.args.get(\"id\")\n    \n    # Save the movie to the database\n    conn = engine.connect()\n    query = f\"INSERT INTO favorites (movie_id) VALUES ({movie_id})\"\n    conn.execute(query)\n    conn.close()\n    \n    # Redirect to homepage\n    return flask.redirect(\"/\")\n\nif __name__ == '__main__':\n    app.run(debug=True)</s>"
  },
  {
    "text": "<s>[INST] Make a 3D scatter chart with a dataset containing 5 rows and 3 columns.\n\nimport pandas as pd\n\n# Sample dataset\ndata = {'X': [1,2,3,4,5], 'Y': [6,7,8,9,10], 'Z': [11,12,13,14,15]}\ndf = pd.DataFrame(data) [/INST] import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\n# Create 3D scatter plot\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(df['X'], df['Y'], df['Z'])\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two lists and returns a dictionary with the elements of each list as keys.\n\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3] [/INST] def create_dictionary(list1, list2):\n    \"\"\"\n    Function to create a dictionary with two lists\n    \"\"\"\n    return {list1[i]: list2[i] for i in range(len(list1))}\n    \nif __name__ == '__main__':\n    list1 = ['a', 'b', 'c']\n    list2 = [1, 2, 3]\n    print(create_dictionary(list1, list2))\n    # should print {'a': 1, 'b': 2, 'c': 3}</s>"
  },
  {
    "text": "<s>[INST] Calculate the area of a triangle given the coordinates of its three vertices.\n\nx1 = 1\ny1 = 5\nx2 = 4\ny2 = 3\nx3 = 7\ny3 = 2 [/INST] def calculate_triangle_area(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Function to calculate the area of a triangle given the coordinates of its 3 vertices\n    \"\"\"\n    a = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    b = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    c = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    s = (a + b + c) / 2\n    return ((s*(s-a)*(s-b)*(s-c))**0.5)\n    \nif __name__ == \"__main__\":\n    x1 = 1\n    y1 = 5\n    x2 = 4\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    print(calculate_triangle_area(x1, y1, x2, y2, x3, y3))\n    # should print 4.24</s>"
  },
  {
    "text": "<s>[INST] Build a neural network using Python\n\nimport numpy as np\n\n# Sample data\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([[0, 1, 1, 0]]).T [/INST] import keras\n\n# Create a neural network\nmodel = keras.Sequential([\n    keras.layers.Dense(2, activation='sigmoid'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Train the model\nmodel.fit(X, y, epochs=1000)</s>"
  },
  {
    "text": "<s>[INST] Merge two dictionaries into another dictionary\n\ndict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4} [/INST] def merge(dict1, dict2):\n    \"\"\"\n    Function to merge two dictionaries\n    \"\"\"\n    return {**dict1, **dict2}\n\nif __name__ == '__main__':\n    dict1 = {'a':1, 'b':2}\n    dict2 = {'c':3, 'd':4}\n    print(merge(dict1, dict2))\n    # should print {'a': 1, 'b': 2, 'c': 3, 'd': 4}</s>"
  },
  {
    "text": "<s>[INST] Create a web page that displays a greeting using HTML [/INST] <!doctype html>\n<html>\n  <head>\n    <title>Greeting</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Generate all possible permutations of the characters in a given string [/INST] def permutations(string):\n    \"\"\"\n    Function to generate all possible permutations of a given string\n    \"\"\"\n    if len(string) == 0:\n        return ['']\n    prev_list = permutations(string[1:len(string)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(string)):\n            new_string = prev_list[i][0:j]+string[0]+prev_list[i][j:len(string)-1]\n            if new_string not in next_list:\n                next_list.append(new_string)\n    return next_list\n\nif __name__ == '__main__':\n    string = 'abcd'\n    print(permutations(string))\n    # should print ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'dabc', 'dbac', 'bdac', 'bdca', 'dacb', 'dcab', 'dcba', 'adbc', 'dbca', 'dcab', 'dcba']</s>"
  },
  {
    "text": "<s>[INST] Develop a script in Java to generate Fibonacci numbers to nth place. [/INST] public class Fibonacci {\n \n    public static void main(String[] args) {\n       \n        int n = 10, t1 = 0, t2 = 1;\n        System.out.print(\"First \" + n + \" terms: \");\n \n        for (int i = 1; i <= n; ++i)\n        {\n            System.out.print(t1 + \" \");\n \n            int sum = t1 + t2;\n            t1 = t2;\n            t2 = sum;\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a function in Python to convert a temperature in Celsius to Fahrenheit.\n\nTemperature in Celsius: 30 [/INST] def celsius_to_fahrenheit(celsius):\n    return (celsius * 1.8) + 32\n\nprint(celsius_to_fahrenheit(30))</s>"
  },
  {
    "text": "<s>[INST] Create a program in Python to generate a random number in the range from 0 to 10. [/INST] import random \n\nprint(random.randint(0, 10))</s>"
  },
  {
    "text": "<s>[INST] Develop a function in C to find the power of a given base to an exponent.\n\nBase: 2\nExponent: 7 [/INST] #include <stdio.h> \n\nint power(int base, int exponent) \n{ \n\tint result = 1; \n\twhile (exponent != 0) { \n\t\tresult = result * base; \n\t\t--exponent; \n\t} \n\treturn result; \n} \n\nint main() \n{ \n\tprintf(\"This is 2 to the power of 7: %d\", power(2, 7)); \n\treturn 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Develop a function in JavaScript to get the maximum and minimum values from an array.\n\nArray elements: 10, 5, 8, 12, 9 [/INST] function getMaxMin(arr) {\n    let max = -Infinity;\n    let min = Infinity;\n \n    arr.forEach(function (item) {\n        if (item > max) {\n            max = item;\n        }\n        if (item < min) {\n            min = item;\n        }\n    });\n    return {\n        \"max\": max,\n        \"min\": min\n    };\n} \n \nlet arr = [10, 5, 8, 12, 9];\nlet result = getMaxMin(arr);\n \nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Create a script in Java to find the most repeated element in an array.\n\nArray in string form: “a,b,c,d,a,a,b,d,d” [/INST] public class MaxOccurring \n{ \n    static final int ASCII_SIZE = 256; \n    static char getMaxOccuringChar(String str) \n    { \n        int count[] = new int[ASCII_SIZE]; \n   \n        int len = str.length(); \n        for (int i=0; i<len; i++) \n            count[str.charAt(i)]++; \n   \n        int max = -1;  // Initialize max count \n        char result = ' ';   // Initialize result \n   \n        // Traversing through the string and maintaining \n        // the count of each character \n        for (int i = 0; i < len; i++) { \n            if (max < count[str.charAt(i)]) { \n                max = count[str.charAt(i)]; \n                result = str.charAt(i); \n            } \n        } \n   \n        return result; \n    } \n  \n    // Driver Method \n    public static void main(String[] args) \n    { \n        String str = \"a,b,c,d,a,a,b,d,d\"; \n        System.out.println(\"Max occurring character is \" + \n                            getMaxOccuringChar(str)); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that will print out a random word from a given list.\n\nwords_list = ['cat', 'dog', 'ball', 'toy'] [/INST] import random\n\ndef random_word(words_list):\n    word = random.choice(words_list)\n    print(word)\n\nrandom_word(words_list)</s>"
  },
  {
    "text": "<s>[INST] Write a code to generate an array of 10 random integers in the range 0-99. [/INST] import random\n \ndef random_int_array(num):\n    array = []\n    for i in range(num):\n        num = random.randint(0, 99)\n        array.append(num)\n    return array\n\nprint(random_int_array(10))</s>"
  },
  {
    "text": "<s>[INST] Construct a list in Python that contains the names of the months in order, starting with January. [/INST] months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code for setting a different background color for every odd table row.\n\n<table>\n<tr>\n  <td>row1 cell1</td>\n  <td>row1 cell2</td>\n</tr>\n<tr>\n  <td>row2 cell1</td>\n  <td>row2 cell2</td>\n</tr>\n<tr>\n  <td>row3 cell1</td>\n  <td>row3 cell2</td>\n</tr>\n</table> [/INST] function setBackgroundColor(){\n    var table = document.getElementsByTagName(\"table\")[0]; \n    for (var i = 0, row; row = table.rows[i]; i++) {\n       (i%2 == 0) ? (row.style.backgroundColor = \"#F2F2F2\") : (row.style.backgroundColor = \"#FFFFFF\");\n    }\n}\nsetBackgroundColor();</s>"
  },
  {
    "text": "<s>[INST] Write a Java code snippet to calculate the area of a triangle, given three points.\n\nx1, y1 = 0, 0\nx2, y2 = 3, 4\nx3, y3 = 4, 0 [/INST] public class TriangleAreaCalculator {\n\n    // Returns the area of the given triangle, given three points\n    static double area(int x1, int y1, int x2, int y2, int x3, int y3){\n        double side1 = Math.pow(Math.abs(x1-x2),2) + Math.pow(Math.abs(y1-y2),2);\n        double side2 = Math.pow(Math.abs(x2-x3),2) + Math.pow(Math.abs(y2-y3),2);\n        double side3 = Math.pow(Math.abs(x3-x1),2) + Math.pow(Math.abs(y3-y1),2);\n        double sperimeter = (side1 + side2 + side3) / 2;\n        double area = Math.sqrt(sperimeter*(sperimeter-side1)*(sperimeter-side2)*(sperimeter-side3));\n        return area;\n    }\n    \n    public static void main(String[] args) {\n        int x1 = 0;\n        int y1 = 0;\n        int x2 = 3;\n        int y2 = 4;\n        int x3 = 4;\n        int y3 = 0;\n        \n        System.out.println(\"The area of the triangle is: \" + area(x1, y1, x2, y2, x3, y3));\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript expression that will iterate over an array of numbers and print out the square root of each number.\n\nnum_array = [1, 4, 9, 16] [/INST] num_array.forEach(num => {\n    console.log(Math.sqrt(num));\n});</s>"
  },
  {
    "text": "<s>[INST] Define a function in Java that will take any string as argument and returns it in uppercase. [/INST] public static String toUpperCase(String s) {\n    return s.toUpperCase();\n}</s>"
  },
  {
    "text": "<s>[INST] Write code to print out the sum of two numbers in Ruby.\n\nnum1 = 5\nnum2 = 10 [/INST] def sum_of_two_numbers(num1, num2)\n  puts num1 + num2\nend\n\nsum_of_two_numbers(5, 10)</s>"
  },
  {
    "text": "<s>[INST] Using a JavaScript array of strings, write code to remove all strings that start with \"a\".\n\narr = [\"apple\", \"banana\", \"apricot\", \"guava\"] [/INST] let newArr = arr.filter(word => !word.startsWith('a'));\nconsole.log(newArr); // Output: [\"banana\", \"guava\"]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to check whether two or more arrays have the same elements.\n\narray1 = [1, 2, 3, 4];\narray2 = [3, 4, 5, 6]; [/INST] function sameElementCheck(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    let flag = true;\n    arr1.forEach((elem) => {\n        if (!arr2.includes(elem)) {\n            flag = false;\n        }\n    })\n\n    return flag;\n}</s>"
  },
  {
    "text": "<s>[INST] You need to parse a given HTML string and obtain the list of tags in the string.\n\nhtml_string = \"<div> <h1>Hello World!</h1> <p>This is a HTML string.</p> </div>\" [/INST] tag_list = []\n\nfor tag in html_string.split():\n  if tag[0] == '<' and tag[-1] == '>':\n    tag_list.append(tag[1:-1])\n    \nprint(tag_list)</s>"
  },
  {
    "text": "<s>[INST] Create a C program to check if the given number is prime or not. [/INST] #include <stdio.h>\n\nint isPrime(int n) \n{ \n  int flag = 1;\n  int i;\n\n  for (i = 2; i <= n / 2; ++i) { \n    if (n % i == 0) { \n      flag = 0; \n      break; \n    } \n  } \n\n  if (flag == 1) \n    return 1; \n  else\n    return 0; \n}\n\nint main() \n{ \n  int n;\n\n  printf(\"Enter a number: \");\n  scanf(\"%d\", &n);\n\n  if (isPrime(n)) \n    printf(\"%d is a prime number.\", n);\n  else\n    printf(\"%d is not a prime number.\", n);\n  \n  return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to generate all possible strings of length k from given lowercase characters.\n\nset = {'a', 'b', 'c'}\nk = 3 [/INST] def generate_strings(set, k): \n\tstrings = [] \n\tn = len(set) \n\t\n\tdef generate_strings_recur(sub, count): \n\t\t\n\t\t# Base cases \n\t\tif count == 0 : \n\t\t\tstrings.append(sub) \n\t\t\treturn\n\t\t\n\t\tfor i in range(n): \n\t\t\t\n\t\t\t# Next character of string to be \n\t\t\t# formed \n\t\t\tnew_sub = sub + set[i] \n\t\t\t\n\t\t\t# Recursion call \n\t\t\tgenerate_strings_recur(new_sub, \n\t\t\t\t\t\t\t\tcount-1) \n\t\n\tcount = k \n\tsub = \"\" \n\t\n\t# Call to generate all strings of length k \n\tgenerate_strings_recur(sub, count) \n\t\n\treturn strings</s>"
  },
  {
    "text": "<s>[INST] You need to edit the given code for sorting. Make the array sort in descending order.\n\narr = [3, 5, 8, 9, 10] [/INST] def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[-1]\n    lesser_elements = [i for i in arr[:-1] if i <= pivot]\n    greater_elements = [i for i in arr[:-1] if i > pivot]\n    return quick_sort(greater_elements) + [pivot] + quick_sort(lesser_elements)</s>"
  },
  {
    "text": "<s>[INST] You need to write an API request in Python to return JSON data from an API endpoint. [/INST] import requests\n\nAPI_ENDPOINT = 'api.example.com/data'\n\nresponse = requests.get(API_ENDPOINT)\n\nif response.status_code == 200:\n    data = response.json()</s>"
  },
  {
    "text": "<s>[INST] You need to write a CSS rule to change the background color of all divs in a web page. [/INST] div {\n  background-color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] You need to find the area of a given circle with the formula: Area = pi * r * r\n\nr = 5 [/INST] const PI = 3.14;\nconst r = 5;\n\nconst area = PI * r * r;\n\nconsole.log(area);</s>"
  },
  {
    "text": "<s>[INST] Read the given JSON data and return a list of all the keys.\n\n{\n  \"name\": \"John\",\n  \"age\": 21,\n  \"isActive\": true\n} [/INST] def get_keys(data): \n  keys = []\n  for key in data:\n    keys.append(key)\n  return keys</s>"
  },
  {
    "text": "<s>[INST] You need to write a Java program to check whether a given string is a palindrome or not. [/INST] public class Palindrome { \n  \n    public static void main(String[] args) {  \n        String a = \"Madam\";  \n        String b = \"\"; \n        int n = a.length(); \n  \n        for(int i = n - 1; i >= 0; i--) { \n            b = b + a.charAt(i); \n        }  \n        if(a.equalsIgnoreCase(b)) { \n            System.out.println(\"The string is a palindrome.\"); \n        } \n        else {\n            System.out.println(\"The string is not a palindrome.\"); \n        }\n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Edit the statements given below so that they can be compiled and run without any errors.\n\npublic class Test {\n    public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n    int x;\n    System.out.println(x);\n    }\n} [/INST] public class Test {\n    public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n    int x = 0;\n    System.out.println(x);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to read a single character from stdin. [/INST] #include <iostream>\n\nint main() \n{\n    char c;\n    std::cin >> c;\n    std::cout << c;\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a function that calculates the sum of n numbers.\n\nnumbers = [1,2,3,4] [/INST] def sum_n_numbers(numbers):\n    '''This function returns the sum of n numbers'''\n    total = 0\n    for n in numbers:\n        total += n\n    return total</s>"
  },
  {
    "text": "<s>[INST] Convert a given string to the CamelCase format.\n\nstring = \"this is a string\" [/INST] def to_camel_case(string):\n    '''This function converts a given string to the CamelCase format'''\n    res = \"\"\n    for word in string.split():\n        res += word[0].upper() + word[1:]\n    return res</s>"
  },
  {
    "text": "<s>[INST] Create a wrapper class for a given API that takes string input and returns JSON output.\n\nurl = \"http://example.com/api\" [/INST] class APIWrapper:\n    '''This class wraps a given API and provides a convenient way to use it'''\n    def __init__(self,url):\n        self.url = url\n\n    def call_api(self, input):\n        params = {\"input\": input}\n        response = requests.get(self.url, params=params).json()\n        return response</s>"
  },
  {
    "text": "<s>[INST] Create a Python script that shows the frequency of words in a given text.\n\ntext = \"Hello, this is a sentence.\" [/INST] def calc_word_freq(text):\n    '''This function calculates word frequency in a given text'''\n    word_freq = {}\n    for word in text.split():\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    for word,freq in word_freq.items():\n        print(f'{word} - {freq}')</s>"
  },
  {
    "text": "<s>[INST] Generate an SQL query that returns the names of all employees who are engineers. [/INST] SELECT name\nFROM Employees\nWHERE title = 'Engineer'</s>"
  },
  {
    "text": "<s>[INST] Create a Python program that compares two given lists to check if they have any common element.\n\nlist1 = [1,2,3]\nlist2 = [4,5,6] [/INST] def compare_lists(list1, list2):\n    '''This function checks if two lists have any common element'''\n    found_common = False\n    \n    for x in list1:\n        if x in list2:\n            found_common = True\n            break\n    return found_common</s>"
  },
  {
    "text": "<s>[INST] Create a Python class that encodes a given number using the Base58 algorithm.\n\nnumber = 123456789 [/INST] class Base58Encoder:\n    '''This class encodes numbers using the Base58 algorithm'''\n    def __init__(self,number):\n        self.number = number\n\n    def encode(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n        return encoded</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query that creates a table with two columns, one for id and one for name. [/INST] CREATE TABLE table_name\n(\n  id INT NOT NULL AUTO_INCREMENT, \n  name VARCHAR(255) NOT NULL,\n  PRIMARY KEY (id)\n);</s>"
  },
  {
    "text": "<s>[INST] Using the given array of integers, calculate the mean and output the result.\n\n[7, 4, 5, 9] [/INST] The mean of the given array is 6.5.</s>"
  },
  {
    "text": "<s>[INST] Write a Python script that reads in a string and checks if it is a palindrome.\n\n\"Radar\" [/INST] The given string is a palindrome.</s>"
  },
  {
    "text": "<s>[INST] Write a Bash command to list the top 20 processes that are currently running on the system. [/INST] ps -aux --sort=-%cpu | head -n 20</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to remove all children that are of the class 'myclass' in a div with id 'myDiv'. [/INST] document.getElementById(\"myDiv\").querySelectorAll(\".myclass\").forEach(el => el.remove());</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select all rows from the table 'users' where the 'last_name' is 'Smith'. [/INST] SELECT * FROM users WHERE last_name = 'Smith'</s>"
  },
  {
    "text": "<s>[INST] In C++, create a class called 'Point' that stores a 2D point with x and y coordinates. [/INST] class Point {\n private:\n  int x;\n  int y;\n public:\n  Point(int x, int y) : x(x), y(y) {}\n  int getX() const { return x; }\n  int getY() const { return y; }\n};</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object that stores the properties name, age and favorite color. [/INST] let person = {\n  name: \"John Smith\",\n  age: 30,\n  favoriteColor: \"blue\"\n};</s>"
  },
  {
    "text": "<s>[INST] Create a C# program that creates a List of five strings and prints out each one. [/INST] List<string> myList = new List<string>();\nmyList.Add(\"hello\");\nmyList.Add(\"world\");\nmyList.Add(\"testing\");\nmyList.Add(\"123\");\nmyList.Add(\"goodbye\");\n\nforeach (string s in myList)\n{\n Console.WriteLine(s);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python program that prints out a given list of numbers in reverse order.\n\n[1, 2, 3, 4, 5] [/INST] for i in range(len(list) - 1, -1, -1):\n    print(list[i])</s>"
  },
  {
    "text": "<s>[INST] Using the given JSON data, create a JavaScript object and output its first element.\n\n{\"people\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 25}]} [/INST] let jsonData = {\n  \"people\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 25}]\n};\nlet firstElement = jsonData.people[0];\nconsole.log(firstElement);</s>"
  },
  {
    "text": "<s>[INST] Write a C program that prints out a pyramid of numbers. [/INST] #include <stdio.h>\n\nvoid printPyramid(int n) \n{ \n    int i, j; \n   \n    for (i=0; i<n; i++) \n    { \n        for (j=0; j<=i; j++) \n            printf(\"%d \", j+1); \n        printf(\"\\n\"); \n    } \n} \n  \nint main() \n{ \n    int n = 5; \n    printPyramid(n); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to show a message. [/INST] function showMessage() {\n  console.log('This is a message');\n}</s>"
  },
  {
    "text": "<s>[INST] Change the code to allow two parameters to be passed.\n\nfunction sum(a) {\n  return a;\n} [/INST] function sum(a, b) {\n  return a + b;\n}</s>"
  },
  {
    "text": "<s>[INST] Describe the difference between a loop and a conditional statement. [/INST] A loop is a set of instructions that is execute repeatedly until a certain condition is met. A conditional statement is an instruction that is used to check a condition, and if the condition is true, it will execute certain code. Loops can be used to execute a block of code multiple times, while a conditional statement can be used to choose between different blocks of code.</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find all the employees based in France. [/INST] SELECT * FROM employees WHERE country = 'France';</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to sort a list of numbers from least to greatest. [/INST] def sort_list(mylist):\n    for i in range(len(mylist)):\n        min_idx = i\n        for j in range(i+1, len(mylist)):\n            if mylist[min_idx] > mylist[j]:\n                min_idx = j\n        mylist[i], mylist[min_idx] = mylist[min_idx], mylist[i]\n    return mylist</s>"
  },
  {
    "text": "<s>[INST] What are the three main principles of OOP? [/INST] The three main principles of Object Oriented Programming (OOP) are encapsulation, inheritance, and polymorphism. Encapsulation is the process of wrapping data and functions together into one unit. Inheritance is the process of allowing a class to inherit the properties and behavior of a parent class. Polymorphism is the ability to define multiple versions of the same function or object depending on the context in which they are used.</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to get the first element of an array in JavaScript.\n\nlet myArray = [1,2,3]; [/INST] let firstElement = myArray[0];</s>"
  },
  {
    "text": "<s>[INST] Compare and contrast classes and functions in C#. [/INST] Classes and functions in C# serve similar purposes, such as organizing code, adding structure to a program, and making it easier to understand and maintain, but they are different in several ways. Classes are an aggregate of various related data and methods; they are used to represent real-world entities and represent a model of an object or concept in the program. Functions are separate, independent, self-contained pieces of code that perform a specific operation; they accept data as input, perform some kind of operation on that input, and then return a result.</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to print the first 10 natural numbers. [/INST] \"\"\"\nWrite an algorithm to print the first 10 natural numbers\n\"\"\"\nfor i in range(1, 11):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Construct a dialogue bot using natural language processing techniques.\n\n`<code>Hello!</code>` [/INST] \"\"\"\nConstruct a dialogue bot using natural language processing techniques\n\"\"\"\nimport nltk\n\n# Define a simple set of rules to respond to the user's input\ndef respond(input):\n\tif input == \"hello\" or input == \"hi\":\n\t\treturn(\"Hello. How can I help you today?\")\n\telif input == \"goodbye\":\n\t\treturn(\"Goodbye! Have a nice day.\")\n\telse:\n\t\treturn(\"I'm sorry, I don't understand what you said.\")\n\n# Tokenize the input string and call the respond function\ndef chatbot(input_string):\n\ttokens = nltk.word_tokenize(input_string)\n\tresponse = respond(' '.join(tokens))\n\treturn response\n\nif __name__ == '__main__':\n\tprint(chatbot(\"Hello!\"))</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to search for a substring in a given string.\n\n`<code>'Hello World!', substring = 'll'</code>` [/INST] \"\"\"\nCreate an algorithm to search for a substring in a given string\n\"\"\"\ndef search(string, substring):\n    for i in range(len(string)):\n        if string[i: i + len(substring)] == substring:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(search('Hello World!', 'll'))</s>"
  },
  {
    "text": "<s>[INST] Construct an algorithm to find the longest common prefix string amongst an array of strings.\n\n`<code>['leet', 'leets', 'lee', 'leeston', 'leeve']</code>` [/INST] \"\"\"\nConstruct an algorithm to find the longest common prefix string amongst an array of strings\n\"\"\"\ndef longest_common_prefix(strs):\n    prefix = strs[0]\n    i = 0\n    while i < len(prefix):\n        for string in strs:\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[0:i]\n        i += 1\n    return prefix\n\nif __name__ == '__main__':\n    print(longest_common_prefix(['leet', 'leets', 'lee', 'leeston', 'leeve']))</s>"
  },
  {
    "text": "<s>[INST] Construct a program to print the Pyramid pattern using asterisks. [/INST] \"\"\"\nConstruct a program to print the Pyramid pattern using asterisks\n\"\"\"\nfor i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"*\", end=\"\")\n    print()</s>"
  },
  {
    "text": "<s>[INST] Construct a function to set up a dictionary with words and corresponding counts of occurrences of each word.\n\n`<code>'hey hey hello hello hell oh hello',</code>` [/INST] \"\"\"\nConstruct a function to set up a dictionary with words and corresponding counts of occurrences of each word\n\"\"\"\ndef word_count(string):\n    word_dict = {}\n    for word in string.split():\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n\n    return word_dict\n\nif __name__ == '__main__':\n    print(word_count('hey hey hello hello hell oh hello'))</s>"
  },
  {
    "text": "<s>[INST] Design a function in Java that takes a parameter of type array as an argument and returns its maximum value.\n\nArray = {21, 8, 43, 10, 7} [/INST] public int maxElement(int[] array) {\nint max = array[0];\n \nfor (int i = 1; i < array.length; i++)\nif (array[i] > max)\nmax = array[i];\n \nreturn max;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that designates a unique identifier for each row in a table.\n\nTable name: \"User\" \n Columns: id, name, occupation [/INST] SELECT id, name, occupation, \n       ROW_NUMBER() OVER (ORDER BY id) AS row_id\nFROM User;</s>"
  },
  {
    "text": "<s>[INST] Debug this Java code to make it work.\n\npublic class test\n{\n  public static void main(String args[])\n  {\n    int a = 5;\n    int b = 0;\n    int c = a + b;\n    System.out.println(\"Result is: \" + c);\n  }\n} [/INST] public class test\n{\n  public static void main(String args[])\n  {\n    int a = 5;\n    int b = 0;\n    if(b!=0)\n    {\n      int c = a + b;\n      System.out.println(\"Result is: \" + c);\n    }\n    else\n    {\n      System.out.println(\"Error: Cannot divide by 0!\");\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python called 'Rectangle' to store the coordinates of a rectangle. [/INST] class Rectangle: \n    def __init__(self, x1, y1, x2, y2): \n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n  \n    def get_coordinates(self): \n        return (self.x1, self.y1, self.x2, self.y2)</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in JavaScript that calculates the average of a series of numbers.\n\nSeries of numbers: [2, 3, 7, 8] [/INST] function calculateAverage(arr) {\n    let sum = 0;\n    arr.forEach(num => sum += num);\n    return sum/arr.length;\n}\n\nconsole.log(calculateAverage([2, 3, 7, 8]))</s>"
  },
  {
    "text": "<s>[INST] Design a function in PHP to add two numbers together. [/INST] function addNumbers($a, $b) {\n    return $a + $b;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code snippet to make a link open in a new window.\n\nLink: https://www.example.com [/INST] <a href=\"https://www.example.com\" target=\"_blank\">Link Text</a></s>"
  },
  {
    "text": "<s>[INST] Create a program in C that outputs all perfect square numbers between 1 and 100. [/INST] #include <stdio.h>\nint main()\n{\n    for (int i = 1; i <= 100; i++)\n    {\n        int sq = i * i;\n        if (sq <= 100)\n            printf(\"%d \", sq);\n    }\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Haskell that takes two strings as arguments and returns them in reverse order. [/INST] reverseOrder :: String -> String -> String\nreverseOrder x y = y ++ x</s>"
  },
  {
    "text": "<s>[INST] Edit the following C code to remove any syntax errors.\n\nint main()\n{\n  int a,b;\n  printf(\"Enter two numbers:\");\n  scanf(\"%d &d\", &a, &b)\n  printf(\"Product = %d\", a*b)\n  return 0;\n} [/INST] int main()\n{\n  int a,b;\n  printf(\"Enter two numbers:\");\n  scanf(\"%d %d\", &a, &b);\n  printf(\"Product = %d\", a*b);\n  return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an assembly code to calculate the sum of a series of numbers.\n\nSeries of numbers: [1, 5, 8, 10] [/INST] MOV      R1, #1 ; Load the first number\n        ADD      R2, R1 ; Initialize the sum\nLOOP    CMP      R1, #10 ; Check if we have reached the last number\n        BEQ      SUM    ; If yes, jump to SUM\n        ADD      R1, #1 ; Increment the number\n        ADD      R2, R1 ; Add the number to sum\n        B        LOOP   ; Loop\nSUM     ; At the end, the sum is in R2</s>"
  },
  {
    "text": "<s>[INST] Using the given information, create a SQL query to find the total number of products in the database.\n\nTable: products\nColumns: product_id, product_name [/INST] SELECT COUNT(*) FROM products;</s>"
  },
  {
    "text": "<s>[INST] Using the parameters provided, create a new variable \"n\" that stores the sum of \"a\" and \"b\".\n\na = 25\nb = 10 [/INST] n = a + b</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop to print out numbers ranging from 1 to 10, skipping even numbers. [/INST] for i in range(1,11):\n if i % 2 != 0:\n print(i)</s>"
  },
  {
    "text": "<s>[INST] Create a list of all the words in the given sentence.\n\nThe quick brown fox jumped over the lazy dog. [/INST] words_list = [\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]</s>"
  },
  {
    "text": "<s>[INST] Retrieve the public IP address of your machine using Python. [/INST] import requests\n\ndef get_public_ip():\n response = requests.get('https://api.ipify.org')\n return response.text</s>"
  },
  {
    "text": "<s>[INST] Construct a while loop that prints integers from 0 to 9. [/INST] i = 0\nwhile i < 10:\n print(i)\n i+=1</s>"
  },
  {
    "text": "<s>[INST] Given a sorted list of integers, write a Python function to search for a specific target element. [/INST] def binary_search(list, target):\n low = 0\n high = len(list) - 1\n\n while low <= high:\n  mid = (low + high) // 2\n  if list[mid] < target:\n   low = mid + 1\n  elif list[mid] > target:\n   high = mid - 1\n  else:\n   return mid\n return False</s>"
  },
  {
    "text": "<s>[INST] Using the given list, create a new variable \"result\" that stores the sum of all the elements.\n\nitems = [1, 2, 3, 4, 5] [/INST] result = 0\nfor item in items:\n result += item</s>"
  },
  {
    "text": "<s>[INST] Modify the existing code so it prints out the numbers from 0 to 10 in reverser order.\n\nfor (let i = 0; i < 10; i++) {\n\tconsole.log(i);\n} [/INST] for (let i = 10; i >= 0; i--) {\n\tconsole.log(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Read the data structure and output the sum of all the values.\n\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] let total = 0;\ndata.forEach((arr)=> {\n\tarr.forEach(num => {\n\t\ttotal += num;\n\t});\n});\nconsole.log(total); //45</s>"
  },
  {
    "text": "<s>[INST] Develop a program for sorting an array of numbers.\n\narr = [40, 10, 5, 50, 30] [/INST] function sortArray(arr) {\n\tlet n = arr.length;\n\tfor (let i = 0; i < n-1; i++) {\n\t\tlet minIndex = i;\n\t\tfor (let j = i + 1; j < n; j++){\n\t\t\tif (arr[j] < arr[minIndex]) \n\t\t\t\tminIndex = j; \n\t\t}\n\t\tlet temp = arr[minIndex];\n\t\tarr[minIndex] = arr[i];\n\t\tarr[i] = temp; \n\t}\n\treturn arr;\n}\nconsole.log(sortArray(arr)) // Output: [5, 10, 30, 40, 50]</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a table with three columns and four rows and give it an appropriate CSS styling. [/INST] <style>\n\ttable {\n\t\tborder-collapse: collapse;\n\t}\n\t\n\tth, td {\n\t\tborder: 1px solid #000;\n\t\tpadding: 8px;\n\t}\n\t\n</style>\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Column 1</th>\n\t\t\t<th>Column 2</th>\n\t\t\t<th>Column 3</th>\n\t\t</tr>\n\t</thead>\n\t\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Row 1 Col 1</td>\n\t\t\t<td>Row 1 Col 2</td>\n\t\t\t<td>Row 1 Col 3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Row 2 Col 1</td>\n\t\t\t<td>Row 2 Col 2</td>\n\t\t\t<td>Row 2 Col 3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Row 3 Col 1</td>\n\t\t\t<td>Row 3 Col 2</td>\n\t\t\t<td>Row 3 Col 3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Row 4 Col 1</td>\n\t\t\t<td>Row 4 Col 2</td>\n\t\t\t<td>Row 4 Col 3</td>\n\t\t</tr>\n\t</tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Develop a function to search for a value in an array and return its position.\n\narr = [25, 100, 98, 50];\nvalue = 50 [/INST] function searchValue(arr, value) {\n\tlet position = -1;\n\tarr.forEach((n, i)=> {\n\t\tif (n == value) {\n\t\t\tposition = i;\n\t\t}\n\t});\n\treturn position;\n}\nlet position = searchValue(arr, value);\nconsole.log(position); // 3</s>"
  },
  {
    "text": "<s>[INST] Improve the code to return the sum of all the numbers in the given vector.\n\nvector<float> nums = {1.5, 2.5, 3.5, 4.5}; [/INST] float get_sum(vector<float>& nums) {\n    float sum = 0;\n    for (auto n : nums) {\n        sum += n;\n    }\n    return sum;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python class called Dog that contains the following attributes: breed, name, and age. [/INST] class Dog:\n    def __init__(self, breed, name, age):\n        self.breed = breed\n        self.name = name\n        self.age = age</s>"
  },
  {
    "text": "<s>[INST] Create a copy of the given code without using the copy.deepcopy()\n\nimport copy\n\nlist1 = [[1, 2], [3, 4]]\nlist2 = copy.deepcopy(list1) [/INST] list2 = []\nfor i in range(len(list1)):\n    list2.append(list1[i].copy())</s>"
  },
  {
    "text": "<s>[INST] Calculate the cosine similarity between the given two sentence vectors.\n\nvec1 = [1,2,3,4,5]\nvec2 = [2,3,4,5,6] [/INST] def cosine_similarity(vec1, vec2):\n    dot_product = np.dot(vec1, vec2)\n    norm_vec1 = np.linalg.norm(vec1)\n    norm_vec2 = np.linalg.norm(vec2)\n    return dot_product / (norm_vec1 * norm_vec2)</s>"
  },
  {
    "text": "<s>[INST] Define a custom Exception for an invalid data type. [/INST] class InvalidDataTypeError(Exception):\n    \"\"\"Exception raised when an invalid data type is encountered\"\"\"\n\n    def __init__(self, message):\n        self.message = message</s>"
  },
  {
    "text": "<s>[INST] Given a list of tuples, return a new list with the value of each tuple increased by one.\n\ntuples = [(1,2), (2,3), (3,4)] [/INST] new_tuples = []\nfor t in tuples:\n    new_tuples.append((t[0] + 1, t[1] + 1))</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to find all customers in a given database table.\n\nTable: Customers [/INST] SELECT * FROM Customers;</s>"
  },
  {
    "text": "<s>[INST] Identify the largest element of an array with python.\n\n[9, 4, 2, 8, 7] [/INST] def find_largest_num(a): \n  if len(a) == 0: \n    return\n  max = a[0] \n  for num in a: \n    if num > max: \n      max = num \n  return max</s>"
  },
  {
    "text": "<s>[INST] Generate a python script that concatenates two strings.\n\nString 1: \"foo\" \nString 2: \"bar\" [/INST] str1 = \"foo\" \nstr2 = \"bar\"\nconcatenated_str = str1 + str2\nprint(concatenated_str)</s>"
  },
  {
    "text": "<s>[INST] Create a line chart from given data on the number of car sales in the UK from 2008 to 2019.\n\nyear = ['2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019']\nnumber_of_sales = [1.8, 2.1, 2.5, 2.6, 2.8, 3.0, 3.2, 3.5, 3.7, 3.8, 4.0, 4.2] [/INST] import matplotlib.pyplot as plt\n\n# Make a data frame from the given data\ndf = pd.DataFrame({'year': year, 'number_of_sales': number_of_sales})\n\n# Plot a line chart\nplt.plot(df['year'], df['number_of_sales'], linewidth=3)\nplt.title(\"Car Sales in the UK from 2008 to 2019\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of sales\")\n\n# Show the plot\nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query that joins two tables, Orders and Customers, and returns a list of customers who have ordered something in the last month. [/INST] SELECT c.name\nFROM Orders o\nINNER JOIN Customers c ON o.customer_id = c.id\nWHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);</s>"
  },
  {
    "text": "<s>[INST] Create a Java class called Employee with a constructor taking name and salary as arguments. [/INST] public class Employee\n{\n    private String name;\n    private double salary;\n \n    public Employee(String name, double salary)\n    {\n        this.name = name;\n        this.salary = salary;\n    }\n    \n    // Getters and setters\n    public String getName()\n    {\n        return name;\n    }\n  \n    public void setName(String name)\n    {\n        this.name = name;\n    }\n  \n    public double getSalary()\n    {\n        return salary;\n    }\n  \n    public void setSalary(double salary)\n    {\n        this.salary = salary;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of 100 elements filled with random numbers from 1 to 100. [/INST] import random\n\n# Create an array of 100 elements with 0 values\nrandom_num_arr = [0] * 100\n\n# Fill each of the 100 elements with random numbers from 1 to 100\nfor i in range(100):\n    random_num_arr[i] = random.randint(1, 100)\n\nprint(random_num_arr)</s>"
  },
  {
    "text": "<s>[INST] Using jQuery, select all paragraph elements on a page and hide them. [/INST] $('p').hide();</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript statement to check if a given number is greater than 5. [/INST] // given number\nlet number = 5;\n\nif (number > 5) {\n    console.log('Number is greater than 5');\n}</s>"
  },
  {
    "text": "<s>[INST] Convert a given JSON string to a JavaScript object.\n\n'{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}' [/INST] # Convert given JSON string to JavaScript object\nlet obj = JSON.parse('{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}');\n\nconsole.log(obj);\n// Output: {name: \"John\", age: 30, city: \"New York\"}</s>"
  },
  {
    "text": "<s>[INST] Perform an left outer join of two tables, Customers and Orders, in an SQL query and order the result by CustomerName in ascending order. [/INST] SELECT c.Name AS CustomerName, o.OrderNumber\nFROM Customers c\nLEFT OUTER JOIN Orders o ON c.ID = o.CustomerID\nORDER BY CustomerName ASC;</s>"
  },
  {
    "text": "<s>[INST] Create a program that prompts the user to enter their name and prints it out. [/INST] # Get user input\nname = input('Enter your name: ')\n\n# Print out the user's name\nprint('Hello ' + name + '!')</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript statement to determine whether a given string is empty or not. [/INST] // given string\nlet str = \"\";\n\nif (str == \"\") {\n    console.log('String is empty');\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to normalize a given list of numbers so that they sum up to 1.\n\narr = [2, 4, 6, 8] [/INST] def normalize(arr):\n    # calculate the sum of the given numbers\n    total = sum(arr)\n\n    # normalize each number in the array\n    normalized_arr = [number / total for number in arr]\n    \n    return normalized_arr\n\n# print the normalized array\nprint(normalize(arr)) # prints [0.1, 0.2, 0.3, 0.4]</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python to represent a book with the title, author and year of publication as attributes. [/INST] class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year</s>"
  },
  {
    "text": "<s>[INST] Create a class in JavaScript to represent a person with properties like name, age, and gender. [/INST] class Person {\n    constructor(name, age, gender) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to print the words \"Hello world!\" n times if n is given as an input. [/INST] def hello(n):\n    if n > 0:\n        for x in range(n):\n            print(\"Hello world!\")\n    else:\n        print(\"Input should be a number greater than 0\")\n\nhello(5)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the records from the table \"users\" where the age is greater than 18.\n\nSELECT * FROM users [/INST] SELECT * FROM users WHERE age > 18;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript loop that counts from 1 to 10. [/INST] for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Fix the syntax error in the following Java code.\n\nString[] x = {\"a\", \"b\", \"c\"}\n\nfor (int i=0; i<x.lenght; i++) {\nSystem.out.println(x[i]);\n} [/INST] String[] x = {\"a\", \"b\", \"c\"};\n\nfor (int i=0; i<x.length; i++) {\nSystem.out.println(x[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Generate an algorithm to perform the task described below\n\nGiven two strings, find out if one string is a rotation of other. [/INST] The following algorithm can be used to find out if a given string is a rotation of another given string:\n1. Create a concatenated string by concatenating the first string with itself\n2. Check if the second string is a substring of the concatenated string.\n3. If yes, then the second string is a rotation of the first string</s>"
  },
  {
    "text": "<s>[INST] Complete the following C++ code to sort a two-dimensional array.\n\nint[][] arr = {{4, 9}, {2, 8}, {3, 1}}; [/INST] #include <algorithm> \n\nint[][] arr = {{4, 9}, {2, 8}, {3, 1}};\n\n// Sort by the first element\nstd::sort(arr.begin(), arr.end(), \n    [](const std::vector<int>& a, const std::vector<int>& b) {\n        return a[0] < b[0];\n    });\n\n// Sort by the second element \nstd::sort(arr.begin(), arr.end(), \n    [](const std::vector<int>& a, const std::vector<int>& b) {\n        return a[1] < b[1];\n    });</s>"
  },
  {
    "text": "<s>[INST] Manually debug the following code to find any errors.\n\ndef foo(x):\n    y = x**3\n    z = y + 2\n    return z [/INST] No errors found in the given code.</s>"
  },
  {
    "text": "<s>[INST] Create a basic HTML page using HTML tags. [/INST] <!DOCTYPE html>\n<html>\n    <head>\n        <title>My page</title>\n    </head>\n    <body>\n        <h1>This is my page</h1>\n    </body>    \n</html></s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to select the unique emails from a table. [/INST] SELECT DISTINCT email FROM tableName;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to create a class 'Shape' and create an object 'circle' of this class. [/INST] class Shape {\n    constructor() {\n        this.type = \"Shape\";\n    }\n}\n\nlet circle = new Shape();\ncircle.type = \"Circle\";\nconsole.log(circle.type);</s>"
  },
  {
    "text": "<s>[INST] What is an example of a one-to-one mapping? [/INST] An example of a one-to-one mapping is a function, which pairs each element in one set to a unique element in another set, such that each element in the first set is paired with exactly one element in the second set. For example, the following function is one-to-one: f(x) = x + 1. This function maps each number x to a unique number x + 1.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the customers who live in the given zip code.\n\nZip Code: 10003 [/INST] SELECT * \nFROM customers \nWHERE zip_code = 10003;</s>"
  },
  {
    "text": "<s>[INST] Create a Python function that will take two lists as inputs, and return a list that contains all the common items between the lists.\n\nlist1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8] [/INST] def common_elements(list1, list2):\n    return [item for item in list1 if item in list2] \n\nlist1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]\n\ncommon_items_list = common_elements(list1, list2)\nprint(common_items_list)</s>"
  },
  {
    "text": "<s>[INST] Sort the given list of employee names alphabetically (A-Z).\n\nemployee_names = ['John', 'Lisa', 'Emily', 'Mia'] [/INST] employee_names = ['John', 'Lisa', 'Emily', 'Mia'] \n\nsorted_employees = sorted(employee_names)\n\nprint(sorted_employees)</s>"
  },
  {
    "text": "<s>[INST] What is a use case for inheritance in object-oriented programming? [/INST] In object-oriented programming, inheritance is used to create and maintain a hierarchical relationship between classes. By inheriting properties and methods from a parent class, a child class can reuse and extend the functionalities of the parent class. This allows developers to write less code and keep their codebase organized by logically grouping similar classes into a hierarchy, which can then be further extended with new features.</s>"
  },
  {
    "text": "<s>[INST] Write a method to take two strings as the inputs and check if the second string is a substring of the first one or not.\n\nString1: hello world\nString2: world [/INST] def is_substring(string1, string2):\n    if string2 in string1: \n        return True\n    else:\n        return False\n\nstring1 = 'hello world'\nstring2 = 'world'\n\nis_substring(string1, string2) # will return True</s>"
  },
  {
    "text": "<s>[INST] What is a use case for the switch statement in C++? [/INST] A switch statement in C++ is used to execute a statement or group of statements for a given value. This is particularly useful when dealing with a large number of cases. The switch statement evaluates an expression and compares the result with different case labels, and executes the code associated with the matching case label.</s>"
  },
  {
    "text": "<s>[INST] What kind of sorting algorithm is Insertion Sort? [/INST] Insertion sort is a comparison-based sorting algorithm in which the elements are compared and arranged in a particular order. In this algorithm, a sublist is created which is sorted and at each iteration it is compared with the elements of the original list and placed in the correct position. It is an in-place sorting algorithm, meaning it doesn’t require any additional data structures for sorting.</s>"
  },
  {
    "text": "<s>[INST] Write a function to take three integers as input and return their product.\n\nx=3, y=5, z=7 [/INST] def product(x,y,z):\n    return x*y*z\n\nx = 3\ny = 5\nz = 7\n\nres = product(x,y,z)\nprint(res)</s>"
  },
  {
    "text": "<s>[INST] What is the advantage of using Dynamic programming over Greedy algorithms? [/INST] The main advantage of using dynamic programming over greedy algorithms is that it is optimized for the long-term. Dynamic programming takes into account the entire problem and finds the optimal solution based on the entire problem. On the other hand, greedy algorithms may find an optimal solution to a given sub-problem, but they may not find the optimal solution to the entire problem. In addition, dynamic programming is better suited for problems with overlapping sub-problems, which may not be solved by a greedy algorithm.</s>"
  },
  {
    "text": "<s>[INST] What is a use case for exception handling in Java? [/INST] Exception handling in Java is used to catch and handle errors in code. When an exception occurs, a program may throw an exception object and propagate it to the code that invoked the program; this allows the program to handle the exception and take the necessary actions. Exception handling also allows for code to be written that handles expected errors and ensures the failure of a program does not lead to an undesired result or invalid state.</s>"
  },
  {
    "text": "<s>[INST] Create a recursive function that returns the Fibonacci number corresponding to a given input. [/INST] def Fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(Fibonacci(n-1) + Fibonacci(n-2)) \n  \n# Driver Code \nnterms = 10\n  \n# check if the number of terms is valid \nif nterms <= 0: \n    print(\"Plese enter a positive integer\") \nelse: \n    print(\"Fibonacci sequence:\") \n    for i in range(nterms): \n        print(Fibonacci(i))</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that returns the seating capacity of a given theater.\n\ntheater name = “Fox Theatre” [/INST] SELECT theater_name, seating_capacity \nFROM theater \nWHERE theater_name = 'Fox Theatre';</s>"
  },
  {
    "text": "<s>[INST] Create a Python code snippet to create a line chart with three different categories.\n\ncategory1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10] [/INST] import matplotlib.pyplot as plt\n\n# Data to plot\ncategory1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]\n\n# Create the line plot\nplt.plot(category1, label='Category 1')\nplt.plot(category2, label='Category 2')\nplt.plot(category3, label='Category 3')\n\n# change font type and size\nplt.rc('font', size=16)\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet that returns a random element from a given array.\n\narray = [1,2,3,4,5,6] [/INST] function getRandomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n\narray = [1,2,3,4,5,6];\n\nconsole.log(getRandomElement(array));</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script that returns the same result as a given MySQL query.\n\nSELECT id, name, price \nFROM product [/INST] <?php\n    $con = new mysqli(\"localhost\",\"username\",\"password\",\"database\");\n    \n    if($con->connect_error){\n        echo \"Connection failed \";\n    }\n\n    $sql = \"SELECT id, name, price FROM product\";\n    $result = $con->query($sql);\n\n    if($result->num_rows > 0){\n        while($row = $result->fetch_assoc()){\n            echo \"ID: \" .$row['id']. \" - Name: \" .$row['name']. \" - Price: \" .$row['price']. \"<br>\";\n        }\n    }\n\n    $con->close();\n?></s>"
  },
  {
    "text": "<s>[INST] Using HTML and CSS, create a basic website with three sections. [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>My Website</title>\n    <style>\n        .section{\n            width: 75%; \n            padding: 25px; \n            margin: auto;\n        }\n        #section1, #section2, #section3{\n            background-color: #f1f1f1;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"section1\" class=\"section\">\n        <h1>Section 1</h1>\n    </div>\n    <div id=\"section2\" class=\"section\">\n        <h1>Section 2</h1>\n    </div>\n    <div id=\"section3\" class=\"section\">\n        <h1>Section 3</h1>\n    </div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program to provide real-time search results for a given list of elements.\n\nlist = [“Apple”, “Banana”, “Orange”] [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<title>Real-time Search Results</title>\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n\t<script>\n\t\tfunction search() {\n\t\t  var input = document.getElementById('search_box').value;\n\t\t  var list = [\"Apple\",\"Banana\",\"Orange\"];\n\t\t  var output = \"\";\n\t\t  \n\t\t  for (i=0; i<list.length; i++) {\n\t\t    if (list[i].includes(input)) {\n\t\t      output+=\"<li>\" +  list[i] + \"</li>\";\n\t\t    }\n\t\t  }\n\t\t  if (output == \"\") {\n\t\t    document.getElementById(\"search_results\").innerHTML = \"No results found\";\n\t\t  } else {\n\t\t    document.getElementById(\"search_results\").innerHTML = output;\n\t\t  }\n\t\t}\n\t</script>\n</head>\n<body>\n\t<input type=\"text\" id=\"search_box\" onkeyup=\"search()\" />\n\t<ul id=\"search_results\" > </ul>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a Java program to print out the number of times a string appears in an array.\n\narray = [“Apple”, “Orange”, “Apple”, “Banana”]\nString = “Apple” [/INST] public class Main {\n    public static void main(String[] args) {\n        String str = \"Apple\";\n        String[] array = {\"Apple\", \"Orange\", \"Apple\", \"Banana\"};\n        int count = 0;\n        for(int i=0; i<array.length; i++) {\n            if(array[i].equals(str)) {\n                count++;\n            }\n        }\n        System.out.println(\"Number of times \"+str+\" appears in the array = \"+count);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to sort a dictionary by value.\n\nmy_dict = {“One”:1, “Two”:2, “Three”:3} [/INST] my_dict = {'One': 1, 'Two': 2, 'Three': 3}\n\n#sort dictionary by value\nsorted_dict = sorted(my_dict.items(), key=lambda kv: kv[1])\n\nprint(sorted_dict)</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script to evaluate whether a provided number is prime or not. [/INST] #!/bin/bash\n\nnum=$1\n\nif [ \"$num\" -lt 2 ]\nthen\n   echo 0\nelse \n   i=2\n\n   until [ $i -gt $((num/2)) ]\n   do\n      if [ $((num%$i)) -eq 0 ]\n      then\n         echo 0\n         exit\n      fi\n   i=$((i+1))\n   done\n   echo 1\nfi</s>"
  },
  {
    "text": "<s>[INST] Create a web page with two input boxes to calculate the total cost of a product after sales tax. [/INST] <!DOCTYPE html>\n<html>\n    <head>\n        <title>Price and Tax Calculations</title>\n        <script>\n            function calculate(){\n                let price = document.getElementById('price').value;\n                let tax = document.getElementById('tax').value;\n                let total = parseFloat(price) + (parseFloat(price)*parseFloat(tax)/100);\n\n                document.getElementById('total').value = total;\n            }\n        </script>\n    </head>\n    \n    <body>\n        <input type=\"text\" id=\"price\" oninput=\"calculate()\" placeholder=\"Price\" />\n        <input type=\"text\" id=\"tax\" oninput=\"calculate()\" placeholder=\"Tax %\" />\n        <input type=\"text\" id=\"total\" placeholder=\"Total\" readonly=\"true\" />\n    </body>\n\n</html></s>"
  },
  {
    "text": "<s>[INST] Calculate the mean of the following array elements: 4, 9, 16, 11, 15. [/INST] The mean of the array elements is 11.</s>"
  },
  {
    "text": "<s>[INST] Create a loop to print out all even numbers in the given set [3, 7, 10, 18, 21, 24]. [/INST] for (let i=0; i < arr.length; i++) {\n  if (arr[i] % 2 === 0) {\n    console.log(arr[i]);\n  }\n}\n\n// Output: 10, 18, 24</s>"
  },
  {
    "text": "<s>[INST] List 5 elements of the Python standard library. [/INST] sys, os, logging, string, collections</s>"
  },
  {
    "text": "<s>[INST] Create a hashmap in Java with the following key-value pairs: \"Car\" -> \"Honda\", \"Flower\" -> \"Rose\". [/INST] HashMap<String, String> map = new HashMap<>();\nmap.put(\"Car\", \"Honda\");\nmap.put(\"Flower\", \"Rose\");</s>"
  },
  {
    "text": "<s>[INST] Write a Python code snippet to iterate over a list of strings and print the length of each string.\n\nList: [\"Hello\", \"World\", \"!\"] [/INST] for string in list:\n    print(len(string))\n    \n# Output: 5, 5, 1</s>"
  },
  {
    "text": "<s>[INST] Write a C# code to convert a double value to a string.\n\nDouble: 7.75 [/INST] string val = Convert.ToString(7.75);</s>"
  },
  {
    "text": "<s>[INST] Create an array in Java and add the following elements: 5, 7, 3. [/INST] int[] arr = {5, 7, 3};</s>"
  },
  {
    "text": "<s>[INST] Write an HTML page containing a heading with the text \"Welcome\". [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>Welcome</title>\n</head>\n<body>\n  <h1>Welcome</h1>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Arrange the following functions in order of complexity from least complex to most complex.\nA) linearSearch\nB) binarySearch\nC) insertionSort\nD) quickSort [/INST] A) linearSearch\nC) insertionSort\nB) binarySearch\nD) quickSort</s>"
  },
  {
    "text": "<s>[INST] Fix the following Java code by adding a missing semicolon.\npublic static void main(String[] args) {\nSystem.out.println(\"Hello World\") [/INST] public static void main(String[] args) {\nSystem.out.println(\"Hello World\");\n}</s>"
  },
  {
    "text": "<s>[INST] Create a variable in Python and assign it the value 15. [/INST] num = 15</s>"
  },
  {
    "text": "<s>[INST] Compile the following Java code and explain the output.\nclass Test {\n static int x = 8;\n static int y = 3;\n static int z;\n static void addition() {\n z = x + y;\n System.out.println(\"The sum: \" + z);\n } [/INST] // Output when compiled:\nThe sum: 11\n\n// Explanation: The above code assigns 'x' to 8, 'y' to 3 and 'z' to the sum of 'x' and 'y' (11). The program then prints out the value of 'z' which is 11.</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script that prints out all the arguments passed to it. [/INST] #!/bin/bash\n\nfor arg in \"$@\"\ndo\n    echo \"$arg\"\ndone</s>"
  },
  {
    "text": "<s>[INST] What is the output of the following code snippet?\nint a = 5;\nint b = 6;\nint result = a * b; [/INST] The output of the code snippet is 30. This is the result of multiplying the values of 'a' (5) and 'b' (6).</s>"
  },
  {
    "text": "<s>[INST] How can we convert strings to float in Python? [/INST] We can convert strings to float in Python by using the float() function. This takes a string argument and returns a floating-point number. For example, float(\"10.5\") would return 10.5 as a float.</s>"
  },
  {
    "text": "<s>[INST] What is the most efficient way to find the index of a given element in an unsorted array using JavaScript? [/INST] The most efficient way to find the index of a given element in an unsorted array using JavaScript is by using the indexOf() method. This method returns the index of the first occurrence of a given element in the array, or -1 if it is not present.</s>"
  },
  {
    "text": "<s>[INST] How can we debug our JavaScript code? [/INST] We can debug our JavaScript code by using the console.log() method to log values and events to the console. We can also use the JavaScript debugger statement to pause the execution at a particular point in the code, and step through the code line by line. We can also add breakpoints and inspect variables at different stages of the program.</s>"
  },
  {
    "text": "<s>[INST] Edit this HTML code to make it compliant with the HTML5 standard.\n\n<html>\n<head>\n  <title>My HTML Page</title>\n</head>\n<body>\n  <p>My HTML Page</p>\n</body>\n</html> [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>My HTML Page</title>\n</head>\n<body>\n  <p>My HTML Page</p>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a basic HTML page with a heading and a paragraph of text. [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>My HTML Page</title>\n</head>\n<body>\n  <h1>My HTML Page</h1>\n  <p>This is a basic HTML page with a heading and a paragraph of text.</p> \n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Update this JavaScript code to use the new ES6 syntax.\n\nvar myArray = [3, 4, 5];\nfor (var i = 0; i < myArray.length; i++) {\n  console.log(myArray[i]);\n} [/INST] const myArray = [3, 4, 5];\nfor (let i = 0; i < myArray.length; i++) {\n  console.log(myArray[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to accept a string and check if it is a palindrome or not. [/INST] function isPalindrome(str) { \n    var len = str.length; \n    for ( var i = 0; i < Math.floor(len/2); i++ ) { \n        if (str[i] !== str[len - 1 - i]) { \n            return false; \n        } \n    } \n\n    return true; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script to provide pagination on a website. [/INST] <?php \n \n// Get the total number of items \n$total_items = //sql query to get total items \n\n// Calculate the total number of pages \n$total_pages = ceil( $total_items / 10 ); \n\n// Determine the current page number \nif ( ! isset( $_GET['pagenum'] ) ) \n{ \n    $pagenum = 1; \n} \nelse \n{ \n    $pagenum = intval( $_GET['pagenum'] ) ; \n} \n\n// Create the pagination links \n$pagination_links  = paginate_links( array( \n    'base'     => add_query_arg( 'pagenum', '%#%' ), \n    'format'   => '', \n    'total'    => $total_pages, \n    'current'  => $pagenum, \n    'show_all' => false, \n    'end_size' => 1, \n    'mid_size' => 2, \n    'prev_next'  => True, \n    'prev_text'  => __('« Previous'), \n    'next_text'  => __('Next »'), \n    'type'      => 'plain', \n    ) \n);\n\n// Display the pagination links \nif ($pagination_links) \n{ \n    echo $pagination_links; \n}\n?></s>"
  },
  {
    "text": "<s>[INST] Analyze this SQL query and explain its purpose.\n\nSELECT *\nFROM customers \nWHERE age BETWEEN 30 AND 40 \nORDER BY join_date DESC; [/INST] This query retrieves all customer records from the customers table where the age is greater than or equal to 30 and less than or equal to 40 and orders the results by join_date in descending order.  This query will return records with the newest join date first.</s>"
  },
  {
    "text": "<s>[INST] Update this JavaScript code to use modern coding practices.\n\nvar x = 10;\nif(x == 10){\n  alert(\"x is equal to 10\");\n} [/INST] const x = 10;\nif (x === 10) {\n  console.log(\"x is equal to 10\");\n}</s>"
  },
  {
    "text": "<s>[INST] Assume that we have an array of integers. Create code to input the array and output the sum of all the elements of the array.\n\narr = [1, 2, 3, 4, 5] [/INST] def calculate_sum(arr):\n    \"\"\"Calculates sum of all elements in the given array\"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(calculate_sum(arr))</s>"
  },
  {
    "text": "<s>[INST] Are there any palindromes in the given sequence of numbers?\n\nseq = [2332, 24124, 1221, 89898] [/INST] def has_palindrome(seq):\n    \"\"\"Returns True if the given sequence has a palindrome, otherwise returns False\"\"\"\n    for num in seq:\n        if str(num) == str(num)[::-1]:\n            return True\n    return False\n\nif __name__ == '__main__':\n    seq = [2332, 24124, 1221, 89898]\n    print(has_palindrome(seq))</s>"
  },
  {
    "text": "<s>[INST] Create code to extract the middle character of a given string.\n\nstring = \"middle\" [/INST] def get_middle_char(string):\n    \"\"\"Returns the middle character of a given string.\"\"\"\n    middle_index = int(len(string) / 2)\n    return string[middle_index]\n\nif __name__ == '__main__':\n    string = \"middle\"\n    print(get_middle_char(string))</s>"
  },
  {
    "text": "<s>[INST] How many unique elements are present in the given array?\n\narr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] [/INST] def count_unique_elements(arr):\n    \"\"\"Returns the number of unique elements present in the given array.\"\"\"\n    unique_elements = set(arr)\n    return len(unique_elements)\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    count = count_unique_elements(arr)\n    print('Number of unique elements:', count)</s>"
  },
  {
    "text": "<s>[INST] Reorder a given array such that all even elements are placed before odd elements.\n\narr = [1, 2, 3, 4, 5, 6, 7, 8] [/INST] def reorder_array(arr):\n    \"\"\"Reorders a given array such that all even elements are placed before odd elements.\"\"\"\n    even = [i for i in arr if i % 2 == 0]\n    odd = [j for j in arr if j % 2 != 0]\n\n    return even + odd\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    ordered = reorder_array(arr)\n    print(ordered)</s>"
  },
  {
    "text": "<s>[INST] Add 10 to the last element of a given array.\n\n[1, 2, 3, 4] [/INST] arr = [1, 2, 3,4]\narr[-1] += 10\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] Find the index of the element 8 in the list [3, 8, 9, 5, 1, 6]. [/INST] list = [3, 8, 9, 5, 1, 6]\nindex = list.index(8)\nprint(\"Index of 8 is:\", index)</s>"
  },
  {
    "text": "<s>[INST] Read the following dictionary:\n\n{'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] } [/INST] myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\nfor key, val in myDict.items():\n    print(\"key:\", key, \"values:\", val)</s>"
  },
  {
    "text": "<s>[INST] Extract all values from the following dictionary:\n\n{'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] } [/INST] myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\nvalues = [val for vals in myDict.values() for val in vals]\nprint(values)</s>"
  },
  {
    "text": "<s>[INST] Convert the following SQL statement to a Pyspark Query.\n\nSELECT employee_id, name, salary\nFROM employees\nWHERE salary > 50000 [/INST] spark.sql(\"SELECT employee_id, name, salary FROM employees WHERE salary > 50000\").show()</s>"
  },
  {
    "text": "<s>[INST] Write a for loop to output all the odd numbers from 1 to 10 in Python. [/INST] for i in range(1,11):\n   if (i % 2 != 0):\n       print(i)</s>"
  },
  {
    "text": "<s>[INST] Write a function that given a string of character, returns the number of vowels in it.\n\nExample string: \"hello world\" [/INST] def count_vowels(s): \n    vowels = 'aeiou'\n    count = 0\n    for char in s: \n        if char in vowels: \n            count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to print out the first 5 lines of the Pascal Triangle. [/INST] #include<iostream>\nusing namespace std;\nint main()\n{\nfor (int i = 0; i < 5; i++)\n{\n  for (int j = 0; j <= i; j++)\n    cout << binomialCoeff(i, j) << \" \";\n  cout << \"\\n\";\n}\nreturn 0;\n}\n \nint binomialCoeff(int n, int k)\n{\n    int res = 1;\n    if (k > n - k) \n        k = n - k;\n    for (int i = 0; i < k; ++i)\n    {\n        res *= (n - i);\n        res /= (i + 1);\n    }\n    return res;\n}</s>"
  },
  {
    "text": "<s>[INST] Now write a function to generate all the factorial numbers from 1 to n. [/INST] def generate_factorials(n):\n    factorials = [1]\n    for num in range(1,n+1):\n        if num == 1:\n            factorials.append(1)\n        else:\n            factorials.append(factorials[-1]*num)\n    return factorials</s>"
  },
  {
    "text": "<s>[INST] Given an integer array, output the largest sum of all the possible subarray sums, use Python for the solution.\n\nExample array: [-2,1,-3,4,-1,2,1,-5,4] [/INST] def largest_sum(arr):\n    cur_sum = 0\n    max_sum = float(\"-inf\")\n    for i in range(len(arr)):\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum</s>"
  },
  {
    "text": "<s>[INST] Write a query in MongoDB to search for documents where the address field contains the string \"California\". [/INST] db.collection.find({\"address\":{$regex: \".*California.*\"}})</s>"
  },
  {
    "text": "<s>[INST] Sort a given array using quicksort algorithm.\n\narr = [3, 2, 9, 10, 1] [/INST] def quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  \n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort(arr))</s>"
  },
  {
    "text": "<s>[INST] Design a CSS selector to select all the h2 tags under the div tag with class \"container\". [/INST] div.container h2 { }</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to compare two strings and return all the common elements.\n\ns1='python'\ns2='programming' [/INST] def find_common_elements(s1, s2):\n res = []\n for i in s1:\n if i in s2:\n res.append(i)\n return res\n\nfind_common_elements(s1,s2)\n#Output: ['n']</s>"
  },
  {
    "text": "<s>[INST] Create a Python function to generate the first n prime numers. [/INST] def generate_prime_numbers(n):\n prime_nums = []\n i = 2\n while len(prime_nums) < n:\n if is_prime(i):\n prime_nums.append(i)\n i += 1\n return prime_nums\n\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True</s>"
  },
  {
    "text": "<s>[INST] Create a Python script to separate a given string into words and count the number of times the each word is used in the string. [/INST] def count_words(string):\n counts = {}\n words = string.split()\n for word in words:\n if word in counts:\n counts[word] += 1\n else:\n counts[word] = 1\n return counts</s>"
  },
  {
    "text": "<s>[INST] Create a Python code to reverse the given string. [/INST] def reverse_string(string):\n return string[::-1]</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to select all the elements from a list whose index is a multiple of 3.\n\ntest_list = [2, 5, 8, 12, 9, 82, 3] [/INST] def select_multiples_of_3(input_list):\n    result = []\n    for index, num in enumerate(input_list):\n        if index % 3 == 0:\n            result.append(num)\n    return result\n\n# test\ntest_list = [2, 5, 8, 12, 9, 82, 3]\nprint(select_multiples_of_3(test_list)) # [2, 12, 3]</s>"
  },
  {
    "text": "<s>[INST] Generate a linear regression model with a categorical independent variable. [/INST] from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import OneHotEncoder\n\nX = df[[\"categorical_var\"]]\ny = df[\"target\"]\n\nencoder = OneHotEncoder()\nencoded_X = encoder.fit_transform(X)\n\nmodel = LogisticRegression(solver=\"lbfgs\")\nmodel.fit(encoded_X, y)</s>"
  },
  {
    "text": "<s>[INST] Train a random forest model for the given dataset.\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv(\"mydata.csv\")\nX = df.drop('target', axis = 1)\ny = df[\"target\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, testSize = 0.2, randomState = 42) [/INST] from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)\nrf_model.fit(X_train, y_train)</s>"
  },
  {
    "text": "<s>[INST] Compute the occurrence of each character in a given string.\n\nmy_string = \"Hello World!\" [/INST] def compute_occurrences(my_string):\n    count_dict = {}\n    for c in my_string:\n        count_dict[c] = count_dict.get(c, 0) +1\n    return count_dict\n\n# test\nmy_string = \"Hello World!\"\nprint(compute_occurrences(my_string)) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}</s>"
  },
  {
    "text": "<s>[INST] Debug this code snippet to print a list of all 6-digit numbers. [/INST] def printList(): \n    i = 11\n    while(i <= 99999): \n        if (i >= 10000 and i <= 99999): \n            print(i) \n        i = i + 1\n\n# Call the function \nprintList()</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program that prints out the numbers from 1 to 100, with the exception of numbers divisible by 3 being replaced with \"Fizz\", and numbers divisible by 5 replaced with \"Buzz\". [/INST] #include <iostream>\nusing namespace std;\n\nint main() {\n    for(int i = 1; i <= 100; i++) {\n        if((i % 3 == 0) && (i % 5 == 0)) {\n            cout << \"FizzBuzz\" << endl;\n        } else if (i % 3 == 0) {\n            cout << \"Fizz\" << endl;\n        } else if (i % 5 == 0) {\n            cout << \"Buzz\" << endl;\n        } else {\n            cout << i << endl;\n        }\n    }\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit this three lines of code to remove the last item from a given array.\n\nInput array: [1, 2, 3, 4] [/INST] arr = [1, 2, 3, 4]\nlast_item = arr.pop()\narr.remove(last_item)</s>"
  },
  {
    "text": "<s>[INST] Generate a function that takes an array of strings and returns a new array with the strings sorted in alphabetical order.\n\nInput array: [\"hello\", \"world\", \"this\", \"is\", \"a\", \"sentence\"] [/INST] def sort_strings(arr):\n    sorted_arr = sorted(arr)\n    return sorted_arr\n\nprint(sort_strings([\"hello\", \"world\", \"this\", \"is\", \"a\", \"sentence\"]))\n\n# Output: ['a', 'hello', 'is', 'sentence', 'this', 'world']</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two arrays and returns the elements that are present in both of them.\n\nInput array 1: [1, 2, 3, 4, 5]\nInput array 2: [3, 4, 5, 6, 7] [/INST] def find_common_elements(arr1, arr2):\n    common_elements = []\n    for element1 in arr1:\n        if element1 in arr2:\n            common_elements.append(element1)\n    return common_elements\n\nprint(find_common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n\n# Output: [3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Output a section of valid html for a content header\n\n<h2> Products </h2> [/INST] <h2 class=\"content-header\">Products</h2></s>"
  },
  {
    "text": "<s>[INST] Write a Python script to validate the following input\n\nValidate a Date type field with the following format: YYYY/MM/DD [/INST] # Import the required datetime module\nimport datetime\n\ndef validate_date(date):\n    # Check if the date matches with the given format\n    try:\n       datetime.datetime.strptime(date, '%Y/%m/%d')\n       return True\n    except ValueError:\n        return False</s>"
  },
  {
    "text": "<s>[INST] What parameters will we pass to the following function?\n\ndef factorial(n): [/INST] We will pass one parameter, an integer 'n', to the factorial function.</s>"
  },
  {
    "text": "<s>[INST] Transform the following code snippet from ES6 to older version of JavaScript\n\nlet numbers = [1, 2, 3, 4, 5];\nlet multipliedNumbers = numbers.map(number => number * 2); [/INST] var numbers = [1, 2, 3, 4, 5];\nvar multipliedNumbers = numbers.map(function(number) { \n    return number * 2;\n});</s>"
  },
  {
    "text": "<s>[INST] Output a struct in Golang for the following scenario\n\nCreate a struct for a post on a blog that includes theTitle, Author, Timestamp, Body and Comments. [/INST] type Post struct {\n        Title string\n        Author string\n        Timestamp time.Time\n        Body string\n        Comments []Comment\n    }</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the number of cars of each model\n\nTable name: \"cars\"\nColumns: model (string), make (string) [/INST] SELECT make, model, COUNT(*) as num_cars \nFROM cars\nGROUP BY make, model;</s>"
  },
  {
    "text": "<s>[INST] Modify the following Python code to make it run faster\n\ndef roll_dice(n):\n    values = []\n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values [/INST] import random\n    \ndef roll_dice(n):\n    values = []\n    random.seed() \n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script that prints out the sum of all even numbers [/INST] <?php \n \n$start_num = 3; \n$end_num = 8; \n \n$sum = 0; \n \nfor($i = $start_num; $i <= $end_num; $i++) \n{ \n\tif($i % 2 == 0) \n\t\t$sum = $sum + $i; \n \n\t$i++; \n} \n \necho \"Sum of all even numbers between $start_num to $end_num = $sum\"; \n?></s>"
  },
  {
    "text": "<s>[INST] Demonstrate how to use the following JavaScript function\n\nMath.max(arg1, arg2) [/INST] // To get the maximum number from the two input numbers \nlet x = 15;\nlet y = 25;\nlet maxNum = Math.max(x, y);\nconsole.log(maxNum); // Output: 25</s>"
  },
  {
    "text": "<s>[INST] Where does a Python interpreter look for modules? [/INST] The Python interpreter looks for modules in the following locations: the home directory, the built-in modules, the PYTHONPATH environment variable, and the standard Python library path.</s>"
  },
  {
    "text": "<s>[INST] Translate the given code into Java.\n\nlet x = 10; [/INST] int x = 10;</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of the new operator in JavaScript. [/INST] The new operator in JavaScript is used to create an instance of an object. It allocates memory for the object and calls the object's constructor to initialize the object. It also sets the object's [[Prototype]] property to the constructor function's prototype object.</s>"
  },
  {
    "text": "<s>[INST] Write a SELECT SQL statement to display the employee name and department in descending order of salary. [/INST] SELECT employee_name, department FROM employee ORDER BY salary DESC;</s>"
  },
  {
    "text": "<s>[INST] Explain the uses of the `in` operator in Python. [/INST] The in operator in Python is used to determine whether an item is present in a sequence. It checks for the presence of an item in lists, sets, tuples, dictionaries, and strings. It is also used to iterate over the items of a sequence in a for loop.</s>"
  },
  {
    "text": "<s>[INST] Compare functions and classes in Python. [/INST] Functions in Python are blocks of reusable code that are used to perform a single, specific action. Classes, on the other hand, are a way of grouping related data and functions together. Classes allow objects to be grouped and given common properties and behaviors.</s>"
  },
  {
    "text": "<s>[INST] Code an if statement in Java to check if an integer is odd [/INST] if (num % 2 == 1) { \n   // num is odd \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript that takes two temperatures and returns their average. [/INST] function average_temperature(temp1, temp2) {\n  return (temp1 + temp2) / 2;\n}</s>"
  },
  {
    "text": "<s>[INST] Follow the given CSS syntax and write a code to create a class called \"box\" [/INST] .box {\n  width: 300px;\n  height: 200px;\n  background-color: #f1f1f1;\n  border: 2px solid #333;\n  margin: 20px;\n  float: left;\n }</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to input a number and print if it is positive, negative, or zero [/INST] def check_sign(num):\n  if num > 0:\n    print(\"Positive\")\n  elif num < 0:\n    print(\"Negative\")\n  else:\n    print(\"Zero\")</s>"
  },
  {
    "text": "<s>[INST] What are the characteristics of a Function in JavaScript? [/INST] A function in JavaScript is a block of code that is delimited by curly brackets and is designed to perform a specific task. It consists of a function declaration, which includes the function name and its parameters, and a function body containing the code that is to be executed when the function is called. The function can return a value and can be either named or anonymous. Functions can also accept arguments and can be used to create objects and closures.</s>"
  },
  {
    "text": "<s>[INST] Write a Node.js command to rotate an array by one element.\n\nlet arr = [1, 2, 3, 4, 5] [/INST] let temp = arr[0];\nfor (let i = 0; i < arr.length - 1; i++) {\n  arr[i] = arr[i + 1];\n}\narr[arr.length - 1] = temp;</s>"
  },
  {
    "text": "<s>[INST] Code a for loop in Java to find the maximum value in an array\n\nint[] arr = {2,5,3,7,1}; [/INST] int max = arr[0];\nfor (int i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n        max = arr[i];\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] What is a Hash Table in C++? [/INST] A Hash Table (also known as Hash Map) is a data structure in C++ which uses a hash function to map keys to values. It can be used to store, add, and remove elements in constant time and is often used for caches and associative arrays.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript command to check if an object is empty. [/INST] function isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Follow the given SQL syntax and create a table \"students\" [/INST] CREATE TABLE students (\n     student_id INT PRIMARY KEY, \n     first_name VARCHAR(50) NOT NULL,\n     last_name VARCHAR(50) NOT NULL, \n     age INT NOT NULL\n);</s>"
  },
  {
    "text": "<s>[INST] What is the use of tuple in python? [/INST] Tuple is an immutable collection of objects in Python. It is sequence of values which are immutable, meaning that the values can't be modified. Tuple is useful in data integrity because it ensures that the values in the tuple will remain consistent when passed to a function or used in an expression. It is also used to store related data that must not be changed throughout a program. Some common operations on tuple include indexing, iteration, membership testing. Tuples are also useful in multiple function argument packing and unpacking. Tuples are also commonly used in dictionary as keys.</s>"
  },
  {
    "text": "<s>[INST] How can you create a function to connect to MySQL database? [/INST] import mysql.connector \n\ndef db_connect():\n    conn = mysql.connector.connect(\n        user='user_name',\n        password='password',\n        host='localhost',\n        database='database_name'\n    )\n    return conn\n \n# Main \nif __name__ == '__main__':\n    conn = db_connect()\n    print(conn)</s>"
  },
  {
    "text": "<s>[INST] You are given a list of numbers, write a program to calculate the mode.\n\n[1, 2, 3, 3, 4, 4, 5] [/INST] from collections import Counter\n\ndef find_mode(lst):\n    counter = Counter(lst)\n    mode_vals = [val for val, count in counter.items() if count == max(counter.values())]\n    return min(mode_vals)\n\nprint(find_mode([1, 2, 3, 3, 4, 4, 5]))</s>"
  },
  {
    "text": "<s>[INST] How can you create a class in python? [/INST] A class can be created in Python by using the keyword class followed by the name of the class. The class should include a constructor method __init__() that specifies the attributes and behaviors of the class and it should also end with a colon. Inside the class body, methods and attributes can be defined as required.</s>"
  },
  {
    "text": "<s>[INST] Design a function that counts the number of times a word occurs in a sentence.\n\nsentence = \"The quick brown fox jumped over the lazy dog.\" [/INST] \"\"\"\nDesign a function that counts the number of times a word occurs in a sentence.\n\nInput: sentence (string)\n\nOutput: number of times word appears in the sentence (int)\n\n\"\"\"\ndef count_word(sentence, word):\n    return sentence.lower().split().count(word.lower())\n\nif __name__ == '__main__':\n    sentence = \"The quick brown fox jumped over the lazy dog.\"\n    print(count_word(sentence, \"The\"))\n    # Output: 1</s>"
  },
  {
    "text": "<s>[INST] Generate a random 16 character string. [/INST] import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits \n    return ''.join(random.choice(chars) for _ in range(16))\n\nif __name__ == '__main__':\n    print(generate_string()) \n    # Output: 5A5l7p9XohHmFWhh</s>"
  },
  {
    "text": "<s>[INST] Given the following code, write a function to calculate the length of the linked list.\n\n\"\"\"\nclass Node:\n  def __init__(self, val, next=None):\n    self.val = val\n    self.next = next\n\nhead = Node(4, Node(3, Node(2, Node(1))))\n\"\"\" [/INST] \"\"\"\nGiven the following code, write a function to calculate the length of the linked list.\n\nInput: Head of the linked list (Node)\n\nOutput: Length of the linked list (int)\n\n\"\"\"\ndef get_length(head):\n    if head is None:\n        return 0\n    \n    length = 1\n    node = head\n    \n    while node.next is not None:\n        length += 1\n        node = node.next\n    \n    return length\n\nif __name__ == '__main__':\n    head = Node(4, Node(3, Node(2, Node(1))))\n    print(get_length(head)) \n    # Output: 4</s>"
  },
  {
    "text": "<s>[INST] Determine the index of an element in a given array using binary search.\n\narr = [1, 2, 3, 4, 5, 6, 7]\nelement = 4 [/INST] \"\"\"\nDetermine the index of an element in a given array using binary search.\n\nInput: arr (list)  element (int)\n\nOutput: index (int)\n\n\"\"\"\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    element = 4\n    print(binary_search(arr, element)) \n    # Output: 3</s>"
  },
  {
    "text": "<s>[INST] Write a PHP code to send an email notification to someone. [/INST] <?php\n// Create a new PHP mailer instance\n$mail = new PHPMailer(true);\n\ntry {\n    // Set the mailer to use SMTP\n    $mail->isSMTP();\n\n    // Specify SMTP server details\n    $mail->Host = 'smtp.example.com';\n    $mail->SMTPAuth = true;\n    $mail->Username = 'username';\n    $mail->Password = 'password';\n    $mail->SMTPSecure = 'ssl';\n    $mail->Port = 465;\n\n    // Recipient's details\n    $mail->setFrom('from@example.com', 'From Name');\n    $mail->addAddress('to@example.com', 'To Name');\n\n    // Email content\n    $mail->isHTML(true);\n    $mail->Subject = 'Email Notification';\n    $mail->Body    = 'This is an email notification';\n\n    // Send the email\n    $mail->send();\n    echo 'Message has been sent';\n\n}\ncatch (Exception $e) {\n    echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\";\n}\n?></s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to compute the sum of the digits of a given positive integer. [/INST] \"\"\"\nCreate an algorithm to compute the sum of the digits of a given positive integer.\n\nInput: number (int)\n\nOutput: sum of the digits of the number (int)\n\n\"\"\"\ndef compute_sum(number):\n    if number < 0:\n        return 0\n    \n    # get the last digit\n    last_digit = number % 10\n    \n    # recursive call to get the sum of the remaining digits\n    remainder_sum = compute_sum(number // 10)\n    \n    return last_digit + remainder_sum\n\nif __name__ == '__main__':\n    number = 9876\n    print(compute_sum(number)) \n    # Output: 36</s>"
  },
  {
    "text": "<s>[INST] Debug the following C++ code by finding and fixing errors.\n\nint findMax(int arr[], int n)\n{\n    if(arr[i] < n)\n     {\n        int max = arr[i];\n        for (int i = 0; i < n; i++)\n            if (arr[I] > max)\n            max = arr[i];\n        return max;\n     }\n} [/INST] int findMax(int arr[], int n)\n{\n    if(n > 0)\n     {\n        int max = arr[0];\n        for (int i = 1; i < n; i++)\n            if (arr[i] > max)\n            max = arr[i];\n        return max;\n     }\n}</s>"
  },
  {
    "text": "<s>[INST] Design a efficient algorithm to check if two tree structures are identical at the root node level. [/INST] \"\"\"\nDesign a efficient algorithm to check if two tree structures are identical at the root node level.\n\nInput: Two root nodes (Node1, Node2)\n\nOutput: Boolean\n\n\"\"\"\n# This approach uses a breadth-first search\ndef is_identical(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    \n    # Check if the data of both nodes is the same\n    if root1 is not None and root2 is not None:\n        if root1.data != root2.data:\n            return False\n  \n        # If yes, then recursively traverse left and right sub-trees\n        return (is_identical(root1.left, root2.left) \n                and is_identical(root1.right, root2.right)) \n    \n    # If we reach here, then one node is NULL and other is not\n    return False</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code to align the text within a `<div>` element horizontally to the right. [/INST] div {\n  text-align:right;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to find all clients who have made more than one purchase in the last two months. [/INST] SELECT client_id\nFROM purchases\nWHERE purchase_date >= NOW() - INTERVAL 2 MONTH\nGROUP BY client_id\nHAVING COUNT(*) > 1;</s>"
  },
  {
    "text": "<s>[INST] Generate a list of the data type of each element in the given list.\n\nmy_list = [12, 'hello', 15.7] [/INST] [int, str, float]</s>"
  },
  {
    "text": "<s>[INST] Determine how many times the given string appears in the paragraph.\n\nParagraph: In one moment, I paused in a quiet street and suddenly quite near me, the beauty of a full moon shot up into the sky.\nString: moon [/INST] 1</s>"
  },
  {
    "text": "<s>[INST] Count the number of times each letter occurs in the given text.\n\nText: Coding is fun! [/INST] {'C':1, 'o':2, 'd':1, 'i':2, 'n':1, 'g':2, ' ':2, 'f':1, 'u':1, '!':1}</s>"
  },
  {
    "text": "<s>[INST] Create a function to transform all strings to capital letters.\n\nmy_string = 'Hello World!' [/INST] def to_upper(string):\n return string.upper()</s>"
  },
  {
    "text": "<s>[INST] Implement a sorting algorithm for the given list of numbers.\n\nsort_me = [10, 4, 1, 5] [/INST] def sorting_algorithm(sort_me):\n    len_sortme = len(sort_me)\n    for i in range(len_sortme):\n        for j in range(0, len_sortme-i-1):\n            if sort_me[j] > sort_me[j+1]:\n                sort_me[j], sort_me[j+1] = sort_me[j+1], sort_me[j]\n    return sort_me</s>"
  },
  {
    "text": "<s>[INST] Tell the difference between the two provided pieces of code.\n\ndef recursive(num):\n if num<=0:\n return 0\n else:\n return num + recursive(num-1)\n\ndef iterative(num):\n result = 0\n for i in range(1, num+1):\n result += i\n return result [/INST] The recursive code uses a recursive call to loop through each value from num to 0, while the iterative code uses a for-loop to add up from 1 to num.</s>"
  },
  {
    "text": "<s>[INST] Simplify the following code as much as possible\n\ncounter = 0\nfor item in fruits:\n if item == 'apple':\n counter += 1 [/INST] counter = fruits.count('apple')</s>"
  },
  {
    "text": "<s>[INST] Create a function to capitalize the first letter in each word of the given string.\n\nmy_string = 'this is a test' [/INST] def capitalize_words(string):\n  words = string.split(' ')\n  capitalized_words = []\n  for word in words:\n    capitalized_word = word[0].upper() + word[1:]\n    capitalized_words.append(capitalized_word)\n  return ' '.join(capitalized_words)</s>"
  },
  {
    "text": "<s>[INST] Calculate the number of bits required to represent the given letter.\n\nletter = 'A' [/INST] 8 bits.</s>"
  },
  {
    "text": "<s>[INST] Convert the given list to a set and remove all duplicates.\n\nmy_list = [1, 2, 1, 20, 10, 5, 4, 4] [/INST] my_set = set(my_list)\nmy_set = {1, 2, 5, 10, 20, 4}</s>"
  },
  {
    "text": "<s>[INST] Unwrap the value in the following nested tuple.\n\nmy_tuple = ((1, (2, (3, 4))), 5) [/INST] 4</s>"
  },
  {
    "text": "<s>[INST] Extract all the numbers from the given string.\n\nmy_string = 'I have 4 cats and 2 dogs in my house' [/INST] [4, 2]</s>"
  },
  {
    "text": "<s>[INST] With the provided data, write a SQL statement to select all columns from a table called 'Customers'.\n\nSELECT * FROM Customers; [/INST] SELECT *\nFROM Customers;</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to remove duplicates from a list of Strings. [/INST] public List<String> removeDuplicates(List<String> inputList) { \n  \n   // Create a new HashSet \n   HashSet<String> hs = new HashSet<>(); \n  \n   // Add the contents of inputList to the HashSet hs \n   // HashSet does not allow duplicates \n   hs.addAll(inputList); \n  \n   // Clear inputList \n   inputList.clear(); \n  \n   // add the elements of hs to inputList \n   inputList.addAll(hs); \n  \n   // return the list \n   return inputList; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to calculate the sum of values in a column called \"sales\" in the \"sales\" table.\n\nSELECT SUM(sales) FROM sales; [/INST] SELECT SUM(sales) FROM sales;</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to replace the spaces in a given string with underscores. [/INST] function replaceSpacesWithUnderscores(string) {\n  return string.replace(/\\s+/g, '_');\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to search for all records in the \"customers\" table where the \"age\" field is greater than 30.\n\nSELECT * FROM customers WHERE age > 30; [/INST] SELECT * \nFROM customers \nWHERE age > 30;</s>"
  },
  {
    "text": "<s>[INST] Generate an HTML snippet for a basic two-column layout. [/INST] <div class=\"container\">\n  <div class=\"column\">\n    <!-- Your left column content --> \n  </div>\n  <div class=\"column\">\n    <!-- Your right column content --> \n  </div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Write a query in SQL to calculate the total profits for a given month.\n\nRevenue table with columns (date, product_id, sales_value) [/INST] SELECT SUM(sales_value) FROM revenue \nWHERE date BETWEEN <given_month_start_date> \nAND <given_month_end_date></s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in pseudocode to find the maximum value in an array. [/INST] max = 0\n\nfor each element in array\n  if element > max \n    max = element\n\nreturn max</s>"
  },
  {
    "text": "<s>[INST] Write a query in MySQL to select the top 10 most expensive products from the table \"Product\".\n\nTable \"Product\" with columns (product_id, name, price) [/INST] SELECT product_id, name, price \nFROM Product \nORDER BY price DESC \nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript to extract the Kth highest digit from a given number.\n\nNumber = 192\nK = 2 [/INST] function extractKthHighestDigit(num, k) {\n  let numStr = num.toString();\n  let numArr = numStr.split(\"\");\n  numArr.sort((a, b) => b - a);\n  return +numArr[k-1];\n}</s>"
  },
  {
    "text": "<s>[INST] Design a C program to print \"Hello World!\" [/INST] #include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\");\n  return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a database table in SQL with two columns UserId and Username. [/INST] CREATE TABLE Users (\n  UserId INT NOT NULL, \n  Username VARCHAR(255) NOT NULL,\n  PRIMARY KEY (UserId)\n);</s>"
  },
  {
    "text": "<s>[INST] Change the following JavaScript code so that it prints out the square root of a given number.\n\nfunction sqr(x) {\n  return x*x;\n} [/INST] function sqr(x) {\n  return Math.sqrt(x);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python script that calculates the sum of two given numbers. [/INST] def sum(x, y):\n  return x + y;</s>"
  },
  {
    "text": "<s>[INST] Compute the minimum of 3 given numbers using a JavaScript function. [/INST] function minNum(a, b, c) {\n  let min = a;\n  if (b < min) {\n    min = b;\n  }\n  if (c < min) {\n    min = c;\n  }\n  return min;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query which returns the products that have a price greater than 10 and a quantity greater than 5. [/INST] SELECT * FROM products WHERE price > 10 AND quantity > 5;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query which returns the product name and the number of times it has been purchased [/INST] SELECT product_name, COUNT(*)\nFROM purchases\nGROUP BY product_name;</s>"
  },
  {
    "text": "<s>[INST] Correct the following JavaScript code to print the first letter of the given string.\n\nlet str = \"Hello World\";\nconsole.log(str[0]); [/INST] let str = \"Hello World\";\nconsole.log(str.charAt(0));</s>"
  },
  {
    "text": "<s>[INST] Generate a 10 digit random number using a JavaScript function [/INST] Math.floor(Math.random()*10000000000);</s>"
  },
  {
    "text": "<s>[INST] Create a SQL table which has 3 columns id, name and price. [/INST] CREATE TABLE products (\n  id INTEGER AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  price DECIMAL(10,2) NOT NULL\n);</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java to take a string and print all words of length n and greater in the string.\n\nString: \"Welcome to the programming world!\"\nn: 5 [/INST] public static void printLongWords(String str, int n) { \n    // loop through each character of  \n    // input string  \n    for (int i = 0; i < str.length(); i++) { \n        // variable to store the current word  \n        String word = \"\";  \n  \n        // condition to look for words  \n        while (i < str.length() && str.charAt(i) != ' ') { \n            word = word + str.charAt(i); \n            i++; \n        } \n        // if the length of current word is less them n  \n        // it is not printed  \n        if (word.length() >= n) \n            System.out.print(word + \" \");  \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript to delete duplicate characters from a string.\n\nString: \"google\" [/INST] function deleteDuplicates(str) {  \n  let result = \"\"; \n  let frequency = {}; \n  \n  // creating a map of all characters with their frequency in the string \n  for (let i = 0; i < str.length; i++) { \n    let currentChar = str.charAt(i); \n    if (frequency[currentChar]) { \n      frequency[currentChar]++; \n    } else { \n      frequency[currentChar] = 1; \n    } \n  } \n  \n  // adding only those characters which have frequency greater than one \n  for (let i = 0; i < str.length; i++) { \n    let currentChar = str.charAt(i); \n    if (frequency[currentChar] == 1) { \n      result += str.charAt(i); \n    } \n  } \n  \n  return result; \n}</s>"
  },
  {
    "text": "<s>[INST] Make an HTML table of the given integers.\n\n[2, 3, 4, 5, 6] [/INST] <table>\n  <tbody>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in Java to calculate the sum of all elements of an array. [/INST] public int calculateSum(int[] arr) { \n  int sum = 0; \n  for (int i = 0; i < arr.length; i++) { \n    sum += arr[i]; \n  } \n  return sum; \n}</s>"
  },
  {
    "text": "<s>[INST] Change the background color of the second element in a list in CSS. [/INST] ul li:nth-child(2){\n  background-color: #e6e6e6;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a SELECT query in MySQL to find all records where the age is greater than 18\n\nTable: Student [/INST] SELECT * FROM Student WHERE age > 18;</s>"
  },
  {
    "text": "<s>[INST] Generate a unique key using the following string.\n\nmy_str = \"Hello World\" [/INST] import uuid \n \nkey = uuid.uuid5(uuid.NAMESPACE_DNS, my_str)</s>"
  },
  {
    "text": "<s>[INST] Determine the maximum of two numbers.\n\nnum1 = 10\nnum2 = 15 [/INST] max_num = max(num1, num2)</s>"
  },
  {
    "text": "<s>[INST] Construct an object in JavaScript to model a car with make, model, year, color, and price as attributes. [/INST] let car = { \n    make:'', \n    model:'', \n    year:'', \n    color:'', \n    price:0 \n};</s>"
  },
  {
    "text": "<s>[INST] Reverse the words of the sentence \"The quick brown fox jumps over the lazy dog\". [/INST] dog lazy the over jumps fox brown quick The</s>"
  },
  {
    "text": "<s>[INST] Create a type with 4 fields, including \"name\", \"address\", \"phone\", and \"email\". [/INST] type ContactInfo {\n  name: string;\n  address: string;\n  phone: string;\n  email: string;\n}</s>"
  },
  {
    "text": "<s>[INST] Rework the following code so that it prints the same output with fewer lines of code.\n\nint x = 13;\nif (x == 13) {\n  System.out.println(\"x is 13\");\n} [/INST] int x = 13;\nSystem.out.println(x == 13 ? \"x is 13\" : \"\");</s>"
  },
  {
    "text": "<s>[INST] Answer the following question: What is the difference between a keyword and an identifier in Python? [/INST] In Python, a keyword is a reserved word that has a specific pre-defined meaning and purpose in the language, while an identifier is any name that you assign to a variable, function, class, module or any other object. Keywords are words that are reserved for specific functions and operations, while identifiers are used to name user-defined objects.</s>"
  },
  {
    "text": "<s>[INST] Find the runtime complexity of the following algorithm in Big-O notation.\n\ndef add_array_elements(arr):\n    n = len(arr) \n    sum_elements = 0\n    for i in range(0, n): \n        sum_elements += arr[i] \n    return sum_elements [/INST] The runtime complexity of the algorithm in Big-O notation is O(n), where n is the length of the array.</s>"
  },
  {
    "text": "<s>[INST] How would you calculate the sum of all integers between two given integers? [/INST] The sum of all integers between two given integers can be calculated by using the formula: sum = (first integer + last integer) * (last integer - first integer + 1) / 2.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all the unique (distinct) values in a column named \"Name\". [/INST] SELECT DISTINCT Name FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code to make the background color of all paragraph elements in a page blue. [/INST] p {\n  background-color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] How would you create a socket connection between two computers in a network? [/INST] Creating a socket connection between two computers in a network involves setting up a Socket Server on one of the computers and a Socket Client on the other computer. The computer with the Socket Server will need to listen for any incoming connection. Then, the computer with the Socket Client will send a connection request to the Socket Server. When the connection is established, data can then be transmitted between the two computers.</s>"
  },
  {
    "text": "<s>[INST] Create an inheritance hierarchy of three classes, \"Person\", \"Student\" and \"Professor\" [/INST] class Person { \n  // properties and methods\n} \n  \nclass Student extends Person { \n  // properties and methods\n} \n  \nclass Professor extends Person { \n  // properties and methods\n}</s>"
  },
  {
    "text": "<s>[INST] Given the following function that takes in a string and returns true if it is a palindrone. Rewrite the function to make it more optimized.\n\ndef is_palindrome(s):\n    s = str(s).lower().replace(\" \",\"\")\n    return s == s[::-1] [/INST] def is_palindrome(s):\n    s = ''.join(char.lower() for char in s if char.isalpha())\n    return s == s[::-1]</s>"
  },
  {
    "text": "<s>[INST] Process the given HTML code to get the output as shown.\n\n<div>\n    An article about \n    <a href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\">Python Programming Language</a> \n    <br/>\n    <b>Last updated: 2019/05/09 </b>\n</div> [/INST] response = {\n  'title': 'Python Programming Language',\n  'last_updated': '2019/05/09'\n}</s>"
  },
  {
    "text": "<s>[INST] Add the `color` parameter to this function and make sure it works properly.\n\ndef printShape(num, shape):\n    for i in range(0,num):\n        print(shape) [/INST] def printShape(num, shape, color):\n\tfor i in range(0, num):\n\t\tprint(color + shape)</s>"
  },
  {
    "text": "<s>[INST] Fix the following function to make it comply with PEP8 standards.\n\ndef f(x):\nk= x+4\nreturn k [/INST] def f(x):\n    k = x + 4\n    return k</s>"
  },
  {
    "text": "<s>[INST] Complete the given function to print the Cartesian product of two sets.\n\nA = {0, 1, 2}\nB = {3, 4, 5, 6}\n\ndef cartesian_product(A, B): [/INST] A = {0, 1, 2}\nB = {3, 4, 5, 6}\n\ndef cartesian_product(A, B):\n\tC = set()\n\tfor a in A:\n\t\tfor b in B:\n\t\t\tC.add((a, b))\n\treturn C</s>"
  },
  {
    "text": "<s>[INST] Normalize the given string to lowercase and remove all punctuation marks.\n\nHey! How are you? [/INST] hey how are you</s>"
  },
  {
    "text": "<s>[INST] Sort the following list of dictionaries by the values of the keys.\n\nlst = [\n{'a':2},\n{'a':3},\n{'a':1}\n] [/INST] lst = [\n{'a':2},\n{'a':3},\n{'a':1}\n]\n\nsorted_list = sorted(lst, key=lambda k: k['a'])</s>"
  },
  {
    "text": "<s>[INST] Given a list of prices, use a comprehension to calculate the average price.\n\nprices = [2.50, 3.25, 4.00, 1.75] [/INST] prices = [2.50, 3.25, 4.00, 1.75]\n\navg_price = sum([price for price in prices])/len(prices)</s>"
  },
  {
    "text": "<s>[INST] Given a list of words, create a reverse lookup dictionary (word as key, indices as values).\n\nwords = ['apple', 'ball', 'cat', 'ball'] [/INST] words = ['apple', 'ball', 'cat', 'ball']\n\nreverse_lookup = {word: [i for i, v in enumerate(words) if v == word] for word in set(words)}</s>"
  },
  {
    "text": "<s>[INST] Using JavaScript, write an algorithm to print all the Fibonnaci numbers up to a given number n.\n\nn = 10 [/INST] function printFibonacci(n) {\n       let fibo = [0, 1];\n \n       if (n <= 2) {\n           return 1;\n       }\n \n       for (let i = 2; i <=n; i++ ){\n           fibo[i] = fibo[i-1]+fibo[i-2];\n       }\n \n      return fibo;\n } \n \n console.log(printFibonacci(n));</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the average age of people living in the UK. [/INST] SELECT AVG(TIMESTAMPDIFF(YEAR, date_of_birth, CURRENT_DATE)) as average_age FROM people WHERE country = 'UK';</s>"
  },
  {
    "text": "<s>[INST] Using HTML and CSS, design a landing page for a blog website. [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>My Blog</title>\n  <style>\n  .container{\n    width:850px;\n    height: 850px;\n    background-color: #F5F5FF;\n    margin:auto;\n    padding: 20px;\n    box-shadow: 0px 0px 7px 1px rgba(0,0,0,0.3);\n  }\n  .header{\n    background-color: #323B45;\n    font-size: 48px;\n    font-weight: bold;\n    color: #FFF;\n    padding-left: 20px;\n    padding-top: 15p\n    </style>\n\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">Welcome to My Blog</div>\n  </div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create an array of objects in JavaScript and log them in the console.\n\n[\n  {name: 'John', age: 25},\n  {name: 'Jack', age: 28}\n] [/INST] let people = [ \n  {name: 'John', age: 25},\n  {name: 'Jack', age: 28}\n]\n\nconsole.log(people)</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to find the average salary of employees in an organisation. [/INST] SELECT AVG(salary) as average_salary FROM employees;</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that displays an alert when a page is visited. [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>Alert Message Box</title>\n  <script>\n    window.onload = function() {\n      alert(\"Welcome to my webpage!\");\n    }\n  </script>\n</head>\n<body>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Define a class in Python to represent a rectangle and add a method to calculate its area. [/INST] class Rectangle:\n    def __init__(self, length, width):\n         self.length = length\n         self.width = width\n\n    def area(self):\n        return self.length * self.width</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the top 5 scores for a given game. [/INST] SELECT *\nFROM Scores\nORDER BY score DESC\nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Design a function in Python that takes two parameters, a list and a number, and returns a list where all elements are multiplied by the number.\n\n[1,2,3], 4 [/INST] def mul_list(input_list, number): \n    return [x*number for x in input_list]</s>"
  },
  {
    "text": "<s>[INST] Suggest an API call in Java to generate a random number [/INST] int randomNum = ThreadLocalRandom.current().nextInt(0, MAX_VALUE);</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript to filter out all the strings from a list.\n\n[1, \"Hi\", 55, false, \"Bye\"] [/INST] const filterStrings = arr => arr.filter(el => typeof el !== \"string\");</s>"
  },
  {
    "text": "<s>[INST] Write the following pseudocode in python\n\n\"for each element in the list, check if the number is even\" [/INST] for element in some_list:\n    if element % 2 == 0:\n        # do something</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, create a function in JavaScript to return the sum of all its elements.\n\n[1,2,3,4] [/INST] const sumArray = arr => arr.reduce((acc,cur) => acc + cur, 0);</s>"
  },
  {
    "text": "<s>[INST] Generate a code in Java to loop through an array. [/INST] for (int i = 0; i < array.length; i++) { \n     //do something \n}</s>"
  },
  {
    "text": "<s>[INST] Design a function in Python to split a sentence into words [/INST] def split_sentence(sentence):\n    return sentence.split(' ')</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to remove all occurrences of a specified value from an array.\n\n[1, 2, 3, 2, 4], 2 [/INST] function removeElement(arr, val) {\n    return arr.filter(x => x !== val);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript statement to output the prompt \"Please enter your name:\". [/INST] prompt(\"Please enter your name:\");</s>"
  },
  {
    "text": "<s>[INST] Output the following statement in bash: \"Hello world!\" [/INST] echo \"Hello world!\"</s>"
  },
  {
    "text": "<s>[INST] Create a function to search a list l for the value v.\n\nlist l = [1, 2, 3, 4, 5, 6]\nvalue v = 4 [/INST] def search_list(l, v):\n    # Iterate through the list\n    for i in l:\n        # Check if the current item is equal to v\n        if i == v:\n            return True\n    \n    # Return False if we did not find the value\n    return False\n\n# Search for the value 4\nsearch_list([1, 2, 3, 4, 5, 6], 4) # Output: True</s>"
  },
  {
    "text": "<s>[INST] List the combinations of two lists l1 and l2.\n\nlist l1 = [1, 2]\nlist l2 = [a, b] [/INST] [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]</s>"
  },
  {
    "text": "<s>[INST] How would you describe the process of creating a class in Java? [/INST] Creating a class in Java involves declaring its name, adding any essential fields and methods, and implementing any desired constructors. The class will then be available for use with other classes in the program.</s>"
  },
  {
    "text": "<s>[INST] Create a loop to iterate through the elements of an array arr. [/INST] for (int i = 0; i < arr.length; i++) { \n  // code to run for each element\n}</s>"
  },
  {
    "text": "<s>[INST] Create an if statement to check if an integer i is between 1 and 10. [/INST] if (i >= 1 && i <= 10) {\n  // code to run if the condition is true\n}</s>"
  },
  {
    "text": "<s>[INST] Output the most frequent letter in a given string s.\n\nString s = \"Hello World!\" [/INST] String s = \"Hello World!\"\n\n// Create a HashMap to store frequency of each letter\nMap<Character, Integer> freqMap = new HashMap<>();\n\n// Loop through the string\nfor(char c : s.toCharArray())\n{\n  int freq = freqMap.getOrDefault(c, 0);\n  // Update the frequency map\n  freqMap.put(c, freq + 1);\n}\n\n// Find the letter with the highest frequency\nint maxFreq = 0;\nchar maxLetter = ' ';\nfor(Map.Entry<Character, Integer> entry : freqMap.entrySet())\n{\n  int freq = entry.getValue();\n  if (freq > maxFreq) {\n    maxFreq = freq;\n    maxLetter = entry.getKey();\n  }\n}\n\n// Output the most frequent letter\nSystem.out.println(maxLetter); // Output: l</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript constant to define a tax rate. [/INST] const TAX_RATE = 0.2;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object to store information about an employee. [/INST] const employee = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  job: \"Engineer\",\n  salary: 5000\n};</s>"
  },
  {
    "text": "<s>[INST] Write a PHP function to compare two strings s1 and s2. [/INST] function compareStrings($s1, $s2) {\n    if (strcmp($s1, $s2) == 0) {\n        return \"Strings are equal.\";\n    } \n    elseif (strlen($s1) > strlen($s2)) {\n        return \"String 1 is longer than String 2.\";\n    } \n    elseif (strlen($s2) > strlen($s1)) {\n        return \"String 2 is longer than String 1.\";\n    }\n    else {\n        return \"Strings are not equal.\";\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in a dictionary and returns a new dictionary with the values squared.\n\nmy_dict = {1:5, 2:6, 3:7} [/INST] def squared_values(my_dict):\n    \"\"\"This function takes in a dictionary as an argument,\n    and returns a new dictionary containing the values of the\n    original dictionary squared.\n    \n    Parameters\n    ----------\n    my_dict : dict\n        The input dictionary.\n    Returns\n    -------\n    A new dictionary with the values of the original\n    dictionary squared.\n    \"\"\"\n    \n    return {k : v**2 for k, v in my_dict.items()}</s>"
  },
  {
    "text": "<s>[INST] Create a code to sort a list of strings based on the length of the strings.\n\nmy_list = ['apples', 'bananas', 'oranges'] [/INST] def sort_strings_by_length(my_list):\n    \"\"\"This function takes in a list of strings and sorts\n    them based on the length of the strings.\n    \n    Parameters\n    ----------\n    my_list : list\n        The list of strings.\n    \n    Returns\n    -------\n    The sorted list of strings.\n    \"\"\"\n    \n    return sorted(my_list, key=len)</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in two lists of numbers and returns a new list of numbers in which each element is the sum of the corresponding elements in the two input lists.\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6] [/INST] def add_lists_elementwise(list1, list2):\n    \"\"\"This function takes in two lists of numbers and \n    returns a new list of numbers in which each element\n    is the sum of the corresponding elements in the \n    two input lists.\n    \n    Parameters\n    ----------\n    list1 : list\n        The first list of numbers.\n    list2 : list\n        The second list of numbers.\n    \n    Returns\n    -------\n    A new list in which each element is the sum of the\n    corresponding elements in the two input lists.\n    \"\"\"\n    \n    return [x + y for x, y in zip(list1, list2)]</s>"
  },
  {
    "text": "<s>[INST] Create a code that sums the first n Fibonacci numbers.\n\nnum = 5 [/INST] def sum_n_fibonacci_numbers(num):\n    \"\"\"This function takes in a number, n, and sums\n    the first n Fibonacci numbers.\n    \n    Parameters\n    ----------\n    num : int\n        The number of Fibonacci numbers to sum.\n    \n    Returns\n    -------\n    The sum of the first n Fibonacci numbers.\n    \"\"\"\n    \n    fib = [0, 1]\n    if num < 0:\n        return None\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        for i in range(2, num + 1):\n            fib.append(fib[i-2] + fib[i-1])\n        return sum(fib)</s>"
  },
  {
    "text": "<s>[INST] Generate a random list of 20 numbers between 1 and 100. [/INST] [86, 19, 2, 8, 12, 37, 43, 48, 63, 68, 21, 4, 39, 55, 87, 23, 69, 61, 44, 91]</s>"
  },
  {
    "text": "<s>[INST] Sort a given array of numbers [4, 2, 5, 3, 1] in ascending order.\n\n[4, 2, 5, 3, 1] [/INST] [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Compare two sorted lists and return the elements that are present in both lists.\n\nlist1 = [1, 3, 5, 6, 7]\nlist2 = [2, 3, 4, 5, 6] [/INST] [3, 5, 6]</s>"
  },
  {
    "text": "<s>[INST] Create a class Animal with two methods: speak(), which prints out the sound the animal makes, and eat() which prints out the food the animal eats. [/INST] class Animal():\n    def __init__(self):\n        pass\n    def speak(self):\n        print(\"Animal sound\")\n    def eat(self):\n        print(\"Animal food\")</s>"
  },
  {
    "text": "<s>[INST] Write a query in SQL to select records with a timestamp between two dates.\n\nStart date: 2020-02-10\nEnd date: 2020-02-15 [/INST] SELECT * FROM table\nWHERE timestamp BETWEEN '2020-02-10' AND '2020-02-15';</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form with five input fields, textbox, dropdown, checkbox, radio buttons and a submit button. [/INST] <form>\n <input type=\"text\" name=\"name\" />\n <select> \n  <option value=\"\">Select an Option</option> \n </select> \n <input type=\"checkbox\" name=\"check\" />\n <input type=\"radio\" name=\"group1\" value=\"option1\" />\n <input type=\"submit\" value=\"Submit\" />\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a jQuery script to make all elements with a class name 'member' togglable. [/INST] $(document).ready(function() {\n  $(\".member\").click(function() {\n    $(this).toggle();\n  });\n});</s>"
  },
  {
    "text": "<s>[INST] What is the syntax to declare a class in JavaScript? [/INST] class MyClassName {\n   constructor(data) {\n      // some code\n   }\n   // other methods\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a randomly generated 8 character alphanumeric string. [/INST] mZvx8ecz</s>"
  },
  {
    "text": "<s>[INST] Compute the modulus of num1 divided by num2 using C++.\n\nnum1 = 177\nnum2 = 31 [/INST] 27</s>"
  },
  {
    "text": "<s>[INST] Write a lambda function to add two given numbers. [/INST] lambda x,y: x+y</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select all the records from the table ‘fruit_list’ that have an expiry date falling within the next 10 days. [/INST] SELECT * \nFROM fruit_list \nWHERE expiry_date >= CURRENT_DATE \nAND expiry_date < CURRENT_DATE + INTERVAL 10 DAY;</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a fixed header bar and a scrolling content area. [/INST] <html> \n   <head> \n   </head> \n   <body> \n      <div id=\"header\">\n         <!-- header content -->\n      </div> \n      <div id=\"content\" style=\"overflow-y:scroll;\">\n         <!-- content here -->\n      </div> \n   </body> \n</html></s>"
  },
  {
    "text": "<s>[INST] Translate the given sentence into Spanish.\n\nThe cat is sitting on the mat. [/INST] El gato está sentado en la alfombra.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all customers with a due balance. [/INST] SELECT * \nFROM customers \nWHERE balance_due > 0;</s>"
  },
  {
    "text": "<s>[INST] Divide num1 by num2 using Java.\n\nnum1 = 100\nnum2 = 8 [/INST] int result = num1 / num2; // result = 12</s>"
  },
  {
    "text": "<s>[INST] Update the 'name' column in the table 'users' to 'John' where the 'id' is 12. [/INST] UPDATE users\nSET name = 'John'\nWHERE id = 12;</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to generate random passwords with a combinations of 6 letters and numbers. [/INST] import random\n\ndef generate_password(): \n    chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    password = ''\n    for i in range(6):\n        password += random.choice(chars)\n    return password\n\nprint(generate_password())</s>"
  },
  {
    "text": "<s>[INST] Create a proper HTML string that presents a table with 3 columns [/INST] <table border = \"1\">\n    <tr>\n        <th>Column1</th>\n        <th>Column2</th>\n        <th>Column3</th>\n    </tr>\n    <tr>\n        <td>Value1</td>\n        <td>Value2</td>\n        <td>Value3</td>\n    </tr>                    \n</table></s>"
  },
  {
    "text": "<s>[INST] Generate appropriate SQL query that extracts the preferred occupation of people aged between 25 and 35\n\nNoinput [/INST] SELECT occupation FROM people WHERE age BETWEEN 25 AND 35;</s>"
  },
  {
    "text": "<s>[INST] Create a code that removes all duplicates from an input array\n\nArray = [1,2,3,3,2,1] [/INST] def remove_duplicates(arr):\n    result = []\n    for i in arr:\n        if i not in result:\n            result.append(i)\n    return result\n\narr = [1,2,3,3,2,1]\n\nprint(remove_duplicates(arr))</s>"
  },
  {
    "text": "<s>[INST] Create a program that reverses an array\n\nArray = [1,2,3,4,5] [/INST] def reverse(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n\narr = [1,2,3,4,5]\n\nprint(reverse(arr))</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that prints out the Fibonacci series within a given range\n\nRange = (5, 15) [/INST] public class FibonacciRange {\n\t \n\tpublic static void main(String args[]) {\n\t\t// Set the range\n\t\tint lowerLimit=5, upperLimit=15;\n\t\t\n\t\t// Print the fibonacci series\n\t\tfor (int number = lowerLimit; number <= upperLimit; number++) {\n\t\t\tSystem.out.print(fibonacciSeries(number) +\" \");\n\t\t}\n\t}\n \n\t// Generates the fibonacci series\n\tpublic static int fibonacciSeries(int fibonacciNumber) {\n\t\tif (fibonacciNumber == 1 || fibonacciNumber == 2) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn fibonacciSeries(fibonacciNumber - 1) + fibonacciSeries(fibonacciNumber - 2);\n\t}\n}</s>"
  },
  {
    "text": "<s>[INST] Classify the following programming language as either a general-purpose language or a domain-specific language.\n\nMATLAB [/INST] MATLAB is a domain-specific language.</s>"
  },
  {
    "text": "<s>[INST] Figure out the output type of the following instruction: \"print('Hello World')\". [/INST] The output type is a string.</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary where the keys are the letters of the alphabet and the values are integers from 1 to 26. [/INST] alphabet_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}</s>"
  },
  {
    "text": "<s>[INST] Create a Python class to represent a Person object. The class should contain the person's name, age, and occupation. [/INST] class Person:\n  def __init__(self, name, age, occupation):\n    self.name = name\n    self.age = age\n    self.occupation = occupation</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to generate all permutations of the given list of letters.\n\n['a','b','c','d'] [/INST] def permutations(letters):\n permutations = []\n for a in letters:\n for b in letters:\n for c in letters:\n for d in letters:\n permutations.append(''.join(sorted([a, b, c, d])))\n return permutations</s>"
  },
  {
    "text": "<s>[INST] Write a function to remove all duplicates from a given list of numbers and sort the remaining elements in ascending order.\n\n[1, 4, 3, 3, 7, 4, 8, 3] [/INST] def remove_duplicates(numbers):\n unique_numbers = set(numbers)\n sorted_numbers = sorted(unique_numbers)\n return sorted_numbers</s>"
  },
  {
    "text": "<s>[INST] Create a Python Search Algorithm to search for a given number in a given sorted array.\n\ndata = [1, 7, 11, 14, 16]\nsearch_num = 14 [/INST] def search(data, search_num):\n for i in range(len(data)):\n  if data[i] == search_num:\n   return i\n return -1</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to print a diamond pattern of stars. [/INST] def diamond_pattern():\n row = 5\n for i in range(1, row + 1):\n  print(\" \"*(row-i)+\"*\"*(2*i-1))\n if row > 1:\n  for i in range(row-1, 0, -1):\n   print(\" \"*(row-i)+\"*\"*(2*i-1))</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to implement a linear search algorithm. The algorithm should return the index of the number in the array if found, otherwise -1.\n\ndata = [7, 13, 11, 9, 12]\nsearch_num = 9 [/INST] def linear_search(data, search_num):\n for index, num in enumerate(data):\n  if num == search_num:\n   return index\n return -1</s>"
  },
  {
    "text": "<s>[INST] Rewrite the above function in Python to use binary search algorithm instead of linear search.\n\ndata = [7, 13, 11, 9, 12]\nsearch_num = 9 [/INST] def binary_search(data, search_num):\n low = 0\n high = len(data) - 1\n while low <= high:\n  mid = (low + high)//2\n  if data[mid] == search_num:\n   return mid\n  elif data[mid] < search_num:\n   low = mid + 1\n  else:\n   high = mid - 1\n return -1</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to calculate the sum of the series 1^2 + 2^2 + 3^2 + ... + n^2.\n\nn = 8 [/INST] def sum_series(n):\n sum = 0 \n for num in range(1, n + 1):\n sum += num**2\n return sum</s>"
  },
  {
    "text": "<s>[INST] How can this code be refactored to make it more efficient?\n\nx = 100\nif (x > 50)\n  y = x + 20\nelse\n  y = x - 20 [/INST] The code can be refactored as follows: y = x+20 if x > 50 else x-</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to register an account on a website.\n\nimport requests\n\nurl = \"www.example.com/register\"\ndata = \"username=myname\" [/INST] import requests\n\nurl = \"www.example.com/register\"\ndata = { \"username\" : \"myname\", \"password\" : \"secret_password\", \"email\" : \"myname@example.com\" }\n\nresponse = requests.post(url, data=data)</s>"
  },
  {
    "text": "<s>[INST] Provide a return statement for the following JavaScript function.\n\nfunction getAge(dob) {\n let age = 2020 - dob.split('-')[2]\n} [/INST] function getAge(dob) {\n let age = 2020 - dob.split('-')[2]\n return age;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a class in C++ to represent a person with their name and age. [/INST] class Person {\n    private:\n        string name;\n        int age;\n    public:\n        Person(string n, int a) {\n            name = n;\n            age = a;\n        }\n        string getName() {\n            return name;\n        }\n        int getAge() {\n            return age;\n        }\n};</s>"
  },
  {
    "text": "<s>[INST] Create an array in JavaScript to store the coordinates of a rectangle. [/INST] const coordinates = [\n    {x: 10, y: 10},\n    {x: 20, y: 20},\n    {x: 10, y: 20},\n    {x: 20, y: 10}\n];</s>"
  },
  {
    "text": "<s>[INST] Find the sum of all numbers in the following array of objects in JavaScript.\n\n[{ num: 10 }, { num: 10 }, { num: 20 }, { num: 30 }] [/INST] let sum = 0;\narr.forEach(function(el){\n    sum += el.num;\n});\nconsole.log(sum); // 70</s>"
  },
  {
    "text": "<s>[INST] Create a looping statement in Python to print the alphabet in lowercase. [/INST] for letter in \"abcdefghijklmnopqrstuvwxyz\":\n    print(letter)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to convert an object into a list of keys and values. [/INST] function objectToList(obj) {\n    let keys = Object.keys(obj);\n    let values = Object.values(obj);\n    return keys.map((key, index) => [key, values[index]]);\n}</s>"
  },
  {
    "text": "<s>[INST] Define a variable in JavaScript to store a user's email address. [/INST] let userEmail = 'user@example.com';</s>"
  },
  {
    "text": "<s>[INST] Convert the string \"hello world\" to a byte array [/INST] b'hello world'</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop to iterate through a list of numbers and sum them together.\n\nnumbers = [1, 2, 3, 4, 5] [/INST] total = 0\nfor number in numbers:\n    total += number\n\nprint(\"The sum is: \", total)</s>"
  },
  {
    "text": "<s>[INST] Parse the given XML document and print out the text content of the \"title\" element.\n\n<doc>\n  <title>This is a title</title>\n</doc> [/INST] import xml.etree.ElementTree as et\n\nroot = et.fromstring(\"<doc><title>This is a title</title></doc>\")\ntitle = root.find('title')\nprint(title.text)</s>"
  },
  {
    "text": "<s>[INST] Create an array of size 128 with values initialized to 0. [/INST] array = [0] * 128</s>"
  },
  {
    "text": "<s>[INST] Construct a loop to print all the items in the list.\n\nitems = [\"apple\", \"banana\", \"cherry\"] [/INST] for item in items:\n    print(item)</s>"
  },
  {
    "text": "<s>[INST] Print each character in the given string\n\nstring = \"Hello World\" [/INST] for char in string:\n    print(char)</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following function without using the ``for`` loop.\n\ndef double_array(array):\n    for i in range(len(array)):\n        array[i] *= 2 [/INST] def double_array(array):\n    array[:] = [x * 2 for x in array]</s>"
  },
  {
    "text": "<s>[INST] Solve this challenge using Java.\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1]. [/INST] class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int [] result = new int[2];\n        for(int i=0;i<nums.length;i++){\n            for (int j=i+1;j<nums.length;j++){\n                if (nums[i]+nums[j]==target){\n                    result[0]=i;\n                    result[1]=j;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Edit this HTML code so it uses classes instead of IDs.\n\n<div id=\"main\">\n   <h1 id=\"heading\">Heading</h1>\n   <p id=\"body\">Some text here</p>\n</div> [/INST] <div class=\"main\">\n   <h1 class=\"heading\">Heading</h1>\n   <p class=\"body\">Some text here</p>\n</div></s>"
  },
  {
    "text": "<s>[INST] Compile and run the following Java code.\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n} [/INST] <noinput>\nOutput:\nHello, world!</s>"
  },
  {
    "text": "<s>[INST] Create a program that prints the triangle pattern given a number of rows.\n\n5 [/INST] * \n* * \n* * * \n* * * * \n* * * * *</s>"
  },
  {
    "text": "<s>[INST] Reverse the list without using built-in list functions\n\nlist = [1, 2, 3, 4, 5] [/INST] list = [5, 4, 3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Edit the following PHP code so it does not print out the error message \"Notice: Undefined variable\".\n\n<?php\n \n$name = \"John\";\n\necho \"Hello, $name!\";\n?> [/INST] <?php\n \n$name = \"John\";\n\nif (isset($name)) {\n    echo \"Hello, $name!\";\n}\n?></s>"
  },
  {
    "text": "<s>[INST] Write a regex that matches the strings \"apple\" and \"match\". [/INST] /(apple)|(match)/</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code that creates a new array populated with the elements that exist in both of the given arrays.\n\narr1 = [1, 2, 3, 4, 5];\narr2 = [4, 5, 6, 7, 8]; [/INST] let arr1 = [1, 2, 3, 4, 5];\nlet arr2 = [4, 5, 6, 7, 8];\n\nlet newArr = arr1.filter(num => arr2.includes(num));\nconsole.log(newArr);</s>"
  },
  {
    "text": "<s>[INST] Create a Python class to store attributes of a student [/INST] class Student:\n    def __init__(self, name, grade, age):\n        self.name = name\n        self.grade = grade\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_grade(self):\n        return self.grade\n\n    def get_age(self):\n        return self.age</s>"
  },
  {
    "text": "<s>[INST] Explain the use of semicolon in the following python code.\n\na = 5; b = 6; c = 7; [/INST] The semicolon is used here to separate multiple statements on the same line. In this case, the code is assigning values to variables; by separating these assignments with semicolons, they are all evaluated in a single statement as opposed to writing three separate statements.</s>"
  },
  {
    "text": "<s>[INST] How could we modify the following code to capture user input?\n\nnum = 5 [/INST] We can use the built-in input() function to capture user input in this code:\n\nnum = input(\"Please enter a number: \")</s>"
  },
  {
    "text": "<s>[INST] How could we modify the following code to add an item to a list?\n\nlist = [1, 2, 3] [/INST] We can use the list.append() method to add an item to the list:\n\nlist.append(4) # Adds the item 4 to the list</s>"
  },
  {
    "text": "<s>[INST] Generate a code segment that prints all the elements of a 2-dimensional array. [/INST] for array in 2d_array:\n    for element in array:\n        print(element)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to list the names of all the customers with credit score greater than 800. [/INST] SELECT name FROM customer WHERE credit_score > 800;</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to add a try-except block and print an error message on an exception.\n\narr = [1, 2, 3]\n\ni = 4\n\nprint(arr[i]) [/INST] arr = [1, 2, 3]\n\ni = 4\n\ntry:\n    print(arr[i])\nexcept IndexError:\n    print(\"Index out of bounds. Please specify a valid index.\")</s>"
  },
  {
    "text": "<s>[INST] How could we modify the following code to handle potential errors when computing sum?\n\nnum1 = input(\"Enter a number: \")\nnum2 = input(\"Enter another number: \")\n\nsum = int(num1) + int(num2) [/INST] num1 = input(\"Enter a number: \")\nnum2 = input(\"Enter another number: \")\n\ntry: \n    sum = int(num1) + int(num2)\nexcept ValueError:\n    print(\"Error: Please enter a valid number.\")</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of a static method in a Python class [/INST] A static method is a method that is bound to a class rather than an object. It does not require an instance of the class to be created in order to be called, and it does not have access to the attributes or methods of an instance of that class. Static methods are usually used to provide methods for manipulation of class attributes and/or to provide utility methods for the class.</s>"
  },
  {
    "text": "<s>[INST] Create a function in python to find the minimum value in an array.\n\narr = [3,6,2,7,1] [/INST] def find_min(arr): \n    min = arr[0] \n    for x in arr: \n        if x < min: \n            min = x \n    return min\n\nresult = find_min(arr)\nprint(result) # prints 1, which is the minimum in the array.</s>"
  },
  {
    "text": "<s>[INST] Remove the duplicates in a list.\n\narr = [1,2,1,2,3] [/INST] arr = [1,2,1,2,3]\n\nres = []\nfor x in arr: \n    if x not in res: \n        res.append(x)\nprint(res) # prints [1,2,3], which is the list without any duplicates.</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to use a for loop to print the numbers 0 to 9 [/INST] for i in range(10): \n    print(i) # prints the numbers 0 to 9</s>"
  },
  {
    "text": "<s>[INST] Write a a code to find all the prime numbers from 0 to 100 [/INST] # create a list of all the prime numbers\nprime_list = []\n\n# iterate through 0 to 100\nfor i in range(1,101):\n    if i > 1:\n        # loop through 2 to i/2\n        for j in range(2,i//2):\n            # if i is divisible by j, then it is not a prime number\n            if (i % j) == 0:\n                break\n        else:\n            # add the prime number to the prime list\n            prime_list.append(i)\n\nprint(prime_list) # prints the list of all prime numbers from 0 to 100.</s>"
  },
  {
    "text": "<s>[INST] Implement a basic calculator that can compute simple math expressions.\n\n9 * 2 [/INST] def calculate(expr):\n    return eval(expr)</s>"
  },
  {
    "text": "<s>[INST] Write a function to tokenize a given sentence into words.\n\nI am a programmer [/INST] def tokenize_sentence(sentence):\n    tokens = sentence.split()\n    return tokens</s>"
  },
  {
    "text": "<s>[INST] Write a code to perform a linear search in a given list.\n\n[1, 6, 2, 8, 5], 8 [/INST] def linear_search(my_list, x):\n    for i in range(len(my_list)):\n        if my_list[i] == x:\n            return i\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Implement a function to compute the binomial coefficient. [/INST] def compute_binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return compute_binomial_coefficient(n-1,k-1) + compute_binomial_coefficient(n-1,k)</s>"
  },
  {
    "text": "<s>[INST] Implement a function that can convert a given string to an integer.\n\n\"123\" [/INST] def string_to_int(num):\n    return int(num)</s>"
  },
  {
    "text": "<s>[INST] Generate a random string of 16 characters containing both alphabetical and numerical characters. [/INST] import random\nimport string\n\ndef random_string():\n    characters = string.ascii_letters + string.digits\n    random_string = ''.join(random.choices(characters, k=16))\n    return random_string\n\nif __name__ == '__main__':\n    print(random_string())</s>"
  },
  {
    "text": "<s>[INST] Given a two-dimensional array of integers, find the maximum sum of numbers you can find by tracing a path from the top-left to bottom-right corner.\n\n[[1, 5, 4], [2, 3, 4], [1, 9, 3]] [/INST] def max_sum(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\nif __name__ == '__main__':\n    arr = [[1, 5, 4], [2, 3, 4], [1, 9, 3]]\n    print(max_sum(arr))</s>"
  },
  {
    "text": "<s>[INST] Create a database table to store user information such as name, phone number, and address. [/INST] CREATE TABLE users (\n    user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(25) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);</s>"
  },
  {
    "text": "<s>[INST] Given a linked list, write a function to find the nth to last node. [/INST] def nth_to_last_node(head, n):\n    left_ptr = head\n    right_ptr = head\n    for _ in range(n-1):\n        if not right_ptr.nextnode:\n            raise LookupError('Error: n is larger than the linked list')\n        right_ptr = right_ptr.nextnode \n    while right_ptr.nextnode:\n        left_ptr = left_ptr.nextnode\n        right_ptr = right_ptr.nextnode\n    return left_ptr\n\nif __name__ == '__main__':\n    ll = LinkedList() # Assume LinkedList with nodes is defined\n    head = ll.head\n    result = nth_to_last_node(head, 3)\n    print(result.value)</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to find the maximum subarray sum within the provided input array.\n\n[-2, 1, -3, 4, -1, 2, 1, -5, 4] [/INST] def max_subarray_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for x in arr:\n        curr_sum += x\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    print(max_subarray_sum(arr))</s>"
  },
  {
    "text": "<s>[INST] Given a binary tree, write a function to determine whether it is a valid binary search tree. [/INST] def is_valid_bst(root):\n\n    def helper(node, lower_limit, upper_limit):\n        # base case\n        if not node:\n            return True\n        \n        val = node.val\n        if val <= lower_limit or val >= upper_limit:\n            return False\n\n        if not helper(node.right, val, upper_limit):\n            return False\n        if not helper(node.left, lower_limit, val):\n            return False\n        return True\n    \n    return helper(root, float('-inf'), float('inf'))\n\nif __name__ == '__main__':\n    # Assume a binary tree is defined\n    root = Node().root\n    result = is_valid_bst(root)\n    print(result)</s>"
  },
  {
    "text": "<s>[INST] Remove all the punctuation from a given string\n\n\"Welcome to the world of computers!\" [/INST] import string\n\ndef remove_punctuation(text):\n    punctuations = string.punctuation\n    no_punct = \"\"\n    for char in text:\n        if char not in punctuations:\n            no_punct += char\n    return no_punct\n\nif __name__ == '__main__':\n    text = 'Welcome to the world of computers!'\n    print(remove_punctuation(text))</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to find the names of all customers that have an order with an order amount higher than $1000.\n\nTable: customers\nTable: orders [/INST] SELECT customers.name \nFROM customers \nINNER JOIN orders \nON customers.customer_id = orders.customer_id\nWHERE orders.amount > 1000;</s>"
  },
  {
    "text": "<s>[INST] Create an HTML table containing 3 row and 3 column of text elements.\n\nTable with 9 text elements [/INST] <table>\n  <tr>\n    <td>Text 1</td>\n    <td>Text 2</td>\n    <td>Text 3</td>\n  </tr>\n  <tr>\n    <td>Text 4</td>\n    <td>Text 5</td>\n    <td>Text 6</td>\n  </tr>\n  <tr>\n    <td>Text 7</td>\n    <td>Text 8</td>\n    <td>Text 9</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Using Python, make a function that takes a list of strings as an argument and returns a new list of all the strings in uppercase.\n\nlistOfStrings = [\"apple\", \"banana\", \"mango\"] [/INST] def convertStringsToUppercase(listOfStrings):\n  return [string.upper() for string in listOfStrings]</s>"
  },
  {
    "text": "<s>[INST] What is the best way to check whether a JavaScript string ends with a given substring? [/INST] The best way to check if a JavaScript string ends with a given substring is to use the endsWith() method. This method will return a boolean value indicating whether the string ends with the given substring or not.</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python which takes a list of integers as an argument and returns a new list which contains the maximum value of each unique number in the input list.\n\nintList = [1, 4, 2, 9, 3, 5, 1, 9] [/INST] def maxValuesInList(intList):\n  uniqueValues = set(intList)\n  maxValuesList = []\n  for value in uniqueValues:\n    maxValue = max([item for item in intList if item == value])\n    maxValuesList.append(maxValue)\n  return maxValuesList</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to greet a user, given the user's name.\n\nname = 'John' [/INST] function greetUser(name){\n  return \"Hello, \" + name + \"!\";\n}</s>"
  },
  {
    "text": "<s>[INST] How do you convert a JSON object to a string? [/INST] The JSON.stringify() method can be used to convert a JSON object to a string. This method takes two arguments: the JSON object to be converted and an optional replacer function that can be used to alter the output.</s>"
  },
  {
    "text": "<s>[INST] Using Python, create a function that takes a string as an argument and returns a updated string where each character is repeated twice.\n\ninputValue = \"Hello\" [/INST] def repeatCharacters(inputValue):\n  outputValue = \"\"\n  for char in inputValue: \n    outputValue += char * 2 \n  return outputValue</s>"
  },
  {
    "text": "<s>[INST] What is the most efficient way to delete a key from a Python dictionary? [/INST] The most efficient way to delete a key from a Python dictionary is to use the del keyword. This will delete the specified key and its associated value from the dictionary.</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select all rows from a table where a given column value is higher than 10.\n\nTable: users [/INST] SELECT *\nFROM users\nWHERE column_name > 10;</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form containing 5 input fields - two text boxes, two radio buttons and one dropdown list. [/INST] <form>\n  <input type=\"text\" placeholder=\"Text Input 1\">\n  <input type=\"text\" placeholder=\"Text Input 2\">\n  <input type=\"radio\" name=\"radio\" value=\"option1\">Option 1\n  <input type=\"radio\" name=\"radio\" value=\"option2\">Option 2\n  <select>\n    <option value=\"Option A\">Option A</option>\n    <option value=\"Option B\">Option B</option>\n  </select>\n</form></s>"
  },
  {
    "text": "<s>[INST] How to select data from a Pandas DataFrame? [/INST] Pandas DataFrames can be queried by selecting specific columns and/or rows.\n\nTo select a single column from a DataFrame, you can use the following syntax:\n\ndf['column_name']\n\nTo select multiple columns from a DataFrame, you can use the following syntax:\n\ndf[['column_1', 'column_2', 'column_3']]\n\nTo select rows from a DataFrame, you can use the following syntax:\n\ndf[(df['column_name'] == condition) & (df['column_name_2'] > condition)]</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python called \"Person\" and define two methods - one for getting a name, and one for saying hello. [/INST] class Person(object):\n    def __init__(self, name):\n        self.name = name\n    \n    def getName(self):\n        return self.name\n    \n    def say_hello(self):\n        print(\"Hello, my name is %s\" % self.name)</s>"
  },
  {
    "text": "<s>[INST] Given two integers, how to find the GCD of them in Python? [/INST] def gcd(a, b): \n  if(b == 0): \n    return a \n  else: \n    return gcd(b, a % b)</s>"
  },
  {
    "text": "<s>[INST] How to check if a string contains a specific character in Python? [/INST] You can check if a string contains a specific character in Python by using the in operator. For example:\n\nmy_string = \"Hello World!\"\n\nif 'W' in my_string:\n    print(\"The string contains the character W\")</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to find the sum of all even numbers between 0 and a given number. [/INST] def sum_of_even_numbers(n):\n    result = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            result += i\n    \n    return result</s>"
  },
  {
    "text": "<s>[INST] How to sort a list of tuples in Python? [/INST] You can sort a list of tuples in Python by using the sorted() function. For example:\n\ntuple_list = [('John', 18), ('Jane', 20), ('Bob', 16)]\n\nsorted_list = sorted(tuple_list, key=lambda tup: tup[1])\n\nprint(sorted_list)\n\n# Output: [('Bob', 16), ('John', 18), ('Jane', 20)]</s>"
  },
  {
    "text": "<s>[INST] Create a function that returns a list of Prime numbers between 0-50. [/INST] def prime_numbers():\n    primes=[]\n    for i in range (1,51):\n        count=0\n        for j in range (2,i):\n            if i%j==0:\n                count+=1\n        if count==0:\n            primes.append(i)\n    return primes</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm that will search for a key-value pair in an object.\n\nsearchKey='c'\nobject= {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3,\n    \"d\": 4,\n    \"e\": 5\n} [/INST] def search(searchKey, object):\n    if searchKey in object:\n        return object[searchKey]\n    else:\n        return -1</s>"
  },
  {
    "text": "<s>[INST] How to remove all special characters from a string?\n\nstring=\"It@#$%^&*( ) is a;?.incredible# time\" [/INST] def remove_special_characters(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha() or char.isdigit() or char==\" \":\n            new_string += char\n    return new_string</s>"
  },
  {
    "text": "<s>[INST] How to hide a particular div when a button is clicked? [/INST] document.getElementById(\"div_id\").style.display=\"none\";</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to remove duplicates from the list.\n\nmy_list = [1,2,4,4,1,2] [/INST] def remove_duplicates(my_list): \n    new_list = [] \n    for item in my_list: \n        if item not in new_list: \n            new_list.append(item) \n    return new_list</s>"
  },
  {
    "text": "<s>[INST] How to delete all elements from a given set? [/INST] Set.clear()</s>"
  },
  {
    "text": "<s>[INST] How to get the size of a dictionary? [/INST] len(dictionary)</s>"
  },
  {
    "text": "<s>[INST] Create a function which takes an array of strings as an argument and return the longest string.\n\narray =['cake', 'apple', 'orange'] [/INST] def largest_string(array):\n   largest_string=array[0]\n   for i in array:\n      if len(i) > len(largest_string):\n         largest_string = i\n   return largest_string</s>"
  },
  {
    "text": "<s>[INST] How to check if a list contains any None value in it? [/INST] any(x is None for x in my_list)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select all the students with a GPA greater than 3.5. [/INST] SELECT * FROM Students WHERE GPA > 3.5;</s>"
  },
  {
    "text": "<s>[INST] Describe a for loop for iteration of a list.\n\nmy_list = [1, 2, 3, 4, 5] [/INST] for item in my_list:\n    # do something with the item</s>"
  },
  {
    "text": "<s>[INST] Write a class to define a complex number [/INST] class ComplexNumber{ \n        double real;\n        double imaginary;\n    \n        public ComplexNumber(double real, double imaginary){\n            this.real = real;\n            this.imaginary = imaginary;\n        }\n    \n        public double getReal(){ \n            return real;\n        }\n    \n        public double getImaginary(){\n            return imaginary;\n        }\n    }</s>"
  },
  {
    "text": "<s>[INST] Given a binary tree, print out a post-order traversal of its nodes. [/INST] def postorder_traverse(root):\n\n  if root == null:\n    return\n\n  postorder_traverse(root.left)\n  postorder_traverse(root.right)\n  print(root.value)</s>"
  },
  {
    "text": "<s>[INST] Write a function to delete a node from a linked list given the pointer to the node to be deleted. [/INST] // Given a pointer to a node, delete the node from the linked list\n// Do not return anything, changes are done in place. \nvoid deleteNode(Node *node)\n{\n    Node* temp = node;\n    Node* next = temp->next;\n    node->data = next->data;\n    node->next = next->next;\n    free(next);\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of lazy loading [/INST] Lazy loading is a design pattern which delays the loading of an object until it is needed. This optimization can improve the performance of web applications by decreasing the amount of data and code that needs to be loaded initially, and thereby reducing the application's memory footprint and startup time.</s>"
  },
  {
    "text": "<s>[INST] Write Python code to print the most frequent characters in a given string.\n\nString: I love apples [/INST] def most_frequent_char(s):\n    count = [0] * 256\n    max_count = 0\n    max_id = 0\n    for i in range(len(s)):\n        count[ord(s[i])] += 1\n        if count[ord(s[i])] > max_count:\n            max_count = count[ord(s[i])]\n            max_id = i\n    \n    return s[max_id]</s>"
  },
  {
    "text": "<s>[INST] Compute the sum of the squares of all the numbers between 1 and 10 (inclusively). [/INST] 385</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary (hash) table with the following key-value pairs:\n\nKey1: \"a\" Value1: 1\nKey2: \"b\" Value2: 2 [/INST] myDict = {\"a\": 1, \"b\": 2}</s>"
  },
  {
    "text": "<s>[INST] Find the index of the first occurrence of the substring “sea” in the following string.\n\nString: \"These are the seas\" [/INST] The index of the first occurrence of “sea” is 8.</s>"
  },
  {
    "text": "<s>[INST] Find the mean of the elements in this array.\n\nArray: [2, 3, 5, 4, 9] [/INST] The mean of the elements in this array is 4.8.</s>"
  },
  {
    "text": "<s>[INST] Create a JSON string from the following Javascript object.\n\nObject:{ \n  \"name\": \"john\",\n  \"age\": 25,\n  \"address\": {\n    \"city\": \"National City\",\n    \"state\": \"CA\"\n  }\n} [/INST] '{\"name\": \"john\", \"age\": 25, \"address\": {\"city\": \"National City\", \"state\": \"CA\"}}'</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the titles of movies released between the years 2000 and 2010. [/INST] SELECT title FROM movies WHERE release_year BETWEEN 2000 AND 2010;</s>"
  },
  {
    "text": "<s>[INST] Compare the two strings and find out which one comes first alphabetically.\n\nString1: apple\nString2: banana [/INST] apple comes first alphabetically.</s>"
  },
  {
    "text": "<s>[INST] Extract the 3rd element from a given list\n\n[1, 2, 3, 4, 5] [/INST] 3</s>"
  },
  {
    "text": "<s>[INST] Given a factor of two numbers, find the two numbers\n\nfactor: 12 [/INST] The two numbers are 1 and 12.</s>"
  },
  {
    "text": "<s>[INST] Generate a regex pattern for valid emails [/INST] ^[\\w\\.\\+\\-]+@[\\w\\-]+\\.[\\w\\-\\.]+$</s>"
  },
  {
    "text": "<s>[INST] Create a Python script to fetch the weather data of a given city\n\nBangalore [/INST] import requests\n\ncity = \"Bangalore\"\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid=your_api_key\"\n\n# Fetching the JSON data\nresponse = requests.get(url)\ndata = response.json()\n \n# Get the main weather data\nweather_data = data[\"main\"]\n \n# Obtain the current temperature \ntemp = weather_data[\"temp\"]\n \nprint(f\"The current temperature in {city} is {temp} degrees Celsius.\")</s>"
  },
  {
    "text": "<s>[INST] Print all the permutations of a given list\n\n[1, 2, 3] [/INST] def permute(lis):\n    if len(lis) == 0:\n        return [] \n    if len(lis) == 1:\n        return [lis] \n  \n    l = [] \n    for i in range(len(lis)):\n        m = lis[i] \n  \n        remLis = lis[:i] + lis[i+1:] \n  \n        for p in permute(remLis): \n            l.append([m] + p) \n    return l \n\nlist1 = [1, 2, 3]\nresult = permute(list1) \nfor i in result: \n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to calculate prime numbers between 0 to 50. [/INST] # Program to calculate prime numbers between 0 to 50\n\n# list of prime numbers\nprime_list = []\nfor num in range(0,51):  \n   # prime numbers are greater than 1  \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_list.append(num)\n\nprint(prime_list)</s>"
  },
  {
    "text": "<s>[INST] Construct a C++ code snippet to create a basic class named 'Person' with 2 fields: 'name' and 'age'. [/INST] class Person {\n   string name; \n   int age; \npublic:\n   Person(string n, int a) {\n      name = n;\n      age = a;\n   }\n};</s>"
  },
  {
    "text": "<s>[INST] Using Java, write a program to check whether an integer is even or odd.\n\n7 [/INST] public class OddOrEven {\n\n public static void main(String[] args) {\n \n  int num = 7;\n \n  // if number is divisible by two then it is even\n  if (num % 2 == 0)\n  System.out.println(\"Even\");\n  else\n  System.out.println(\"Odd\");\n }\n}\n\n# Output:\nOdd</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program that reverses a given string.\n\nHello [/INST] // function to reverse a given string\nfunction reverseString(str) {\n return str.split('').reverse().join('');\n}\n\n// Output\nreverseString('Hello') \n// Output\nolleH</s>"
  },
  {
    "text": "<s>[INST] Using Python, create a function to return the number of days in a particular month.\n\nSeptember [/INST] def days_in_month(month):\n if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':\n  return 31\n elif month == 'February':\n  return 28\n else:\n  return 30\n  \n# Output\ndays_in_month('September') \n# Output \n30</s>"
  },
  {
    "text": "<s>[INST] Write a simple Swift program that prompts the user to enter two integers and prints out the maximum value of the two.\n\n7, 20 [/INST] import Foundation\n\nfunc maximumValue(num1: Int, num2: Int) {\n let maxValue = max(num1, num2)\n print(maxValue)\n}\n\n// Output\nmaximumValue(num1: 7, num2: 20)\n// Output</s>"
  },
  {
    "text": "<s>[INST] How would you create a list of 10 elements by calling the range() function? [/INST] my_list = list(range(10))</s>"
  },
  {
    "text": "<s>[INST] Define a function that returns the string \"Hello World!\" [/INST] def hello_world():\n    return \"Hello World!\"</s>"
  },
  {
    "text": "<s>[INST] Fragment the following statement ignoring whitespace and punctuation:\n\n\"Hi, how are you doing?\" [/INST] word_list = [\"Hi,\", \"how\", \"are\", \"you\", \"doing?\"]</s>"
  },
  {
    "text": "<s>[INST] Find the maximum among three integers.\n\nwidget_1 = 8\nwidget_2 = 4\nwidget_3 = 12 [/INST] maximum = max(widget_1, widget_2, widget_3)</s>"
  },
  {
    "text": "<s>[INST] Explain what the following code is doing.\n\nimport random\n\ndef generate_random_number():\n    return random.randint(1, 10) [/INST] The code is defining a function called \"generate_random_number\" which will generate a randomly chosen integer between 1 and 10 using the randint() function from the random library.</s>"
  },
  {
    "text": "<s>[INST] What is the value of ``a`` after the following statement?\n\na = 5\na += 3 [/INST] a = 8</s>"
  },
  {
    "text": "<s>[INST] Correct the following code and generate an output:\n\nlist_of_ints = [2, 3, 4, 8]\n\nfor x in list_of_ints\n    print(x) [/INST] list_of_ints = [2, 3, 4, 8]\n\nfor x in list_of_ints:\n    print(x)\n\n# Output:\n2\n3\n4\n8</s>"
  },
  {
    "text": "<s>[INST] Write a function to print the permutations of a given string. [/INST] def print_permutations(string):\n    if len(string) == 1:\n        print(string)\n    else:\n        for permutation in (print_permutations(string[1:])):\n            for i in range(len(string)):\n                print(permutation[:i] + string[0] + permutation[i:])\n\nprint_permutations(\"abc\")</s>"
  },
  {
    "text": "<s>[INST] How would you reverse a string in Python? [/INST] my_string = \"Hello World!\"\nmy_string = my_string[::-1]  # slice the string from start to finish in reverse order</s>"
  },
  {
    "text": "<s>[INST] Using given HTML code, make the font color of 2nd paragraph blue.\n\n<body>\n    <p>This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n</body> [/INST] <body>\n    <p>This is the first paragraph.</p>\n    <p style=\"color:blue;\">This is the second paragraph.</p>\n</body></s>"
  },
  {
    "text": "<s>[INST] Create a C++ program to sort an array using selection sort algorithm.\n\n[2, 7, 4, 1, 5, 3] [/INST] #include <iostream>\nusing namespace std;\n\nvoid selectionSort(int arr[], int n)\n{\n    int i, j, min_idx;\n\n    for (i = 0; i < n-1; i++)\n    {\n        min_idx = i;\n        for (j = i+1; j < n; j++)\n           if (arr[j] < arr[min_idx])\n               min_idx = j;\n\n        swap(arr[min_idx], arr[i]);\n    }\n}\n \nint main()\n{\n    int arr[] = {2, 7, 4, 1, 5, 3};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    selectionSort(arr, n);\n    cout << \"Sorted array is \\n\";\n    for (int i = 0; i < n; i++)\n        cout << arr[i] << \" \";\n        \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] You need to sort an Unsorted Linked List in ascending order.\n\nhead -> 10 -> 8 -> 5 -> 12 -> 15 [/INST] head -> 5 -> 8 -> 10 -> 12 -> 15</s>"
  },
  {
    "text": "<s>[INST] Edit a given HTML code to make the font size of 1st paragraph 12px.\n\n<body>\n    <p>This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n</body> [/INST] <body>\n    <p style=\"font-size: 12px;\">This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n</body></s>"
  },
  {
    "text": "<s>[INST] Read an array from stdin and find the maximum element in it.\n\n[3, 8, 5, 6, 1] [/INST] #include <iostream>\nusing namespace std;\n\nint main()\n{\n    int arr[] = {3, 8, 5, 6, 1};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int max_element = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (arr[i] > max_element)\n            max_element = arr[i];\n    }\n    cout << \"Maximum element in the array is \" << max_element << endl;\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Name an advantage of using linked list over an array. [/INST] One advantage of a linked list over an array is that it does not require the memory for storing all the elements to be allocated at once. Linked lists allow memory to be allocated as needed and can be easily expanded as new records are added. Also, linked list can easily insert and remove elements at any position in the list. Additionally, they can easily be manipulated or sorted in the same order in which they are stored. Finally, linked lists can store data items of different sizes while arrays require all elements to be the same size.</s>"
  },
  {
    "text": "<s>[INST] Write a script in JavaScript to print the first 20 Fibonacci numbers. [/INST] let n1 = 0;\nlet n2 = 1;\nlet n3;\n\nconsole.log(n1 + \" \" + n2);\n\nfor(let i = 2; i < 20; ++i)\n{\n    n3 = n1 + n2; \n    console.log(n3);\n    n1 = n2;\n    n2 = n3;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a Hash Table in Python with given length and values.\n\nsize = 10\nvalues = [20, 12, 45, 89, 78, 90] [/INST] hash_table = [None]*size\n\nfor value in values:\n    hash_value = value % size\n    hash_table[hash_value] = value\n \nprint(hash_table)</s>"
  },
  {
    "text": "<s>[INST] Convert the following SQL query into a Python pandas DataFrame.\n\nSELECT product.name, store.location, store.country\nFROM product\nINNER JOIN store\nON product.store_id = store.store_id [/INST] import pandas as pd\n\ndf = pd.read_sql_query(\n'SELECT product.name, store.location, store.country'\n'FROM product'\n'INNER JOIN store'\n'ON product.store_id = store.store_id',\nconn\n )</s>"
  },
  {
    "text": "<s>[INST] In Java, create a method to detect if a number is a palindrome. [/INST] public static boolean isPalindrome(int number) {\n int num = number; \n int reverse = 0; \n  \n while(number > 0) \n { \n  int remainder = number % 10; \n  reverse = (reverse*10) + remainder; \n  number = number/10; \n } \n  \n return num == reverse; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Rust program to convert a string to title case. [/INST] fn to_title_case(s: String) -> String {\n    let words: Vec<&str> = s.split_whitespace().collect();\n    let mut title_cased = String::new();\n    for word in words {\n        let mut chars = word.chars();\n        title_cased.push_str(&chars.next().unwrap().to_uppercase().to_string());\n        for char in chars {\n            title_cased.push_str(&char.to_lowercase().to_string());\n        }\n        title_cased.push(' ');\n    }\n    title_cased.trim().to_string()\n\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Swift function to parse a JSON string into a dictionary. [/INST] func parseJsonToDictionary(jsonString: String) -> [String: Any]? {\n  if let data = jsonString.data(using: .utf8) {\n    do {\n      return try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]\n    } catch {\n      print(error.localizedDescription)\n    }\n  } \n  return nil\n}</s>"
  },
  {
    "text": "<s>[INST] Using pandas, create a dataframe with two columns and five rows. [/INST] import pandas as pd\n\ndf = pd.DataFrame(\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], \n    columns=['a', 'b']\n    )</s>"
  },
  {
    "text": "<s>[INST] Code a PHP program to detect if a URL is valid or not. [/INST] <?php \n  \n// This function will check if URL is valid \nfunction is_url_valid($url) \n{ \n    $url = @parse_url($url); \n  \n    if (!$url)\n        return false; \n\n    $url = array_map('trim', $url); \n    $url['port'] = (!isset($url['port'])) ? 80 : \n        (int)$url['port']; \n\n    $path = (isset($url['path'])) ? $url['path'] : ''; \n\n    if ($path == '') \n        $path = '/'; \n  \n    $path .= (isset($url['query'])) ? \"?$url[query]\" : ''; \n  \n    if (isset($url['host']) AND $url['host'] != gethostbyname($url['host'])) \n    { \n        if (PHP_VERSION >= 5) \n            return \n                checkdnsrr($url['host'], 'A'); \n        else \n            return checkdnsrr($url['host'], \n                'A'); \n    } \n\n    return false; \n}</s>"
  },
  {
    "text": "<s>[INST] Using MongoDB, create a query to find all documents where the status is \"ACTIVE\". [/INST] db.collection.find({status: \"ACTIVE\"})</s>"
  },
  {
    "text": "<s>[INST] In Python, write a function that takes two integers a, b and returns a*b. [/INST] def multiply(a, b):\n  return a * b</s>"
  },
  {
    "text": "<s>[INST] In Ruby, write a method that takes two strings and prints them in reverse order. [/INST] def print_strings_reverse(string1, string2)\n  puts string2\n  puts string1\nend</s>"
  },
  {
    "text": "<s>[INST] Explain what a sorting algorithm is and describe one. [/INST] A sorting algorithm is an algorithm that is used to rearrange a sequence of items so that they are in a certain order. One example of a sorting algorithm is the bubble sort. The bubble sort works by comparing two adjacent elements in the list, and swapping them if they are out of order. This process is then repeated until the list is sorted.</s>"
  },
  {
    "text": "<s>[INST] In Java, convert an integer array to a string.\n\n[1, 2, 3, 4] [/INST] String str = Arrays.toString(arr); // [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to return the titles of all books written by a given author.\n\nAuthor: John Doe [/INST] SELECT title FROM books WHERE author = 'John Doe';</s>"
  },
  {
    "text": "<s>[INST] In HTML, write a code to create an unordered list. [/INST] <ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul></s>"
  },
  {
    "text": "<s>[INST] Write a Perl program to generate Fibonacci series. [/INST] #include <stdio.h> \n  \nint main() \n{ \n    int n, first = 0, second = 1, next; \n  \n    printf(\"Enter the number of terms \\n\"); \n    scanf(\"%d\", &n); \n  \n    printf(\"First %d terms of Fibonacci series are :\\n\", n); \n  \n    int i; \n    for (i = 0; i < n; i++) { \n        if (i <= 1) \n            next = i; \n        else { \n            next = first + second; \n            first = second; \n            second = next; \n        } \n        printf(\"%d\\n\", next); \n    } \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a shell script that prints out the directory this command was run from. [/INST] #!/bin/bash\nDIR=$(cd $(dirname \"$1\") && pwd -P)\necho $DIR</s>"
  },
  {
    "text": "<s>[INST] Given a string, reverse the order of words and then print the string.\n\nHello World [/INST] World Hello\n\n#!/bin/bash\necho $(echo $1 | awk '{for (i=NF; i!=0; i--) {printf (\"%s \",$i)}; print \"\"}')</s>"
  },
  {
    "text": "<s>[INST] Create a GUI interface for a multiplayer card game using PyQt5. [/INST] import sys \nimport PyQt5 \nfrom PyQt5.QtWidgets import QApplication, QWidget \n  \n  \nclass Game(QWidget): \n    def __init__(self): \n        super().__init__() \n        self.title = 'Multiplayer Card Game' \n        self.left = 400 \n        self.top = 400 \n        self.width = 300 \n        self.height = 100 \n        self.initUI()\n  \n    def initUI(self): \n        self.setWindowTitle(self.title) \n        self.setGeometry(self.left, self.top,  \n                         self.width, self.height)\n        self.show() \n  \napp = QApplication(sys.argv) \nscreen = Game() \nsys.exit(app.exec_())</s>"
  },
  {
    "text": "<s>[INST] Create a python script that connects to a database and outputs the average age of users. [/INST] import pandas as pd \nimport sqlite3\n\n# Connect to database\nconn = sqlite3.connect(\"myDB.db\")\n\n# Read Data \ndf = pd.read_sql(\"SELECT age FROM Users\", conn)\n\n# Calculate average \navg_age = df.mean()\n\n# Output the average age of users \nprint(\"Average age of users: \", avg_age)</s>"
  },
  {
    "text": "<s>[INST] Given HTML code, write a css selector to select all list items.\n\n<html>\n<body>\n  <ul>\n    <li>item 1</li>\n    <li>item 2</li>\n    <li>item 3</li>\n  </ul>\n</body>\n</html> [/INST] li</s>"
  },
  {
    "text": "<s>[INST] Create an artificial neural network in PyTorch to predict the next word in a sentence. [/INST] import torch \nimport torch.nn as nn \n\nclass ANN(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, hidden_dim):\n        super().__init__()\n        self.embedding = nn.Embedding(vocab_size, embedding_dim) \n        self.fc1 = nn.Linear(embedding_dim, hidden_dim) \n        self.fc2 = nn.Linear(hidden_dim, vocab_size)\n    \n    def forward(self, x):\n        embedded = self.embedding(x) \n        out = self.fc1(embedded)\n        out = self.fc2(out) \n        return out</s>"
  },
  {
    "text": "<s>[INST] Write a MongoDB query to find all documents in a collection whose field \"date\" has a value of today. [/INST] db.collection.find({ date: new Date().toISOString().split('T')[0] })</s>"
  },
  {
    "text": "<s>[INST] Compare and contrast the two most popular NoSQL databases - MongoDB and Redis. [/INST] MongoDB and Redis are two of the most popular NoSQL databases. MongoDB is a document-oriented database, while Redis is an open-source in-memory data structure store. MongoDB is known for its scalability and flexible query language whereas Redis is best-suited for caching and real-time applications. MongoDB is best for storing structured, semi-structured and unstructured data, and Redis is used primarily for rapid data manipulation and retrieval of data stored in the key-value store. MongoDB offers an ACID (Atomicity, Consistency, Isolation, and Durability) compliant system with multi-document transactions, while Redis primarily has single-document atomic operations. MongoDB is best for structured or semi-structured data, while Redis is best for caching and real-time applications that require fast data access.</s>"
  },
  {
    "text": "<s>[INST] Use PHP to create an associative array from the following JSON object.\n\n{\"name\": \"John\", \"age\": 35, \"location\": \"New York\"} [/INST] $json_object = '{\"name\": \"John\", \"age\": 35, \"location\": \"New York\"}';\n$arr = json_decode($json_object, true);\nprint_r($arr);\n\n// Output\nArray\n(\n    [name] => John\n    [age] => 35\n    [location] => New York\n)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to calculate the sum of the values in \"quantity\" field for all entries in the \"products\" table. [/INST] SELECT SUM(quantity) FROM products;</s>"
  },
  {
    "text": "<s>[INST] Construct an HTML page to display a table with 10 rows, 5 columns, and a header row. [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>Table Example</title>\n</head>\n<body>\n  <table>\n    <thead>\n      <tr>\n        <th>Header 1</th>\n        <th>Header 2</th>\n        <th>Header 3</th>\n        <th>Header 4</th>\n        <th>Header 5</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Cell 1</td>\n        <td>Cell 2</td>\n        <td>Cell 3</td>\n        <td>Cell 4</td>\n        <td>Cell 5</td>\n      </tr>\n      <tr>\n        <td>Cell 6</td>\n        <td>Cell 7</td>\n        <td>Cell 8</td>\n        <td>Cell 9</td>\n        <td>Cell 10</td>\n      </tr>\n    </tbody>\n  </table>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to read and print an array of integers.\n\n[5, 10, 20, 25] [/INST] #include <iostream>\nusing namespace std;\n\nint main()\n{\n    int arr[] = {5, 10, 20, 25};\n    int n = sizeof(arr)/sizeof(arr[0]);\n   \n    cout << \"The array elements are: \"; \n    for (int i=0; i < n; i++) \n        cout << arr[i] << \" \"; \n  \n    return 0;\n}\n\n// Output\nThe array elements are: 5 10 20 25</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to delete all entries that has a value of \"NULL\" in the field \"name\". [/INST] DELETE FROM table_name \n WHERE name IS NULL;</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code snippet to give all paragraphs a font size of 16px. [/INST] p {\n  font-size: 16px;\n}</s>"
  },
  {
    "text": "<s>[INST] Reverse the following Scala list: ``List(1, 2, 3, 4)`` [/INST] List(4, 3, 2, 1)</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following Java loop as a compact list comprehension.\n\nint[] array = {1, 2, 3, 4, 5};\nint[] array2 = new int[array.length];\nfor(int i=0; i<array.length; i++) {\n array2[i] = array[i] + 1;\n} [/INST] int[] array = {1, 2, 3, 4, 5};\nint[] array2 = Arrays.stream(array).map(x -> x + 1).toArray();</s>"
  },
  {
    "text": "<s>[INST] Identify the variables and operators in the following Java code.\n\nint a = 3 + 4;\nint b = a * 2; [/INST] Variables:\na, b\n\nOperators:\n+, *</s>"
  },
  {
    "text": "<s>[INST] List all properties of a JavaScript object called ``person``. [/INST] The properties of the person object include name, age, height, weight, gender, race, and occupation.</s>"
  },
  {
    "text": "<s>[INST] Create a class called Vehicle in Python with attributes for type (car, truck, motorcycle etc.), make, model, year, and speed. [/INST] class Vehicle:\n    def __init__(self, type, make, model, year, speed):\n        self.type = type\n        self.make = make\n        self.model = model\n        self.year = year\n        self.speed = speed</s>"
  },
  {
    "text": "<s>[INST] How do you create a new list in Python from a given list that contains the square of each element? [/INST] The following code creates a new list from the given list by squaring each element using a list comprehension: new_list = [el**2 for el in original_list]</s>"
  },
  {
    "text": "<s>[INST] Name four of the main components of a basic HTML page. [/INST] The four main components of a basic HTML page are: the <html> element, the <head> element, the <title> element, and the <body> element.</s>"
  },
  {
    "text": "<s>[INST] Devise a recursive solution to the problem.\n\nFind the sum of all numbers from 1 to N [/INST] def sum_recursive(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_recursive(n-1)</s>"
  },
  {
    "text": "<s>[INST] Replace the placeholder in the sentence below with the appropriate method\n\nUse the __________ function to convert the string to lowercase. [/INST] Use the lower() function to convert the string to lowercase.</s>"
  },
  {
    "text": "<s>[INST] Using the comment as a guide, write a nested loop to iterate over all elements of a multi-dimensional array\n\n[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]] [/INST] for i in range(len(array)):\n    for j in range(len(array[i])):\n        print(array[i][j])</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all students who have a GPA greater than 3.0 [/INST] SELECT * \nFROM students \nWHERE GPA > 3.0</s>"
  },
  {
    "text": "<s>[INST] Modify the following code so that it prints the Fibonacci numbers up to the given number\n\nx = 10 [/INST] def fibonacci(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n        return res</s>"
  },
  {
    "text": "<s>[INST] Design a program to search a list for a specified item [/INST] def search_list(array, item):\n    for i in range(len(array)):\n        if array[i] == item:\n            return i\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Create a function to return the count of even numbers in a list\n\nlist_num = [4, 5, 6, 7, 8] [/INST] def count_even_numbers(list_num):\n    count = 0\n    for i in list_num:\n        if (i % 2 == 0):\n            count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Write a code to convert an input string of numbers to an integer.\n\ninput_str = '1234' [/INST] def str_to_int(input_str):\n    num = 0\n    for i in input_str:\n        num = num * 10 + (ord(i) - ord('0')) \n    return num</s>"
  },
  {
    "text": "<s>[INST] Create a function to find all anagrams of a given word.\n\nword = \"abbac\" [/INST] def anagrams(word):\n    if len(word) == 1:\n        return [word]\n    else:\n        anagrams_list = []\n        for i, letter in enumerate(word):\n            for j in anagrams(word[:i]+word[i+1:]):\n                anagrams_list.append(letter+j)\n        return anagrams_list</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the sum of values present in two dimensional array\n\narr = [[1,2], [3,4], [5,6]] [/INST] def sum_two_dimensional_array(arr):\n    total = 0\n    for sublist in arr:\n        for i in sublist:\n            total += i\n    return total</s>"
  },
  {
    "text": "<s>[INST] Generate a list of unique numbers between 10 and 50. [/INST] [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]</s>"
  },
  {
    "text": "<s>[INST] Given a matrix, output the sum of all elements in the matrix.\n\n[\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n] [/INST] 45</s>"
  },
  {
    "text": "<s>[INST] How many continuous substrings are there in the string \"Geeks\"? [/INST] 15</s>"
  },
  {
    "text": "<s>[INST] Design a function to get the user input and print the maximum among them. [/INST] def getMaxNumber():\n    numbers = []\n    \n    num = int(input(\"Enter how many numbers: \"))\n    \n    for i in range(num):\n        numbers.append(int(input(\"Enter a number: \")))\n        \n    maxNum = max(numbers)\n    print(\"The maximum number is\", maxNum)</s>"
  },
  {
    "text": "<s>[INST] How can you change the given string 'Hello World' to 'World Hello'? [/INST] string = \"Hello World\"\nstring = string.split()\nstring = string[1] + ' ' + string[0]\nprint(string) # World Hello</s>"
  },
  {
    "text": "<s>[INST] How can you find the severity of a given error? [/INST] Error severity can be found by looking at the error code or message provided. The higher the code or the more detailed the message, the more severe the error is. In addition, if the error message indicates the impact of the error on the system or application, it can be used to measure the severity of the error.</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, sort them in increasing order.\n\nnums = [2, 3, 1, 4, 5] [/INST] def sort_numbers(nums):\n    return sorted(nums)</s>"
  },
  {
    "text": "<s>[INST] Identify which elements in an array are even numbers.\n\nnums = [1, 2, 3, 4, 5] [/INST] def is_even_num(nums):\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a class in python with three functions, two of which must be called `add` and `subtract`. [/INST] class MathOperations:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b</s>"
  },
  {
    "text": "<s>[INST] What type of neural network is used for language generation? [/INST] Recurrent Neural Networks (RNNs) are commonly used for language generation. Long Short-Term Memory (LSTM) networks and Gated Recurrent Units (GRUs) are prominent examples of RNNs used for language generation.</s>"
  },
  {
    "text": "<s>[INST] Assign ``num = 5`` to the ``num`` variable using the Python assignment operator. [/INST] num = 5</s>"
  },
  {
    "text": "<s>[INST] Rearrange the given fragments of code in order to build an ``if ... else ...`` statement in Python.\n\nprint('Success!')\nelse:\nif a > b [/INST] if a > b:\n    print('Success!')\nelse:</s>"
  },
  {
    "text": "<s>[INST] What data structure is adopted to reflect the hierarchical structure of XML documents? [/INST] A tree data structure is typically adopted to represent the hierarchical structure of XML documents. In this structure, each node represents an element of the document and can have any number of children or parents depending on the structure.</s>"
  },
  {
    "text": "<s>[INST] Given two lists ``a`` and ``b``, calculate their difference and store the result in a list ``c``.\n\na = [1, 2, 3]\nb = [2, 3, 4] [/INST] c = list(set(a) - set(b))</s>"
  },
  {
    "text": "<s>[INST] Write a code to make an API call to a remote server. [/INST] import requests\n\nurl = \"http://example.com/api\"\n\nresponse = requests.get(url)\ndata = response.json()</s>"
  },
  {
    "text": "<s>[INST] Describe the differences between a static website and a dynamic website. [/INST] static websites contain fixed content that is served whenever a user requests a page, while dynamic websites store content in a database and generate the page content based on user input or other variables. Static websites are faster to build and are easier to maintain, while dynamic websites can provide users with more interactive experiences.</s>"
  },
  {
    "text": "<s>[INST] Name two database technologies used for data persistence. [/INST] Two commonly used database technologies are relational databases (such as MySQL) and NoSQL databases (such as MongoDB).</s>"
  },
  {
    "text": "<s>[INST] How would you extract emails from a given string using regex in Python? [/INST] import re\n\ns = 'This string contains an email address: email@example.com'\n\nemails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', s)</s>"
  },
  {
    "text": "<s>[INST] How do you debug an application in Python? [/INST] Debugging an application in Python can be done using a variety of methods such as using a debugger like pdb, setting breakpoints, using logging, using the assert statement, etc. Additionally, tools like PyCharm and Visual Studio Code come with built-in debugging capabilities.</s>"
  },
  {
    "text": "<s>[INST] Enter the variables from the equation below into Python code.\n\n2x + 5y - 7z = 9 [/INST] x = 2\ny = 5\nz = -7</s>"
  },
  {
    "text": "<s>[INST] Replace the following loop with a list comprehension.\n\nmy_list = []\nfor item in range(20):\n my_lis.append(item**2) [/INST] my_list = [item**2 for item in range(20)]</s>"
  },
  {
    "text": "<s>[INST] Copy the following string without the middle word.\n\nThe quick brown fox [/INST] The quick fox</s>"
  },
  {
    "text": "<s>[INST] How would you update the following code to iterate over a list of strings?\n\nlist_of_ints = [1, 2, 3, 4]\n\nfor n in list_of_ints:\n    print(n) [/INST] The following code can be updated to iterate over a list of strings by replacing `list_of_ints` with the list of strings and replacing `print(n)` with `print(str(n))` to properly format each element of the list.\n\nlist_of_strings = [\"one\", \"two\", \"three\", \"four\"]\n\nfor n in list_of_strings:\n    print(str(n))</s>"
  },
  {
    "text": "<s>[INST] Describe the result of running this code.\n\nobj = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}\n\nfor key in obj.keys():\n    print(key + ': ' + obj[key]) [/INST] The result of running this code is that it prints each key-value pair in the object with key and value separated by a colon and a space, e.g, 'a: 1', 'b: 2', 'c: 3'.</s>"
  },
  {
    "text": "<s>[INST] Find the area of a circle with radius 2. [/INST] The area of a circle with radius 2 is 12.566370614359172.</s>"
  },
  {
    "text": "<s>[INST] Suggest a faster way to get a sublist from a given list. [/INST] A faster way to get a sublist from a given list is to use slicing. For example, to get the first 3 elements of a given list, the following code can be used: \n\noriginal_list = [1, 2, 3, 4, 5]\nsublist = original_list[:3]</s>"
  },
  {
    "text": "<s>[INST] Write a function to print a given character N times. [/INST] def print_n_times(character, times):\n    for _ in range(times):\n        print(character, end=\"\")\n\nprint_n_times(\"*\", 5)</s>"
  },
  {
    "text": "<s>[INST] Create a python script that takes three required parameters 'x', 'y' and 'z' and prints the result of x * y * z\n\nx=4\ny=3\nz=2 [/INST] def multiply(x, y, z):\n  return x * y * z\n  \nprint(multiply(4, 3, 2)) //output 24</s>"
  },
  {
    "text": "<s>[INST] Suggest a Python code for sorting a list of dictionaries based on ascending order of a given key.\n\noriginal_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 18}, {'name':'Lisa', 'age': 20}] [/INST] def sort_by_age(original_list):\n    Return sorted(original_list, key = lambda i: i['age'])</s>"
  },
  {
    "text": "<s>[INST] Write a Python function that takes a list of strings as parameter and returns a dictionary with the strings as keys and the length of each string as value.\n\nwords = ['apple', 'banana', 'cat'] [/INST] def string_lengths(words):\n    return {word:len(word) for word in words}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to remove duplicates from a list of dictionaries based on their values for a given key.\n\noriginal_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 25}, {'name':'Lisa', 'age': 20}] [/INST] def remove_duplicates(original_list, key):\n    seen = set()\n    new_list = [item for item in original_list if key not in seen and (seen.add(item[key]) if item[key] is not None else True)]\n    return new_list</s>"
  },
  {
    "text": "<s>[INST] Suggest a Python program to execute a given block of code a specified number of times.\n\nexecute_n_times(5, print(\"Hello World!\")) [/INST] def execute_n_times(n, code):\n    for _ in range(n):\n        exec(code)</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to create a function that takes two numbers as arguments and returns a list of all odd numbers between them.\n\nstart_range = 2\nend_range = 10 [/INST] def get_odds(start_range, end_range):\n    return [num for num in range(start_range, end_range+1) if num % 2 != 0]</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to convert an integer to a Roman numeral.\n\nnumber = 2019 [/INST] def to_roman(num):\n    thousands = [\"\", \"M\", \"MM\", \"MMM\"]\n    hundreds = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"]\n    tens = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n    ones = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n    \n    return thousands[num//1000] + hundreds[(num%1000)//100] + tens[(num%100)//10] + ones[num%10]</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to compare two given lists and return True if their contents are the same.\n\nlist1 = [1, 3, 8, 9]\nlist2 = [1, 3, 8, 9] [/INST] def compare_lists(list1, list2):\n    return list1 == list2</s>"
  },
  {
    "text": "<s>[INST] Suggest a Python code for printing the sum, minimum and maximum of a given list.\n\nlist_elements = [1, 2, 4, 6, 8, 9] [/INST] def list_calculations(list_elements):\n    print('sum:', sum(list_elements))\n    print('min:', min(list_elements))\n    print('max:', max(list_elements))</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to shuffle the items of a given list in random order.\n\nlist_elements = [1, 2, 3, 4, 5] [/INST] from random import shuffle\n\ndef shuffle_list(list_elements):\n    shuffle(list_elements)\n    return list_elements</s>"
  },
  {
    "text": "<s>[INST] Write a sql statement to retrieve the average salary of all employees [/INST] SELECT AVG(salary) FROM employees</s>"
  },
  {
    "text": "<s>[INST] Without using any built-in functions, generate a Python code to remove the duplicated elements in a list [/INST] def remove_duplicates(l): \n    res = [] \n    for i in l: \n        if i not in res: \n            res.append(i) \n    return res</s>"
  },
  {
    "text": "<s>[INST] Edit the given code to delete a node from a linked list\n\nvoid deleteNode(struct node *node) \n{ \n    struct node *temp = node->next; \n    node->data = temp->data; \n    node->next = temp->next; \n    free(temp); \n} [/INST] void deleteNode(struct node *node) \n{ \n    struct node *temp = node->next; \n    node->data = temp->data; \n\n    // Store pointer to the next of node \n    struct node *next_next = temp->next; \n\n    // Unlink node from linked list \n    free(temp); \n\n    node->next = next_next; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a MongoDB query to find which roles have Permission 2 [/INST] db.roles.find({permissions: 2})</s>"
  },
  {
    "text": "<s>[INST] Generate a complete javascript code that calls the fetch() API with a certain url\n\nhttps://www.example.com [/INST] fetch('https://www.example.com')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.log(error));</s>"
  },
  {
    "text": "<s>[INST] Write a PHP script to compare two strings and return the number of characters and words which are common in both strings\n\nThe quick brown fox jumps over the lazy dog\nThe brown fox jumps quickly [/INST] <?php \n\n$string1 = \"The quick brown fox jumps over the lazy dog\"; \n$string2 = \"The brown fox jumps quickly\"; \n\n// Create two arrays from the strings \n$arr1 = explode(\" \", $string1); \n$arr2 = explode(\" \", $string2); \n\n// Initialize a variable to store the count of common words \n$wordCount = 0; \n\n// Initialize a variable to store the count of common character \n$charCount = 0; \n\n// Iterate over the two arrays and count the common words\nfor ($i=0; $i < count($arr1); $i++) { \n\t// Compare the words at index $i of arrays \n\tfor ($j=0; $j < count($arr2); $j++) { \n\t\t\n\t\t// If the words match \n\t\tif ($arr1[$i] == $arr2[$j]) { \n\t\t\n\t\t\t// Count the words \n\t\t\t$wordCount++; \n\t\t\n\t\t\t// Iterate over the characters of words \n\t\t\tfor ($k=0; $k < strlen($arr1[$i]); $k++) { \n\t\t\n\t\t\t\t// Check the characters \n\t\t\t\tif ($arr1[$i][$k] == $arr2[$j][$k]) { \n\t\t\t\n\t\t\t\t\t// Count the characters \n\t\t\t\t\t$charCount++; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n} \n\necho \"Common words: \".$wordCount; \necho \"\\nCommon characters: \".$charCount; \n\n?></s>"
  },
  {
    "text": "<s>[INST] Create a function in Ruby to input an array and remove all the elements of the array [/INST] def delete_array(arr) \n  arr.clear\nend</s>"
  },
  {
    "text": "<s>[INST] Write a python script to print out a list comprehension that prints out all the integers in a given range\n\n1-10 [/INST] my_list = [x for x in range(1, 11)]  \nprint(my_list)</s>"
  },
  {
    "text": "<s>[INST] Create a C# program to implement a search algorithm which returns the index or position of a given key in an array [/INST] public static int LinearSearch(int[] array, int key) \n{ \n    for (int i = 0; i < array.Length; i++) \n    { \n        if (array[i] == key) \n            return i; \n    } \n  \n    return -1; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a sql statement to sort a list of employees in descending order based on their salary [/INST] SELECT *\nFROM employees \nORDER BY salary DESC</s>"
  },
  {
    "text": "<s>[INST] Create a loop to print out all odd number from 0 to 10. [/INST] for i in range(0, 11): \n    if i % 2 != 0:\n        print(i)</s>"
  },
  {
    "text": "<s>[INST] Compute the cosine similarity of two vectors.\n\nVectors: [2, 3] and [4, -5] [/INST] def cosine_similarity(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\nv1 = [2, 3]\nv2 = [4, -5]\n\ncosine_sim = cosine_similarity(v1, v2)\n\nprint(cosine_sim)</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a navigation bar containing a heading and a search field. [/INST] <html>\n  <head>\n    <title>My Page</title>\n  </head>\n  <body>\n    <nav>\n      <h1>My Navigation</h1>\n      <input type=\"text\" placeholder=\"search...\">\n    </nav>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a code for extracting the last n elements of a list.\n\nList: [1, 2, 3, 4, 5], n = 3 [/INST] # Define a function to extract the required elements\ndef extract_last_elements(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\n# Driver code\nlist = [1, 2, 3, 4, 5]\nn = 3\nprint (extract_last_elements(list, n))</s>"
  },
  {
    "text": "<s>[INST] Default a neural network architecture to classify the handwritten digit from 0 to 9. [/INST] # Define the architecture\ndef model(input_shape):\n    model = tf.keras.Sequential([\n        tf.keras.layers.Flatten(input_shape=input_shape),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ]) \n    \n    model.compile(optimizer='adam',\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy']) \n    \n    return model</s>"
  },
  {
    "text": "<s>[INST] Integrate the plotting library Matplotlib into this Python script.\n\nimport pandas as pd\ndata = pd.read_csv('data.csv') [/INST] import pandas as pd\nimport matplotlib.pyplot as plt \n\n# Read csv file \ndata = pd.read_csv('data.csv')  \n\n# Data visualization \nplt.plot(data) \nplt.xlabel('x-axis') \nplt.ylabel('y-axis')  \nplt.title('Plot of data')  \nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Select all distinct employee names from the given table. [/INST] SELECT DISTINCT name FROM employees;</s>"
  },
  {
    "text": "<s>[INST] Calculate the Hamming distance of two binary strings.\n\nString1: 1001100 \nString2: 1010101 [/INST] def hammingDistance(str1, str2): \n    # Iterate through all possibles index of the strings \n    # and counting the number of different characters and return it.\n    distance = 0\n    for index in range(len(str1)): \n        if str1[index] != str2[index]: \n            distance += 1\n  \n    return distance \n\n# Driver code \nstr1 = '1001100'\nstr2 = '1010101'\nprint(hammingDistance(str1, str2))</s>"
  },
  {
    "text": "<s>[INST] Create a function to generate Pythagorean Triples up to a given limit.\n\nLimit: 20 [/INST] # Create a function to generate pythagorean triples\ndef generator(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\n# Driver code\nlimit = 20\npythagorean_triples = generator(limit)\nprint(pythagorean_triples)</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to list all the customers from the US. [/INST] SELECT *\nFROM customers\nWHERE country = 'US';</s>"
  },
  {
    "text": "<s>[INST] Make a Visual Basic code to find the sum of the integers from 1 to 10 [/INST] Sub add_numbers()\n   Dim sum As Integer\n   sum = 0\n   \n   For i = 1 To 10\n      sum = sum + i\n   Next\n   MsgBox (\"Sum of all numbers from 1 to 10 is : \" & sum)\nEnd Sub</s>"
  },
  {
    "text": "<s>[INST] Manipulate a given array in JavaScript to remove all duplicate items\n\nvar array = [20, 30, 20, 15, 30, 45] [/INST] var array = [20, 30, 20, 15, 30, 45];\nvar uniqueArray = array.filter((item, index) => array.indexOf(item) === index);\nconsole.log(uniqueArray);</s>"
  },
  {
    "text": "<s>[INST] Write a R program to print the first 5 rows of a given dataset\n\n“data.csv” [/INST] data <- read.csv(\"data.csv\")\nhead(data, 5)</s>"
  },
  {
    "text": "<s>[INST] Write a function to convert inches to centimeters. [/INST] function inchToCm(inches) {\n   return inches * 2.54;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Date object containing tomorrow's date. [/INST] var tomorrow = new Date();\ntomorrow.setDate(tomorrow.getDate() + 1);</s>"
  },
  {
    "text": "<s>[INST] Write a few lines of code that prints out a multiplication table up to 12x12. [/INST] for (let i = 1; i <= 12; i++) { \n    for (let j = 1; j <= 12; j++) \n        console.log(i + \" * \" + j + \" = \" + i*j); \n    console.log(\"------------------------------\"); \n}</s>"
  },
  {
    "text": "<s>[INST] Using an array, create a web page that prints out all of the array elements.\n\narr = [1, 2, 3, 4, 5] [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Array values</title>\n</head>\n<body>\n <ul>\n   <% for (let i = 0; i < arr.length; i++) { %>\n        <li><%= arr[i] %></li>\n   <% } %>\n </ul>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a queries for finding the second highest salary of an employee in Employee table. [/INST] SELECT MAX(Salary) \nFROM Employee \nWHERE Salary < (SELECT MAX(Salary) FROM Employee);</s>"
  },
  {
    "text": "<s>[INST] Create a for loop for counting from 1 to 10. [/INST] for (let i = 1; i <= 10; i++) {\n   console.log(i); \n}</s>"
  },
  {
    "text": "<s>[INST] What is the result of 3 + 4 * 9? [/INST] The result of 3 + 4 * 9 is 39.</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to check if all characters in a given string are letters or numbers.\n\nstring = \"Welcome123\" [/INST] function checkString(string) { \n    var lettersOnly = /^[0-9a-zA-Z]+$/; \n    if (string.match(lettersOnly)) \n        console.log(\"The string contains only letters and numbers.\"); \n    else\n        console.log(\"The string contains other characters too.\"); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in C++ that takes an input string and removes all vowels from it.\n\nInput string = \"hello world\" [/INST] string removeVowels(string input)\n{\n    string output = \"\";\n    for(char c : input)\n    {\n        if(c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n            output += c;\n    }\n    return output;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a for loop in Java for printing the squares of each number in a given array.\n\nint[] array = {4, 2, 6, 8}; [/INST] for(int x : array) {\n    System.out.println(\"Square of \" + x + \" is \" + (x * x));\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a loop in PHP to print the first 5 elements of an array.\n\n$array = [1, 2, 3, 4, 5, 6]; [/INST] for ($i = 0; $i < 5; $i++) {\n    echo $array[$i] . \" \";\n}</s>"
  },
  {
    "text": "<s>[INST] Find the sum of all even numbers in an integer array using Java.\n\nint[] array = {8, -7, 4, -3, 19, 22}; [/INST] int sum = 0; \nfor (int x : array) { \n    if (x % 2 == 0) \n        sum += x; \n} \nSystem.out.println(\"Sum of all even numbers = \" + sum);</s>"
  },
  {
    "text": "<s>[INST] Generate a boolean statement in Swift to compare two strings for equality.\n\nString 1: \"hello\"\nString 2: \"Hello\" [/INST] let str1 = \"hello\" \nlet str2 = \"Hello\" \nlet result = str1.lowercased() == str2.lowercased()\nprint(result)</s>"
  },
  {
    "text": "<s>[INST] Create a class in C++ that contains two private member variables and a public member function to set both variables.\n\nVariables: int age, string name [/INST] class Person \n{ \nprivate: \n    int age; \n    string name; \n\npublic: \n    void setVars(int a, string n) \n    { \n        age = a; \n        name = n; \n    } \n};</s>"
  },
  {
    "text": "<s>[INST] Design a function in JavaScript that takes two parameters and performs a multiplication between them.\n\nNumber 1: 11\nNumber 2: 10 [/INST] function multiply(num1, num2) {\n    return num1 * num2;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to print an inverted triangle\n\nIt should display 8 lines with 5 asterisks [/INST] def print_inverted_triangle():\n    for i in range(8, 0, -1):\n        print(\"*\" * i)</s>"
  },
  {
    "text": "<s>[INST] Create a python program to determine the comprehesive count of words in a given string\n\nGiven the string s =\"python programming is fun\" [/INST] def count_words(s):\n    words = s.split(' ')\n    count = len(words)\n    return count</s>"
  },
  {
    "text": "<s>[INST] Construct a program to find the difference between two numbers\n\nGiven values x = 20 and y = 10 [/INST] def diff(x, y):\n    return x - y</s>"
  },
  {
    "text": "<s>[INST] Create a program to print the FizzBuzz series\n\nUp to the number 25 [/INST] def fizzbuzz(n): \n    for num in range(1, n+1):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0: \n            print(\"Fizz\") \n        elif num % 5 == 0: \n            print(\"Buzz\")\n        else: \n            print(num)</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to find the four letter words from a given list.\n\n[\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"]. [/INST] \"\"\"\nA Python program to find the four letter words from a given list\n\"\"\"\n\n# Initializing the list \nwords = [\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"] \n\n# Using list comprehension to extract four letter words \nfour_letter_words = [word for word in words if len(word) == 4] \n\n# Printing the four letter words \nprint(\"Four letter words:\", four_letter_words)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that returns all customers from the USA. [/INST] SELECT * FROM customers WHERE country = 'USA';</s>"
  },
  {
    "text": "<s>[INST] Create a class Person in Java that stores a person's name, email, gender, and age. [/INST] public class Person {\nString name;\nString email;\nString gender;\nint age;\n\npublic Person(String name, String email, String gender, int age) {\n  this.name = name;\n  this.email = email;\n  this.gender = gender;\n  this.age = age; \n}\n \npublic String getName() {\n  return name;\n}\n\npublic String getEmail() {\n  return email;\n}\n\npublic String getGender() {\n  return gender;\n}\n\npublic int getAge() {\n  return age;\n}\n\npublic void setName(String name) {\n  this.name = name;\n}\n \npublic void setEmail(String email) {\n  this.email = email;\n}\n \npublic void setGender(String gender) {\n  this.gender = gender;\n}\n\npublic void setAge(int age) {\n  this.age = age;\n}\n\n}</s>"
  },
  {
    "text": "<s>[INST] Create a new database in MySQL, with a table named \"users\", and add 3 records. [/INST] CREATE DATABASE myDB;\n\nUSE myDB;\n\nCREATE TABLE users (\n  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(50) NOT NULL\n);\n\nINSERT INTO users (name, email) VALUES \n  ('John Smith', 'john.smith@example.com'), \n  ('Jane Doe', 'jane.doe@example.com'),\n  ('Bob Jones', 'bob.jones@example.com');</s>"
  },
  {
    "text": "<s>[INST] Write a regex pattern to match all characters in a string that start with a lowercase letter. [/INST] [a-z][a-zA-Z]*</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two strings and finds the longest common substring between them. [/INST] def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]</s>"
  },
  {
    "text": "<s>[INST] Create a program that takes a given string and returns the frequency of each alphabet character. [/INST] def get_character_frequency(str):\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\n\nget_character_frequency(\"Hello World!\") # Output: { 'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1 }</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet that prints the current date and time in the format YYYY-MM-DD HH:MM:SS. [/INST] import datetime\n\n# Get the current datetime\nnow = datetime.datetime.now()\n\n# Prints the current datetime in YYYY-MM-DD HH:MM:SS format\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))</s>"
  },
  {
    "text": "<s>[INST] Write a function to compare two lists of numbers and return a new list with the elements which are common to both the lists.\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 5, 6, 7, 8] [/INST] def compare_lists(list1, list2):\n    new_list = []\n    for element in list1:\n        if element in list2:\n            new_list.append(element)\n    return new_list\n    \n# Call the compare_lists()\nlist_common = compare_lists(list1, list2)\n\n# Print the new_list\nprint(list_common) # [3, 5]</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL trigger to perform a data validation check when a new row is created. [/INST] CREATE TRIGGER my_data_validation_check\n  BEFORE INSERT ON my_table\n  FOR EACH ROW\nBEGIN\n  IF EXISTS \n  THEN \n    IF NEW.my_column NOT BETWEEN 0 AND 100\n    THEN\n      SIGNAL SQLSTATE '45001' \n      SET MESSAGE_TEXT = 'Data validation failed.'; \n    END IF;\n  END IF;\nEND</s>"
  },
  {
    "text": "<s>[INST] Create a variable to store the text \"Python is a programming language\" and then print it. [/INST] text = \"Python is a programming language\"\nprint(text)</s>"
  },
  {
    "text": "<s>[INST] Create an array that contains the elements 1, 3, 5, 7, and 9 in random order. [/INST] import random\n\n# Create an array with all our values\narray = [1, 3, 5, 7, 9]\n\n# Use the shuffle function to randomize\nrandom.shuffle(array)\n\n# Print out the randomized array\nprint(array)</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to find the middle item in a linked list. [/INST] # Finds the middle node in a linked list \n# Input: head of the linked list \n# Return: the middle element of the linked list \ndef findMiddleNode(head): \n\t# If the linked list is empty \n\tif (head is None): \n\t\treturn None\n\n\t# Find the length of the linked list \n\tlength, node = 0, head \n\twhile (node is not None): \n\t\tlength += 1\n\t\tnode = node.next\n\n\t# Jump to the middle of linked list \n\tnode = head \n\tfor _ in range(length // 2): \n\t\tnode = node.next\n\t\t\n\treturn mid</s>"
  },
  {
    "text": "<s>[INST] Use .split() in Python to break the following text into a list of sentences.\n\ntext = \"Hello! My name is John. What is your name?\" [/INST] text = \"Hello! My name is John. What is your name?\"\n\nsentences = text.split(\". \")\nprint(sentences) # ['Hello! My name is John', 'What is your name?']</s>"
  },
  {
    "text": "<s>[INST] Create an array containing 10 random numbers between 0 and 10. [/INST] import random\n\n# Create an array with 10 random numbers\narray = []\nfor i in range(10):\n    array.append(random.randint(0,10))\n\n# Print the array\nprint(array)</s>"
  },
  {
    "text": "<s>[INST] Write a code to edit a given column in an SQL table. [/INST] ALTER TABLE my_table\n  MODIFY my_column TYPE INT;</s>"
  },
  {
    "text": "<s>[INST] How would you implement a simple object oriented Programming concept in Python? [/INST] In Python, object-oriented programming is supported by classes which contain attributes that represent the characteristics of an object, and methods which represent the actions that an object can take. To implement a simple object-oriented concept in Python, we would first define a class that represents the type of object we wish to create. This class will contain attributes (i.e. data fields) that define the state of the object, as well as methods that define the behaviors of the object. Finally, we can create objects using the class definition, providing an initial state and access to the methods.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to perform a binary search.\n\nlet array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet x = 5; [/INST] let binarySearch = (array, x) => {\n  let start = 0;\n  let end = array.length - 1;\n  \n  while (start <= end) {\n    let middle = Math.floor((start + end) / 2);\n    if (array[middle] === x) {\n      return middle;\n    } else if (x < array[middle]) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }  \n  }\n  return -1;\n}</s>"
  },
  {
    "text": "<s>[INST] What are the key differences between C and C++? [/INST] The key differences between C and C++ are that C is a procedural programming language while C++ is an object-oriented programming language. C does not support classes, whereas C++ does. C does not support function or operator overloading whereas C++ does. C does not support exception handling, while C++ does. C does not support templates, while C++ does. Additionally, C does not support reference variables, while C++ does.</s>"
  },
  {
    "text": "<s>[INST] Write a function to check whether a number is a prime number in JavaScript.\n\nlet num = 7; [/INST] function isPrime(num) { \n  \n    // Edge cases:\n    if (num <= 1)  return false; \n    if (num === 2)  return true; \n    if (num % 2 === 0) return false; \n\n    for (let i=3; i<=Math.sqrt(num); i+=2) { \n        if (num % i === 0) \n            return false; \n    } \n    return true; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a function which takes a C-style string as a parameter and prints it out reversed. [/INST] void reverse_string(char *str) {\n    int len = strlen(str);\n    int i;\n    char *rev_str = (char*)malloc((len+1)*sizeof(char));\n    for(i = 0; i < len; i++) {\n        rev_str[i] = str[len - i - 1];\n    }\n    rev_str[len] = '\\0';\n    printf(\"Reversed string: %s\\n\", rev_str);\n    free(rev_str);\n}</s>"
  },
  {
    "text": "<s>[INST] Assign a value to a variable based on the value of another variable.\n\nint x = 0;\nint y = 1; [/INST] if (x == 0) {\n    int y = 1;\n} else {\n    int y = 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Define an operator which adds two points of a given type. [/INST] struct Point {\n    int x;\n    int y;\n};\n\nPoint operator+(Point p1, Point p2) {\n    Point result;\n    result.x = p1.x + p2.x;\n    result.y = p1.y + p2.y;\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an event handler for a \"click\" that updates a text field. [/INST] // define \"click\" parameter\n$(\"#element\").on(\"click\", function (click) {\n    // update text field\n    document.getElementById(\"text_field\").innerHTML = \"updated\";\n});</s>"
  },
  {
    "text": "<s>[INST] Create an HTML5 canvas with a width of 500px and height of 300px. [/INST] <canvas id=\"example\" width=\"500\" height=\"300\"></canvas></s>"
  },
  {
    "text": "<s>[INST] Put a number into a variable and assign a string to another variable based on it's value.\n\nnum = 5 [/INST] if (num == 5) {\n    String str = \"five\";\n} else {\n    String str = \"not five\";\n}</s>"
  },
  {
    "text": "<s>[INST] Use a loop to print out a list of numbers. [/INST] for (int i = 0; i < 10; i++) {\n    System.out.println(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Assert that an array is not empty before adding items. [/INST] if (array != null && array.length > 0) {\n    // add items to array\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to return all data from the \"customers\" table where the customer's age is greater than 26. [/INST] SELECT * FROM customers WHERE age > 26;</s>"
  },
  {
    "text": "<s>[INST] Implement a 3d vector class with a constructor, a dot product method and a normalization method. [/INST] class Vector3d {\n    double x, y, z;\n\n    //Constructor\n    Vector3d(double x, double y, double z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    // Dot product\n    double dotProduct(Vector3d vec2) {\n        double result = this.x * vec2.x + this.y * vec2.y + this.z * vec2.z;\n        return result;\n    }\n\n    // Normalization\n    Vector3d normalize() {\n        double magnitude = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n        Vector3d normalized = new Vector3d(this.x / magnitude, this.y / magnitude, this.z / magnitude);\n        return normalized;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Count the number of integers in the given 2D array.\n\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8]\n] [/INST] 8</s>"
  },
  {
    "text": "<s>[INST] Write a Regular Expression pattern to check if the given input is a valid email address. [/INST] /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/</s>"
  },
  {
    "text": "<s>[INST] Create a data structure that stores the given data.\n\nName: John\nAge: 20\nGender: Male\nOccupation: Developer [/INST] student = {\n  'name': 'John',\n  'Age': 20, \n  'Gender': 'Male',\n  'Occupation': 'Developer'\n}</s>"
  },
  {
    "text": "<s>[INST] Generate the MD5 hash of the given string.\n\nHello World [/INST] a7ad492532f2f806e140722d00453901</s>"
  },
  {
    "text": "<s>[INST] Using the given Python code, format the number 7.321 to contain two decimal points.\n\nn=7.321 [/INST] '{:.2f}'.format(n)</s>"
  },
  {
    "text": "<s>[INST] Remove the character 'o' from the given string.\n\nbooks [/INST] 'bks'</s>"
  },
  {
    "text": "<s>[INST] Compress the given string using the Huffman Coding.\n\naabbccdd [/INST] {\n  'a': '0',\n  'b': '10',\n  'c': '110',\n  'd': '111'\n}</s>"
  },
  {
    "text": "<s>[INST] Convert the given integer number to a Roman Numeral.\n\n403 [/INST] CDIII</s>"
  },
  {
    "text": "<s>[INST] Use the bisection method to approximate the root of the given equation.\n\nx^2 - 2x - 3 [/INST] Approximate root: 1.839285</s>"
  },
  {
    "text": "<s>[INST] Given the different test scores in the list, calculate the GPA.\n\n[('DS', 98), ('OS', 95), ('SE', 85), ('ML', 80)] [/INST] GPA: 89.25</s>"
  },
  {
    "text": "<s>[INST] Using a random seed of 0, generate a 5x4 random matrix of integers up to the given number.\n\n10 [/INST] matrix = [\n  [8, 3, 3, 5],\n  [7, 7, 4, 8],\n  [6, 2, 9, 2],\n  [8, 3, 3, 0],\n  [2, 5, 4, 8]\n]</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that takes a sentence as an argument and returns the formatted sentence with the first letter of each word capitalized.\n\nsentence = \"this is a sentence\" [/INST] def capitalize_sentence(sentence):\n  words = sentence.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return \" \".join(capitalized_words)</s>"
  },
  {
    "text": "<s>[INST] Create a script in Python that plots a bar chart showing the count of beers sold in a bar in a particular week.\n\nbeer_sales = [200, 500, 600, 100, 800] [/INST] import matplotlib.pyplot as plt\n\nweek = [1, 2, 3, 4, 5]\nplt.bar(week,beer_sales)\nplt.xlabel('Week')\nplt.ylabel('Number of beers sold')\nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that returns the maximum and minimum order amounts from the database. [/INST] SELECT MAX(order_amount) AS max_order, MIN(order_amount) AS min_order\nFROM orders;</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the primary key in a database table? [/INST] The primary key is a special field or set of fields in a database table that uniquely identifies each record. It is used to ensure that no two records have the same value, provide a link between tables, and index data for faster retrieval.</s>"
  },
  {
    "text": "<s>[INST] Rewrite this below sql query into the active record query in Rails.\n\nSELECT * FROM customers WHERE age > 20 [/INST] Customer.where('age > ?', 20)</s>"
  },
  {
    "text": "<s>[INST] Write a R script that reads in dataset and prints out the summary statistics of the dataset. [/INST] # Read in the dataset\ndata <- read.csv(\"data.csv\")\n\n# Print out the summary statistics\nsummary(data)</s>"
  },
  {
    "text": "<s>[INST] Compare and contrast the advantages and disadvantages of using AJAX for a website. [/INST] AJAX provides several advantages for a website. It allows for asynchronus data transfer between the server and the client, making it possible to update a web page without refreshing the whole page. It also improves the user experience by providing a faster, smoother interface. By minimizing server load, AJAX facilitates better scalability.\n\nOn the other hand, AJAX can lead to slower response times, especially if a large amount of data is being transferred. It can also be difficult to debug since errors are often not visible to the user or the developer. Additionally, AJAX requires JavaScript to be enabled, which may not be the case for all users.</s>"
  },
  {
    "text": "<s>[INST] Create a function in Ruby to convert a Fahrenheit temperature to Celsius. [/INST] def fahrenheit_to_celsius(fahrenheit)\n  celsius = (fahrenheit - 32) * (5.0/9.0)\n  return celsius\nend</s>"
  },
  {
    "text": "<s>[INST] Modify the following python code to calculate the average of a list of numbers.\n\ndef list_average(numbers):\n    '''This function will calculate the average of a list of numbers.''' [/INST] def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''\n    return sum(numbers) / len(numbers)</s>"
  },
  {
    "text": "<s>[INST] Come up with a Python generator expression to iterate over a given list and return only even elements.\n\n[1, 2, 3, 4, 5, 6, 7, 8] [/INST] even_list = (x for x in [1, 2, 3, 4, 5, 6, 7, 8] if x%2 == 0)</s>"
  },
  {
    "text": "<s>[INST] Create a stored procedure in SQL that calculates the average of a column in a table.\n\nTable: Student\nColumn: Score [/INST] CREATE PROCEDURE avg_score \nAS\nBEGIN\n  SELECT AVG(Score) FROM Student;\nEND;</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form with 4 fields, a Name field, an Email field, a Phone number field and an Address field. [/INST] <form>\n  <label>Name</label>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Email</label>\n  <input type=\"text\" name=\"email\"><br>\n  <label>Phone Number</label>\n  <input type=\"text\" name=\"phone_number\"><br>\n  <label>Address</label>\n  <input type=\"text\" name=\"address\"><br>\n  \n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a CSS style that makes a given text slightly bigger and bold on hover. [/INST] p:hover {\n  font-size: 1.2em;\n  font-weight: bold;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java method that accepts two integers and returns their least common multiple. [/INST] public static int lcm(int a, int b) {\n    int gcd = 1;\n    for(int i = 1; i <= a && i <= b; ++i)\n    {\n        // Checks if i is factor of both integers\n        if(a % i == 0 && b % i == 0)\n            gcd = i;\n    }\n\n    int lcm = (a*b) / gcd;\n    return lcm;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a PHP function to retrieve all words that start with a given letter from a given array.\n\n$array = [\"apple\", \"ball\", \"cat\", \"dart\", \"elephant\"]\n$letter = \"e\" [/INST] <?php\nfunction getWordsStartingWith($array, $letter)\n{\n    $matches = array_filter($array, function($word) use($letter) {\n        return strtolower($word[0]) == strtolower($letter);\n    });\n    return array_values($matches);\n}\n\n$array = [\"apple\", \"ball\", \"cat\", \"dart\", \"elephant\"];\n$letter = \"e\";\n$result = getWordsStartingWith($array, $letter);\n\nprint_r($result);</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to reverse a singly linked list in O(n) time. [/INST] // Algorithm to reverse a singly linked list in O(n) time\n//\n//\n// INPUT:  A singly Linked List\n//\n// OUTPUT: A reversed singly Linked List\n\n// Initialize three pointers\n\nNode* prev = NULL; \nNode* curr = head;\nNode* next = NULL;\n\n// Iterate through the linked list, reversing the links as we go\n\nwhile (curr != NULL) {\n    // Store the next node\n    next = curr->next;\n\n    // Reverse the current node's pointer\n    curr->next = prev;\n\n    // Advance the pointers one position\n    prev = curr;\n    curr = next;\n}\n\n// Return the reversed linked list\nreturn prev;</s>"
  },
  {
    "text": "<s>[INST] Design a Ruby program to search through an array and find the first element that satisfies a given condition. [/INST] def search_array(arr, condition)\n    arr.find { |item| condition.call(item) }\nend</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the Kth smallest element from a given array of N elements. [/INST] // A function to find kth smallest element\nint kthSmallest(int arr[], int n, int k)\n{\n    //Sort the given array\n    sort(arr, arr+n);\n \n    // Return k'th element\n    return arr[k-1];\n}</s>"
  },
  {
    "text": "<s>[INST] Design a Python program to find the longest increasing subsequence in a given array. [/INST] def long_increasing_subsequence(arr):\n    # Number of items in given array\n    n = len(arr)\n \n    # Initialize 'lengths' values for all indices\n    lengths = [1]*n\n \n    # Find the longest increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:\n                lengths[i] = lengths[j] + 1\n \n    return lengths</s>"
  },
  {
    "text": "<s>[INST] Suppose you are designing a simple text editor. Write a C++ code to automatically detect and remove comments from a given input string. [/INST] // Function to remove comments from a given input string\nstring removeComments(string input_string)\n{\n    string output_string = \"\";\n    int flag = 0;\n\n    for (int i = 0; i<input_string.length(); i++)\n    {\n        // Check for single line comments\n        if (input_string[i] == '/' && input_string[i+1] == '/')\n            flag = 1;\n\n        // Check for multi-line comments\n        if (input_string[i] == '/' && input_string[i+1] == '*')\n            flag = 2;\n\n        // If single line or multi-line comment section,\n        // ignore the part of the string\n        if (flag == 1 || flag == 2)\n        {\n            if (input_string[i] == '\\n')\n                flag = 0;\n            continue;\n        }\n\n        output_string += input_string[i];\n    }\n\n    return output_string;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a quick SQL query to find the oldest employee in a given department. [/INST] SELECT * FROM employees\nWHERE department_id = :department_id\nORDER BY dob DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the employee who has the lowest salary from the employee table.\n\nEmployee Table\n\nEmployeeName | Department  | Salary\n-------------------------------\nJohn         | IT          | 25000\nMary         | Finance     | 28000\nSam          | Marketing   | 23000\nRandy        | HR          | 32000 [/INST] SELECT EmployeeName, MIN(Salary) FROM Employee TABLE;</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet in C which calculates the mean of a list of numbers.\n\nint nums[] = {2, 3, 4, 5, 6}; [/INST] #include <stdio.h>\n\nint calcMean(int nums[], int size) {\n    int sum = 0;\n    for (int i=0; i<size; i++) {\n        sum += nums[i];\n    }\n    return sum/size;\n}\n\nint main() {\n    int nums[] = {2, 3, 4, 5, 6};\n    int size = sizeof(nums)/sizeof(nums[0]);\n\n    int mean = calcMean(nums, size);\n    printf(\"The mean of the numbers is %d.\", mean);\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code so that it is easier to read and understand.\n\ndef is_string_palindrome(str):\n    revstr=str[::-1] \n    if revstr==str: \n            return true \n    else: \n            return false [/INST] def is_string_palindrome(str):\n    reverse_str = str[::-1] \n    if reverse_str == str:\n        return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to find the sum of the even numbers in a given range using the reduce() method.\n\nlet arr = [1,2,3,4,5,6,7,8,9,10]; [/INST] const sumOfEvenNumbers = arr.reduce((acc, curr) => {\n    if (curr % 2 === 0) {\n        return acc + curr;\n    } \n    return acc;\n}, 0);\nconsole.log(sumOfEvenNumbers);</s>"
  },
  {
    "text": "<s>[INST] Generate a string representation of a binary tree. [/INST] def tree_str(root):\n    if root is None:\n        return ''\n\n    left_str = tree_str(root.left)\n    right_str = tree_str(root.right)\n\n    if left_str != '' and right_str != '':\n        return '(' + left_str + ')' + str(root.val) + '(' + right_str + ')'\n    if left_str != '' and right_str == '':\n        return '(' + left_str + ')' + str(root.val)\n    if left_str == '' and right_str != '':\n        return  str(root.val) + '(' + right_str + ')'\n    else:\n        return str(root.val)</s>"
  },
  {
    "text": "<s>[INST] Write a TensorFlow code snippet to build a convolutional neural network and display the results of the training process. [/INST] import tensorflow as tf\n\n# define a convolutional neural network\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# compile and fit model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5)\n\n# display results\nmodel.evaluate(x_test, y_test)\n['loss', 'accuracy']\n[0.32971992206192017, 0.8856600217819214]</s>"
  },
  {
    "text": "<s>[INST] Create a Python code snippet to identify the root cause of a Software Bug. [/INST] def find_causes(data):\n    # identify the root cause of the bug\n\n    causes = set()\n    for line in data:\n        for cause in line.get('causes', []):\n            causes.add(cause)\n\n    # filter insignificant causes\n    causes = [cause for cause in causes if cause not in insignificant_causes]\n\n    return causes</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code in a more descriptive style and make it easier to read.\n\nfor i in range(1, n):\n    for j in range(1, n):\n        if i + j == n:\n            print(i, j) [/INST] for i in range(1, n):\n    for j in range(1, n):\n        # check if the sum of i and j is equal to n\n        if (i + j) == n:\n            print(i, j)</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to find all the elements in a list that are greater than a specified number.\n\nlst = [1, 5, 10, 15, 27]\nk = 10 [/INST] # Initializing an empty list\nnew_lst = []\n\n# Iterating over the given list\nfor elem in lst:\n  # Appending elements that are greater than 10\n  if elem > k:\n    new_lst.append(elem)\n\n# Printing corresponding result \nprint(new_lst) # Output: [15, 27]</s>"
  },
  {
    "text": "<s>[INST] Determine if the word \"hello\" is present in the provided list.\n\nwords = [\"hi\", \"goodbye\", \"apple\", \"orange\"] [/INST] if \"hello\" in words:\n  print(\"Yes, the word hello is present in the provided list.\")\nelse:\n  print(\"No, the word hello is not present in the provided list.\")</s>"
  },
  {
    "text": "<s>[INST] Generate a random letter from the string provided.\n\nstring = \"Hello World\" [/INST] import random\n\nrandom_letter = random.choice(string) # Output: a randomly generated letter from the string</s>"
  },
  {
    "text": "<s>[INST] Print the total number of keys present in a given dictionary.\n\nphone_numbers = {\n    \"John\" : \"123-456-7890\",\n    \"Jane\" : \"890-567-1234\",\n    \"Jack\" : \"345-678-9012\"\n} [/INST] print(len(phone_numbers)) # Output: 3</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to insert a given string into another string at a certain index.\n\nVariable String = \"The quick brown fox\" \nString To Insert = \"jumps over\"\nIndex = 16 [/INST] The quick brown jumps over fox</s>"
  },
  {
    "text": "<s>[INST] Find a way to insert the given data into a MongoDB database using Mongoose.\n\ndata = [\n    {name: \"John Doe\", age: 34}, \n    {name: \"Jane Smith\", age: 25}\n] [/INST] const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name: {\n    type: String\n  },\n  age: {\n    type: Number\n  }\n});\n\nconst User = mongoose.model('User', userSchema);\n\ndata.forEach( (user) => {\n  const newUser = new User(user);\n  newUser.save()\n    .then( () => console.log('User saved') )\n    .catch( err => console.log(err))\n});</s>"
  },
  {
    "text": "<s>[INST] Create a script that filters the list of strings and returns only the strings that contain the specific, user-specified character.\n\nUser Character: 'a'\nList: ['apple','peach','pear','tangerine','plum','grape','banana'] [/INST] def filter_string(strings, char):\n  result = []\n  for string in strings:\n    if char in string:\n      result.append(string)\n  return result\n\nprint(filter_string(['apple','peach','pear','tangerine','plum','grape','banana'], 'a'))</s>"
  },
  {
    "text": "<s>[INST] Generate a random 2D array with the given dimensions.\n\nRows: 5 \nColumns: 3 [/INST] import numpy as np\n\nrows = 5\ncolumns = 3\n\narr = np.random.randint(0, 11, size=(rows, columns)) \n\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] Change the color of the text to blue.\n\nText: The quick brown fox [/INST] <span style=\"color:blue;\">The quick brown fox</span></s>"
  },
  {
    "text": "<s>[INST] Find the length of a Python list.\n\nList = [1,2,3] [/INST] List = [1,2,3]\n\nlength = len(List)\nprint(length)\n\n# Output\n3</s>"
  },
  {
    "text": "<s>[INST] And the list of product details as a JSON format.\n\nproducts = [\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n] [/INST] [\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n]</s>"
  },
  {
    "text": "<s>[INST] Use the input to write a loop in Python to print each product details.\n\nproducts = [\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n] [/INST] for product in products:\n    print(\"Product name: \" + product['name'] + \", Price: \" + str(product['price']))\n\n# Output\n# Product name: iPhone XS, Price: 1000\n# Product name: iPhone XR, Price: 800\n# Product name: iPad Air, Price: 600</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to remove the element with the value of ‘apple’ from the list.\n\nfruits =[\"banana\", \"apple\", \"mango\", \"orange\"] [/INST] def removeValue(fruits, elem):\n    for e in fruits:\n        if e == elem:\n            fruits.remove(e)\n            break\n\nremoveValue(fruits, \"apple\")\n\nprint(fruits) # ['banana', 'mango', 'orange']</s>"
  },
  {
    "text": "<s>[INST] Edit the following CSS code to make the text red.\n\n.message {\n  font-size: 14px;\n} [/INST] .message {\n  font-size: 14px; \n  color: red;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page that shows the data provided in an interactive table.\n\ndata = [\n  { \"id\": 1, \"first_name\": \"John\", \"last_name\": \"Doe\" },\n  { \"id\": 2, \"first_name\": \"Amy\", \"last_name\": \"Smith\" },\n  { \"id\": 3, \"first_name\": \"Brian\", \"last_name\": \"Green\" }\n] [/INST] <html>\n  <head>\n    <title>Interactive Table</title>\n  </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>First Name</th>\n          <th>Last Name</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for item in data %}\n          <tr>\n            <td>{{ item.id }}</td>\n            <td>{{ item.first_name }}</td>\n            <td>{{ item.last_name }}</td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Return the names of the customers that contain the string “ali”. [/INST] SELECT name \nFROM customers \nWHERE name LIKE '%ali%';</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to generate a list with the numbers from 0 to the provided number.\n\nnum = 10 [/INST] def generateList(n):\n    list = []\n    for i in range(n+1):\n        list.append(i)\n    return list\n\nprint(generateList(num)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to sort all the customers by their first name in ascending order. [/INST] SELECT * FROM customers ORDER BY first_name ASC;</s>"
  },
  {
    "text": "<s>[INST] Use the input to generate a loop in JavaScript to print an increasing count starting from the given number.\n\nnum = 5 [/INST] for (let i = num; i < num + 10; i++) {\n    console.log(i);\n}\n\n# Output\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n# 11\n# 12\n# 13\n# 14</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following linear equation into the standard form y = mx + c: x + 2y = 5 [/INST] y = - x/2 + 5/2 \nThis equation can be written in standard form as y = -0.5x + 2.5</s>"
  },
  {
    "text": "<s>[INST] Design a SQL query to count the number of records in the first 5 rows of the table named \"users\". [/INST] SELECT COUNT(*) FROM users LIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code that creates an array of objects having keys \"name\", \"age\" and \"city\". [/INST] const users = [\n {name: 'John', age: 30, city: 'New York'}, \n {name: 'Lisa', age: 25, city: 'Sydney'},\n {name: 'Alex', age: 27, city: 'London'},\n {name: 'Cathy', age: 28, city: 'Tokyo'},\n {name: 'David', age: 32, city: 'Berlin'} \n];</s>"
  },
  {
    "text": "<s>[INST] How many bytes does a char data type take in C/C++? [/INST] A char data type takes one byte of memory in C/C++.</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to find the area of a triangle where the three sides are given as x, y, and z.\n\nx = 6, y = 7, z = 8 [/INST] public class AreaOfTriangle { \n public static void main(String[] args) {\n  int x = 6, y = 7, z = 8;\n  double s = (x + y + z) / 2;\n  double area = Math.sqrt(s * (s - x) * (s - y) * (s - z));\n  System.out.println(\"Area of triangle: \" + area);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a function in JavaScript that takes an array and returns an object with the count of each element value.\n\narray = [true, false, false, true, false, true] [/INST] function countElements(arr) {\n const obj = {};\n \n arr.forEach(element => {\n  if (obj.hasOwnProperty(element)) {\n   obj[element] += 1;\n  } else {\n   obj[element] = 1;\n  }\n });\n \n return obj;\n}\n\nconst array = [true, false, false, true, false, true];\nconst countedElements = countElements(array);\nconsole.log(countedElements); // { true: 3, false: 3 }</s>"
  },
  {
    "text": "<s>[INST] Given an array of objects, sort them in descending order according to their age.\n\narray = [ {name: 'John', age: 25}, {name: 'Peter', age: 32}, {name: 'Alex', age: 21} ] [/INST] import java.util.Arrays; \nimport java.util.Comparator; \n\npublic class SortByAge { \n\n    public static void main(String[] args) \n    {\n        // Array of objects \n        object[] array = { {name: 'John', age: 25},\n         {name: 'Peter', age: 32}, {name: 'Alex', age: 21} }; \n\n        // Sorting array of objects by age in descending order \n        Arrays.sort(array, Comparator.comparing(o -> o.age, Comparator.reverseOrder())); \n\n        // Printing the sorted array of objects \n        System.out.println(\"Sorted objects array in descending order of age:\"); \n        Arrays.stream(array)\n            .forEach(e -> System.out.println(e.name + \" \" + e.age)); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to clone an array of objects. [/INST] public class CloneObjectArray { \n\n    public static void main(String[] args) \n    { \n        // Creating an array of objects \n        Employee[] employees = {new Employee(\"John\", 25), \n            new Employee(\"Tim\", 30), \n            new Employee(\"Tom\", 35)}; \n\n\t\t// Cloning the array \n        Employee[] clone = employees.clone(); \n\n        // Printing the current array \n        System.out.println(\"Employees array:\"); \n        for (Employee emp : employees) { \n            System.out.println(emp); \n        } \n\n        // Printing the cloned array \n        System.out.println(\"Cloned Employees array:\"); \n        for (Employee emp : clone) { \n            System.out.println(emp); \n        } \n    } \n} \n\nclass Employee implements Cloneable { \n    String name; \n    int age;\n\n    Employee(String name, int age) \n    { \n        this.name = name; \n        this.age = age; \n    } \n\n    // Override clone method \n    @Override\n    protected Object clone() throws CloneNotSupportedException \n    { \n        return super.clone(); \n    } \n\n    @Override\n    public String toString() \n    { \n        return this.name + \" \" + this.age; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Design a JSON object containing Book information such as title, author and publication year. [/INST] {\n \"title\": \"The Catcher in the Rye\",\n \"author\": \"J.D. Salinger\", \n \"publication_year\": 1951\n}</s>"
  },
  {
    "text": "<s>[INST] Explain what a while loop is. [/INST] A while loop is a control flow statement that repeats a set of instructions while a certain condition is true. It consists of a loop condition and a set of instructions that are to be executed as long as the condition remains true. The loop condition is evaluated first, and if it returns true then the instruction set is executed, after which the condition is evaluated again. This process is repeated until the condition returns false, at which point the loop terminates and execution continues at the statement after the loop.</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to find the median of a given list of numbers.\n\n[2, 5, 7, 4, 3] [/INST] def find_median(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n    return median</s>"
  },
  {
    "text": "<s>[INST] What language do we use to write HTML? [/INST] HTML is written in a markup language known as HyperText Markup Language (HTML). HTML is a language for describing web pages. It is used for structuring and presenting content for the web. It is written in the form of HTML elements consisting of tags enclosed in angle brackets.</s>"
  },
  {
    "text": "<s>[INST] Write a method that produces a random password with the specified number of characters. [/INST] import string\nimport random\n\ndef generate_password(characters):\n  password = ''\n\n  for _ in range(characters):\n    password += random.choice(string.ascii_letters + string.digits)\n\n  return password</s>"
  },
  {
    "text": "<s>[INST] Generate a list of all pairwise combinations of the numbers in the given list.\n\n[1,2,3,4] [/INST] def combinations(list_of_numbers):\n  result = []\n\n  for i in range(len(list_of_numbers)):\n    for j in range(len(list_of_numbers)):\n      if i != j:\n        result.append([list_of_numbers[i], list_of_numbers[j]])\n  \n  return result</s>"
  },
  {
    "text": "<s>[INST] Why is JavaScript called a multi-paradigm language? [/INST] JavaScript is called a multi-paradigm language because it allows developers to use multiple different programming paradimms such as object-oriented programming, functional programming, event-driven programming, and procedural programming. This flexibility allows developers to have more control over the structure of their code and enables them to write programs in whatever style they desire. It also makes JavaScript more versatile, allowing developers to find the best approach for any given problem.</s>"
  },
  {
    "text": "<s>[INST] Implement a function to calculate the sum of digits of a given positive integer. [/INST] def sum_digits(n):\n  total = 0\n  while n:\n    total += n % 10\n    n //= 10\n  return total</s>"
  },
  {
    "text": "<s>[INST] Design a Python program to read string inputs and print out the reverse of the same [/INST] def reverse_string(string):\n  string = string[::-1]\n  return string</s>"
  },
  {
    "text": "<s>[INST] Generate a valid python loop to print out the elements of a list.\n\nList = [1,2,3,4,5] [/INST] for element in List:\n    print(element)</s>"
  },
  {
    "text": "<s>[INST] Find the most suitable 10-lines python code to generate all permutations of a 3 letters word [/INST] from itertools import permutations \ndef all_permutations(str): \n    permList = permutations(str) \n  \n    for perm in list(permList): \n        print(''.join(perm)) \n  \nif __name__ == \"__main__\": \n    string = \"ABC\"\n    all_permutations(string)</s>"
  },
  {
    "text": "<s>[INST] Using this list, write a Python program to print out all the duplicate elements\n\nmy_list = [1, 2, 3, 2, 4, 3] [/INST] duplicate = []\n\nfor value in my_list:\n    if my_list.count(value) > 1:\n        if value not in duplicate:\n            duplicate.append(value)\n\nprint(duplicate)</s>"
  },
  {
    "text": "<s>[INST] Create a program in Python which takes any string as an input and prints the number of each of its characters\n\nhello [/INST] character_count = {'h':1, 'e':1, 'l':2, 'o':1}</s>"
  },
  {
    "text": "<s>[INST] Write a snippet of code to swap two variables without using the third variable\n\na = 5\nb = 10 [/INST] a, b = b, a</s>"
  },
  {
    "text": "<s>[INST] Generate a valid syntax to remove the last element of a list [/INST] my_list.pop()</s>"
  },
  {
    "text": "<s>[INST] Construct a program to find the result of the following equation\n\n(x-1)^2 [/INST] def equation(x):\n    return (x-1)**2</s>"
  },
  {
    "text": "<s>[INST] Design a Python program which prints the elements in reverse order\n\nmy_list = [1,2,3,4,5] [/INST] def print_reverse(my_list):\n    for i in range(len(my_list)-1, -1, -1):\n        print(my_list[i])\n\nprint_reverse(my_list)</s>"
  },
  {
    "text": "<s>[INST] Input an array and remove all duplicates from the given array.\n\narr = [1, 2, 3, 1, 2] [/INST] def remove_duplicates(arr): \n    result = [] \n    for item in arr: \n        if item not in result: \n            result.append(item) \n    return result\n\nprint(remove_duplicates(arr)) \n# Output: [1, 2, 3]</s>"
  },
  {
    "text": "<s>[INST] Input a sentence with repeated words and write a Python code to remove all the repeated words.\n\nsentence = 'The the cat cat sat sat on on the the mat' [/INST] def remove_repeated_words(sentence):\n    words = sentence.split(\" \")\n    result = []\n\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return \" \".join(result)\n\nprint(remove_repeated_words(sentence))\n# Output: The cat sat on the mat</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby method that takes two integers, n and m, as arguments and return an array containing the even numbers from n to m.\n\nm = 10\nn = 1 [/INST] def even_numbers_array(n, m)\n  evens = []\n  (n..m).each do |i|\n    evens << i if i.even?\n  end\n  evens\nend\n\np even_numbers_array(n, m) \n# Output: [2, 4, 6, 8, 10]</s>"
  },
  {
    "text": "<s>[INST] Create a function in C# that takes a string and returns true if all the characters are unique in the string. [/INST] public static bool IsUnique(string str)\n{\n    char[] charArray = str.ToCharArray();\n    HashSet<char> charSet = new HashSet<char>(charArray);\n    return str.Length == charSet.Count;\n}</s>"
  },
  {
    "text": "<s>[INST] Input two arrays and write a program to merge the two given sorted arrays into one sorted array.\n\narr1 = [3, 5, 7]\narr2 = [2, 4] [/INST] def merge_arrays(arr1, arr2):\n    # creating a new list to store the result\n    merged_arr = []\n    # looping over the two arrays\n    for i in range(len(arr1)):\n        merged_arr.append(arr1[i])\n    for i in range(len(arr2)):\n        merged_arr.append(arr2[i])\n    # sorting function to sort the merged array\n    merged_arr.sort()\n    return merged_arr\n\n# Driver code\nnew_arr = merge_arrays(arr1, arr2)\n\n# to print the sorted merged array\nprint(new_arr)\n# Output: [2, 3, 4, 5, 7]</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that displays one web page with two vertical panenls. [/INST] <html>\n  <head>\n    <style>\n      #left, #right{\n        height: 300px;\n        width: 200px;\n        float: left;\n        padding: 10px;\n        background-color: #ddd;\n      }\n    </style>\n  </head>\n  <body>\n    <div contenteditable=\"true\" id=\"left\"></div>\n    <div contenteditable=\"true\" id=\"right\"></div>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a TensorFlow 2.0 program that takes a 3D array and normalizes the values by dividing each element by the sum of all elements in the array. [/INST] import numpy as np \nimport tensorflow as tf\n\n# Function to normalize a 3D array  \n# by dividing each element by the sum of all elements \ndef normalize3d(arr): \n   \n    # Shape of the array \n    m, n, o = arr.shape\n   \n    # Calculating sum \n    sum_ = np.sum(arr) \n      \n    # Initializing the output array \n    output = np.empty_like(arr) \n      \n    # calculating the normalized value \n    # and storing in output array \n    for i in range(m): \n        for j in range(n): \n            for k in range(o): \n                    output[i][j][k] = arr[i][j][k]/sum_ \n                      \n    # returning the normalized array \n    return output \n\n# Initializing the array\narr = np.random.randint(1, 10, (2, 2, 4))\n\n# Using tensorflow method\noutput = tf.expand_dims(tf.constant(arr, dtype=tf.float32), axis=-1) / tf.math.reduce_sum(tf.constant(arr))\n\n# Printing the normalized array using both methods\nprint(normalize3d(arr))\nprint(output)</s>"
  },
  {
    "text": "<s>[INST] Write a shell script that input an address and open the corresponding website in the default web browser. [/INST] #!/bin/bash\naddress=$1\nxdg-open \"https://www.$address\"</s>"
  },
  {
    "text": "<s>[INST] Generate a PHP program to accept a string as an input and convert it to uppercase. [/INST] <?php\n\n$str = 'Hello World!';\necho strtoupper($str);\n\n// Output: HELLO WORLD!\n?></s>"
  },
  {
    "text": "<s>[INST] Write a function to check if the given string `str1` is a permutation of the string `str2`\n\nstr1 = 'program'\nstr2 = 'gramopr' [/INST] def is_permutation(str1, str2): \n    \"\"\"\n    Function to check if the given string str1 is a permutation of the string str2 \n    \n    Parameters: \n    str1 (str): first string \n    str2 (str): second string \n    \n    Returns: \n    bool: True if str1 is a permutation of str2, False otherwise\n    \"\"\"\n    if (len(str1) != len(str2)): \n        return False\n    else: \n        count = [0] * 128\n        for i in range(len(str1)):\n            count[ord(str1[i])] +=1\n            count[ord(str2[i])] -=1\n        for i in range(128):\n            if count[i] != 0: \n                return False\n        return True</s>"
  },
  {
    "text": "<s>[INST] What is the most efficient way to insert a new element into an existing unsorted array? [/INST] The most efficient way to insert a new element into an existing unsorted array is to append it to the end of the array. This is the fastest way since no shifting of elements is required. This is O(1) time complexity.</s>"
  },
  {
    "text": "<s>[INST] Format the following array of numbers using Python.\n\narr = [3, 1, 4, 5, 9, 8] [/INST] arr = [3, 1, 4, 5, 9, 8]\n\n# sorting the array\narr.sort()\n\n# print the array\nprint(arr)\n\n# Output:\n[1, 3, 4, 5, 8, 9]</s>"
  },
  {
    "text": "<s>[INST] Construct a basic data structure to store a dictionary of words and their definitions. [/INST] class WordDictionary(object): \n    def __init__(self): \n        self.words = {} \n\n    def add_definition(self, word, definition): \n        self.words[word] = definition\n\n    def lookup_definition(self, word): \n        if word in self.words: \n            return self.words[word]\n        else: \n            return None\n\n    def delete_word(self, word): \n        del self.words[word]</s>"
  },
  {
    "text": "<s>[INST] Reverse an array of integers using Python.\n\narr = [1, 2, 3, 4, 5] [/INST] arr = [1, 2, 3, 4, 5]\n \n# reversing the array\narr.reverse()\n \n# print the reversed array\nprint(arr)\n \n# Output:\n[5, 4, 3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] What is a common use case for a ternary operator? [/INST] A common use case for a ternary operator is to use it as a shortcut for an if/else statement. A ternary operator can be used to quickly assign the result of a boolean expression to a variable. For example, the following code is similar to an if/else statement:\n\na = 5\nb = 10\nresult = a if a > b else b\n\nIn this example, if a is greater than b, then result will be assigned the value of a. Otherwise, it will be assigned the value of b.</s>"
  },
  {
    "text": "<s>[INST] Insert a comment that explains what the following C++ code does.\n\nsum = 0\nfor (i = 0; i < 10; i++):\n  sum += arr[i] [/INST] // Set \"sum\" to 0 \n// Iterate over the array \"arr\", from its 0th element to 9th element \n// and add each element of the array to the \"sum\" at each iteration</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following Python function so it returns the opposite of the original output.\n\ndef returnsThree() :\n return 3 [/INST] def returnsThree():\n    return -3</s>"
  },
  {
    "text": "<s>[INST] Generate a SQL query to find the names of all users whose credit scores are lower than 50. [/INST] SELECT name\nFROM users\nWHERE credit_score < 50</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the average credit score of users who are 18 years or younger. [/INST] SELECT AVG(credit_score)\nFROM users\nWHERE age <= 18</s>"
  },
  {
    "text": "<s>[INST] Given a SQL table of user accounts, write a SQL query to find the account with the lowest number of login attempts. [/INST] SELECT * \nFROM users\nORDER BY login_attempts ASC \nLIMIT 1</s>"
  },
  {
    "text": "<s>[INST] Generate a theta join query to find companies located in a given zip code.\n\nZip Code: 45112 [/INST] SELECT * \nFROM companies c\nINNER JOIN locations l\nON c.company_id = l.company_id \nWHERE l.zip_code = '45112'</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following Ruby method using an empty line between each statement.\n\ndef doubles(array)\n  array.map { |e| e * 2 }\nend [/INST] def doubles(array)\n  array.map { |e| \n    e * 2 \n  }\nend</s>"
  },
  {
    "text": "<s>[INST] Describe the basics of programming for a beginner. [/INST] Programming is the process of writing computer code to create programs that can perform specific tasks or operations. It involves using a programming language to give instructions to a computer to carry out a specific task. A program can involve calculations, data processing, and more complex tasks such as simulation, game-playing, and artificial intelligence. A programmer typically communicates their code in a language that can be understood by the computer, such as HTML, Python, or Java. Programming can be a rewarding and challenging experience, as programmers are often creating something that did not previously exist.</s>"
  },
  {
    "text": "<s>[INST] Write a code for a Javascript program to return the nth Fibonacci number.\n\n8 [/INST] // returns the nth Fibonacci number\nfunction nthFibonacciNumber(n) {\n    let fib = [0, 1];\n    for (i=2; i<=n; i++)\n    {\n      fib[i] = fib[i-2] + fib[i-1];\n    }\n    return fib[n];\n}\n\nconsole.log(nthFibonacciNumber(8));</s>"
  },
  {
    "text": "<s>[INST] Write a code in C to get the greatest common divisor between two numbers.\n\n25, 10 [/INST] #include <stdio.h>\n \nint gcd(int a, int b)\n{\n    if (a == 0)\n        return b;\n    return gcd(b % a, a);\n}\n \n// Driver program to test above function\nint main()\n{\n    int a = 25, b = 10;\n    printf(\"GCD of %d and %d is %d \", a, b, gcd(a, b));\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] How can you create a for loop in Python to loop through a list? [/INST] # loop through a list\nlist = [1, 2, 3, 4, 5]\nfor item in list:\n    print(item)</s>"
  },
  {
    "text": "<s>[INST] Write a code to reverse a stack and return the new stack.\n\nStack: [1, 2, 3, 4, 5] [/INST] #include<stack>\n#include<iostream>\n\nusing namespace std;\n\nstack<int> reverseStack(stack<int> s) {\n    stack<int> tempStack;\n    while (!s.empty()) {\n        int temp = s.top();\n        tempStack.push(temp);\n        s.pop();\n    }\n    return tempStack;\n}\n\nint main() {\n    stack<int> s;\n    s.push(1); s.push(2);\n    s.push(3); s.push(4);\n    s.push(5);\n\n    stack<int> revStack = reverseStack(s);\n    while (!revStack.empty()) {\n        cout << revStack.top() << \" \";\n        revStack.pop();\n    }\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] How can you represent an integer in binary? [/INST] Integers can be represented in binary using a series of ones and zeroes. In a binary system, the position of a bit (binary digit) indicates its place value in the number. For example, the rightmost bit has the value of 1, the second-rightmost bit has the value of 2, the third-rightmost bit has the value of 4, and so on.</s>"
  },
  {
    "text": "<s>[INST] Write a code in C# to convert a decimal number to binary format with or without bitwise operators.\n\n15 [/INST] public static class Program\n{\n  public static string DecimalToBinary(int n)\n  {\n    string binary = \"\";\n    int remainder;\n    //without using bitwise operators\n    while (n != 0)\n    {\n      remainder = n % 2;\n      n /= 2;\n      binary = remainder + binary; \n    }\n    return binary;\n  }\n \n  public static void Main() \n  {\n    string binary = DecimalToBinary(15);\n    Console.WriteLine(binary);\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of 10 numbers in Java and assign random values from 1 to 10 to each item of the array. [/INST] int[] nums = new int[10];\nRandom rand = new Random();\n\nfor(int i=0; i<nums.length; i++) {\n    nums[i] = rand.nextInt(10) + 1;\n}</s>"
  },
  {
    "text": "<s>[INST] What is the maximum limit of frames which a HTML page can hold? [/INST] A HTML page can contain up to 16,000 frames.</s>"
  },
  {
    "text": "<s>[INST] Find the 5th element of the list in Python.\n\nlist = [12, 34, 87, 90, 80, 21] [/INST] element = list[4]\nprint(element) # 80</s>"
  },
  {
    "text": "<s>[INST] Write a function in C++ that takes an integer array as a parameter and returns the average value in the array. [/INST] float getAverage(int arr[], int n){ \n    int sum=0;\n    for (int i=0; i<n; i++) \n        sum += arr[i];\n  \n    return (sum/n); \n}</s>"
  },
  {
    "text": "<s>[INST] Extract a numeric value from the following string in Python.\n\nmyString = \"The length of the tree is 25 meters\" [/INST] import re\n\nnewString = re.findall(r\"[\\d.]+\", myString)\nprint(newString[0]) # 25</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all the students with a last name beginning with 'D'. [/INST] SELECT * \nFROM students \nWHERE last_name LIKE 'D%';</s>"
  },
  {
    "text": "<s>[INST] Write a CSS property to display an element as a flex item. [/INST] display: flex;</s>"
  },
  {
    "text": "<s>[INST] Create a tuple containing user data about a person. [/INST] user_data = (\"John Doe\", 29, \"Male\", \"New York\")</s>"
  },
  {
    "text": "<s>[INST] Find the middle element of a given linked list.\n\n1 -> 2 -> 3 -> 4 -> 5 [/INST] The middle element of the linked list is 3.</s>"
  },
  {
    "text": "<s>[INST] Write a regex pattern to find all words that start with 'a' in a sentence.\n\nSentence: \"All animals are amazing\" [/INST] \"\"\"\nFind all words that start with 'a' in a sentence\n\"\"\"\n\nimport re\n\ndef find_words_with_a(sentence):\n    pattern = r\"\\b[aA]\\w+\\b\"\n    matches = re.findall(pattern, sentence)\n    return matches\n\nif __name__ == '__main__':\n    sentence = \"All animals are amazing\"\n    print(find_words_with_a(sentence))</s>"
  },
  {
    "text": "<s>[INST] Write a function to convert a 3 letter acronym to its full form.\n\nAcronym: \"GDP\" [/INST] \"\"\"\nConvert a 3 letter acronym to its full form\n\"\"\"\n\ndef acronym_to_full_form(acronym):\n    acronyms = {\n        'GDP': 'Gross Domestic Product',\n        'CIA': 'Central Intelligence Agency',\n        'NASA': 'National Aeronautics and Space Administration'\n    }\n\n    return acronyms[acronym]\n\nif __name__ == '__main__':\n    acronym = \"GDP\"\n    print(acronym_to_full_form(acronym))</s>"
  },
  {
    "text": "<s>[INST] Generate a random password using a given string of characters.\n\nString: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\" [/INST] \"\"\"\nGenerate a random password using a given string of characters\n\"\"\"\n\nimport random \n\ndef generate_password(string):\n    password = ''\n    for _ in range(16):\n        password += random.choice(string)\n    return password\n\nif __name__ == '__main__':\n    string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"\n    print(generate_password(string))</s>"
  },
  {
    "text": "<s>[INST] Given a list of student's grades, write a program to calculate their average.\n\nGrades = [90, 95, 80, 75] [/INST] \"\"\"\nCalculate the average of a given list of grades\n\"\"\"\n\ndef average(grades):\n    sum = 0\n    for grade in grades:\n        sum += grade\n    \n    return sum / len(grades)\n\nif __name__ == '__main__':\n    grades = [90, 95, 80, 75]\n    print(average(grades))</s>"
  },
  {
    "text": "<s>[INST] Assign a numerical value to a given string.\n\n\"Apple\" [/INST] \"Apple\" = 1</s>"
  },
  {
    "text": "<s>[INST] Create a web form in HTML with two fields - first name and last name [/INST] <form>\n  <label for=\"firstName\">First Name</label><br>\n  <input type=\"text\" id=\"firstName\" name=\"firstName\"><br><br>\n \n  <label for=\"lastName\">Last Name</label><br>\n  <input type=\"text\" id=\"lastName\" name=\"lastName\"><br><br>\n</form></s>"
  },
  {
    "text": "<s>[INST] Compose a style sheet in CSS that will make all text with the class \"blue\" have a blue color. [/INST] .blue { \n    color: blue; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a query in SQL to find the product IDs of all items having a given color.\n\ncolor = \"red\" [/INST] SELECT product_id \nFROM products \nWHERE color = 'red';</s>"
  },
  {
    "text": "<s>[INST] Design a method in Ruby that can be used to determine if a given number is a prime number or not.\n\nnumber = 7 [/INST] def prime?(number) \n    (2..number/2).each do |i|\n        if number % i == 0\n            return false\n        end\n    end\n    return true\nend</s>"
  },
  {
    "text": "<s>[INST] Construct a query in Java to find the last day of the month. [/INST] Calendar now = Calendar.getInstance();\nint lastDayOfMonth = now.getActualMaximum(Calendar.DAY_OF_MONTH);</s>"
  },
  {
    "text": "<s>[INST] Develop a machine learning model in Python to predict the credit risk of a customer based on their bank transaction data.\n\n<100 rows of bank transaction data> [/INST] #import necessary models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#split data into train and test sets\nx_train, x_test, y_train, y_test = train_test_split(bank_data, credit_risk, test_size = 0.3)\n\n#create the machine learning model\nlr_model = LogisticRegression()\n\n#train the model\nlr_model.fit(x_train, y_train)</s>"
  },
  {
    "text": "<s>[INST] Generate a method in C++ to sort a given array in descending order.\n\narr = [3,5,1] [/INST] void sort_descending(int arr[], int n) \n{ \n    int temp; \n    for (int i=0; i<n; i++) \n    { \n        for (int j=i+1; j<n; j++) \n        { \n            if (arr[i] < arr[j]) \n            { \n                temp = arr[i]; \n                arr[i] = arr[j]; \n                arr[j] = temp; \n            } \n        } \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a class in Scala to define dog characteristics such as color, breed, and size. [/INST] class Dog(color:String, breed:String, size:String){\n  def description = s\"This dog is a $color $breed, and is $size.\" \n}</s>"
  },
  {
    "text": "<s>[INST] Use HTML and CSS to create a navigation bar on the top of the page. [/INST] <header>\n    <nav>\n        <ul>\n            <li><a href=\"#\">Home</a></li>\n            <li><a href=\"#\">About</a></li>\n            <li><a href=\"#\">Blog</a></li>\n            <li><a href=\"#\">Contact</a></li>\n        </ul>\n    </nav>\n</header>\n\n<style>\nheader {\n    background-color: #222;\n}\n\nnav {\n    float: right;\n    margin-right:50px;\n}\n\nul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n} \n\nli {\n    float: left;\n}\n\nli a {\n    display: block;\n    color: white;\n    text-align: center;\n    padding: 14px 25px;\n    text-decoration: none;\n}\n\nli a:hover {\n    background-color: #111;\n}\n</style></s>"
  },
  {
    "text": "<s>[INST] Create a regex pattern in Python that can extract URL from a text string.\n\ntext = \"Visit http://www.example.com for more information.\" [/INST] import re\n\npattern = re.compile(r'(https?://\\S+)')\nurls = re.findall(pattern, text)</s>"
  },
  {
    "text": "<s>[INST] Write a method that takes a parameter, text, and returns the words in the text in reverse order.\n\ntext = \"Hello world!\" [/INST] def reverse_words(text):\n  words = text.split(\" \");\n  reversedWords = words[::-1];\n  return \" \".join(reversedWords);</s>"
  },
  {
    "text": "<s>[INST] Analyze the following code and answer the following question: Is there a bug in this code?\n\ndef foo(num):\n  if num == 0:\n    return 1\n  else:\n    return foo(num - 1) [/INST] Yes, there is a bug in this code. The function `foo` does not have a base case and will cause an infinite recursion if it is called with a non-zero argument. The base case should be if `num == 0` then `return 1` else `return foo(num - 1)`.</s>"
  },
  {
    "text": "<s>[INST] Generate HTML code for a table that displays the result of multiplication for the numbers from 1 to 10. [/INST] <table>\n  <thead>\n    <tr>\n      <th>x</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>6</td>\n      <td>8</td>\n      <td>10</td>\n      <td>12</td>\n      <td>14</td>\n      <td>16</td>\n      <td>18</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n      <td>12</td>\n      <td>15</td>\n      <td>18</td>\n      <td>21</td>\n      <td>24</td>\n      <td>27</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>4</td>\n      <td>8</td>\n      <td>12</td>\n      <td>16</td>\n      <td>20</td>\n      <td>24</td>\n      <td>28</td>\n      <td>32</td>\n      <td>36</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>5</td>\n      <td>10</td>\n      <td>15</td>\n      <td>20</td>\n      <td>25</td>\n      <td>30</td>\n      <td>35</td>\n      <td>40</td>\n      <td>45</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>6</td>\n      <td>12</td>\n      <td>18</td>\n      <td>24</td>\n      <td>30</td>\n      <td>36</td>\n      <td>42</td>\n      <td>48</td>\n      <td>54</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>7</td>\n      <td>14</td>\n      <td>21</td>\n      <td>28</td>\n      <td>35</td>\n      <td>42</td>\n      <td>49</td>\n      <td>56</td>\n      <td>63</td>\n      <td>70</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>8</td>\n      <td>16</td>\n      <td>24</td>\n      <td>32</td>\n      <td>40</td>\n      <td>48</td>\n      <td>56</td>\n      <td>64</td>\n      <td>72</td>\n      <td>80</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>9</td>\n      <td>18</td>\n      <td>27</td>\n      <td>36</td>\n      <td>45</td>\n      <td>54</td>\n      <td>63</td>\n      <td>72</td>\n      <td>81</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <td>10</td>\n      <td>10</td>\n      <td>20</td>\n      <td>30</td>\n      <td>40</td>\n      <td>50</td>\n      <td>60</td>\n      <td>70</td>\n      <td>80</td>\n      <td>90</td>\n      <td>100</td>\n    </tr>\n  </tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Create a method to convert a given number to Roman numeral format.\n\nnum = 2020 [/INST] def int_to_roman(num):\n  roman_numerals = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M'\n  }\n  result = ''\n  for n in sorted(roman_numerals.keys(), reverse=True):\n    count = num // n\n    result += roman_numerals[n] * count\n    num %= n\n  return result\n\nif __name__ == '__main__':\n  num = 2020\n  print(int_to_roman(num))</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm that takes two integers and returns the smallest common multiple of the two numbers.\n\nx = 12\ny = 24 [/INST] def smallest_common_multiple(x, y):\n  for i in range(1, y+1):\n    if (i % x == 0) and (i % y == 0):\n      return i\n\nif __name__ == '__main__':\n  x = 12\n  y = 24\n  print(smallest_common_multiple(x, y))</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to calculate the square root of a number provided by the user. [/INST] def square_root(number):\n    \"\"\"This program takes a number and calculates its square root.\"\"\"\n    return number**0.5\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The square root of \", num, \" is \", square_root(num))</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes an array and prints out the biggest number in it.\n\n[1, 7, 2, 11, 4] [/INST] def find_max_num(nums_list):\n    \"\"\"This function takes an array and prints out the biggest number in it.\"\"\"\n    max_num = nums_list[0]\n    for num in nums_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nnums_list = [1, 7, 2, 11, 4]\nprint(find_max_num(nums_list))</s>"
  },
  {
    "text": "<s>[INST] Given the following array, delete all occurrences of the number 4.\n\nlist1 = [4, 3, 4, 2, 3, 4, 4] [/INST] list1 = [4, 3, 4, 2, 3, 4, 4]\n\ndef delete_four(arr):\n    \"\"\"This function deletes all occurrences of the number 4 in the given array\"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 4:\n            arr.pop(i)\n            i -= 1\n    return arr\n\nprint(delete_four(list1))</s>"
  },
  {
    "text": "<s>[INST] Create a database query that shows the average price of all items. [/INST] SELECT AVG(price)\nFROM items;</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that selects the top three most recently purchased products.\n\nTable Name: Purchases\nColumns: Product Name, Date [/INST] SELECT * FROM Purchases ORDER BY Date DESC LIMIT 3;</s>"
  },
  {
    "text": "<s>[INST] Develop a for loop in Javascript to output integers from 0 to 10 [/INST] for (let i = 0; i < 11; i++) {\n    console.log(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to replace all non-alphanumeric characters with underscores.\n\nHello, World! [/INST] public class ReplaceNonAlpha {\n \n  public static void main(String[] args) {\n \n    String string = \"Hello, World!\";\n \n    string = string.replaceAll(\"[^A-Za-z0-9]\", \"_\");\n    System.out.println(string);\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a C++ code snippet to output a Fibonacci sequence with a given number of elements\n\n7 [/INST] #include <iostream> \n\nusing namespace std; \n  \nint Fibonacci(int n) \n{ \n    if (n <= 1) \n        return n; \n    return Fibonacci(n - 1) + Fibonacci(n - 2); \n} \n\nint main () \n{ \n    int n;\n    cout<<\"Enter the number of elements: \";\n    cin>>n; \n    cout << \"Fibonacci sequence: \"; \n    for (int i = 0; i < n; i++) \n        cout << Fibonacci(i) <<\" \"; \n  \n    return 0; \n} ;</s>"
  },
  {
    "text": "<s>[INST] Modify the following python program to include a comment explaining the purpose of the code\n\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num [/INST] # This program is used to calculate the sum of a given list of numbers\n\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num</s>"
  },
  {
    "text": "<s>[INST] Analyze the following code and suggest a modification\n\ndef hello():\n    print('Hello!') [/INST] # This code prints out \"Hello!\" when called.\n# A modification to include a parameter for a name would be as follows:\ndef hello(name):\n    print('Hello, ' + name + '!')</s>"
  },
  {
    "text": "<s>[INST] Design a CSS style to make an element a circle and have a red border [/INST] #circle {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    border: 1px solid red;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to get the number of customers per country\n\nTable Name: Customers\nColumns: Name, Country [/INST] SELECT Country, COUNT(*) AS NumberOfCustomers \nFROM Customers\nGROUP BY Country;</s>"
  },
  {
    "text": "<s>[INST] Use Swift to print a welcome message in the console [/INST] print(\"Welcome to Swift!\")</s>"
  },
  {
    "text": "<s>[INST] Modify the following JavaScript code to find all of the prime numbers from 1 to 100\n\nfor (let i = 1; i <= 10; i++) {\n    console.log(i);\n} [/INST] for (let i = 1; i <= 100; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n        if (i % j == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        console.log(i);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Provide a regular expression to find all the strings that starts with an alphabetical character followed by a sequence of letters, digits, and underscores. [/INST] ^[A-Za-z]+\\w*$</s>"
  },
  {
    "text": "<s>[INST] Write a function to take a list of strings and return true if any element in the list starts with the letter \"t\"\n\n['dog', 'turtle', 'car', 'cat'] [/INST] true</s>"
  },
  {
    "text": "<s>[INST] Create a function that processes an array to remove all the duplicated elements\n\n[1, 1, 2, 5, 6, 6, 10] [/INST] def remove_duplicates(arr):\n  new_arr = []\n  \n  for i in arr:\n    if i not in new_arr:\n      new_arr.append(i)\n  \n  return new_arr\n  \nremove_duplicates([1, 1, 2, 5, 6, 6, 10])\n# returns [1, 2, 5, 6, 10]</s>"
  },
  {
    "text": "<s>[INST] Create a pandas dataframe to display the given data as a table.\n\nName     Age     City\nAlice    25      London\nBob      32      Tokyo [/INST] import pandas as pd\n\ndata = [\n {'Name': 'Alice', 'Age': 25, 'City': 'London' },\n {'Name': 'Bob', 'Age': 32, 'City': 'Tokyo' }\n ]\n\ndata_frame = pd.DataFrame(data)\nprint(data_frame)\n\nOutput:\nName  Age     City\n0  Alice    25    London\n1    Bob    32     Tokyo</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select customers who have an email address ending with \".com\". [/INST] SELECT *\nFROM customers\nWHERE email LIKE '%.com'</s>"
  },
  {
    "text": "<s>[INST] Create a SQL table called \"products\" to store information about products. [/INST] CREATE TABLE products (\n    id INTEGER PRIMARY KEY,\n    name TEXT, \n    description TEXT,\n    price DECIMAL(10,2)\n);</s>"
  },
  {
    "text": "<s>[INST] Generate a Python code snippet to print the list of numbers from 0 to 9. [/INST] for i in range(0,10):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to list the names of people who live in the \"Sacramento\" city. [/INST] SELECT name FROM people WHERE city=\"Sacramento\";</s>"
  },
  {
    "text": "<s>[INST] Modify the given JavaScript code to display \"Hello World\" using alert.\n\nlet message = 'Hi';\nalert(message); [/INST] let message = 'Hello World';\nalert(message);</s>"
  },
  {
    "text": "<s>[INST] Devise a Python code snippet to return the last character of a given string.\n\nstring = \"stackoverflow\" [/INST] last_char = string[-1]\nprint(last_char)</s>"
  },
  {
    "text": "<s>[INST] Construct an HTML form to collect the name, address and phone number of a user. [/INST] <form>\n    <label>Name:</label><br>\n    <input type=\"text\" name=\"name\"><br>\n    <label>Address:</label><br>\n    <input type=\"text\" name=\"address\"><br>\n    <label>Phone number:</label><br>\n    <input type=\"text\" name=\"phone\"><br>\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Develop a SQL query to delete all entries with discount greater than 10 in the \"products\" table. [/INST] DELETE FROM products WHERE discount > 10;</s>"
  },
  {
    "text": "<s>[INST] Design a C++ program to convert a given number from binary to decimal.\n\n<<noinput>> [/INST] #include<iostream>\n#include<math.h>\n\nint BinToDec(long long n) \n{ \n    int decimalNumber = 0, i = 0, remainder; \n    while (n!=0) \n    { \n        remainder = n % 10; \n        n /= 10; \n        decimalNumber += remainder*pow(2,i); \n        ++i; \n    } \n    return decimalNumber; \n}\n\nint main()\n{\n    long long bNum;\n    std::cout << \"Enter a binary number: \";\n    std::cin >> bNum;\n    int dec = BinToDec(bNum);\n    std::cout << \"Decimal Representation of \" << bNum << \" is \" << dec << std::endl;\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a HTML form to collect the name , age and gender of the user. [/INST] <form>\n    <label>Name:</label><br>\n    <input type=\"text\" name=\"name\"><br>\n    <label>Age:</label><br>\n    <input type=\"text\" name=\"age\"><br>\n    <label>Gender:</label><br>\n    <select name=\"gender\">\n        <option value=\"male\">Male</option>\n        <option value=\"female\">Female</option>\n        <option value=\"other\">Other</option>\n    </select><br>\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Generate an HTML page which contains the following elements: a heading, a paragraph, and a button. [/INST] <html>\n    <head>\n        <title>My HTML Page</title>\n    </head>\n    <body>\n        <h1>Hello World!</h1>\n        <p>This is a simple HTML page created using code.</p>\n        <button>Click Me!</button>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that returns a list of cities in a given state.\n\nstate='New York' [/INST] SELECT City\nFROM List_of_Cities \nWHERE State='New York'</s>"
  },
  {
    "text": "<s>[INST] Construct a class to represent a basic calculator with functions for addition, subtraction, multiplication and division. [/INST] class Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b</s>"
  },
  {
    "text": "<s>[INST] Write a function to create a matrix NxN with values of 0 filled in. [/INST] def generate_matrix(n):\n    matrix = []\n    for _ in range(n):\n        matrix.append([0 for _ in range(n)])\n    return matrix</s>"
  },
  {
    "text": "<s>[INST] Design a function to input an array and sort it using QuickSort algorithm. [/INST] def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)</s>"
  },
  {
    "text": "<s>[INST] Create a program for calculating the surface area of a cube. [/INST] def cube_area(length):\n    # Surface area of a cube = 6* (length)^2 \n    return 6* (length**2)</s>"
  },
  {
    "text": "<s>[INST] Write a function for finding the minimum value in a given array. [/INST] def find_min(arr):\n    min_value = arr[0]\n    for element in arr:\n        if (element < min_value):\n            min_value = element\n    return min_value</s>"
  },
  {
    "text": "<s>[INST] Write a REGEX pattern to match strings consisting of three numbers separated by a dash. [/INST] ^\\d{1,3}-\\d{1,3}-\\d{1,3}$</s>"
  },
  {
    "text": "<s>[INST] Design a function to calculate the GCD (greatest common divisor) of two given integers. [/INST] def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a</s>"
  },
  {
    "text": "<s>[INST] Construct a script that takes inputs from the user and prints out the Fibonacci sequence up to a given number. [/INST] def fibonacci_seq(n):\n    # Start and endpoints for the Fibonacci sequence\n    num1 = 0 \n    num2 = 1\n  \n    # List to store the sequence \n    Fibonacci_seq = [num1, num2]\n  \n    while num2 < n:\n        num3 = num1 + num2 \n        num1 = num2 \n        num2 = num3\n        Fibonacci_seq.append(num2)\n  \n    print(Fibonacci_seq)</s>"
  },
  {
    "text": "<s>[INST] Generate a function in Python to compute the area of a rectangle. [/INST] def area_rectangle(length, breadth): \n    return length * breadth</s>"
  },
  {
    "text": "<s>[INST] Modify the given line of code to print the message \"Hello World!\"\n\nprint(\"Good Luck!\") [/INST] print(\"Hello World!\")</s>"
  },
  {
    "text": "<s>[INST] Create a method to filter out odd numbers from an array.\n\narray = [6, 5, 9, 10, 11, 8] [/INST] def filter_odd_numbers(array): \n    result = [] \n    for i in array: \n        if i % 2 == 0: \n            result.append(i) \n    return result\n\n# Driver code\narray = [6, 5, 9, 10, 11, 8] \nprint(filter_odd_numbers(array))</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to parse given web pages and extract links from it. [/INST] \"\"\"\nWrite a Python script to parse given web pages and extract links from it\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef extract_links(url):\n    response = requests.get(url)\n    data = response.text\n    soup = BeautifulSoup(data, 'html.parser')\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links\n\nif __name__ == '__main__':\n    print(extract_links('https://example.com'))</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to calculate the number of bits needed to represent an integer in binary form. [/INST] def num_of_bits(num):\n    return len(bin(num)[2:])\n\nif __name__ == '__main__':\n    print(num_of_bits(50))</s>"
  },
  {
    "text": "<s>[INST] Take the following list of temperatures in Celsius and convert them to Fahrenheit.\n\n[10, 15, 20, 25, 30] [/INST] def celsius_to_fahrenheit(celsius):\n    return (celsius * (9/5)) + 32\n\nif __name__ == '__main__':\n    temperatures = [10, 15, 20, 25, 30]\n    fahrenheit_temperatures = []\n    for temp in temperatures:\n        fahrenheit_temperatures.append(celsius_to_fahrenheit(temp))\n    \n    print(fahrenheit_temperatures)</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to generate random numbers from the given list.\n\n[10, 20, 30, 40] [/INST] import random\n\nnumbers = [10, 20, 30, 40]\n\nrandom_number = random.choice(numbers)\n\nprint(random_number)</s>"
  },
  {
    "text": "<s>[INST] Find the number of occurrences of ‘Python’ in the given string.\n\nPython is a great language. Python is easy to learn. [/INST] def count_occurences(str, word):\n    return str.count(word)\n\nif __name__ == '__main__':\n    str = 'Python is a great language. Python is easy to learn.'\n    print(count_occurences(str, 'Python'))</s>"
  },
  {
    "text": "<s>[INST] Generate a SQL query to return a list of customers who ordered more than one item [/INST] SELECT c.id, c.name \nFROM customers c \nINNER JOIN orders o \nON c.id = o.customer_id \nGROUP BY c.id, c.name \nHAVING COUNT(o.order_id) > 1</s>"
  },
  {
    "text": "<s>[INST] Remove any element from an array that is greater than 10\n\n[3, 5, 10, 20, 7] [/INST] def removeGreaterThanTen(arr): \n\t# Create a new_arr array\n    new_arr = [] \n\n    # Iterate each element in array\n    for i in range(len(arr)):\n\n        # Check if the element is greater than 10\n        if arr[i] <= 10: \n            # Add the element to the new_arr\n            new_arr.append(arr[i]) \n\n    return new_arr</s>"
  },
  {
    "text": "<s>[INST] Find the largest key in a dictionary\n\n{'a':1, 'b':5, 'c':6, 'd':9} [/INST] def findLargestKey(d): \n\t# Initialize largest_key and largest_val\n    largest_key = None\n    largest_val = -1\n\t\n    # Iterate each key-value in dictionary\n    for key, value in d.items():\n\t\t# Initialize largest_key and largest_val\n        if value > largest_val: \n            largest_val = value\n            largest_key = key\n  \n    return largest_key</s>"
  },
  {
    "text": "<s>[INST] Create a function to get the intersection of two sorted arrays\n\narr1 = [1, 3, 4, 5, 6] \narr2 = [3, 5, 7, 8] [/INST] def intersection(arr1, arr2):\n    # Initialize a result array\n    res = [] \n\n    # Iterate each element of the first array and find in second array\n    for i in range(len(arr1)): \n        for j in range(len(arr2)):\n            # If element is present then append it to result array\n            if arr1[i] == arr2[j]: \n                res.append(arr1[i])\n  \n    return res</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a list and returns a tuple containing the maximum and minimum values of the list.\n\n[1, 4, 7, 3, 8] [/INST] def maxMin(arr):\n    # Initialize the maximum and the minimum value\n    maxi = arr[0] \n    mini = arr[0] \n  \n    # Iterate each element in arr to find the maximum and minimum\n    for i in range(1, len(arr)): \n        if arr[i] > maxi: \n            maxi = arr[i] \n        elif arr[i] < mini: \n            mini = arr[i]\n  \n    return (maxi, mini)</s>"
  },
  {
    "text": "<s>[INST] Write a multi-line comment in Python describing what the following program does.\n\ndef hello():\n    print(\"Hello World\") [/INST] \"\"\"\nThis program prints \"Hello World\" when executed. \nIt defines a function called \"hello\" that does not take any parameters \nand simply prints out \"Hello World\" when it is called.\n\"\"\"</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the average score of students who are aged between 20 and 23. [/INST] SELECT AVG(score) \nFROM students \nWHERE age BETWEEN 20 AND 23;</s>"
  },
  {
    "text": "<s>[INST] Create a Python Exception to handle Nonetype Error. [/INST] try:\n    my_list = [1, 2, 3]\n    my_list[3]\nexcept TypeError:\n    print(\"Error: Nonetype Found\")</s>"
  },
  {
    "text": "<s>[INST] Create a variable in Python to store 10 multidimensional arrays. [/INST] arrays = [[[1,2], [3,4]],\n          [[5,6], [7,8]],\n          [[9,10], [11,12]],\n          [[13,14], [15,16]],\n          [[17,18], [19,20]],\n          [[21,22], [23,24]],\n          [[25,26], [27,28]],\n          [[29,30], [31,32]],\n          [[33,34], [35,36]],\n          [[37,38], [39,40]]]</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java to remove values from an array that are greater than a given number.\n\nint[] array = {5, 8, 2, 9, 10, 6}; [/INST] public static int[] removeGreater(int [] array, int limit){\n  return Arrays.stream(array)\n        .filter(x -> x < limit)\n        .toArray();\n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML program to create a simple page layout. [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>Simple Page Layout</title>\n</head>\n<body>\n  <div>Header Content</div>\n  <div>Body Content</div>\n  <div>Footer Content</div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query to get the average salary for all employees. [/INST] db.Employees.aggregate([\n    { \n    $group: { \n            _id: null, \n            average_salary: { \n                $avg: \"$salary\" \n            } \n        } \n    }\n])</s>"
  },
  {
    "text": "<s>[INST] Convert the Python code using the range function in the for loop to a list comprehension statement.\n\nmy_list = []\nfor i in range(10):\n    my_list.append(i) [/INST] my_list = [i for i in range(10)]</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to generate Fibonacci sequence up to 'n' numbers, where 'n' is a given integer. [/INST] def generateFib(n): \n    fib = [0, 1] \n    while len(fib) < n : \n        fib.append(fib[-1] + fib[-2]) \n          \n    return fib[:n]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to count the number of occurrences of an input string in a text string.\n\nstr1 = \"My name is Mary and my friend's name is Sarah\"\nstr2 = \"name\" [/INST] const countOccurences = (text, str) => {\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text.slice(i, i + str.length) === str) {\n            count++;\n        }\n    }\n    return count;\n};\n\ncountOccurences(str1, str2);</s>"
  },
  {
    "text": "<s>[INST] Write an SQL command to create a new table called 'users' with three columns: 'user_id', 'fname' and 'lname'. [/INST] CREATE TABLE users ( \n  user_id INT PRIMARY KEY,\n  fname VARCHAR(50), \n  lname VARCHAR(50)\n);</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to sort an array of objects by a given property name.\n\nvar animals = [\n  {name: \"cat\", age: 3},\n  {name: \"dog\", age: 5},\n  {name: \"bird\", age: 1}\n]; [/INST] animals.sort((a, b) => (a.age > b.age) ? 1 : -1);</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to print the characters of a string one by one in an alert message.\n\nstr = \"Hello World!\" [/INST] for (let i = 0; i < str.length; i++) {\n  alert(str.charAt(i));\n}</s>"
  },
  {
    "text": "<s>[INST] Replace the \"TODO\" comment in the following Python statement with an appropriate value.\n\ncount = 0\n# TODO: add 1 to count [/INST] count = 0\ncount += 1</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the oldest user in the users table. [/INST] SELECT * \nFROM users\nORDER BY age DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] In the following JavaScript function, edit the function body so that it returns the number stored in the variable 'currentNum' minus 5.\n\nfunction subtractFive(currentNum) {\n  // TODO\n} [/INST] function subtractFive(currentNum) {\n  return currentNum - 5;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java program for finding the first non-repeated character in a string.\n\nString: hello [/INST] public class NonRepeatedCharacters \n{ \n    static final int NO_OF_CHARS = 256; \n      \n    /* Returns an array of size 256 conaining count \n    of characters in the passed char array */\n    static int[] getCharCountArray(String str) \n    { \n        int count[] = new int[NO_OF_CHARS]; \n        int len = str.length(); \n          \n        /* Increment count of characters in count[] */\n        for (int i = 0; i < len; i++) \n            count[str.charAt(i)]++; \n          \n        return count; \n    } \n      \n    /* The function returns index of first non-repeating \n    character in a string. If all characters are repeating \n    then returns -1 */\n    static int firstNonRepeating(String str) \n    { \n        int count[] = getCharCountArray(str); \n        int index = -1, i; \n          \n        for (i = 0; i < str.length(); i++) \n        { \n            if (count[str.charAt(i)] == 1) \n            { \n                index = i; \n                break; \n            }    \n        }   \n          \n        return index; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Identify the class of the given IP address.\n\nIP Address: 192.168.1.1 [/INST] Class C.</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program for computing the sum of the digits in a number.\n\nNumber: 1234 [/INST] #include <iostream>\nusing namespace std;\n\nint getSumOfDigits(int n) \n{ \n    // Base case \n    if (n == 0) \n        return 0; \n          \n    return (n % 10 + getSumOfDigits(n / 10)); \n} \n  \n// Driver code \nint main() \n{ \n    int n = 1234; \n    cout << getSumOfDigits(n) << endl; \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Parse this HTML code and extract the text.\n\n<p>This is a pararaph of text<p> [/INST] String text = doc.select(\"p\").text(); // text = \"This is a pararaph of text\"</s>"
  },
  {
    "text": "<s>[INST] Are these two strings equal?\n\nString 1: Hi\nString 2: Hi [/INST] Yes, the two strings are equal.</s>"
  },
  {
    "text": "<s>[INST] What is the http status code for \"Not Found\"? [/INST] 404.</s>"
  },
  {
    "text": "<s>[INST] Create a JSON object for this data.\n\nName: John\nAge: 25\nGender: Male [/INST] {\"name\": \"John\", \"age\": 25, \"gender\": \"Male\"}</s>"
  },
  {
    "text": "<s>[INST] Find the slope of this line.\n\nPoint 1 (3, 2)\nPoint 2 (6, 4) [/INST] The slope of the line is 0.5.</s>"
  },
  {
    "text": "<s>[INST] Write an angular directive to highlight the selected word in a text. [/INST] myApp.directive('highlight', function() {\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      attrs.$observe('highlight', function(word) {\n        var text = element[0].innerHTML;\n        if (word) {\n          var regex = new RegExp('('+ word +'\\\\b)', 'gi');\n          var replacedText = text.replace(regex, '<span class=\"highlighted\">$1</span>');\n          element[0].innerHTML = replacedText;\n        } else {\n          element[0].innerHTML = text;\n        }\n      });\n    }\n  };\n});</s>"
  },
  {
    "text": "<s>[INST] Identify the wrong statement about the recursive function in the given code.\n\ndef recursive(lr):\n    # base case\n    if lr is None:\n        return\n    \n    for i in lr:\n        recursive(i)\n    # recursive call\n    recursive(lr) [/INST] The function makes a recurrent call at the end of the function, which is redundant.</s>"
  },
  {
    "text": "<s>[INST] Trace the output of the given program.\n\ndef foo(x, y):\n    if y > 0:\n        return x + y\n    else:\n        return x * y\n\na = foo(2, 3)\nb = foo(2, -2)\n\nprint(a, b) [/INST] 5 -4</s>"
  },
  {
    "text": "<s>[INST] Translate the given pseudocode to C programming language.\n\nBEGIN\n  int sum, i\n  for i ← 1 to 20\n    sum ← sum + i\n  end for\n  Print sum\nEND [/INST] #include <stdio.h>\n \nint main()\n{\n    int sum = 0, i;\n    for (i = 1; i <= 20; i++)\n        sum = sum + i;\n \n    printf(\"Sum = %d\\n\",sum);\n \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following if-elif-else statement using the ternary operator.\n\nif x > y:\n    result = \"x is greater than y\"\nelif x < y:\n    result = \"x is less than y\"\nelse:\n    result = \"x is equal to y\" [/INST] result =  x > y ? \"x is greater than y\" : ( x < y ? \"x is less than y\" : \"x is equal to y\" )</s>"
  },
  {
    "text": "<s>[INST] Generate a regular expression that matches strings containing any number of digits, but does not contain any non-digit character. [/INST] ^[0-9]+$</s>"
  },
  {
    "text": "<s>[INST] Write an AppleScript program to open Calculator app. [/INST] tell application \"Calculator\"\n    launch\nend tell</s>"
  },
  {
    "text": "<s>[INST] Find the number of prime numbers between 1 and 100. [/INST] 25</s>"
  },
  {
    "text": "<s>[INST] Edit the provided code so that it prints 10 rows and 10 columns of stars.\n\nfor row in range(5):\n    for col in range(5):\n        print(\"*\") [/INST] for row in range(10):\n    for col in range(10):\n        print(\"*\", end=\"\")\n    print()</s>"
  },
  {
    "text": "<s>[INST] Edit the given HTML code so that the paragraphs are numbered.\n\n<p>These are some sample paragraphs.</p>\n<p>This is another one.</p> [/INST] <ol>\n <li><p>These are some sample paragraphs.</p></li>\n <li><p>This is another one.</p></li>\n</ol></s>"
  },
  {
    "text": "<s>[INST] Generate a unique ID string in Java. [/INST] import java.util.UUID;\n\npublic class App {\n   public static void main(String[] args) {\n      // generate a unique ID string\n      String uniqueID = UUID.randomUUID().toString();\n      System.out.println(\"Unique ID String: \" + uniqueID);\n   }\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to return the top three highest-scoring players from a table 'scores'. [/INST] SELECT player_name\nFROM scores\nORDER BY score DESC\nLIMIT 3;</s>"
  },
  {
    "text": "<s>[INST] Develop a high-level algorithm for pathfinding. [/INST] def find_path(start, end):\n    # Create an empty list to store the path\n    path = []\n\n    # Create a dictionary to store visited nodes\n    visited = {start: None}\n\n    # Create a queue and add the initial space to it\n    queue = [start]\n\n    # Keep looping until the queue is empty\n    while len(queue) > 0:\n        # Get the first element in the queue\n        curr = queue.pop(0)\n\n        # Add the current node to the path\n        path.append(curr)\n\n        # Check if we reached the end of the path\n        if curr == end:\n            return path\n\n        # Explore all neighbours of the current node\n        for neighbour in get_neighbours(curr):\n            # Check if the neighbour is not visited previously\n            if neighbour not in visited:\n                # Add the neighbour to the queue and mark it as visited\n                queue.append(neighbour)\n                visited[neighbour] = curr\n    # If the queue is empty, there is no path\n    return None</s>"
  },
  {
    "text": "<s>[INST] Using React, create a component to display a table containing a list of cities. [/INST] const CityTable = ({ cities }) => {\n  const cityRows = cities.map(city => (\n    <tr key={city.id}>\n      <td>{city.name}</td>\n      <td>{city.population}</td>\n      <td>{city.country}</td>\n    </tr>\n  ));\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Population</th>\n          <th>Country</th>\n        </tr>\n      </thead>\n      <tbody>{cityRows}</tbody>\n    </table>\n  );\n};</s>"
  },
  {
    "text": "<s>[INST] Write an expression in Java to calculate the exponential value of a number. [/INST] Math.exp(x)</s>"
  },
  {
    "text": "<s>[INST] Debug the following Java code snippet to makes sure it is syntactically correct:\n\npublic class Test \n{ \n   public static void main(String[] args) \n   { \n       int num1 = 0; \n       int num2 = 0; \n       if (num1 = 0) \n       { \n          num2 = 1; \n       } \n    } \n} [/INST] public class Test \n{ \n   public static void main(String[] args) \n   { \n       int num1 = 0; \n       int num2 = 0; \n       if (num1 == 0) \n       { \n          num2 = 1; \n       } \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression to match a string that contains a number followed by a letter. [/INST] /\\d[a-zA-Z]/</s>"
  },
  {
    "text": "<s>[INST] Edit the SQL query to get the users from Canada who joined within the last 6 months.\n\nSELECT * FROM users [/INST] SELECT * FROM users\nWHERE country = 'Canada' \nAND CAST(DATEDIFF(MONTH, joined_date, GETDATE()) AS INT) <= 6;</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to convert a given number of minutes into hours and minutes. [/INST] def minutes_to_hours(minutes):\n  hours = minutes // 60\n  minutes = minutes % 60\n  return hours, minutes</s>"
  },
  {
    "text": "<s>[INST] Extract only the digits from a given string using Python. [/INST] import re\n\ndef extract_digits(string):\n    regex = r\"\\D\"\n    return re.sub(regex, \"\", string)</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code snippet for a form to get two inputs: name and email. [/INST] <form>\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\">\n\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\">\n\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Use the given SQL table named 'employess' to find the total number of employees with the gender 'Male'.\n\nCREATE TABLE employees (\n  empid INTEGER,\n  firstname VARCHAR(50) NOT NULL,\n  lastname VARCHAR(50) NOT NULL,\n  gender VARCHAR(6) NOT NULL\n); [/INST] SELECT COUNT(*) \nFROM employees \nWHERE gender = \"Male\";</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to convert the given string to title case. [/INST] function toTitleCase(str) {\n    return str.replace(/\\w\\S*/g, function(txt){\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}</s>"
  },
  {
    "text": "<s>[INST] Look at the given code and find the bug in it.\n\ndef add_numbers(x,y):\n    return x + y + 1 [/INST] The bug in the given code is that it adds 1 extra to the result of the function. To fix this, the return statement should be modified to: return x + y.</s>"
  },
  {
    "text": "<s>[INST] Use the given CSS code to set the color of all h1 elements to blue. [/INST] h1 {\n    color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a React component to display a list of all the countries. [/INST] import React from \"react\";\n\nconst CountryList = ({ countries }) => {\n  return (\n    <ul>\n      {countries.map(country => {\n        return <li>{country}</li>;\n      })}\n    </ul>\n  );\n};\n\nexport default CountryList;</s>"
  },
  {
    "text": "<s>[INST] Find any errors in the given PHP code.\n\n<?php\n$name = “John”;\n$message = “Hello, my name is $Name.”;\necho $message; [/INST] The given PHP code contains an error in the variable name. The variable is written as $Name instead of $name, so it is not getting replaced with the given value of John. The code should be corrected to:\n\n$name = \"John\";\n$message = \"Hello, my name is $name.\";\necho $message;</s>"
  },
  {
    "text": "<s>[INST] Given a string, find the number of times a given character appears in the string.\n\nString: \"Hello World\"\nCharacter: \"l\" [/INST] The given character 'l' appears 3 times in the given string \"Hello World\".</s>"
  },
  {
    "text": "<s>[INST] Read the given CSS selector and explain what it does. [/INST] The given CSS selector \"div > p:not(.special)\" will select all the <p> elements that are children of <div> which do not have a class of \"special\".</s>"
  },
  {
    "text": "<s>[INST] How would you query a database table using MySQL? [/INST] SELECT * FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] How can you access the value of a key from a JavaScript object? [/INST] You can access a value from a JavaScript object using either dot notation or square bracket notation. \n\nUsing dot notation, you can do something like \"object.key\", where the key is the name of the property you want to access. \n\nUsing bracket notation, you can do something like \"object[\"key\"]\", where the key is a string containing the name of the property you want to access.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to filter a given array and return only the even numbers.\n\narray = [1,2,3,4,5,6,7] [/INST] const even = array.filter(num => num % 2 === 0);</s>"
  },
  {
    "text": "<s>[INST] How can you validate a credit card number using JavaScript? [/INST] You can validate a credit card number using JavaScript with the Luhn algorithm. The Luhn algorithm is a simple checksum formula that can be used to validate various identification numbers, such as credit card numbers, National Provider Identifier (NPI) numbers, and Canadian Social Insurance Numbers (SINs).</s>"
  },
  {
    "text": "<s>[INST] Write a C program to add every two elements in an array and print the sum.\n\nnumbers = [2, 3, 4, 5, 6] [/INST] #include<stdio.h>\nint main() \n{ \n    int numbers[] = {2, 3, 4, 5, 6}; \n    int size = sizeof(numbers) / sizeof(numbers[0]); \n  \n    int i;\n    int sum;\n    for (i=1; i<size; i+=2) { \n       sum=numbers[i] + numbers[i-1];\n       printf(\"sum of %d and %d is %d \\n\",numbers[i-1], numbers[i], sum);\n    } \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to sort a given list into descending order. [/INST] def sortDescending(nums):\n  nums.sort(reverse=True)\n  return nums</s>"
  },
  {
    "text": "<s>[INST] Solve the following problem. Given an array of integers, return an array with the elements multiplied by two.\n\narr = [2, 8, 10, 9] [/INST] def doubleElements(arr):\n  return [num * 2 for num in arr]\n  \narr = [2, 8, 10, 9]\nprint(doubleElements(arr)) // [4, 16, 20, 18]</s>"
  },
  {
    "text": "<s>[INST] Write a C program to find the difference between the maximum and minimum values in an array.\n\narr = {2, 8, 10, 9} [/INST] #include<stdio.h> \n  \n\nint diffMaxMin(int arr[], int n) \n{ \n    int max_num = arr[0], min_num = arr[0]; \n  \n    int i; \n    for (i = 0; i < n; i++) { \n        max_num = max_num > arr[i] ? max_num : arr[i]; \n        min_num = min_num < arr[i] ? min_num : arr[i]; \n    } \n  \n    return (max_num - min_num); \n} \n  \nint main() \n{ \n    int arr[] = {2, 8, 10, 9}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    printf(\"%d\\n\", diffMaxMin(arr, n)); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Calculate the value of PI using the Leibniz formula. [/INST] def calculatePi():\n    pi = 0.0\n    N = 10000\n    sign = 1\n    for i in range(N):\n        pi += 4.0 * sign / (2.0 * i + 1.0)\n        sign *= -1\n    return pi\n\nprint(\"π = \", calculatePi()) # 3.141592653589793</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the names of all employee who have \"Programmer\" as their job title. [/INST] SELECT name FROM employee WHERE job_title = 'Programmer';</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to print the following sequence: 1, 2, 4, 8, 16, 32, ...... [/INST] #include <iostream>\nusing namespace std;\n\nint main()\n{\n    int i, n;\n    for (i = 1; i <= 32; i *= 2)\n    {\n        cout << i << \" \";\n    }\n\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] How do you define and call a function in Python? [/INST] In Python, a function is defined using the `def` keyword followed by the function name, a list of parameters and the code block that implements the function. To call a function, you need to provide the name of the function followed by a list of arguments. For example, to define and call a function called `myfunc` with an argument `x`:\n\ndef myfunc(x):\n    # function implementation\n\nmyfunc(x)  # call the function with argument x</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the names and the total number of orders for each customer in a table called 'orders'. [/INST] SELECT \n    c.name, \n    COUNT(o.order_id) AS total_orders \nFROM customers c \n    INNER JOIN orders o \n    ON c.customer_id = o.customer_id\nGROUP BY c.name;</s>"
  },
  {
    "text": "<s>[INST] What is the syntax for performing an instruction inside a loop in JavaScript? [/INST] The syntax for performing an instruction inside a loop in JavaScript is: \n\nfor (initialization; condition; iteration) {\n    // instruction\n}</s>"
  },
  {
    "text": "<s>[INST] In what languages can the TensorFlow library be used? [/INST] The TensorFlow library can be used in Python, C++, JavaScript, Java, Go, Swift, and R. It is also supported in different platforms such as iOS, Android, and web browsers.</s>"
  },
  {
    "text": "<s>[INST] Create a GraphQL query that returns all the top five countries in terms of population. [/INST] query {\n  countries(first: 5) {\n    name\n    population\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a bubble sort on the given array of integers.\n\n[4, 8, 1, 3, 9] [/INST] def bubble_sort(arr):\n  for _ in range(len(arr) -1): \n    for i in range(len(arr)-1):\n      if arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\nprint(bubble_sort([4, 8, 1, 3, 9])) # [1, 3, 4, 8, 9]</s>"
  },
  {
    "text": "<s>[INST] Create a Python script that inputs an integer and prints \"odd\" if the number is odd, or \"even\" if the number is even. [/INST] def check_even_or_odd(num):\n  if num % 2 == 0:\n    print(\"even\")\n  else:\n    print(\"odd\")\n  \ncheck_even_or_odd(5) # odd</s>"
  },
  {
    "text": "<s>[INST] Re-implement the same program in a different language of your choice.\n\ndef quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater) [/INST] def quick sort(arr):\n    if len(arr) < 2:\n        return arr\n    else: \n        pivot = arr[0]\n        left = [x for x in arr[1:] if x <= pivot]\n        right = [x for x in arr[1:] if x > pivot]\n        return quick_sort(left) + [pivot] + quick_sort(right)</s>"
  },
  {
    "text": "<s>[INST] Create a NodeJS server that listens on port 8080 and serves a simple HTML page. [/INST] const http = require('http');\nconst port = 8080;\n\nconst server = http.createServer(function (request, response) {\n    response.writeHead(200, { \"Content-Type\": \"text/html\" }); \n    response.write('<html><body><h1>Hello, World!</h1></body></html>');  \n    response.end(); \n});\n\nserver.listen(port);\nconsole.log(\"Listening at port\", port);</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML document and add a CSS style to changes the background color to blue.\n\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html> [/INST] <html>\n  <head>\n    <style>\n      body {\n        background-color: blue;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a Python class for a movie instance with name, director, and year fields. [/INST] class Movie:\n    def __init__(self, name, director, year):\n        self.name = name\n        self.director = director\n        self.year = year</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to compute the greatest common divisor between two numbers.\n\nm = 8, n = 20 [/INST] def gcd(m, n):\n    # base case \n    if m == 0:\n        return n\n    \n    # recursive case\n    return gcd(n % m, m)\n\nprint(gcd(8, 20)) # Output: 4</s>"
  },
  {
    "text": "<s>[INST] Write a function in C++ that takes in a string of text and removes all the punctuation from the string. [/INST] #include <string>\n#include <cctype>\n\nstring remove_punctuation(string s) {\n    string str;\n    for (char c : s) {\n        if (ispunct(c) == false)\n            str.push_back(c);\n    }\n    return str;\n}</s>"
  },
  {
    "text": "<s>[INST] Given a list of integers, determine the sum of all of elements in the list.\n\n[3, 4, 5, 6] [/INST] def get_sum(nums):\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n    return total_sum</s>"
  },
  {
    "text": "<s>[INST] Create a program that will guess a number between 0 and 10. [/INST] import random\n\ndef guessing_game():\n    secret_number = random.randint(0, 10)\n    guess = int(input(\"Guess a number between 0 and 10: \"))\n    while guess != secret_number:\n        print(\"Incorrect! Try again.\")\n        guess = int(input(\"Guess a number between 0 and 10: \")) \n    print(\"Correct!\")</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm that takes in two integers and returns true if they are evenly divisible. [/INST] def is_evenly_divisible(x, y):\n    return x % y == 0</s>"
  },
  {
    "text": "<s>[INST] Read a code that prints out the Fibonacci Series. [/INST] def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b</s>"
  },
  {
    "text": "<s>[INST] Create a code that recognizes if an inputted string is a palindrome or not. [/INST] def is_palindrome(input_string):\n    rev_input = input_string[::-1]\n    return input_string == rev_input</s>"
  },
  {
    "text": "<s>[INST] You are given a list of integers and need to calculate the maximum number in the list.\n\n[3, 4, 7, 1] [/INST] def get_max(numbers):\n    max_value = numbers[0]\n    for number in numbers:\n        if (number > max_value):\n            max_value = number\n    return max_value</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm that takes in two numbers and returns the remainder of the first number divided by the second number. [/INST] def get_remainder(x, y):\n    return x % y</s>"
  },
  {
    "text": "<s>[INST] Read a given code and determine if it contains any errors or not.\n\ndef factorial(n):\n    product = 1\n    for i in range(2, 3):\n        product *= i\n    return product [/INST] true</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript that squares a given number. [/INST] const square = (num) => {\n  return num * num;\n}</s>"
  },
  {
    "text": "<s>[INST] Complete the following function in Python which will return all the numbers in a list between a given minimum and maximum.\n\ndef getRange(min, max): [/INST] def getRange(min, max):\n  return [i for i in range(min, max+1)]</s>"
  },
  {
    "text": "<s>[INST] Write a C++ class called Vector3D which can be used to represent a 3D vector with 3 float values. [/INST] #include <iostream>\n\nclass Vector3D {\nprivate:\n  float x, y, z;\npublic:\n  Vector3D(float x, float y, float z) : x(x), y(y), z(z) {}\n\n  float dotProduct(Vector3D v) {\n    return x * v.x + y * v.y + z * v.z;\n  }\n};</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript that calculates the area of a rectangular room given its width and length. [/INST] const calculateArea = (width, length) => {\n  return width * length;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that prints out all prime numbers between two given numbers. [/INST] def print_primes(start, end):\n    for num in range(start, end):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)</s>"
  },
  {
    "text": "<s>[INST] Generate the output given the following input to the Python function you wrote in  task 11.\n\nprint_primes(5, 15) [/INST] 5\n7\n11\n13</s>"
  },
  {
    "text": "<s>[INST] Edit the following Java code to create a method which will calculate the area of a rectangle, given its width and length.\n\npublic class Rectangle {\n  private double width;\n  private double length; [/INST] public class Rectangle {\n  private double width;\n  private double length;\n \n  public double calculateArea() {\n    return width * length;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program that asks the user to type their age and will print out an appropriate message to the user. [/INST] #include <iostream>\n\nint main() {\n    int age;\n    std::cout << \"Please type your age: \";\n    std::cin >> age;\n \n    if(age < 12) {\n        std::cout << \"You are still young!\" << std::endl;\n    } else if (age < 18) {\n        std::cout << \"You are a teenager!\" << std::endl;\n    } else {\n        std::cout << \"Welcome to adulthood!\" << std::endl;\n    }\n \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] What is the difference between supervised learning and unsupervised learning? [/INST] Supervised learning is a type of machine learning where the algorithm is given a labelled dataset and its goal is to learn a mapping between the given input and the given output. The labels in the dataset act as a supervisor to guide the algorithm towards its learning path.\nUnsupervised learning is a type of machine learning where the algorithm is given an unlabelled dataset and its goal is to learn from the data and discover patterns and insights from the data without being given any explicit guidance. The algorithm must learn by itself how to organize the data and extract useful information from it.</s>"
  },
  {
    "text": "<s>[INST] Write a Java program that counts the number of vowels in a given string.\n\nString str = \"This is a test string\"; [/INST] public class VowelCounter {\n\n public static int countVowels(String str) {\n  int count = 0;\n  for(int i = 0; i < str.length(); i++) {\n   char currentChar = str.charAt(i);\n   if(currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n    count++;\n   }\n  }\n  return count;\n }\n\n public static void main(String[] args) {\n  String str = \"This is a test string\";\n  int count = countVowels(str);\n  System.out.println(\"Number of vowels = \" + count);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the practical application of sorting algorithms [/INST] Sorting algorithms are used in many practical applications, such as sorting data in databases, large scale data analysis, and search engine optimization. They are also used in sorting algorithms used in operating system kernels and in finding the shortest path in graph theory. Sorting algorithms can also be used to improve the performance of applications by sorting data according to certain criteria, thus reducing the amount of computation time required. In addition, sorting algorithms are used in designing algorithms for data compression and in machine learning. Generally, sorting algorithms are used to bring data into some form of order so that it can be searched or traversed more easily. By improving the efficiency of data retrieval, sorting algorithms can improve the overall performance of applications.</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the day of the week corresponding to a given date using the calendar module?\n\nDay: 25\nMonth: December\nYear: 2020 [/INST] \"\"\"\nFind the day of the week corresponding to a given date using calendar module\n\"\"\"\n\nimport calendar\n\ndef get_day_of_week(day, month, year):\n    dayNumber = calendar.weekday(year,month,day)\n    dayName = calendar.day_name[dayNumber] \n    return dayName\n    \nif __name__ == '__main__':\n    day = 25\n    month = 12\n    year = 2020\n    print(get_day_of_week(day, month, year))</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get all distinct posts with the highest score. [/INST] SELECT DISTINCT Posts.ID, MAX(Posts.Score) \nFROM Posts \nGROUP BY Posts.ID;</s>"
  },
  {
    "text": "<s>[INST] Write a HTML code snippet to create a 4x3 table of no border and gradient. [/INST] <table style=\"border: none; background: linear-gradient(#ff0000, #00ff00, #0000ff);\">\n  <tr>\n    <td>Cell 1</td>\n    <td>Cell 2</td>\n    <td>Cell 3</td>\n  </tr>\n  <tr>\n    <td>Cell 4</td>\n    <td>Cell 5</td>\n    <td>Cell 6</td>\n  </tr>\n  <tr>\n    <td>Cell 7</td>\n    <td>Cell 8</td>\n    <td>Cell 9</td>\n  </tr>\n  <tr>\n    <td>Cell 10</td>\n    <td>Cell 11</td>\n    <td>Cell 12</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Name the different levels of accessibility supported in HTML? [/INST] The different levels of accessibility supported in HTML are: A (minimal), AA (structured data and metadata), AAA (full accessibility).</s>"
  },
  {
    "text": "<s>[INST] How can you write a JavaScript regular expression to validate an email address? [/INST] var re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;</s>"
  },
  {
    "text": "<s>[INST] What does a negative index signify in a Python array? [/INST] A negative index in a Python array is used to access elements from the end of the array, where the last element of the array is at index -1.</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to remove the syntax error so that the program will run correctly.\n\ndef double(x):\nreturn x * 2 [/INST] def double(x):\n    return x * 2</s>"
  },
  {
    "text": "<s>[INST] Change the following code to accept multiple arguments.\n\nfunc add(a, b) {\n  return a + b;\n} [/INST] func add(...args) {\n  let result = 0;\n  for (const arg of args) {\n    result += arg;\n  }\n  return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following jQuery code to its vanilla JavaScript equivalent.\n\n$(\"#list li\").each(function(){\n  //some code\n}); [/INST] document.querySelectorAll(\"#list li\").forEach(function (el) {\n  //some code\n});</s>"
  },
  {
    "text": "<s>[INST] Generate a function `recursive_sum` that computes the sum of a list of integers recursively. [/INST] def recursive_sum(lst): \n    # Base case\n    if not len(lst): \n        return 0\n    return lst[0] + recursive_sum(lst[1:])</s>"
  },
  {
    "text": "<s>[INST] Calculate the total sum of a given list using an accumulator pattern.\n\nnumbers = [2, 3, 4] [/INST] numbers = [2, 3, 4]\ntotal_sum = 0\n\n# iterate through the list and add each element to the total sum\nfor n in numbers: \n    total_sum += n \n    \nprint(total_sum)</s>"
  },
  {
    "text": "<s>[INST] Using a while loop, print all numbers between 0 and a given number, 10. [/INST] i = 0\nwhile i <= 10: \n    print(i)\n    i+=1</s>"
  },
  {
    "text": "<s>[INST] Using list comprehension, create a list of all even numbers from 0 to 10. [/INST] even_numbers = [num for num in range(11) if num % 2 == 0]</s>"
  },
  {
    "text": "<s>[INST] Extend the given list of numbers by adding all odd numbers from 0 to 10.\n\nmy_list = [0, 2, 4, 6, 8, 10] [/INST] my_list = [0, 2, 4, 6, 8, 10]\nmy_list.extend([num for num in range(11) if num % 2 != 0])</s>"
  },
  {
    "text": "<s>[INST] Create a generator expression to print the square of a list of numbers.\n\nnumbers = [1, 2, 3, 4, 5] [/INST] numbers = [1, 2, 3, 4, 5]\n\n# generator expression\nsquares = (num ** 2 for num in numbers)\n\nfor square in squares: \n    print(square)</s>"
  },
  {
    "text": "<s>[INST] Utilize regular expressions to parse and return a list of words from a sentence.\n\nsentence = \"The quick brown fox jumps over the lazy dog\" [/INST] sentence = \"The quick brown fox jumps over the lazy dog\"\n\n# regular expression\nimport re\nwords = re.findall(r'\\w+', sentence)\n\nprint(words)</s>"
  },
  {
    "text": "<s>[INST] Sort a given dictionary of strings alphabetically.\n\nmy_dict = {'a':\"apple\", 'c':\"cat\", 'b':\"banana\"} [/INST] my_dict = {'a':\"apple\", 'c':\"cat\", 'b':\"banana\"}\n\n# sort the dictionary\nsorted_dict = {key: my_dict[key] for key in sorted(my_dict.keys())}\n\nprint(sorted_dict)</s>"
  },
  {
    "text": "<s>[INST] Compare two arrays for equality\n\n[1, 2, 3]\n[1, 2, 4] [/INST] False</s>"
  },
  {
    "text": "<s>[INST] Write a for loop that iterates through a list of numbers and prints only the even numbers.\n\n[1, 2, 3, 4, 5, 6] [/INST] for i in [1,2,3,4,5,6]:\n    if i % 2 == 0:\n        print(i)</s>"
  },
  {
    "text": "<s>[INST] Create a class Person with a name, age and gender attributes. [/INST] class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender</s>"
  },
  {
    "text": "<s>[INST] Write a lambda expression to deduct 10 from a number. [/INST] lambda x: x-10</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary with the item and their corresponding prices.\n\nApple - $2.99\nBanana - $0.99 [/INST] d = {'Apple': 2.99, 'Banana': 0.99}</s>"
  },
  {
    "text": "<s>[INST] Construct an appropriate list of even numbers between 0 and 10. [/INST] [0, 2, 4, 6, 8, 10]</s>"
  },
  {
    "text": "<s>[INST] Remove the first element in a list using slicing.\n\n[1, 2, 3, 4, 5] [/INST] list[1:]</s>"
  },
  {
    "text": "<s>[INST] Write a class to define a car object with the attribute of brand, model and year. [/INST] class Car:\n    def __init__(self, brand, model, year):\n        self.brand = brand\n        self.model = model\n        self.year = year</s>"
  },
  {
    "text": "<s>[INST] Using the .sort() method, sort an array in ascending order.\n\n[5, 3, 9, 1] [/INST] arr.sort()</s>"
  },
  {
    "text": "<s>[INST] Write a for loop to print out the squared value of each element in the list.\n\n[1, 2, 3, 4] [/INST] for i in [1,2,3,4]:\n    print(i*i)</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to generate a list of numbers that is the square of all numbers between 1 and the number provided.\n\nnum = 10 [/INST] def generate_square_list(num):\n    result = []\n    for i in range(1, num+1):\n        result.append(i*i)\n    return result</s>"
  },
  {
    "text": "<s>[INST] Given a list of sentence fragments, use a loop in Python to print each fragment on a separate line.\n\nsentences = [\"Hello\", \"My name is\", \"John\", \"Nice to meet you!\"] [/INST] for sentence in sentences:\n    print(sentence)</s>"
  },
  {
    "text": "<s>[INST] In the following Python function, insert code to check if the given number is even or odd.\n\ndef check_num(num):\n    # TODO\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\") [/INST] def check_num(num):\n    assert isinstance(num, int), \"num must be an integer value\"\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to delete all the records in a table named \"users\". [/INST] DELETE FROM users;</s>"
  },
  {
    "text": "<s>[INST] Create a new class in Python named \"Employee\". [/INST] class Employee:\n    def __init__(self):\n        pass</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL table with three columns \"name\", \"id\", and \"age\". [/INST] CREATE TABLE users (\n    name VARCHAR(255) NOT NULL,\n    id INT NOT NULL,\n    age INT NOT NULL\n);</s>"
  },
  {
    "text": "<s>[INST] Using the comment as a guide, write code in JavaScript to generate a random number between 1 and 10.\n\n// TODO [/INST] let randomNumber = Math.floor(Math.random() * 10 + 1);</s>"
  },
  {
    "text": "<s>[INST] In the following code, write a switch statement in JavaScript that identifies whether a number is positive, negative, or zero.\n\nnum = 5 [/INST] switch(num) {\n    case (num > 0):\n        console.log(\"positive\");\n        break;\n    case (num < 0):\n        console.log(\"negative\");\n        break;\n    case (num == 0):\n        console.log(\"zero\");\n        break;\n    default:\n        console.log(\"Error\");\n        break;\n}</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, write a function in Java to arrange the list in ascending order.\n\nnums = [10, 2, 9, 6] [/INST] static int[] sortAscending(int[] nums) {\n    for (int i = 0; i < nums.length-1; i++) {\n        for (int j = 0; j < nums.length-1-i; j++) {\n            if (nums[j] > nums[j+1]) {\n                int temp = nums[j];\n                nums[j] = nums[j+1];\n                nums[j+1] = temp;\n            }\n        }\n    }\n    return nums;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to implement the classic Tic Tac Toe game. [/INST] import java.util.Scanner;\n\npublic class TicTacToe {\n \n    public static char[][] board = new char[3][3];\n    public static boolean playerX;\n    public static Scanner scan;\n \n    public static void main(String[] args) {\n        scan = new Scanner(System.in);\n        playerX = true;\n        initializeBoard();\n \n        while(true) {\n            printBoard();\n            nextMove(playerX);\n            if(checkWinner()) {\n                break;\n            }\n            playerX = !playerX;\n        }\n \n    }\n \n    public static void initializeBoard() {\n        for(int i=0;i<3;i++)\n            for(int j=0;j<3;j++)\n                board[i][j] = '-';\n    }\n \n    public static void printBoard() {\n        System.out.println(\"-------------\");\n        for (int i = 0; i < 3; i++) {\n            System.out.print(\"| \");\n            for (int j = 0; j < 3; j++) {\n                System.out.print(board[i][j] + \" | \");\n            }\n            System.out.println();\n        }\n        System.out.println(\"-------------\");\n    }\n \n    public static void nextMove(boolean player) {\n        if(player)\n            System.out.print(\"Player X, enter your move row,col: \");\n        else\n            System.out.print(\"Player O, enter your move row,col: \");\n \n        int row = scan.nextInt() - 1;\n        int col = scan.nextInt() - 1;\n        board[row][col] = player ? 'X' : 'O';\n    }\n \n    public static boolean checkWinner() {\n        // Horizontal win\n        for(int i=0;i<3;i++) {\n            if(board[i][0] == board[i][1] && board[i][1] == board[i][2])\n                return true;\n        }\n \n        // Vertical win\n        for(int j=0;j<3;j++) {\n            if(board[0][j] == board[1][j] && board[1][j] == board[2][j])\n                return true;\n        }\n \n        // Diagonal win\n        if(board[0][0] == board[1][1] && board[1][1] == board[2][2])\n            return true;\n        if(board[2][0] == board[1][1] && board[1][1] == board[0][2])\n            return true;\n \n        return false;\n    }\n \n}</s>"
  },
  {
    "text": "<s>[INST] Output the binary representation of a given number.\n\n14 [/INST] 1110</s>"
  },
  {
    "text": "<s>[INST] Identify any typos or grammatical errors in this sentence.\n\nEmmm, it seemms so. [/INST] typos: \"seemms\" \ngrammatical errors: none</s>"
  },
  {
    "text": "<s>[INST] Fix the bug in this code.\n\ndef calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large' [/INST] def calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large'\nelse:\n    return area</s>"
  },
  {
    "text": "<s>[INST] Convert the given date into the ISO 8601 date format.\n\nApril 15th, 2020 [/INST] </s>"
  },
  {
    "text": "<s>[INST] Find the simplest possible way to print \"Welcome to Tech World!\" five times. [/INST] for _ in range(5):\n    print(\"Welcome to Tech World!\")</s>"
  },
  {
    "text": "<s>[INST] Calculate the mean of the following list of numbers: 4, 6, 8, 10. [/INST] mean = (4 + 6 + 8 + 10) / 4 = 7.5</s>"
  },
  {
    "text": "<s>[INST] Add try-catch block for the code below.\n\nx = 1\ny = 0\nprint(x / y) [/INST] try:\n    x = 1\n    y = 0\n    print(x / y)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")</s>"
  },
  {
    "text": "<s>[INST] Write a function that prints Fibonacci numbers up to N (N>1). [/INST] def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b</s>"
  },
  {
    "text": "<s>[INST] Create an array of 5 students and output their names.\n\nvar students = [\n  {name: 'John', age: 19},\n  {name: 'Amy', age: 22},\n  {name: 'Luke', age: 17},\n  {name: 'Alex', age: 18},\n  {name: 'Tom', age: 20}\n]; [/INST] names = [students[0].name, students[1].name, students[2].name, students[3].name, students[4].name];\nconsole.log(names);\n// output: ['John', 'Amy', 'Luke', 'Alex', 'Tom']</s>"
  },
  {
    "text": "<s>[INST] Create a for loop that reads an array of strings and prints each string\n\nvar strings = [\"Hello\", \"world\", \"how\", \"are\", \"you\"]; [/INST] for(var i=0; i < strings.length ;i++){\n   console.log(strings[i]);\n}\n//output:\n//Hello\n//world\n//how\n//are\n//you</s>"
  },
  {
    "text": "<s>[INST] Create an object with two fields, a name and an id. [/INST] var obj = {\n   name: 'John', \n   id: '12345'\n};</s>"
  },
  {
    "text": "<s>[INST] Write a script that sorts an array of numbers from smallest to largest.\n\nvar numbers = [3, 7, 4, 2, 9, 1]; [/INST] numbers.sort(function(a, b){\n    return a-b\n});\nconsole.log(numbers); //output: [1, 2, 3, 4, 7, 9]</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string and turns it into all uppercase.\n\nvar string = 'Hello World'; [/INST] function toUpperCase(string) {\n   let upperCaseString = string.toUpperCase();\n   return upperCaseString;\n}\n\ntoUpperCase(string); //output: HELLO WORLD</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to sort the given array of dictionaries by key value.\n\narr = [{'name': 'Jose', 'age': 32}, {'name': 'Ravi', 'age': 23}, {'name': 'Paul', 'age': 26}] [/INST] def sort_by_key(arr):\n return sorted(arr, key=lambda i: i['name'])</s>"
  },
  {
    "text": "<s>[INST] Specify a type for the following variable in C.\n\nchar c = '&'; [/INST] char c = '&'; //Type is char.</s>"
  },
  {
    "text": "<s>[INST] Why is HashTable data structure the best choice for fast lookup operations? [/INST] HashTable data structure is the best choice for fast lookup operations because it stores the data in key-value pairs and uses hashing algorithms to quickly identify the location of the data in memory. With this data structure, lookups can be done in O(1) time complexity, which is much more efficient than other data structures.</s>"
  },
  {
    "text": "<s>[INST] Compress the following data using RLE algorithm.\n\nAABBCC [/INST] AABBCC --> A2B2C2</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the Euclidean distance from (x, y) to (a, b). [/INST] def euclidean_distance(x, y, a, b):\n     return np.sqrt((x-a)**2 + (y-b)**2)</s>"
  },
  {
    "text": "<s>[INST] Provide a solution for displaying another message if the user's input is invalid.\n\nname = input('What's your name? ') [/INST] name = input('What's your name? ')\nif not name.isalpha():\n    print('Error: Invalid input.')</s>"
  },
  {
    "text": "<s>[INST] Create a program that outputs the results of an election.\n\nvotes = [(\"A\", 55), (\"B\", 43), (\"C\", 21)] [/INST] votes = [(\"A\", 55), (\"B\", 43), (\"C\", 21)]\n\ntotal = 0\nfor name, count in votes:\n    total += count\n\nfor name, count in votes:\n    print(\"{}: {:.2f}%\".format(name, count/total*100))\n\n# Output: \n# A: 59.77%\n# B: 47.60%\n# C: 23.63%</s>"
  },
  {
    "text": "<s>[INST] Find the running time of this code snippet.\n\nlist = [2, 5, 1, 6, 9]\nx = 0\n\nfor item in list:\n    x += item [/INST] The running time of this code snippet is O(n), where n is the length of the list.</s>"
  },
  {
    "text": "<s>[INST] Create a Visual Studio Code extension that provides auto-complete features for a specific language. [/INST] This Visual Studio Code extension will create an Auto-Complete Provider for a specific language (e.g. JavaScript, Python, etc.). It will analyze the syntax of a given language and provide word suggestions while typing in the source code. The extension should be able to detect the language type from the file extension and then provide the auto-complete suggestions accordingly.</s>"
  },
  {
    "text": "<s>[INST] Provide the logic for sorting an array of strings alphabetically. [/INST] for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]</s>"
  },
  {
    "text": "<s>[INST] Replace the character at the second index with \"X\".\n\ns = \"Hello!\" [/INST] s = \"Hello!\"\nnew_str = s[:1] + \"X\" + s[2:]\nprint(new_str) # Output: HXllo!</s>"
  },
  {
    "text": "<s>[INST] Suggest a possible numpy code to normalize a data in the following manner.\n\nNormalize the data such that the values lie in the range 0-1. [/INST] import numpy as np\n\ndef normalize(arr):\n    arr = np.array(arr)\n    return (arr - arr.min()) / (arr.max() - arr.min())</s>"
  },
  {
    "text": "<s>[INST] Suggest a code to sort the following array of strings.\n\n[\"dinosaur\", \"cat\", \"dog\", \"elephant\", \"tiger\"] [/INST] arr = [\"dinosaur\", \"cat\", \"dog\", \"elephant\", \"tiger\"]\narr.sort()</s>"
  },
  {
    "text": "<s>[INST] Fill in the __ in the following code to print the reversed string.\n\noriginal_string = \"Hello World\"\n \nreversed_string = original_string[ __ : __ ]\n\nprint(reversed_string) [/INST] original_string = \"Hello World\"\n \nreversed_string = original_string[::-1]\n\nprint(reversed_string)</s>"
  },
  {
    "text": "<s>[INST] Construct a code to add a new item to the end of the list.\n\nlist_of_items = [\"apple\", \"orange\", \"cherry\"] [/INST] list_of_items = [\"apple\", \"orange\", \"cherry\"]\nlist_of_items.append(\"banana\")</s>"
  },
  {
    "text": "<s>[INST] Suggest a python code to print all the even numbers from the given list.\n\nlist_of_numbers = [11, 22, 31, 37, 44] [/INST] list_of_numbers = [11, 22, 31, 37, 44]\nfor num in list_of_numbers:\n    if num % 2 == 0:\n        print(num)</s>"
  },
  {
    "text": "<s>[INST] Construct an algorithm to check for palindrome in a given string. [/INST] def is_palindrome(text):\n\trev = ''.join(reversed(text)) \n\treturn rev == text</s>"
  },
  {
    "text": "<s>[INST] Suggest a code to iterate a list of numbers and add them to a variable.\n\nlist_of_numbers = [10, 20, 30, 40] [/INST] list_of_numbers = [10, 20, 30, 40]\n\ntotal = 0\nfor num in list_of_numbers:\n  total += num</s>"
  },
  {
    "text": "<s>[INST] Suggest a code to print the last two elements of a list.\n\nlist_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"] [/INST] list_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\nlast_two = list_of_items[-2:]\nprint(last_two)</s>"
  },
  {
    "text": "<s>[INST] Suggest a code to insert an element at the nth position of a given list.\n\nlist_of_items = [\"apple\", \"banana\", \"grapes\", \"mango\"] [/INST] list_of_items = [\"apple\", \"banana\", \"grapes\", \"mango\"]\n\nlist_of_items.insert(2, \"pineapple\")</s>"
  },
  {
    "text": "<s>[INST] Suggest a code to remove the third element of a list.\n\nlist_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"] [/INST] list_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\nlist_of_items.pop(2)</s>"
  },
  {
    "text": "<s>[INST] Create a pandas DataFrame based on the given input CSV.\n\nEmployeeID,EmployeeName,Salary\n1,John,12345\n2,David,23456\n3,Steve,34567 [/INST] import pandas as pd\n\ndf = pd.read_csv(\"input.csv\")\nprint(df)</s>"
  },
  {
    "text": "<s>[INST] Propose a fast sorting algorithm for a list of integers [/INST] The QuickSort algorithm is a fast sorting algorithm for a list of integers. QuickSort is a divide and conquer algorithm, meaning it divides a list into smaller lists and then sorts and combines the lists. It starts by partitioning the input list around a pivot element, then recursively sorts the two partitions and recombines them. Its average time complexity is O(n log n) with a space complexity of O(n).</s>"
  },
  {
    "text": "<s>[INST] Construct a regex expression to extract 3 digits in a string [/INST] \\d{3}</s>"
  },
  {
    "text": "<s>[INST] Write a code in Java to find the GCD of two numbers [/INST] public static int gcd(int num1, int num2)\n{\n    if(num2==0)\n        return num1;\n    return gcd(num2, num1%num2);\n}</s>"
  },
  {
    "text": "<s>[INST] Design a function to generate the random password [/INST] import random\n\ndef generate_password():\n    #Declare a string of all possible characters\n    all_chars = \"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+=-`'\"\n    #Declare the length of password\n    password_len = 8\n    #Create empty string\n    password = \"\"\n    for i in range(password_len):\n        #Generate a random index\n        rand_index = random.randint(0, len(all_chars)-1)\n        #Append character at the index to password\n        password += all_chars[rand_index]\n    return password</s>"
  },
  {
    "text": "<s>[INST] Inside a Python program, how would you convert a float number to a string? [/INST] str_number = str(float_number)</s>"
  },
  {
    "text": "<s>[INST] What should be the output of the following JavaScript statement?\n\nlet x = 5 + 4 [/INST] The output of the statement is 9.</s>"
  },
  {
    "text": "<s>[INST] How to clear the console screen in C++? [/INST] The console screen can be cleared in C++ using the system() command with the clear argument: system(\"clear\");</s>"
  },
  {
    "text": "<s>[INST] Develop a Python function that returns the first two characters of a string.\n\nstring = \"GPT-3\" [/INST] def first_two_chars(string):\n  return string[:2]</s>"
  },
  {
    "text": "<s>[INST] Construct a block of JavaScript code to find the smallest of 3 numbers [/INST] let num1 = 10;\nlet num2 = 20;\nlet num3 = 15;\n\nlet smallest = Math.min(num1, num2, num3);\nconsole.log(smallest);</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query that returns the names of customers from the \"Customers\" table whose age is between 20 and 30. [/INST] SELECT name FROM Customers WHERE age BETWEEN 20 and 30;</s>"
  },
  {
    "text": "<s>[INST] Develop a valid C code to print the array elements.\n\nint arr[] = {1,2,3,4,5} [/INST] #include <stdio.h>\n\nint main()\n{\n    int arr[] = {1,2,3,4,5};\n    int size = sizeof(arr)/sizeof(arr[0]);\n\n    for (int i = 0; i < size; i++) { \n        printf(\"%d\\n\", arr[i]); \n    } \n\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL statement that returns the salary of the employee with the highest salary of the \"Employees\" table. [/INST] SELECT MAX(salary) FROM Employees;</s>"
  },
  {
    "text": "<s>[INST] How would you edit the following HTML code so that it displays content in two columns?\n\n<div>\n  <p>This is the content</p>\n</div> [/INST] <div>\n  <div style=\"float: left; width: 50%;\">\n    <p>This is the content 1</p>\n  </div>\n  <div style=\"float: right; width: 50%;\">\n    <p>This is the content 2</p>\n  </div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Construct a valid SQL statement to calculate the sum of the \"price\" column in the \"Orders\" table [/INST] SELECT SUM(price) FROM Orders;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all the records in the \"employees\" table where the job_title is \"Software Engineer\".\n\nTable Name: employees \nColumns: employee_id, job_title [/INST] SELECT * FROM employees WHERE job_title = 'Software Engineer';</s>"
  },
  {
    "text": "<s>[INST] Reverse a string using a stack.\n\nstring: hello [/INST] def reverse_string_using_stack(string): \n    stack = []\n    for char in string:\n        stack.append(char)\n    reversed_string = ''\n    while len(stack) > 0: \n        reversed_string += stack.pop()\n    return reversed_string</s>"
  },
  {
    "text": "<s>[INST] Create a Java function to remove duplicate characters in a string.\n\nstring: hello [/INST] public string removeDuplicateChars(String str){ \n  Set<Character> set = new HashSet<Character>(); \n  StringBuffer sb = new StringBuffer(); \n  for (int i = 0; i < str.length(); i++) { \n    Character ch = str.charAt(i); \n    if(!set.contains(ch)) { \n      set.add(ch); \n      sb.append(ch); \n    } \n  } \n  return sb.toString(); \n}</s>"
  },
  {
    "text": "<s>[INST] Calculate the distance between two points using Pythagoras theorem.\n\nPoint A: (3, 4) Point B: (7, 8) [/INST] distance = sqrt((7-3)^2 + (8-4)^2)\n= sqrt(16 + 16)\n= sqrt(32)\n= 5.657</s>"
  },
  {
    "text": "<s>[INST] Create a jQuery function to detect when a page is scrolled. [/INST] $(window).scroll(function() {\n  console.log('Scroll detected'); \n});</s>"
  },
  {
    "text": "<s>[INST] Create an RNN model to classify emails into spam and not spam. [/INST] #imports\nimport tensorflow as tf \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout \n#Model\nmodel = tf.keras.models.Sequential([\n    Embedding(vocab_size, embedding_dim, input_length = max_len),\n    LSTM(128),\n    Dense(64, activation = 'relu'),\n    Dropout(0.25),\n    Dense(1, activation = 'sigmoid')\n])</s>"
  },
  {
    "text": "<s>[INST] Create a CSS style to set the font color to red for a heading element. [/INST] h1 { \n  color: red; \n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm for sorting a given array of numbers.\n\narray: [2, 5, 3, 4, 1] [/INST] function sort(array) { \n  for (let i = 0; i < array.length - 1; i++) { \n    for (let j = 0; j < array.length - i - 1; j++) { \n      if (array[j] > array[j+1]) { \n        let temp = array[j]; \n        array[j] = array[j+1]; \n        array[j+1] = temp; \n      } \n    } \n  } \n  return array; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object with 3 keys and 3 values. [/INST] const myObject = { \n  key1: 'value1',\n  key2: 'value2', \n  key3: 'value3' \n}</s>"
  },
  {
    "text": "<s>[INST] Write a function that calculates surface area of a regular 3D-pyramid.\n\nLet the base of the pyramid is 5 meters and its height is 8 meters [/INST] def surface_area_pyramid(base_length, height):\n    area_of_base = base_length * base_length\n    side_of_base = (base_length ** 2 + height ** 2) ** 0.5\n    area_of_sides = (side_of_base * base_length) * 4\n    return area_of_base + area_of_sides</s>"
  },
  {
    "text": "<s>[INST] Format this JavaScript code in a readable way.\n\nfunction foo(){console.log(\"this is a test\")} [/INST] function foo() {\n  console.log(\"this is a test\");\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to calculate the exponential for a given base and exponent.\n\nBase = 3, exponent=4 [/INST] function calculateExponential(base, exponent) {\n  let result = 1;\n  for (let i = 0; i < exponent; i++) {\n    result *= base;\n  }\n  return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a solution to this algorithm problem.\n\nGiven an int array A, find the min absolute difference between any two of its elements. [/INST] def minAbsDifference(arr):\n    min_difference = float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_difference:\n                min_difference = diff\n    return min_difference</s>"
  },
  {
    "text": "<s>[INST] Rewrite this C++ function in Python\n\nint max (int a, int b)\n{\nif (a > b) \nreturn a;\nelse \nreturn b; \n} [/INST] def max(a, b):\n    if a > b:\n        return a\n    else:\n        return b</s>"
  },
  {
    "text": "<s>[INST] Design a program that produces the following output: \n . . . . . . . . . . . . . . . . . . . . . [/INST] #include <iostream>\n\nint main() \n{\n    for (int i=0; i<17; i++) {\n        std::cout << \".\";\n    }\n\n    std::cout << std::endl;\n\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to print the following output:\nday     temperature\nMonday    20\nTuesday   25 [/INST] print(\"day     temperature\")\nprint(\"Monday    20\")\nprint(\"Tuesday   25\")</s>"
  },
  {
    "text": "<s>[INST] How can we set a variable in C++? [/INST] In C++, we can set a variable in two ways:\n1. By using an assignment operator (=), for example: int x = 5; \n2. By using the declaration of the variable, for example: int x;  x = 5;</s>"
  },
  {
    "text": "<s>[INST] Write a code to flatten a two-dimensional list into one-dimensional list in Python.\n\nTwo-dimensional List: [[1,2], [3,4], [5,6]] [/INST] def flatten_2d_list(lst):\n  flat_list = []\n  for elem in lst:\n    for item in elem:\n      flat_list.append(item)\n  return flat_list\n\ntest_list = [[1,2], [3,4], [5,6]] \nprint(flatten_2d_list(test_list))</s>"
  },
  {
    "text": "<s>[INST] How can we dynamically add an element to a set in Python? [/INST] In Python, we can dynamically add an element to a set using the add() method. For example, \n\ns = set()\ns.add(4)\nprint(s)</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to find the second most frequent character in a string.\n\nString: \"Hello World!\" [/INST] public class SecondMostFrequent {\n\n  public static char findSecondMostFrequent(String str) {\n    int[] counts = new int[26];\n    for(int i = 0; i < str.length(); i++)\n      counts[str.charAt(i)- 'a']++;\n\n    int index = 0;\n    int max_count = 0;\n \n    for(int i = 0; i < str.length(); i++) {\n     \n      if(counts[str.charAt(i) - 'a'] > max_count) {\n        max_count = counts[str.charAt(i) - 'a'];\n        index = i;\n      }\n    }\n    \n    int sec_max = 0;\n    int sec_index = 0;\n \n    for(int i = 0; i < str.length(); i++) {\n     \n      if(counts[str.charAt(i) - 'a'] > sec_max && counts[str.charAt(i) - 'a'] < max_count) {\n        sec_max = counts[str.charAt(i) - 'a'];\n        sec_index = i;\n      }\n    }\n \n    return str.charAt(sec_index);\n  }\n \n  public static void main(String args[]) {\n    String str = \"hello world!\";\n    System.out.println( findSecondMostFrequent(str));\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Change the following list of strings to uppercase in Python.\n\nList: ['one', 'two', 'three'] [/INST] list_strings = [\"one\", \"two\", \"three\"]\n\nlist_strings = [string.upper() for string in list_strings]\n\nprint(list_strings)</s>"
  },
  {
    "text": "<s>[INST] Describe what is polymorphism in Java. [/INST] In Java, polymorphism is a programming concept that allows the same code to be used to perform different tasks. This is achieved by assigning different behaviors to different objects that share a common base class. Thus, when a method is invoked, the runtime determines which version of the method should be executed by examining the object on which the method is called.</s>"
  },
  {
    "text": "<s>[INST] How can we create an array of ten zeroes in JavaScript? [/INST] In JavaScript, we can create an array of ten zeroes using the Array.from() method. For example:\n\nconst array = Array.from({length: 10}, () => 0);\n\nconsole.log(array);</s>"
  },
  {
    "text": "<s>[INST] Create a python function that computes the area of a rectangle given the length and width. [/INST] def calculateRectangleArea(length, width):\n  area = length * width\n  return area</s>"
  },
  {
    "text": "<s>[INST] Generate a random 29 character hexadecimal string using javascript. [/INST] function generateRandomHexString(length) {\n    let result = '';\n    const characters = '0123456789ABCDEF';\n\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n \n    return result;\n}\nlet hexString = generateRandomHexString(29);\nconsole.log(hexString);</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression that matches strings that start with a certain prefix, followed by two or more numbers, and ending with two or more alphabet characters.\n\nprefix = \"ABC\" [/INST] import re\n \nprefix = \"ABC\"\npattern = re.compile('^' + prefix + '\\d{2,}[A-Za-z]{2,}$')</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to update the 'name' on table 'employees' with the value 'User 1' where the id is 1. [/INST] UPDATE employees\nSET name = 'User 1'\nWHERE id = 1;</s>"
  },
  {
    "text": "<s>[INST] Edit the program below to print out the square root of a number.\n\n#include <iostream> \n \nint main() \n{ \n    int number; \n  \n    std::cout << \"Enter an integer: \"; \n    std::cin >> number; \n  \n    // Add code to print square root of the number \n  \n    return 0;\n} [/INST] #include <iostream> \n#include <cmath>\n \nint main() \n{ \n    int number; \n  \n    std::cout << \"Enter an integer: \"; \n    std::cin >> number; \n  \n    // Add code to print square root of the number \n    std::cout << \"Square root of \" << number << \" is: \" << sqrt(number) << std::endl;\n  \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Design a JavaScript program that takes two numbers as input and prints their sum. [/INST] // Define a function to add two numbers\nfunction addTwoNumbers(num1, num2){\n  return num1 + num2;\n}\n\n// Main program\n// Get two numbers from user\nlet num1 = prompt(\"Enter the first number to add:\");\nlet num2 = prompt(\"Enter the second number to add:\");\n\n// Call the function to get the sum\nlet sum = addTwoNumbers(num1, num2);\n\n// Print result to the user\nconsole.log(`The sum of ${num1} and ${num2} is: ${sum}`);</s>"
  },
  {
    "text": "<s>[INST] Create a recursive SQL query to find the level of each node in a tree structure.\n\nWITH RECURSIVE tree_levels (node, parent, level)\nAS\n(\n    SELECT node, parent, 0\n    FROM root_table\n    WHERE parent IS NULL\n    UNION ALL\n    SELECT child.node, child.parent, tree_levels.level + 1\n    FROM root_table AS child\n    JOIN tree_levels\n    ON child.parent = tree_levels.node\n) [/INST] SELECT tree_levels.node, tree_levels.level\nFROM tree_levels\nORDER BY tree_levels.node;</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to classify a given set of data into three classes. [/INST] from sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# X is the training data\nX = np.array([[0, 0], [1, 1], [1, 0], [0, 1], [1, 2], [2, 1], [2, 2]])\n\n# y is the labels of the classes\ny = np.array([0, 0, 1, 1, 2, 2, 2])\n\n# Create the model\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model using the training data\nmodel.fit(X, y)\n\n# Use the model to make predictions \nprediction = model.predict([[2, 3]])\n\nprint(prediction)</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to compute Pi to the Nth digit. [/INST] import math\n\nn = int(input(\"Enter the number of digits of pi to compute: \"))\n\n# Compute pi to nth decimal place\npi = round(math.pi, n)\n\nprint(\"The value of pi to {0} decimal places is: {1}\".format(n, pi))</s>"
  },
  {
    "text": "<s>[INST] Create a query to find all unique combinations of size two in a given list.\n\n[1, 2, 3, 4] [/INST] SELECT DISTINCT a.val AS val1, b.val AS val2\nFROM myTable a\nJOIN myTable b\nON a.id <> b.id\nWHERE a.val IN (1,2,3,4)\nAND b.val IN (1,2,3,4)\nORDER BY a.val, b.val;</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to calculate the mean, mode and median in a given set of numbers. [/INST] def mean(nums):\n    return sum(nums)/len(nums)\n\ndef mode(nums):\n    countDict = {}\n    for num in nums:\n        if num in countDict:\n            countDict[num] += 1\n        else:\n            countDict[num] = 1\n    maxValue = 0\n    maxKey = -1\n    for key, value in countDict.items():\n        if value > maxValue:\n            maxValue = value\n            maxKey = key\n    return maxKey\n\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2-1])/2\n    else:\n        return nums[(len(nums)-1)//2]\n\nif __name__ == '__main__':\n    nums = [1,2,2,2,3,4,5]\n    print(\"Mean: \", mean(nums))\n    print(\"Mode: \", mode(nums))\n    print(\"Median: \", median(nums))</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that takes in two arrays of numbers, and returns an array containing only the numbers that appear in both arrays.\n\narr1 = [1, 2, 3, 4, 5]; \narr2 = [3, 4, 5, 6, 7] [/INST] function containsSameNumbers(arr1, arr2) {\n\tconst intersection = [];\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr2.includes(arr1[i])) {\n\t\t\tintersection.push(arr1[i]);\n\t\t}\n\t}\n\treturn intersection;\n}\n\ncontainsSameNumbers(arr1, arr2); // Output: [3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] In Python, create a function that takes a string as an argument and returns a string with the vowels replaced with an asterisk (*). [/INST] def replace_vowels(string):\n\tvowels = \"aeiou\"\n\tresult = \"\"\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tchar = \"*\"\n\t\tresult += char\n\treturn result</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the `sort()` JavaScript array method? [/INST] The sort() JavaScript array method is used to sort the elements of an array in place and returns the sorted array. The default sort order is ascending according to the string Unicode code points.</s>"
  },
  {
    "text": "<s>[INST] Design an HTML form that allows the user to submit his/her contact details. [/INST] <form action=\"contactaction.php\" method=\"post\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\"> <br>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" name=\"email\" placeholder=\"example@domain.com\"><br>\n  <label for=\"phone\">Phone:</label>\n  <input type=\"tel\" name=\"phone\" placeholder=\"123-456-7890\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that takes a positive integer as an argument and returns the first prime number larger than that integer.\n\nnum = 10 [/INST] function nextPrime(num) {\n  let isPrime = true;\n  let nextNum = num + 1;\n  while (isPrime) {\n    for (let i = 2; i < nextNum; i++) {\n      if (nextNum % i === 0) {\n        nextNum++;\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      return nextNum;\n    }\n  }\n }\n\nnextPrime(num); // Output: 11</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object with two properties, `name` and `age`, and two methods `sayHello`, which logs \"Hello\" to the console, and `addOneToAge`, which increments the `age` by one. [/INST] const user = {\n  name: 'John',\n  age: 20,\n  sayHello: function() {\n    console.log('Hello');\n  },\n  addOneToAge: function() {\n    this.age++;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a CSS style sheet to make all `<h2>` headings have a blue background and white text. [/INST] h2 {\n  background-color: blue;\n  color: white;\n}</s>"
  },
  {
    "text": "<s>[INST] In JavaScript, write 3 lines of code to define a function `add()` which will take two numbers as arguments and returns their sum. [/INST] function add(a, b) {\n  let sum = a + b;\n  return sum;\n}</s>"
  },
  {
    "text": "<s>[INST] In Bash, write a command line to create a directory called `myFolder` in the current working directory. [/INST] mkdir myFolder</s>"
  },
  {
    "text": "<s>[INST] In Python, write a function to print out a sequence of numbers from 1 to 10. [/INST] def print_sequence():\n  for i in range(1, 11):\n    print(i)\n\nprint_sequence() # Output: 1 2 3 4 5 6 7 8 9 10</s>"
  },
  {
    "text": "<s>[INST] How can you generate a random number in the range of 1 to 10 in Python? [/INST] import random\nrandom_number = random.randint(1, 10)</s>"
  },
  {
    "text": "<s>[INST] Convert the following 10 bytes data into a string.\n\nb\"\\x00\\x0f\\x14\\x03\\x11\\x07\\x08\\x13\\x05\\x10\" [/INST] data = b\"\\x00\\x0f\\x14\\x03\\x11\\x07\\x08\\x13\\x05\\x10\"\noutput_string = data.decode()\nprint(output_string) # Output: \"ؐءؔ؃ؗ؈ؓ\"</s>"
  },
  {
    "text": "<s>[INST] What is a MongoDB document? [/INST] A MongoDB document is a record in a NoSQL database that is represented in the form of a JSON-like structure. It contains a set of key-value pairs where each key is associated with a specific value. Documents can also be nested and can contain arrays and other documents.</s>"
  },
  {
    "text": "<s>[INST] Write a function to split a string of words by comma.\n\nstring = 'apple,orange,banana,grapes' [/INST] def split_by_comma(string):\n    return string.split(\",\")</s>"
  },
  {
    "text": "<s>[INST] Calculate the maximum element in the given list.\n\nmy_list = [2, 1, 7, 5, 3] [/INST] def max_element(my_list): \n    max_num = my_list[0] \n    for num in my_list: \n        if num > max_num: \n            max_num = num\n    return max_num</s>"
  },
  {
    "text": "<s>[INST] Modify the code below to pull data from the API endpoint provided.\n\nEndpoint: https://jsonplaceholder.typicode.com/posts [/INST] import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\n\nresponse = requests.get(url)\ndata = response.json()\n\nfor post in data:\n    title = post['title']\n    body = post['body']\n    \n    print('Title: ', title)\n    print('Body: ', body)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to accept two numbers from the user and multiply them. [/INST] let num1 = prompt('Enter the first number:');\nlet num2 = prompt('Enter the second number:');\n\nlet result = parseInt(num1) * parseInt(num2);\n\nconsole.log(`The product of ${num1} and ${num2} is ${result}`);</s>"
  },
  {
    "text": "<s>[INST] Create a report in PDF format that displays the most frequent words used in the New York Times articles. [/INST] import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom textblob import TextBlob\nfrom nltk.tokenize import word_tokenize \nfrom nltk.tokenize import sent_tokenize\nfrom nltk.probability import FreqDist\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_pdf import PdfPages\n\ndef get_top_words(string):\n tokenized_words = word_tokenize(string)\n freqdist = FreqDist(tokenized_words)\n return freqdist.most_common(15)\n\n# Download nltk dependencies\n# nltk.download('punkt')\n# nltk.download('vader_lexicon')\n\n# Scrape news articles\narticles = scrape_nyt()\n\n# Get top words\ntop_words = []\nfor article in articles:\n top_words.append(get_top_words(article))\n\n# Create PDF report\npp = PdfPages('nyt_word_freq.pdf')\nplt.figure(figsize=(15,10))\nplt.bar(*zip(*top_words))\nplt.xticks(rotation=90)\npp.savefig()\npp.close()</s>"
  },
  {
    "text": "<s>[INST] Construct an algorithm to predict the next 3 days' stock market movements given the stock prices from the past 5 days.\n\n[69.04, 67.07, 68.3, 68.91, 70.09] [/INST] def predict_stock_movements(data):\n# Initialize empty list to store predicted values\npredictions = []\n\n# Iterate over the given data\nfor i in range(len(data)-2):\n # Calculate the average of the 5 days\n avg = sum(data[i:i+3])/3\n # Calculate the current and past day market movement\n curr_mov = data[i+2] - data[i+1]\n past_mov = data[i+1] - data[i]\n # Predict the next day\n prediction = avg + curr_mov + past_mov\n predictions.append(prediction)\n\nreturn predictions</s>"
  },
  {
    "text": "<s>[INST] Create a program to determine whether a given sequence is an arithmetic progression or not.\n\n[-6, -2, 2, 6] [/INST] def is_arithmetic_progression(arr):\n # Check if the given array is empty\n if len(arr) == 0:\n  return False\n # Initialize the common difference and the first element\n commonDifference = arr[1] - arr[0]\n firstElement = arr[0]\n # Iterate over the array\n for i in range(len(arr)):\n  if arr[i] != firstElement + (i * commonDifference):\n   return False\n # If all elements are in an arithmetic progression\n return True</s>"
  },
  {
    "text": "<s>[INST] Construct a classifier to identify which programming language a given code snippet belongs to.\n\ndef foo(x, y):\n return x + y [/INST] from sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.naive_bayes import MultinomialNB\n\ndef get_features(code):\n # Count the words in the code\n vectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w+\\b\")\n count_vectors = vectorizer.fit_transform([code])\n return count_vectors.toarray()\n\ndef classify_language(code):\n # Training data\n data = [(\"Python\", \"def foo(x, y):\\n return x + y\"),\n (\"Java\", \"public int foo(int x, int y) {\\n return x + y;\\n }\"),\n (\"C++\", \"int foo(int x, int y) {\\n return x + y;\\n }\"),\n (\"JavaScript\", \"function foo(x, y) {\\n return x + y;\\n }\")]\n languages, codes = zip(*data)\n \n # Extract features from the code\n X_train = [get_features(c) for c in codes]\n # Train a classifier\n clf = MultinomialNB().fit(X_train, languages)\n # Extract features from the given code\n X_input = get_features(code)\n # Predict the language\n return clf.predict([X_input])[0]</s>"
  },
  {
    "text": "<s>[INST] Write a function to implement the Levenshtein Distance algorithm. The Levenshtein Distance algorithm calculates the minimum number of single-character edits (insertions, deletions, or substitutions) necessary to transform one string into another string.\n\n\"cats\", \"dogs\" [/INST] def levenshtein_distance(str1, str2):\n # Create a matrix for storing the distances\n m = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]\n # Mark the first Edit Distance value as 0\n m[0][0] = 0\n \n # Iterate over the matrix \n for i in range(0, len(str1) + 1):\n  for j in range(0, len(str2) + 1):\n   # If we are at the first row or first col, mark the cells with corresponding numbers\n   if i == 0:\n    m[i][j] = j\n   elif j == 0:\n    m[i][j] = i\n   # Otherwise, calculate the distance according to the  formula\n   else:\n    if str1[i-1] == str2[j-1]:\n     m[i][j] = m[i-1][j-1]\n    else:\n     m[i][j] = min(m[i-1][j], m[i-1][j-1], m[i][j-1]) + 1\n  \n # Return the last element in the matrix, which is the Levenshtein Distance\n return m[-1][-1]</s>"
  },
  {
    "text": "<s>[INST] Write a Python script that uses regular expressions to check whether a given URL is correctly formatted or not. [/INST] import re\n\ndef is_valid_url(url):\n # Check if the URL is valid using a regex\n regex = re.compile(r\"^(?:http|ftp)s?://([^/]+[.])*[^/]+/?.*$\")\n if regex.match(url):\n  return True\n return False</s>"
  },
  {
    "text": "<s>[INST] Write a function to remove duplicate elements from a list keeping only the first occurrence of each element.\n\n[1, 2, 3, 3, 3, 4, 4, 5] [/INST] def remove_duplicates(nums):\n # Create a list to store the first occurrence of each number\n seen = []\n # Iterate over the list\n for num in nums:\n  # If the number is not in the seen list, add it\n  if num not in seen:\n   seen.append(num)\n return seen</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a list of strings as input and returns a string of the list sorted in the alphabetical order.\n\n[\"apple\", \"banana\", \"cherry\"] [/INST] def sort_strings_alphabetically(words):\n# Use the built-in sorted() function to sort the list of strings\nsorted_words = sorted(words)\n# Join the sorted list of words separated by spaces\nreturn \" \".join(sorted_words)</s>"
  },
  {
    "text": "<s>[INST] Modify the following code so that it prints the reversed version of a list.\n\nlist1 = [1, 2, 3, 4, 5]\n\ndef print_reverse_list(my_list): [/INST] list1 = [1, 2, 3, 4, 5]\n\ndef print_reverse_list(my_list):\n    my_list.reverse()\n    print(my_list)</s>"
  },
  {
    "text": "<s>[INST] Create a valid JSON string which contains the following elements\n\nname: John\nage: 32\ncity: New York [/INST] {\n  \"name\": \"John\",\n  \"age\": 32,\n  \"city\": \"New York\"\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a method to run a python program from an interactive terminal session. [/INST] The simplest way to run a python program from an interactive terminal session is to use the \"python\" command. For example, if you have a file called \"myprog.py\", you can type \"python myprog.py\" at the command line and the program will be executed. Alternately, you can use the \"execfile\" command, which takes a file name as an argument and executes it.</s>"
  },
  {
    "text": "<s>[INST] Create a class representing a car [/INST] class Car:\n    def __init__(self, make, model, year, engine_size):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.engine_size = engine_size</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to check if a given string contains alphanumeric characters [/INST] The simplest way to check if a given string contains alphanumeric characters is to use the built-in isalnum() method which will return True if the string contains at least one alphanumeric character and False otherwise. Example:\n\nmy_string = 'Hello123'\n\nif my_string.isalnum():\n    print('Contains alphanumeric characters')\nelse:\n    print('Does not contain alphanumeric characters')</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to insert the element 'x' into the list at position 'index'\n\nlist1 = [1, 2, 3, 4, 5]\nx = 6\nindex = 3 [/INST] list1 = [1, 2, 3, 4, 5]\nx = 6\nindex = 3\n\nlist1.insert(index, x)</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java to build a singly linked list. [/INST] public class SinglyLinkedList { \n     \n    Node head; // head of list \n     \n    // Linked list Node. \n    // This inner class is made static \n    // so that main() can access it \n    static class Node { \n        int data; \n        Node next; \n        Node(int d) \n        { \n            data = d; \n            next = null; \n        } // Constructor \n    } \n     public void printList() \n    { \n        Node n = head; \n        while (n != null) { \n            System.out.print(n.data + \" \"); \n            n = n.next; \n        } \n    } \n \n    public void push(int new_data) \n    { \n        \n        Node new_node = new Node(new_data); \n  \n       \n        new_node.next = head; \n \n        head = new_node; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select only the rows with an age greater than 10.\n\nTable Name: users \nColumns: name, age [/INST] SELECT * FROM users WHERE age > 10;</s>"
  },
  {
    "text": "<s>[INST] Create a regex expression to match with a specific format of email address. [/INST] /([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/</s>"
  },
  {
    "text": "<s>[INST] Retrieve unique values from a list of integers.\n\nList: [3, 5, 7, 3, 4, 6, 7, 8] [/INST] [3, 5, 7, 4, 6, 8]</s>"
  },
  {
    "text": "<s>[INST] Perform sentiment analysis on the following sentence and indicate if it is positive or negative.\n\nSentence: I had a really bad experience at the shop. [/INST] Negative sentiment.</s>"
  },
  {
    "text": "<s>[INST] Create a matrix in R and fill it with random numbers.\n\nSize: 4 x 5 [/INST] matrix2 <- matrix(runif(n = 20, min = 0, max = 10), nrow = 4, ncol = 5)</s>"
  },
  {
    "text": "<s>[INST] Convert the following hex color to RGB.\n\nHex Color: #4286f4 [/INST] RGB(66, 134, 244)</s>"
  },
  {
    "text": "<s>[INST] Create a bash script to print the version of python installed in the computer. [/INST] #!/bin/bash\npython --version</s>"
  },
  {
    "text": "<s>[INST] Implement a constructor to create an account\n\nclass Account: [/INST] def __init__(self, name, balance):\n  self.name = name\n  self.balance = balance</s>"
  },
  {
    "text": "<s>[INST] Generate a regular expression to match the following patterns\n\nwxyz - w:[a-c] x:[0-9] y:[a-z] z:[A-Z] [/INST] ^[a-c][0-9][a-z][A-Z]$</s>"
  },
  {
    "text": "<s>[INST] Identify the time complexity for the following piece of code\n\narr = [5, 2, 4, 8, 1]\nfor i in range (len(arr)):\n   for j in range (len(arr)): [/INST] O(n^2)</s>"
  },
  {
    "text": "<s>[INST] Generate valid HTML for a table with three columns [/INST] <table>\n  <tr>\n    <th>Column1</th>\n    <th>Column2</th> \n    <th>Column3</th>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Implement a function to remove all occurrences of an element in a given list [/INST] def remove_element(list, element): \n    return [x for x in list if x != element]</s>"
  },
  {
    "text": "<s>[INST] Generate a valid JSON object for a user [/INST] {\n  \"full_name\": \"\",\n  \"age\": 0,\n  \"address\": {\n    \"street\": \"\",\n    \"city\": \"\",\n    \"state\": \"\"\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Recognize the type of error in the given code and provide which line of code is causing the error.\n\ndef divide(numerator, denominator):\n    return numerator / denominator\n\nnumber = int(input(\"Enter a number: \"))\n    result = divide(100, number) [/INST] Line 4 is causing a syntax error due to improper indentation.</s>"
  },
  {
    "text": "<s>[INST] Parse the following HTML content and print the text present in the <p> tag.\n\n<div>\n  <p>Hello World!</p>\n</div> [/INST] print(soup.find('p').text)  # 'Hello World!'</s>"
  },
  {
    "text": "<s>[INST] Retrieve all the values from the nested dictionary.\n\ndata_dict = {\n'key1': {\n  'inner_key1': \"1\",\n  'inner_key2': \"2\"\n},\n'key2': {\n  'inner_key1': \"3\",\n  'inner_key2': \"4\"\n}\n} [/INST] for key1_value in data_dict.values():\n  for (inner_key1, inner_key2) in key1_value.items():\n    print(inner_key1, inner_key2)</s>"
  },
  {
    "text": "<s>[INST] Grant access to content by creating a function that takes in an age and returns a boolean.\n\nAge: 20 [/INST] def check_age(age):\n  if age < 18:\n    return False\n  else:\n    return True</s>"
  },
  {
    "text": "<s>[INST] Fix any code errors in the given function.\n\ndef addToList list: num\n  list.append(num)\n  return list [/INST] def addToList(List, num):\n  List.append(num);\n  return List</s>"
  },
  {
    "text": "<s>[INST] Construct a lambda expression to multiply the numbers by 2. [/INST] x = lambda n : n * 2</s>"
  },
  {
    "text": "<s>[INST] Create a class to store a given list of strings.\n\nList: ['hello', 'world', 'hi'] [/INST] class StrList:\n def __init__(self, str_list):\n    self.str_list = str_list\n   \n  def get_list(self):\n    return self.str_list</s>"
  },
  {
    "text": "<s>[INST] Get the name and message property from the given dictionary.\n\ndata = {\n'name': 'John',\n'message': 'Hello World!',\n'city': 'New York'\n} [/INST] name = data['name']\nmessage = data['message']</s>"
  },
  {
    "text": "<s>[INST] Find the most commonly used element in a given list.\n\nList: [8, 1, 7, 7, 4, 8, 8, 7] [/INST] from collections import Counter\n\nlist = [8, 1, 7, 7, 4, 8, 8, 7]\n\nmost_common = Counter(list).most_common(1)[0]\n\nprint(\"Most common element is {}\".format(most_common[0]))</s>"
  },
  {
    "text": "<s>[INST] Execute a query to access the records from the table.\n\nSELECT * FROM tablename [/INST] cursor.execute(\"SELECT * FROM tablename\")</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers and a target number, write a Python program to find if there exists a sublist whose sum equals the target.\n\nnumbers = [2, 4, 8, 9, 5, 7], target = 15 [/INST] def sublist_sum(numbers, target) : \n    n = len(numbers) \n  \n    # Consider all sublists of arr[] and return \n    # true if given sum is present in any of them \n    for i in range(n) : \n        curr_sum = numbers[i] \n  \n        # Try different endpoints for current subarray \n        j = i+1\n        while j<=n : \n  \n            if curr_sum == target : \n                return True\n  \n            if curr_sum > target or j == n: \n                break\n  \n            curr_sum = curr_sum + numbers[j] \n            j += 1\n  \n    return False</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to calculate the total of all the elements in a nested list.\n\nnested_list = [[1,2,3], [4,5,6], [7,8,9]] [/INST] def sum_of_nested_list(nested_list):\n    total = 0\n    for internal_list in nested_list:\n        for num in internal_list:\n            total += num\n    return total</s>"
  },
  {
    "text": "<s>[INST] Change all the character in a given string to its corresponding upper case.\n\nstring = \"I love programming.\" [/INST] string.upper()</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to find the maximum depth of a given nested list.\n\nnested_list = [[1,2], [3,4], [5,6,7]] [/INST] def max_depth_of_nested_list(nested_list):\n    max_depth = 1\n    for inner_list in nested_list:\n        depth = 1\n        if type(inner_list) == list:\n            depth += max_depth_of_nested_list(inner_list)\n        max_depth=max(depth, max_depth)\n    return max_depth</s>"
  },
  {
    "text": "<s>[INST] Write a query statement to select the name, age and address of the oldest person in our database? [/INST] SELECT name, age, address FROM TableName ORDER BY age DESC LIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Modify the following script to format the output to just two decimal places.\n\noriginal_script.py\n\nimport math\n\na = math.pi\nprint(a) [/INST] import math\n\na = math.pi\nprint(\"{:.2f}\".format(a))</s>"
  },
  {
    "text": "<s>[INST] Given a list of integers, write a Python code to return the most frequent item.\n\nnum_list = [3, 7, 8, 8, 5, 7, 8, 6, 8] [/INST] ModeElement = max(set(num_list), key = num_list.count) \nprint(\"Most Frequent Element : \", ModeElement)</s>"
  },
  {
    "text": "<s>[INST] Generate a random list of 20 unique numbers from 0 to 30. [/INST] [3, 5, 12, 11, 14, 0, 22, 19, 10, 6, 1, 25, 18, 27, 24, 16, 17, 21, 20, 15]</s>"
  },
  {
    "text": "<s>[INST] Construct a while loop with an if-else statement in Java to print all odd numbers between 1 to 10. [/INST] int i = 1;\nwhile (i <= 10) { \n    if (i % 2 != 0) {\n        System.out.print(i + \" \"); \n    }\n    i++;\n}</s>"
  },
  {
    "text": "<s>[INST] Compile a given c code and debug the program to find the exact output.\n\n#include<stdio.h>\n\nint main() \n{ \n    char str[] = \"Hello\"; \n    char *p; \n    p = &str[2]; \n    printf(\"%c\\n\", *(p++)); \n    printf(\"%c\", *p); \n    return 0; \n} [/INST] ll\no</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the factorial of 5 using Python. [/INST] def factorial(n): \n   if n == 0: \n       return 1\n   else: \n       return n * factorial(n-1) \nprint(factorial(5)) # Output: 120</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, write JavaScript code to find the largest number amongst the array elements.\n\narr = [5, 10, 2, 7, 3] [/INST] let largestNumber = arr.reduce(\n  (mostRecentLargest, currentItem) => \n    currentItem > mostRecentLargest ? \n    currentItem : mostRecentLargest\n);\n\nconsole.log(largestNumber); // Output: 10</s>"
  },
  {
    "text": "<s>[INST] Provide a list of all the functionality available to a React Native application. [/INST] React Native applications will have access to a range of features, such as:\n\n- Navigation\n- Data store\n- Image and video manipulation\n- Network and internet data access\n- Geolocation\n- Offline storage \n- Push notifications\n- Animations\n- Accessibility \n- Internationalization\n- Integration with third-party platforms/APIs</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, write an algorithm to sort them in an ascending order.\n\narr = [23, 32, 19, 17, -5, 3] [/INST] let arrLength = arr.length;\nlet temp;\n\nfor(i = 0; i < arrLength; i++){\n   for(j = 0; j < (arrLength - i - 1); j++){\n\t   // Compare two adjacent elements\n       if(arr[j] > arr[j+1]){\n          // Swap them\n          temp = arr[j];\n          arr[j] = arr[j+1];\n          arr[j+1] = temp;\n       }\n    }\n}\n\nconsole.log(arr); // Output: [-5, 3, 17, 19, 23, 32]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the name of the top 10 highest salary employees in the company. [/INST] SELECT TOP 10 Name, Salary FROM Employees ORDER BY Salary DESC;</s>"
  },
  {
    "text": "<s>[INST] Create a function to check if two strings are an anagram of one another using Python.\n\nstr1 = 'cat'\nstr2 = 'tac' [/INST] def anagram_checker(str1, str2): \n    if (len(str1)==len(str2)): \n        if (\"\".join(sorted(str1.lower())) == \"\".join(sorted(str2.lower()))): \n            return True\n        else: \n            return False</s>"
  },
  {
    "text": "<s>[INST] Build a Lambda function using Python to calculate the sum of two numbers.\n\nn1 = 5\nn2 = 8 [/INST] def add_two_numbers(n1, n2):\n return n1 + n2</s>"
  },
  {
    "text": "<s>[INST] Create a program that calculates the area of a triangle using C#.\n\nbase = 10\nheight = 8 [/INST] public class AreaCalculator { \n    public static void main(String[] args) { \n        int base = 10;\n        int height = 8;\n        double area = (base*height)/2; \n        System.out.println(\"The area of the triangle is: \"+area); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] What is the capital of Spain? [/INST] The capital of Spain is Madrid.</s>"
  },
  {
    "text": "<s>[INST] Create an object in Ruby that stores a student's name, age, and GPA. [/INST] student = {\n  name: \"John Smith\",\n  age: 22,\n  gpa: 3.5\n}</s>"
  },
  {
    "text": "<s>[INST] Compose a SQL query to find the names of all professors in the department of Computer Science. [/INST] SELECT name FROM professor WHERE department = 'Computer Science';</s>"
  },
  {
    "text": "<s>[INST] Utilize a regular expression to match all words that begin with 'b' in a given text.\n\ntext = \"The quick brown fox jumps over the lazy dog.\" [/INST] import re\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nword_list = re.findall(r\"\\b[bB]\\w+\", text)\n\nprint(word_list)\n# output: ['brown', 'fox', 'b jumps', 'b lazy']</s>"
  },
  {
    "text": "<s>[INST] Generate a list in Python that contains the numbers from 0 to 50 that are divisible by 7. [/INST] numbers = []\nfor i in range(51):\n  if i % 7 == 0:\n    numbers.append(i)\nprint(numbers)\n# output: [0, 7, 14, 21, 28, 35, 42, 49]</s>"
  },
  {
    "text": "<s>[INST] Generate a table in SQL to store student information like name, age and grade. [/INST] CREATE TABLE student_info (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50),\n  student_age INT,\n  student_grade INT\n);</s>"
  },
  {
    "text": "<s>[INST] Build a TensorFlow model to perform sentiment analysis on text. [/INST] import tensorflow as tf\n\n# Get the data\ndataset = tf.keras.utils.get_file(\n  'aclImdb_v1.tar.gz', \n  'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz')\n\n# Load the data and prepare it for the model\nreviews_train, reviews_test, labels_train, labels_test \\\n  = tf.keras.datasets.imdb.load_data(\n    path=str(dataset)[:-7] + \"/aclImdb/train/\")\n\n# Convert the integers back to words\nword2id = tf.keras.datasets.imdb.get_word_index()\nword2id = {k:(v+3) for k,v in word2id.items()}\nword2id[\"<PAD>\"] = 0\nword2id[\"<START>\"] = 1\nword2id[\"<UNK>\"] = 2 \nword2id[\"<UNUSED>\"] = 3\n\nid2word = {value:key for key,value in word2id.items()}\n\n# Model for sentiment analysis\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=len(word2id)+1, output_dim=256),\n  tf.keras.layers.GlobalAveragePooling1D(),\n  tf.keras.layers.Dense(256, activation=tf.nn.relu),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)\n])\n\nmodel.compile(\n  optimizer='adam', \n  loss='binary_crossentropy', \n  metrics=['accuracy']\n)\n\nmodel.fit(\n  reviews_train, \n  labels_train, \n  epochs=10,\n  validation_data=(reviews_test, labels_test)\n)</s>"
  },
  {
    "text": "<s>[INST] Build a Node.js program to find the maximum and minimum item from an array.\n\narr = [100, 200, 75, 10, 50] [/INST] let arr = [100, 200, 75, 10, 50];\n\nlet min = Math.min(...arr);\nlet max = Math.max(...arr);\n\nconsole.log(`The minimum of the array is ${min}`);\nconsole.log(`The maximum of the array is ${max}`);</s>"
  },
  {
    "text": "<s>[INST] Create a program to sum numbers in a given range m to n inclusive.\n\nm = 4, n = 8 [/INST] def sum_in_range(m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum+=i\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Write a Python code snippet to get the first 1000 prime numbers. [/INST] primes = []\nn = 2\nwhile len(primes) < 1000:\n if is_prime(n):\n primes.append(n)\n n += 1\n\nprint(primes)</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code snippet to apply a border to all p elements. [/INST] p {\n  border: 1px solid #000;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python code snippet to sum up all the elements in a given dictionary.\n\n{\n  'a': 10,\n  'b': 15,\n  'c': 20\n} [/INST] d = {'a': 10, 'b': 15, 'c': 20} \n\nprint(sum(d.values())) # Output: 45</s>"
  },
  {
    "text": "<s>[INST] Create a function to flatten a 2D array.\n\n[[1, 2], [3, 4], [5, 6]] [/INST] def flatten_2D_array(arr):\n    \"\"\"\n    A function to flatten a 2D array.\n    Input: A 2D array.\n    Output: A 1D array.\n    \"\"\"\n    flattened_arr = []\n    for sub_arr in arr:\n        flattened_arr += sub_arr\n    return flattened_arr</s>"
  },
  {
    "text": "<s>[INST] Write a code to take in a string and determine if the string is a palindrome or not.\n\nstring = \"civic\" [/INST] def is_palindrome(string):\n    \"\"\"\n    Return True is the input string is a Palindrome, False if not.\n    Input: string\n    Output: Boolean\n    \"\"\"\n    # Cast input to string\n    if not isinstance(string, str):\n        string = str(string)\n    \n    # Reverse the string\n    rev_string = string[::-1]\n    \n    #Compare original string with reversed string\n    if string == rev_string:\n        return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Create a code to search a given string for a specific keyword and return the index of the keyword.\n\ntext = \"Report on the COVID-19 pandemic\"\nkeyword = \"COVID-19\" [/INST] def search_string(text, keyword):\n    \"\"\"\n    A function to search a given string for a specific keyword and return the index of the keyword.\n    Input: string, keyword\n    Output: integer or None\n    \"\"\"\n    # Use the find() method to search the string\n    index = text.find(keyword)\n    \n    # Return None if the keyword was not found\n    if index == -1:\n        return None\n    # Return the index if the keyword was found\n    else:\n        return index</s>"
  },
  {
    "text": "<s>[INST] Create a code to format the given text using a given indentation level.\n\ntext = \"This is a sample text to format.\"\nindentation = 4 [/INST] def indent_text(text, indentation):\n    \"\"\"\n    A function to format the given text using a given indentation level.\n    Input: string, integer\n    Output: string\n    \"\"\"\n    # Split the text into lines\n    lines = text.splitlines()\n    # Iterate through each line of the text\n    for i in range(len(lines)):\n        # Add the indentation to each line\n        lines[i] = \" \" * indentation + lines[i]\n    # Join all the lines\n    indented_text = \"\\n\".join(lines)\n    \n    return indented_text</s>"
  },
  {
    "text": "<s>[INST] Develop a code to rotate a given list by a given value.\n\nmy_list = [1, 2, 3, 4, 5]\nk = 3 [/INST] def rotate_list(my_list, k):\n    \"\"\"\n    A function to rotate a given list by a given value.\n    Input: list, integer\n    Output: list\n    \"\"\"\n    # Get the length of list\n    length = len(my_list)\n    \n    # Rotate the list\n    rotated = my_list[-k % length:] + my_list[:-k % length]\n    \n    return rotated</s>"
  },
  {
    "text": "<s>[INST] What's the output of this program in Python given the following input?\n\ninput_string = \"Hello, World!\"   \nlist_of_chars = list(input_string)\n\nfor current_char in list_of_chars:\n print(current_char) [/INST] H\ne\nl\nl\no\n,\n \nW\no\nr\nl\nd\n!</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to compute the distance between two points.\n\nPointA = (2, 3)\nPointB = (4, 9) [/INST] public class DistanceCalculator {\n\n    public static double distanceCalculator(int x1, int y1, int x2, int y2) {\n        double distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n        return distance;\n    }\n}\n\nclass DistanceCalculatorTest {\n\n    public static void main(String[] args) {\n        double distance = DistanceCalculator.distanceCalculator(2, 3, 4, 9);\n        System.out.println(\"The distance between two points is \" + distance); \n    }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Scan through the following code in JavaScript and replace the placeholders with appropriate code.\n\nvar numbers = [1, 2, 3, 4];\n\nfor(___){\n  console.log(___);\n} [/INST] var numbers = [1, 2, 3, 4];\n\nfor(var i = 0; i < numbers.length; i++){\n  console.log(numbers[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Think of a situation where you would use recursion. [/INST] Recursion can be used when performing a task that can be broken down into smaller, simpler parts. For example, performing a Depth-First Search on a Graph. It can also be used when implementing algorithms to solve complex problems such as finding the largest number in a list or creating a binary search tree.</s>"
  },
  {
    "text": "<s>[INST] Write a script in Ruby for calculating the sum of two numbers.\n\na = 5\nb = 10 [/INST] a = 5\nb = 10\n\ndef add_numbers(a, b)\n  a + b\nend\n\nsum = add_numbers(a,b)\n\nputs \"The sum of #{a} and #{b} is #{sum}.\"</s>"
  },
  {
    "text": "<s>[INST] You are given a data set containing employee details. Write a query to get the sum of all salaries. [/INST] SELECT \n\t SUM(salary) \nFROM \n\temployees;</s>"
  },
  {
    "text": "<s>[INST] Create a program in Haskell that multiplies any given number by 2.\n\nx = 10 [/INST] multiplyByTwo x = x * 2\n\nmain = do\n  let x = 10\n  let result = multiplyByTwo x\n  print result</s>"
  },
  {
    "text": "<s>[INST] Construct a database schema for a \"Products\" table. [/INST] CREATE TABLE Products (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    product_name TEXT NOT NULL,\n    product_price REAL NOT NULL,\n    product_image TEXT,\n    product_description TEXT\n);</s>"
  },
  {
    "text": "<s>[INST] Consider the following code. Explain the purpose of the for loop in the code.\n\nnums = [2, 4, 6, 8]\n\nfor num in nums:\n    print(num ** 2) [/INST] The for loop iterates through the list nums and prints each element to the console, after having been squared.</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page design for displaying a website homepage. [/INST] <!DOCTYPE html>\n<html>\n    <head>\n        <title>Website Homepage</title>\n    </head>\n    <body>\n        <h1>Welcome to the website!</h1>\n        <p>This is the homepage for a new website.</p>\n        <ul>\n            <li> About Us </li>\n            <li> Services </li>\n            <li> Contact Us </li>\n        </ul>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Suppose you have two arrays A and B. Write a C++ program to sum up the elements in A and B.\n\nA = [1,5,9,10]\nB = [2,5,7,10] [/INST] #include <iostream>\n\nusing namespace std;\n\nint main(void)\n{\n    int a[]={1,5,9,10};\n    int b[]={2,5,7,10};\n    int c[4];\n \n    for(int i=0;i<4;i++)\n        c[i] = a[i] + b[i];\n \n    for(int i=0;i<4;i++)\n        cout<<c[i]<<\" \";\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Suppose you have a list of integers. Write a program in R language to compute the minimum of the list.\n\nlist_of_integers <- c(5,9,7,8,2,1) [/INST] min_val <- min(list_of_integers)\nprint(min_val)</s>"
  },
  {
    "text": "<s>[INST] Write a code to collect the name, email address, and phone number from the user. [/INST] name = input(\"What is your name? \")\nemail = input(\"What is your email address? \")\nphone = input(\"What is your phone number? \")</s>"
  },
  {
    "text": "<s>[INST] Refractor the given code using SQL query commands.\n\nSELECT * \nFROM customers \nWHERE age > 18\nAND (state = 'NY' OR experience > 3)\nAND (country = 'US' OR experience > 5) [/INST] SELECT * \nFROM customers \nWHERE age > 18 \nAND (state = 'NY' OR experience > 3 \n  OR (country = 'US' AND experience > 5))</s>"
  },
  {
    "text": "<s>[INST] You need to tell the assistant which language is this code written in.\n\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int a = 10, b= 15;\n    int c = a + b;\n    cout << \"The sum of \" << a << \" and \" << b << \" is: \" << c << endl; \n    return 0;\n} [/INST] C++</s>"
  },
  {
    "text": "<s>[INST] Implement a function in Java to find the frequency of a particular character in a given string. [/INST] public static int getCharFrequency(String str, char c) \n{ \n   int count = 0; \n   for (int i = 0; i < str.length(); i++)  \n   { \n       if (str.charAt(i) == c) \n           count++; \n   } \n   return count; \n}</s>"
  },
  {
    "text": "<s>[INST] Suppose you have two dictionaries, A and B. Write a code in Java to find the intersection of A and B.\n\nA = {1: 'a', 2: 'b'}\nB = {2: 'b', 3: 'c'} [/INST] public static HashMap<Integer, String> intersect(HashMap<Integer, String> A, HashMap<Integer, String> B) {\n    HashMap<Integer, String> result = new HashMap<>();\n    for (Integer key: A.keySet()) {\n        if (B.containsKey(key)) {\n            result.put(key, A.get(key));\n        }\n    }\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Describe in one sentence how a given neural network model works.\n\nA convolutional neural network [/INST] The convolutional neural network utilizes convolutional filters to learn features in an input, followed by layers of non-linear processing to produce an output.</s>"
  },
  {
    "text": "<s>[INST] Edit the following Python code to make it error-free.\n\na = 33\nab = a + [/INST] a = 33\nab = a + b</s>"
  },
  {
    "text": "<s>[INST] Using JavaScript, write code to display the current time in the format \"hh:mm:ss\". [/INST] let now = new Date();\nlet time = now.getHours() + \":\" + now.getMinutes() + \":\" + now.getSeconds();\nconsole.log(time);</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that accepts two parameters - a number and a string - and returns a sentence with both parameters combined.\n\nnum=10;\nstr=\"apples\" [/INST] function combine(num, str) {\n    return `There are ${num} ${str}!`;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to find the names and states of all employees located in California. [/INST] SELECT name, state FROM Employees WHERE state = 'California';</s>"
  },
  {
    "text": "<s>[INST] Construct a C++ program to convert miles to kilometers. [/INST] #include <iostream>\n\ndouble MilesToKilometers(double miles)\n{\n    return 1.609 * miles; \n}\n\nint main()\n{\n    double miles = 0.0;\n    std::cout << \"Enter the number of miles: \";\n    std::cin >> miles;\n\n    double kilometers = MilesToKilometers(miles);\n    std::cout << miles << \" miles is \" << kilometers << \" kilometers.\\n\";\n\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Convert the following recursive function to an iterative one.\n\ndef factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n - 1) [/INST] def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i\n    return result</s>"
  },
  {
    "text": "<s>[INST] Sanitize the following user input.\n\n\"user' OR '1'='1\" [/INST] String sanitizedInput = input.replaceAll(\"[\\\"\\']\",\"\");</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to find the length of a string without using the length() method. [/INST] public static int stringLength(String str){\n    int count = 0;\n    for (int i=0; i<str.length(); i++){\n        if(str.charAt(i)!=' '){\n            count++;\n        }\n    }\n    return count;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve the names of all products from the table 'Product' with a price greater than $100.\n\nTable name: Product\nAttributes: id (integer), name (string), price (integer) [/INST] SELECT name FROM Product WHERE price > 100;</s>"
  },
  {
    "text": "<s>[INST] Generate a Python class definition for a pig object that includes the following properties.\n\nname: string\ncolor: string\nage: integer [/INST] class Pig(object):\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_color(self, color):\n        self.color = color\n    \n    def set_age(self, age):\n        self.age = age</s>"
  },
  {
    "text": "<s>[INST] Delete the elements at indices 2 and 4 in the following list.\n\n['a', 'b', 'c', 'd', 'e', 'f'] [/INST] l = ['a', 'b', 'c', 'd', 'e', 'f']\ndel l[2:4]</s>"
  },
  {
    "text": "<s>[INST] Extract the value \"qux\" in the following dictionary.\n\nd = {\n    'foo': 'bar',\n    'baz': {\n        'qux': 12\n    }\n} [/INST] d = {\n    'foo': 'bar',\n    'baz': {\n        'qux': 12\n    }\n}\nqux = d['baz']['qux']</s>"
  },
  {
    "text": "<s>[INST] Complete the following function so that all strings in the list have a length of 5 characters.\n\nlst = [\"aaa\", \"bb\", \"ccccc\", \"dddddd\"] [/INST] def make_length_five(lst):\n    '''This function will ensure that all strings in the list have a length of 5 characters.'''\n    for i in range(len(lst)):\n        if len(lst[i]) < 5:\n            lst[i] = lst[i] + ' ' * (5 - len(lst[i]))\n        elif len(lst[i]) > 5:\n            lst[i] = lst[i][:5]\n    return lst</s>"
  },
  {
    "text": "<s>[INST] Format the following list of numbers as strings, with 3 decimal places.\n\n[123.4567, 678.9012, 789.3456] [/INST] lst = [123.4567, 678.9012, 789.3456]\nlst = [format(num, '.3f') for num in lst]</s>"
  },
  {
    "text": "<s>[INST] Sort the following dictionary objects by the value of the \"age\" field.\n\n[{'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 28}, {'name': 'Alex', 'age': 24}] [/INST] lst = [{'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 28}, {'name': 'Alex', 'age': 24}]\nlst.sort(key = lambda k: k['age'])</s>"
  },
  {
    "text": "<s>[INST] Create a function that will return the total number of specific items in a list.\n\n[1, 1, 2, 3, 3, 3] [/INST] def count_items(lst, item):\n    '''This function will return the total number of specific items in a list.'''\n    return len([x for x in lst if x == item])</s>"
  },
  {
    "text": "<s>[INST] Create a function that will calculate the cumulative sum of a list.\n\n[1, 2, 3, 4, 5] [/INST] def cumulative_sum(lst):\n    '''This function will calculate the cumulative sum of a list.'''\n    result = []\n    s = 0\n    for item in lst:\n        s += item\n        result.append(s)\n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a new dictionary that contains the intersection between the following two dictionaries.\n\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 4, 'd': 5} [/INST] d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 4, 'd': 5}\nd3 = { k:v for k,v in d1.items() if k in d2.keys() }</s>"
  },
  {
    "text": "<s>[INST] Solve the following programming puzzle using Python.\n\nA rope connected two opposite trees.  You need to cut the rope so the rope is never longer than 10 meters.  What is the shortest distance you can cut? [/INST] def closest_cutting_distance(total_rope_length):\n    '''This function will calculate the shortest distance you can cut a rope so the rope is never longer than 10 meters.'''\n    if total_rope_length <= 10:\n        return total_rope_length\n    else:\n        return total_rope_length - 10</s>"
  },
  {
    "text": "<s>[INST] Create an array in Python that contains numbers from 1 to 5. [/INST] my_array = [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript that counts the number of characters in a sentence.\n\nThe quick brown fox [/INST] function characterCounter(str) {\n return str.length;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a selector in CSS that selects div elements which are inside a main section. [/INST] main > div {\n  [select style code]\n}</s>"
  },
  {
    "text": "<s>[INST] Write a HTML tag that creates a hyperlink to a given URL.\n\nhttps://www.example.com [/INST] <a href=\"https://www.example.com\">[Link text]</a></s>"
  },
  {
    "text": "<s>[INST] Write a code in Python that returns an inversion of a given string.\n\ntea [/INST] def reverseStr(s): \n    return s[::-1] \n  \ns = \"tea\"\nprint(reverseStr(s))</s>"
  },
  {
    "text": "<s>[INST] Edit a JSON object so that it stores information about a person in a defined format.\n\n{\n  name: John\n} [/INST] { \n  \"name\": \"John\", \n  \"age\": 0,\n  \"address\": {\n    \"street\": \"\",\n    \"city\": \"\",\n    \"state\": \"\",\n    \"zip\": \"\"\n  }, \n  \"phone\": \"\"\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Class in Java that represents a student. [/INST] public class Student {\n  private String firstName;\n  private String lastName;\n  private int studentId;\n\n  public Student(String firstName, String lastName, int studentId) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.studentId = studentId;\n  }\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public String getLastName() {\n    return lastName;\n  }\n\n  public int getStudentId() {\n    return studentId;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code in PHP for finding the longest word in a string.\n\nThis is a test string [/INST] function longest_word($string){ \n    $words = explode(\" \", $string); \n    $longestword = 0;\n\n    foreach ($words as $word) { \n        if (strlen($word) > $longestword) { \n            $longestword = strlen($word); \n            $longest_word = $word; \n        } \n    } \n    return $longest_word; \n} \necho longest_word(\"This is a test string\");</s>"
  },
  {
    "text": "<s>[INST] Write an XML tag which will display a hyperlink.\n\nhttps://www.example.com, Example [/INST] <a href=\"https://www.example.com\">Example</a></s>"
  },
  {
    "text": "<s>[INST] What is the complexity class of the below Python code snippet for adding an item to a list?\n\nlist = [1, 2, 3]\nlist.append(4) [/INST] The complexity class of this code snippet is O(1) since appending an item to a list has constant time complexity.</s>"
  },
  {
    "text": "<s>[INST] Define a JavaScript class called Person that has a constructor for setting the name of the person. [/INST] class Person {\n   constructor(name) {\n      this.name = name\n   }\n}</s>"
  },
  {
    "text": "<s>[INST] What is the output of the following Ruby code?\narr = [2, 3, 4]\nsum = 0\narr.each{|x| sum += x } [/INST] The output is that the value of sum is 9.</s>"
  },
  {
    "text": "<s>[INST] What is the output of the following Java code?\nint x = 7;\nint y = 3;\nint z = x % y; [/INST] The output is that the value of z is 1.</s>"
  },
  {
    "text": "<s>[INST] How would you convert the following JavaScript object to a JSON string?\n\nlet myObj = {\n   name: \"John Doe\",\n   age: 32\n}; [/INST] let  myJSON  =  JSON.stringify(myObj);</s>"
  },
  {
    "text": "<s>[INST] What is the data type of the following variable in JavaScript?\nlet myNumber = 10 [/INST] The data type of the variable myNumber is a number.</s>"
  },
  {
    "text": "<s>[INST] Write a Python class that has two variables 'name' and 'age' and a method to print the values of both variables. [/INST] class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_values(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)</s>"
  },
  {
    "text": "<s>[INST] Implement quick sort in Java. [/INST] public static void quickSort(int[] arr, int low, int high) {\n    if (arr == null || arr.length == 0)\n        return;\n \n    if (low >= high)\n        return;\n \n    // pick the pivot\n    int middle = low + (high - low) / 2;\n    int pivot = arr[middle];\n \n    // make left < pivot and right > pivot\n    int i = low, j = high;\n    while (i <= j) {\n        while (arr[i] < pivot) {\n            i++;\n        }\n \n        while (arr[j] > pivot) {\n            j--;\n        }\n \n        if (i <= j) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n    }\n \n    // recursively sort two sub parts\n    if (low < j)\n        quickSort(arr, low, j);\n \n    if (high > i)\n        quickSort(arr, i, high);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to concatenate the given strings: \"Hello\" and \"World!\" [/INST] var string1 = \"Hello\";\nvar string2 = \"World!\";\n\nconsole.log(string1 + ' ' + string2); // Hello World!</s>"
  },
  {
    "text": "<s>[INST] Write a PHP code snippet to create an array containing the numbers from 1 to 100. [/INST] $arr = range(1, 100);</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript method that takes an array of numbers and checks if all values in the array are the same.\n\n[2,2,2,2] [/INST] function allValuesSame(arr) {\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] !== arr[0])\n      return false;\n  }\n  return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to find all records containing the word 'hello' in the 'messages' table.\n\nTable: messages \n\nID | Message\n\n1.  hello world\n2.  hey there\n3.  goodbye\n4.  hello again [/INST] SELECT * FROM messages WHERE Message LIKE '%hello%';</s>"
  },
  {
    "text": "<s>[INST] In Java, write a program that finds the sum of two linked lists representing integers. [/INST] public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummyHead = new ListNode(0);\n    ListNode p = l1, q = l2, curr = dummyHead;\n    int carry = 0;\n    while (p != null || q != null) {\n        int x = (p != null) ? p.val : 0;\n        int y = (q != null) ? q.val : 0;\n        int sum = carry + x + y;\n        carry = sum / 10;\n        curr.next = new ListNode(sum % 10);\n        curr = curr.next;\n        if (p != null) \n            p = p.next;\n        if (q != null) \n            q = q.next;\n    }\n    if (carry > 0) {\n        curr.next = new ListNode(carry);\n    }\n    return dummyHead.next;\n}</s>"
  },
  {
    "text": "<s>[INST] Using PHP, write a program to generate a string containing the nth Fibonacci number. [/INST] function Fibonacci($n)\n{\n    if ($n == 0)\n        return '0';\n    else if ($n == 1)\n        return '1';\n    else\n    {\n        $fibonaccinumbers[0] = 0;\n        $fibonaccinumbers[1] = 1;\n        for ($i = 2; $i <= $n; $i++)\n        {\n            $fibonaccinumbers[$i] = $fibonaccinumbers[$i - 1] +\n                                    $fibonaccinumbers[$i - 2];\n        }\n\n        return $fibonaccinumbers[$n];\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the records with the maximum value in a given table. [/INST] SELECT *\nFROM table\nORDER BY column DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] In JavaScript, write a function to calculate the nth term in the Fibonacci series. [/INST] function fibonacci(n){\n if (n <= 1) \n  return n;\n return fibonacci(n - 1) + fibonacci(n - 2);\n}</s>"
  },
  {
    "text": "<s>[INST] Given the following code in C, modify it to increment `num` by 1.\n\nint num = 0; [/INST] int num = 0;\nnum++;</s>"
  },
  {
    "text": "<s>[INST] Write the SQL query to find the product name, prices, ratings of all products with rating greater than 4 and prices lesser than 10. [/INST] SELECT product_name, price, rating\nFROM product_table \nWHERE rating > 4 AND price < 10;</s>"
  },
  {
    "text": "<s>[INST] Create a Ruby script to return the nth Fibonacci number. [/INST] # Function to return the nth Fibonacci number \ndef calculateFibonacci(num) \n  if num < 0 \n    return 'Incorrect input'\n  elsif num == 0 \n    return 0 \n  elsif num == 1 \n    return 1 \n  end\n  #Recursive Function \n  return calculateFibonacci(num - 1) +  calculateFibonacci(num - 2) \nend \n  \n# Driver Program \nputs calculateFibonacci(7)</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to calculate the total price of a given list of items including taxes.\n\nitems = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5 [/INST] #Calculate total price of a given list of items including taxes\n\nitems = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5\n\ntotal_price = 0\n\nfor item in items:\n  total_price += item['price']\n\ntotal_price = total_price + (total_price * (tax_rate/100))\n\nprint(total_price)</s>"
  },
  {
    "text": "<s>[INST] Design a C++ class to represent a student's information such as name, student ID, and grade. [/INST] class Student {\nprivate:\n    string name;\n    int studentID;\n    int grade;\n\npublic:\n    Student();\n    Student(string name, int studentID, int grade);\n    void setName(string name);\n    string getName();\n    void setStudentID(int studentID);\n    int getStudentID();\n    void setGrade(int grade);\n    int getGrade();\n};</s>"
  },
  {
    "text": "<s>[INST] Write a code in Python to print out the common elements of two lists which are [2, 4, 6, 8] and [3, 6, 9, 12]. [/INST] #Function to print out the common elements of two lists\ndef commonElements(l1, l2):\n    result = [value for value in l1 if value in l2]\n    return result\n\n# Lists to compare\nlist1 = [2, 4, 6, 8] \nlist2 = [3, 6, 9, 12] \n\n# Output  \nprint(commonElements(list1, list2)) \n\n# Output: [6]</s>"
  },
  {
    "text": "<s>[INST] Modify the code to make sure it is valid according to Java language specification.\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n} [/INST] public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Parse a user input in the following format and print it out.\n\nx - 10, y - 20 [/INST] int x = 10;\nint y = 20;\nSystem.out.println(\"x = \" + x + \" y = \" + y);</s>"
  },
  {
    "text": "<s>[INST] Create a function in R to generate a random number between the given range. [/INST] random_number <- function(min, max) {\n   return(runif(1, min=min, max=max))\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find all students with grades higher than a given threshold.\n\nThreshold = 75 [/INST] SELECT * FROM Students \nWHERE Grades > 75;</s>"
  },
  {
    "text": "<s>[INST] Check this code and add an if statement to print out “even” if the number is divisible by 2 and “odd” if not.\n\nfor n in range (1,10):\n\tprint(n) [/INST] for n in range (1, 10):\n    if n % 2 == 0:\n        print(n, \"even\")\n    else:\n        print(n, \"odd\")</s>"
  },
  {
    "text": "<s>[INST] Create a web page using HTML and CSS which displays a user interface for a calculator. [/INST] <html>\n    <head>\n        <title>Calculator Webpage</title>\n    </head>\n    <body>\n        <h1>Calculator</h1>\n        <div class=\"container\">\n            <div class=\"display\">\n                <p>0</p>\n            </div>\n            <div class=\"keypad\">\n                <div class=\"number-pad\">\n                    <button type=\"button\">7</button>\n                    <button type=\"button\">8</button>\n                    <button type=\"button\">9</button>\n                    <button type=\"button\">4</button>\n                    <button type=\"button\">5</button>\n                    <button type=\"button\">6</button>\n                    <button type=\"button\">1</button>\n                    <button type=\"button\">2</button>\n                    <button type=\"button\">3</button>\n                    <button type=\"button\">0</button>\n                </div>\n                <div class=\"operator-pad\">\n                    <button type=\"button\" class=\"operator\">/</button>\n                    <button type=\"button\" class=\"operator\">*</button>\n                    <button type=\"button\" class=\"operator\">+</button>\n                    <button type=\"button\" class=\"operator\">-</button>\n                    <button type=\"button\" class=\"operator\">=</button>\n                </div>\n            </div>\n        </div>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Convert this SQL statement into a LINQ query.\n\nSELECT * FROM Products \nWHERE Price > 100 [/INST] var result = from Product in Products\n            where Product.Price > 100\n            select Product;</s>"
  },
  {
    "text": "<s>[INST] Fix the code by making changes with the appropriate syntax.\n\ndef add_two_numbers(a, b)\n\treturn a + b [/INST] def add_two_numbers(a, b):\n    return a + b</s>"
  },
  {
    "text": "<s>[INST] Deploy the following ML model on the Cloud. [/INST] 1. Prepare the model:\n- Download, install and configure Cloud platform with the required SDKs.\n- Upload the ML model on the Cloud.\n- Perform necessary pre-processing steps.\n\n2. Deploy the model:\n- Use a deployment framework to deploy the model on the Cloud. \n- containerize the model using Docker. \n- provide appropriate access for the model for it to be queried.\n\n3. Test the model:\n- Run test cases for the model and assess the accuracy and performance of the model.\n- Set up a monitoring system for the model.</s>"
  },
  {
    "text": "<s>[INST] Perform sentiment analysis on the given text using NLTK library in Python.\n\nThe food here is amazing. [/INST] from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"The food here is amazing!\"]\n\nsid = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    ss = sid.polarity_scores(sentence)\n    print(\"for sentence: {}, sentiment analysis: {}\".format(sentence, ss))\n\n# Output\n# for sentence: The food here is amazing!, sentiment analysis: {'neg': 0.0, 'neu': 0.436, 'pos': 0.564, 'compound': 0.6249}</s>"
  },
  {
    "text": "<s>[INST] Design the structure of a database for a hotel booking system. [/INST] Table 1: Customers\n- customer_id\n- first_name\n- last_name\n- email\n\nTable 2: Rooms\n- room_id\n- room_type\n- beds\n- rate\n\nTable 3: Bookings\n- booking_id\n- customer_id\n- room_id\n- check_in_date\n- check_out_date\n- price\n\nTable 4: Payments\n- payment_id\n- booking_id\n- payment_type\n- price\n\nTable 5: Reviews\n- review_id\n- booking_id\n- rating\n- comment</s>"
  },
  {
    "text": "<s>[INST] Update the following HTML page so that it refreshes the page every 5 seconds.\n\n<html>\n <head>\n  <title>My Webpage</title>\n </head>\n <body>\n  Hello World!\n </body>\n</html> [/INST] <html>\n <head>\n  <title>My Webpage</title>\n  <meta http-equiv=\"refresh\" content=\"5\">\n </head>\n <body>\n  Hello World!\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Make a bash script to read two user input numbers and print their average. [/INST] #!/bin/bash\necho \"Please enter two numbers:\"\nread num1\nread num2\n\nsum=$((num1 + num2))\necho \"The average of the two numbers is: $(($sum / 2))\"</s>"
  },
  {
    "text": "<s>[INST] Construct a regex expression to match strings of the form \"123-456\". [/INST] ^[0-9]{3}-[0-9]{3}$</s>"
  },
  {
    "text": "<s>[INST] Come up with a Scala code snippet to print the powers of 2. [/INST] (0 to 8).foreach( x => {\n    println(Math.pow(2,x))\n  }\n)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to rank the products by their sales. [/INST] SELECT product_name, sales,\n  RANK() OVER (ORDER BY sales DESC) AS rank\nFROM products;</s>"
  },
  {
    "text": "<s>[INST] Generate a regex to validate the following format of email address: name@domain.extension [/INST] ^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$</s>"
  },
  {
    "text": "<s>[INST] How do you set a variable to a constant in C#? [/INST] In C#, variables can be set to a constant by using the keyword 'const' before the variable declaration. The constant cannot be changed or reassigned once it is declared. Example: const int a = 5;</s>"
  },
  {
    "text": "<s>[INST] Write a Node.js program to accept a user input and print it in the console. [/INST] const readline = require('readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n  \nrl.question('Please enter your input: ', (answer) => {\n  console.log(`You entered: ${answer}`);\n  rl.close();\n});</s>"
  },
  {
    "text": "<s>[INST] Create a Python dictionary which contains the student name and their grade for the course.\n\n{\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n} [/INST] student_grades = {\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n}</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to select all the records in a table having the same ID.\n\nTable name: \"customers\" [/INST] SELECT * FROM customers WHERE id = 'ID';</s>"
  },
  {
    "text": "<s>[INST] Using SQL, write a query to get the last three rows from a table.\n\nTable name: \"customer\" [/INST] SELECT * FROM customer ORDER BY id DESC LIMIT 3;</s>"
  },
  {
    "text": "<s>[INST] Create a function which takes an array and removes all duplicates using a set.\n\n[1, 2, 3, 3, 4, 4, 5] [/INST] # Create a function which takes an array and removes all duplicates using a set\n\ndef remove_duplicates(arr): \n return list(set(arr)) \n\narr = [1, 2, 3, 3, 4, 4, 5] \nnew_arr = remove_duplicates(arr) \nprint(new_arr) # [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Find the smallest missing positive number in an array.\n\n[-2, 0, 1, 3] [/INST] # Find the smallest missing positive number\ndef smallest_positive(arr): \n s = set(arr) \n i = 1 \n while i in s: \n i += 1\n return i\n\narr = [-2, 0, 1, 3] \nsmallest = smallest_positive(arr)\nprint(smallest) # 2</s>"
  },
  {
    "text": "<s>[INST] Create a Python class with the following attributes: firstname, lastname and address. [/INST] # Define a python class \nclass Person: \n def __init__(self, firstname, lastname, address): \n  self.firstname = firstname\n  self.lastname = lastname\n  self.address = address</s>"
  },
  {
    "text": "<s>[INST] Add a constructor to the above class to make sure that firstname and lastname are provided when creating a new instance. [/INST] # Define a python class \nclass Person: \n def __init__(self, firstname, lastname, address): \n  # make sure that firstname and lastname are provided when creating a new instance\n  if (firstname == \"\" or lastname == \"\"): \n   raise ValueError(\"firstname and lastname can't be empty\")\n  self.firstname = firstname\n  self.lastname = lastname\n  self.address = address</s>"
  },
  {
    "text": "<s>[INST] Create a class for a bike which has a color, make and description as attributes. [/INST] # Define a class for a bike\nclass Bike:\n def __init__(self, color, make, description): \n  self.color = color\n  self.make = make\n  self.description = description</s>"
  },
  {
    "text": "<s>[INST] Modify the 'Bike' class so that when instances are created they are assigned a unique ID. [/INST] # Define a class for a bike\nclass Bike:\n _id = 0\n\n def __init__(self, color, make, description): \n  Bike._id += 1\n  self.id = Bike._id\n  self.color = color\n  self.make = make\n  self.description = description</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to create a table with 5 columns and names 'id', 'name', 'age', 'gender' and 'email'. [/INST] CREATE TABLE tablename (\n id INT, \n name VARCHAR(250), \n age INT, \n gender VARCHAR(50), \n email VARCHAR(200)\n);</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to find all the factors of an integer.\n\nnumber = 16 [/INST] def find_factors(number):\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append(i)\n    return factors</s>"
  },
  {
    "text": "<s>[INST] Write a function to convert a Roman numeral to an integer. [/INST] def roman_to_integer(numeral):\n  romans = {\"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n            }\n  num = 0\n  i = 0\n  while i < len(numeral):\n    if i+1 < len(numeral):\n      if romans[numeral[i]] >= romans[numeral[i+1]]:\n        num = num + romans[numeral[i]]\n      else :\n        num = num + romans[numeral[i+1]] - romans[numeral[i]]\n        i+=1\n    else:\n      num = num + romans[numeral[i]]\n    i+=1\n  return num</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to compare two lists and return the elements that are in both of them.\n\nlist1 = [3, 5, 7, 8]\nlist2 = [3, 5, 10, 12] [/INST] def compare_lists(list1, list2):\n    return [x for x in list1 if x in list2]</s>"
  },
  {
    "text": "<s>[INST] Edit this code so it can classify whether a number is even or odd.\n\ndef classify_number(num): [/INST] def classify_number(num):\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of a web browser. [/INST] A web browser is a software application used to retrieve, render and traverse information on the World Wide Web. It uses Hypertext Transfer Protocol (HTTP) to request pages from from web servers, receive them, and display them in an organised way on our device. It also provides tools to allow users to traverse the web and access content such as email, videos, music, social networks, etc.</s>"
  },
  {
    "text": "<s>[INST] Identify the type of output for the given C++ statement.\n\ncout<<\"Hello World\"; [/INST] String output.</s>"
  },
  {
    "text": "<s>[INST] Analyse a given JSON object and list all the keys with their values.\n\n{\n  \"name\":\"John\",\n  \"age\":30,\n  \"cars\": {\n    \"car1\":\"Ford\",\n    \"car2\":\"BMW\",\n    \"car3\":\"Fiat\"\n  }\n} [/INST] name: John\nage: 30\ncar1: Ford\ncar2: BMW\ncar3: Fiat</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, find the maximum difference between two elements in the array such that the larger element appears after the smaller element in the array.\n\n[5, 2, 4, 7, 15] [/INST] def maxDifference(arr):\n  # Initialize max difference\n  max_difference = 0\n\n  # Traverse the array\n  for i in range(len(arr) - 1):\n    for j in range(i + 1, len(arr)):\n      # Find the difference between two elements\n      diff = arr[j] - arr[i]\n\n      # Check if the difference is the maximum\n      if diff > max_difference:\n        max_difference = diff\n\n  return max_difference\n\n# Output\nmaxDifference([5, 2, 4, 7, 15]) # 13</s>"
  },
  {
    "text": "<s>[INST] Override the \"toString\" method for a given class in Java. [/INST] public class MyClass {\n  public String toString() {\n    return \"MyClass Object\";\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a list of words and detects if they are anagrams.\n\na_list=[\"potato\",\"tomato\"] [/INST] def is_anagram(a_list):\n    \n    l1 = [''.join(sorted(word)) for word in a_list[0]]\n    l2 = [''.join(sorted(word)) for word in a_list[1]]\n    return l1 == l2</s>"
  },
  {
    "text": "<s>[INST] Write a Python function that takes two lists and returns a new list which contains only the unique elements from both of the lists.\n\nlist1=[1,2,3,4]\nlist2=[3,4,5,6] [/INST] def unique_from_two_lists(list1,list2):\n  return list(set(list1 + list2))</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to analyze a given list of URL requests and count the number of unique requests. [/INST] def count_unique_requests(url_list):\n    return len(set(url_list))</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a two-dimensional array and flattens it into an one-dimensional array. [/INST] def flatten(arr):\n    return [item for row in arr for item in row]</s>"
  },
  {
    "text": "<s>[INST] Using Python, parse a given XML document and output the names of all elements with the “class” attribute. [/INST] from xml.etree import ElementTree\n\ndef find_elements(tree):\n    elements = []\n    for elem in tree.iter():\n        if 'class' in elem.attrib:\n            elements.append(elem.tag)\n    return elements</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to convert a given number of days into weeks, days. [/INST] def convert_days(days):\n  weeks = days // 7\n  days = days % 7\n  return (weeks, days)</s>"
  },
  {
    "text": "<s>[INST] Write a Python function that takes a list of strings as an input and returns a new list with the strings sorted by length. [/INST] def sort_by_length(lst):\n  return sorted(lst, key=len)</s>"
  },
  {
    "text": "<s>[INST] Write a Python function that takes a list of n strings and a number k and returns the longest string with length of k or less. [/INST] def find_longest_at_length(lst, k):\n    longest_str = lst[0]\n    for s in lst[1:]:\n        if len(s) <= k and len(s) > len(longest_str):\n            longest_str = s\n    return longest_str</s>"
  },
  {
    "text": "<s>[INST] Create a JSON string representation of the given Python dictionary.\n\n{'name': 'John', 'age': 20, 'hobby': 'Coding'} [/INST] var jsonStr = JSON.stringify({name: \"John\", age: 20, hobby: \"Coding\"});</s>"
  },
  {
    "text": "<s>[INST] Write a bash script that prints the given input string.\n\nString to be printed='Hello World' [/INST] #!/bin/bash \necho \"Hello World\"</s>"
  },
  {
    "text": "<s>[INST] Create a function in Ruby for performing string manipulations on the given text.\n\nText=\"Hello World\" [/INST] def manipulate_string(text)\n  text = text.upcase\n  text = text.reverse\n  text = text.gsub('O', '*')\n  return text\nend</s>"
  },
  {
    "text": "<s>[INST] Implement a sorting algorithm in Python to arrange the given array in descending order.\n\n[10, 80, 40, 20, 60] [/INST] def descendingOrder(arr): \n    arr.sort(reverse = True) \n    return arr \n  \n# Driver code \narr = [10, 80, 40, 20, 60] \noutput = descendingOrder(arr) \nprint(output)</s>"
  },
  {
    "text": "<s>[INST] Write a Python class for a Employee object to store the basic properties such as name, age, salary, etc. [/INST] class Employee:\n \n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n \n    def get_details(self):\n        return \"Name: {}, Age: {}, Salary: {}\".format(self.name, self.age, self.salary)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function for finding the biggest element in an array.\n\n[2, 4, 5, 6, 8, 10] [/INST] function findMax(arr) { \n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) { \n    if (arr[i] > max) \n      max = arr[i]; \n  } \n  return max; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML select element with the given list of countries as options.\n\nCountryList = ['India','United States','Canada','Australia','New Zealand','Singapore','Japan'] [/INST] <select>\n  <option value=\"India\">India</option>\n  <option value=\"United States\">United States</option>\n  <option value=\"Canada\">Canada</option>\n  <option value=\"Australia\">Australia</option>\n  <option value=\"New Zealand\">New Zealand</option>\n  <option value=\"Singapore\">Singapore</option>\n  <option value=\"Japan\">Japan</option>\n</select></s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query for finding the average salary of employees from a given department.\n\nDepartment='Information Technology' [/INST] SELECT AVG(salary) \nFROM employees \nWHERE department = 'Information Technology';</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script for performing basic calculations such as addition, subtraction, multiplication and division. [/INST] <?php\nfunction calculate($op, $a, $b) {\n    switch($op) {\n        case '+':\n            return $a + $b;\n        case '-':\n            return $a - $b;\n        case '*':\n            return $a * $b;\n        case '/':\n            return $a / $b;\n    }\n}\n?></s>"
  },
  {
    "text": "<s>[INST] Write a function in Swift for generating random numbers within a given range.\n\nMin=1, Max=20 [/INST] func randomNumberInRange(min: Int, max: Int) -> Int {\n    return Int.random(in: min...max)\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML table with the given list of student's marks.\n\nStudentMarks=[34, 78, 63, 57, 92] [/INST] <table>\n  <tr>\n    <th>Student</th>\n    <th>Marks</th>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>34</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>78</td>\n  </tr>\n  <tr>\n    <td>3</td>\n    <td>63</td>\n  </tr>\n  <tr>\n    <td>4</td>\n    <td>57</td>\n  </tr>\n  <tr>\n    <td>5</td>\n    <td>92</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Create a Python class named \"Bicycle\" which has two attributes named \"color\" and \"wheels\". [/INST] class Bicycle: \n  def __init__(self, color, wheels):\n      self.color = color\n      self.wheels = wheels</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all users who are younger than 25 years old. [/INST] SELECT * FROM users WHERE age < 25;</s>"
  },
  {
    "text": "<s>[INST] Make a copy of a given dictionary in Python. [/INST] import copy\n\noriginal_dict = {1: 'a', 2: 'b', 3: 'c'}\nnew_dict = copy.deepcopy(original_dict)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find out the names of users who have \"B\" as their second character in the name. [/INST] SELECT name from users WHERE name LIKE '_b%';</s>"
  },
  {
    "text": "<s>[INST] Make an HTML webpage with a heading \"Welcome to my webpage!\" and a paragraph with the text \"This is my first webpage!\". [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My Webpages</title>\n</head>\n<body>\n <h1>Welcome to my webpage!</h1>\n <p>This is my first webpage!</p>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to update the age of a certain user.\n\nname = \"John Doe\"\nage = 25 [/INST] UPDATE users\nSET age = 25\nWHERE name = 'John Doe';</s>"
  },
  {
    "text": "<s>[INST] Write an HTML form which includes a text field, a submit button and a check box labeled \"Remember Me\". [/INST] <form>\n  <input type=\"text\" placeholder=\"Type something...\">\n  <input type=\"submit\" value=\"Submit\">\n  <input type=\"checkbox\" name=\"rememberme\" value=\"true\">Remember Me\n</form></s>"
  },
  {
    "text": "<s>[INST] Create an array of strings containing the names of the seven days of the week. [/INST] let daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \n                  \"Thursday\", \"Friday\", \"Saturday\", \n                  \"Sunday\"];</s>"
  },
  {
    "text": "<s>[INST] Write a query to count the number of movies released in 2020 from the database. [/INST] SELECT COUNT(*) AS total_movies\nFROM movies\nWHERE year = 2020;</s>"
  },
  {
    "text": "<s>[INST] Create an object in JavaScript containing the output of a multiplication table from 1 to 10. [/INST] let multiplicationTable = {\n 1:1,2,3,4,5,6,7,8,9,10,\n 2:2,4,6,8,10,12,14,16,18,20,\n 3:3,6,9,12,15,18,21,24,27,30,\n 4:4,8,12,16,20,24,28,32,36,40,\n 5:5,10,15,20,25,30,35,40,45,50,\n 6:6,12,18,24,30,36,42,48,54,60,\n 7:7,14,21,28,35,42,49,56,63,70,\n 8:8,16,24,32,40,48,56,64,72,80,\n 9:9,18,27,36,45,54,63,72,81,90,\n 10:10,20,30,40,50,60,70,80,90,100\n};</s>"
  },
  {
    "text": "<s>[INST] Develop a Python script to count the number of characters, words, and sentences present in a given string.\n\nThis is a sample sentence to test the program. [/INST] string = 'This is a sample sentence to test the program.'\ncharacter_count = len(string)\nword_count = len(string.split())\nsentence_count = len(string.split('.'))\n\nprint('Number of characters: ', character_count)\nprint('Number of words: ', word_count)\nprint('Number of sentences: ', sentence_count)\n\nOutput:\nNumber of characters: 45\nNumber of words: 8\nNumber of sentences: 1</s>"
  },
  {
    "text": "<s>[INST] Explain what is a non-deterministic algorithm. [/INST] A non-deterministic algorithm is an algorithm that can produce different results when run multiple times with the same inputs. This is because the algorithm may make use of randomness or take different paths based on the input, and the result of each run will be different. Non-deterministic algorithms are useful in solving problems that cannot be solved with traditional deterministic algorithms, such as certain AI problems or certain puzzles.</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of recursion with an example. [/INST] Recursion is a technique in which a function calls itself. It is used to solve problems which can be broken down into sub-problems that are similar to the original problem. An example of recursion is the Fibonacci sequence, where a number in the sequence is the sum of the previous two numbers. The sequence can be computed using a recursive function:\n\ndef Fibonacci(n): \n  if n<0: \n    print(\"Incorrect input\") \n  elif n==1: \n    return 0\n  elif n==2: \n    return 1\n  else: \n    return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver program \nprint(Fibonacci(6)) \n\nOutput:\n5</s>"
  },
  {
    "text": "<s>[INST] Develop a solution for the classic pattern recognition problem - the Towers of Hanoi. [/INST] // function to solve the Tower of Hanoi problem\ndef solveTowerOfHanoi(n, source, auxillary, destination): \n  if n==1: \n    print(\"Move disk 1 from source\",source,\"to destination\",destination) \n    return \n  solveTowerOfHanoi(n-1, source, destination, auxillary) \n  print(\"Move disk\",n,\"from source\",source,\"to destination\",destination) \n  solveTowerOfHanoi(n-1, auxillary, source, destination) \n\n# Driver code \nn = 3\nsolveTowerOfHanoi(n, 'A', 'B', 'C') \n\nOutput:\nMove disk 1 from source A to destination C\nMove disk 2 from source A to destination B\nMove disk 1 from source C to destination B\nMove disk 3 from source A to destination C\nMove disk 1 from source B to destination A\nMove disk 2 from source B to destination C\nMove disk 1 from source A to destination C</s>"
  },
  {
    "text": "<s>[INST] Explain what is an API and why it is important. [/INST] An API (Application Programming Interface) is a set of routines, protocols and tools for building software applications. APIs define the way software components should interact and are used to allow different services, such as web services, to communicate with each other. APIs are important because they allow developers to access services and data without having to rewrite or redevelop an entire application. This allows developers to create more secure, efficient and scalable applications. APIs are also used to create new custom solutions and to increase the overall value and performance of existing services.</s>"
  },
  {
    "text": "<s>[INST] Given an array [6, 4, 15, 10], write a JavaScript code snippet to find the largest number.\n\n[6, 4, 15, 10] [/INST] let largest = 0;\nlet arr = [6, 4, 15, 10];\n\nfor (let i = 0; i < arr.length; i++) {\n  if (arr[i] > largest) {\n    largest = arr[i];\n  }\n}\n\nconsole.log(largest); // 15</s>"
  },
  {
    "text": "<s>[INST] Create a Git repository for a project named \"My first project\". [/INST] git init MyFirstProject</s>"
  },
  {
    "text": "<s>[INST] Create a function sumToN that takes a single argument and returns the sum of the numbers from 1 to the argument. [/INST] def sumToN(n):\n  sum = 0\n  for i in range(1, n+1):\n    sum += i\n  return sum</s>"
  },
  {
    "text": "<s>[INST] Given a string s = 'Hello, World!' create a function that takes a string as an input and returns its length.\n\ns = 'Hello, World!' [/INST] def getStringLength(s):\n  return len(s)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to retrieve the value of the cookie named \"userID\". [/INST] var userID = document.cookie.split(';')\n  .find(c => c.trim().startsWith('userID'))\n  .split('=')[1];</s>"
  },
  {
    "text": "<s>[INST] Given an array [1, 2, 3, 4], write a Python code snippet to print the items in the array in a single line.\n\n[1, 2, 3, 4] [/INST] arr = [1, 2, 3, 4]\nprint(*arr, sep=\", \") // 1, 2, 3, 4</s>"
  },
  {
    "text": "<s>[INST] Write a class for a shopping cart in Python. [/INST] class ShoppingCart:\n    def __init__(self):\n        self.cart = {}\n\n    def add_item(self, item, price):\n        self.cart[item] = price\n\n    def get_cart_total(self):\n        return sum(self.cart.values())</s>"
  },
  {
    "text": "<s>[INST] How to use the reduce function in Python for computing the sum of elements in a list? [/INST] from functools import reduce\n\ndef my_sum(list):\n  return reduce((lambda x, y: x + y), list)</s>"
  },
  {
    "text": "<s>[INST] Write an if else statement in Python for checking if a given number is positive or negative. [/INST] if x > 0:\n  print(\"The number is positive\")\nelse:\n  print(\"The number is negative\")</s>"
  },
  {
    "text": "<s>[INST] Write a loop in Python for printing all even numbers between 1 and 10. [/INST] for i in range(1, 11):\n    if i % 2 == 0:\n        print(i)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to create a table with name ‘Users’ and three columns: firstname, lastname, email. [/INST] CREATE TABLE Users (\n  firstname VARCHAR(200) NOT NULL,\n  lastname VARCHAR(200) NOT NULL,\n  email VARCHAR(200) NOT NULL\n);</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to sort a list of strings in alphabetical order.\n\nwords = ['car', 'apple', 'tree', 'book', 'cat'] [/INST] let sortedWords = words.sort(); \nconsole.log(sortedWords); // ['apple', 'book', 'car', 'cat', 'tree']</s>"
  },
  {
    "text": "<s>[INST] Write a MATLAB code to find the maximum value for an array of 10 elements.\n\nA = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] [/INST] max_val = max(A);\nfprintf('Max value is %d\\n', max_val);</s>"
  },
  {
    "text": "<s>[INST] Write an R code to find the length of the longest string in an array.\n\nstrings = c('this', 'is', 'a', 'test') [/INST] strings <- c('this', 'is', 'a', 'test')\n\nlongest <- max(nchar(strings))\n\ncat('The longest string length is: ', longest) ## Output: The longest string length is: 4</s>"
  },
  {
    "text": "<s>[INST] Write an R code to return the first 10 rows of a data frame.\n\nstates-data.csv [/INST] # Load the data\nstates_data <- read.csv(\"states-data.csv\")\n\n# Get the first 10 rows\nhead(states_data, 10)</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm that computes the Fibonacci numbers. [/INST] A Fibonacci algorithm can be written using a simple recursive function:\n\nint fibonacci(int n) {\n    if (n == 0 || n == 1) {\n        return n;\n    }\n    else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that checks if the given string contains any vowels.\n\nString: \"Hello\" [/INST] function containsVowel(str) {\n return /[aeiou]/i.test(str);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a database table to store real estate records. [/INST] CREATE TABLE real_estate_records(\n     id INT NOT NULL AUTO_INCREMENT, \n     name VARCHAR(50), \n     address VARCHAR(250), \n     bedrooms INT, \n     bathrooms INT, \n     price DECIMAL(10,2), \n     area INT,\n     PRIMARY KEY(id)\n);</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following Python code without using the 'list comprehension' syntax.\n\n[x * x for x in range(5)] [/INST] list_result = []\nfor x in range(5):\n    list_result.append(x*x)</s>"
  },
  {
    "text": "<s>[INST] Explain how a computer can generate pseudo-random numbers. [/INST] A computer can generate pseudo-random numbers by using an algorithm to generate a sequence of numbers that appear to be random. This algorithm uses an initial seed value, typically an input string or value derived from the computer's internal clock, which is then used to generate a sequence of numbers. The resulting sequence will appear to be random to the user, even though it is always the same. Some common methods of generating pseudo-random numbers include the use of linear congruential generators, which use a linear equation to generate a sequence of numbers; the use of a Blum Blum Shub algorithm, which uses the cycle of two large prime numbers to generate a sequence of numbers; or the use of a Mersenne Twister algorithm, which uses a fixed-point representation of a number to generate a sequence of numbers.</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression that extracts all numbers from the given text.\n\nText:  \"The total number of students is 50 and the average score is 78 out of 100.\" [/INST] \\d+</s>"
  },
  {
    "text": "<s>[INST] Describe the purpose of using an Array in programming. [/INST] An array is a data structure used in programming to store a collection of elements of the same type in a contiguous block of memory. Arrays are used to hold items such as numbers, strings, objects, etc. and to perform operations such as searching, sorting, and manipulation on the elements of the array. Arrays are also used to implement other data structures such as stacks, queues, and linked lists.</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to sort a list of tuples using Lambda.\n\nlist = [(3, 4), (5, 1), (2, 0)] [/INST] sorted_list = sorted(list, key=lambda x: x[1])</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a string and converts the string to CamelCase.\n\nstring = \"this_is_a_string\" [/INST] def toCamelCase(string):\n    s = string.split('_')\n    return s[0] + ''.join(x.title() for x in s[1:])</s>"
  },
  {
    "text": "<s>[INST] Update the Java code to check the condition that the value of \"amount\" is greater than 1000 or not.\n\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tdouble amount = 1100;\n\t\t// TODO\n\t\tSystem.out.println(\"The amount is greater than 1000: \"+ amount);\n\t}\n} [/INST] public class Main {\n\tpublic static void main(String args[]){\n\t\tdouble amount = 1100;\n\t\tif (amount > 1000) {\n\t\t\tSystem.out.println(\"The amount is greater than 1000: \"+ amount);\n\t\t}\n\t}\n}</s>"
  },
  {
    "text": "<s>[INST] Using the code provided, create an algorithm in Python to print the numbers from 1 to 10. [/INST] for i in range(1, 11): \n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Modify the program to make sure that only integers are accepted as input.\n\nname = input(\"Enter your name: \")\nprint(\"Hello, \" + name) [/INST] name = input(\"Enter your name: \")\ntry:\n    name = int(name)\n    print(\"Hello, \" + str(name))\nexcept ValueError:\n    print(\"Error: That was not an integer.\")</s>"
  },
  {
    "text": "<s>[INST] Using the code provided, modify the program to output \"I like cats\" instead of \"I love cats\".\n\nprint(\"I love cats\") [/INST] print(\"I like cats\")</s>"
  },
  {
    "text": "<s>[INST] Using the HTML code provided, add a meta tag to the \"head\" element.\n\n<head>\n    <title>My Page</title>\n</head> [/INST] <head>\n    <title>My Page</title>\n    <meta name=\"keywords\" content=\"HTML,CSS,XML,JavaScript\">\n</head></s>"
  },
  {
    "text": "<s>[INST] Create a PHP script to print the numbers 1 to 10. [/INST] <?php\nfor ($i = 1; $i <= 10; $i++) {\n    echo $i . \"<br>\";\n}\n?></s>"
  },
  {
    "text": "<s>[INST] How do you insert a given element in a balanced AVL tree? [/INST] The process of insertion in a balanced AVL tree is similar to the process in a binary search tree, with two additional steps. First, the tree is checked to see if it needs to be rebalanced. If it does, the tree is rebalanced according to the AVL rules. Second, any newly inserted node is checked against its siblings to see if it is in balance or not. If it's not, the tree is rotated to balance it. In order to insert an element in a balanced AVL tree, the following steps must be taken:\n\n1. Start by searching the tree to see if the node to be inserted already exists in the tree.\n2. If the node does not exist, insert it in the same fashion as in a binary search tree.\n3. Perform post-insertion balancing. This involves checking the newly inserted node's balance factors and rotation if either one is unequal.\n4. Update the current node's balance factor as well as the ancestors' balance factors until the root is reached.\n5. Once all nodes that need to be balanced have been updated, the insertion is complete.</s>"
  },
  {
    "text": "<s>[INST] Create a CSS class for displaying content in the center of a page. [/INST] .center-content {\n    margin: 0 auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function for getting the unique elements in an array.\n\nconst arr = [3, 1, 4, 3, 2, 5] [/INST] const getUniqueElements = array => {\n    const uniqueElements = [...new Set(array)];\n    return uniqueElements;\n}\n\nconsole.log(getUniqueElements(arr)); // [3, 1, 4, 2, 5]</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query for finding the minimum and maximum values of a column. [/INST] SELECT MIN(column_name), MAX(column_name) \nFROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Create a ruby method for finding the frequency of an element in an array.\n\narray = [2, 3, 4, 3, 2, 5, 2] [/INST] def frequency(array)\n    frequency_hash = Hash.new(0)\n    array.each { |num| frequency_hash[num] += 1 }\n    frequency_hash\nend\n\nputs frequency(array) // {2=>3, 3=>2, 4=>1, 5=>1}</s>"
  },
  {
    "text": "<s>[INST] Write a PHP function for counting the number of words in a string.\n\n$str = 'Hello World!' [/INST] function wordCount($str) {\n    $stringArray = explode(' ', $str);\n    return count($stringArray);\n}\n\necho wordCount($str); // 2</s>"
  },
  {
    "text": "<s>[INST] Create a cURL request for getting the response from an API endpoint. [/INST] $curl = curl_init();\n\ncurl_setopt_array($curl, array(\n    CURLOPT_URL => \"https://api.example.com/endpoint\",\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 0,\n    CURLOPT_FOLLOWLOCATION => true,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;</s>"
  },
  {
    "text": "<s>[INST] Generate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols. [/INST] \"\"\"\nGenerate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.\n\"\"\"\n\nimport random\n\ndef generate_password():\n    charset = \"01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n    password = \"\"\n    for _ in range(8):\n        password += random.choice(charset)\n    return password\n    \nif __name__ == '__main__':\n    print(generate_password())</s>"
  },
  {
    "text": "<s>[INST] Explain why a stack can be used to reverse a string? [/INST] A stack can be used to reverse a string because it follows the Last In First Out (LIFO) principle. This means that the last item to be added in the stack will be the first item to be removed. So when a string is pushed onto the stack, the characters will be stored in reverse order - the last character to be pushed will be the first character to be popped. By popping the characters one at a time, we can reverse the string.</s>"
  },
  {
    "text": "<s>[INST] Select all customers from the customer_table with age greater than 25 and their zip codes within a given range.\n\ncustomer_table = [['Eliza', 22, 48001], ['John', 26, 48034], ['Michael', 50, 48323]]\nzipcode_range = (48000, 48200) [/INST] \"\"\"\nSelect all customers from the customer_table with age greater than 25 and their zip codes within a given range.\n\"\"\"\n\n#select customers\ncustomers = [ customer for customer in customer_table if (customer[1] > 25) and (customer[2] >= zipcode_range[0] and customer[2] <= zipcode_range[1])]\n\nprint(customers)</s>"
  },
  {
    "text": "<s>[INST] Count the number of occurrences of a given number in a list of numbers.\n\nnumbers = [1,1,2,3,4,4,4,5]\nnumber = 4 [/INST] \"\"\"\nCount the number of occurrences of a given number in a list of numbers.\n\"\"\"\n\nnumbers = [1,1,2,3,4,4,4,5]\nnumber = 4\n\ndef count_occurrences(numbers, number):\n    count = 0\n    for num in numbers:\n        if num == number:\n            count += 1\n    return count\n\nprint(count_occurrences(numbers, number))</s>"
  },
  {
    "text": "<s>[INST] Describe the advantages and disadvantages of using recursion. [/INST] Recursion has many advantages including that it is often easier to understand, it eliminates the need for loops, and it can make for concise code when addressing complex problems. However, recursion also has disadvantages such as the potential for infinite loops and excessive memory consumption due to the overhead of function calls. Additionally, recursion can be slower than using loops in some cases.</s>"
  },
  {
    "text": "<s>[INST] Determine whether a given string is a palindrome using stack data structure.\n\nstring = \"racecar\" [/INST] \"\"\"\nDetermine whether a given string is a palindrome using stack data structure.\n\"\"\"\n\ndef is_palindrome(string):\n    # reverse the string\n    stack = []\n    for char in string:\n        stack.append(char)\n\n    rev_string = \"\"\n    while stack:\n        rev_string = rev_string + stack.pop()\n\n    # compare reversed string with original string\n    if rev_string == string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))</s>"
  },
  {
    "text": "<s>[INST] Create a class named 'Stack' with the following methods:  push, pop, peek, isEmpty. [/INST] \"\"\"\nCreate a class named 'Stack' with the following methods: push, pop, peek, isEmpty.\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[-1]\n    \n    def isEmpty(self):\n        return self.items == []</s>"
  },
  {
    "text": "<s>[INST] Given a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.\n\nd = {'John': 15, 'Anna': 20, 'Bob': 10} [/INST] \"\"\"\nGiven a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.\n\"\"\"\n\ndef reorder_dict(d):\n    sorted_dict = {}\n    sorted_values = sorted(d.values())\n\n    while sorted_values:\n        key = sorted(d, key=lambda k: d[k] == sorted_values[0])[0]\n        sorted_dict[key] = d[key]\n        sorted_values.remove(d[key])\n\n    return sorted_dict\n\nif __name__ == '__main__':\n    d = {'John': 15, 'Anna': 20, 'Bob': 10}\n    print(reorder_dict(d))</s>"
  },
  {
    "text": "<s>[INST] Sum up all the values in a 2D list.\n\nlist = [[1,2,3],[4,5,6],[7,8,9]] [/INST] \"\"\"\nSum up all the values in a 2D list.\n\"\"\"\n\ndef sum_2d_list(list_2d):\n    sum = 0\n    for l in list_2d:\n        for n in l:\n            sum += n\n    return sum\n\nif __name__ == '__main__':\n    list_2d = [[1,2,3],[4,5,6],[7,8,9]]\n    print(sum_2d_list(list_2d))</s>"
  },
  {
    "text": "<s>[INST] Use a Linked List structure to implement a stack data structure. [/INST] \"\"\"\nUse a Linked List structure to implement a stack data structure.\n\"\"\"\n\nclass Node:\n    def __init__(self, val):\n        self.value = val\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.top = None\n        self.size = 0\n\n    def push(self, val):\n        new_node = Node(val)\n        new_node.next = self.top\n        self.top = new_node\n        self.size += 1\n    \n    def pop(self):\n        if self.top == None:\n            return None\n        else:\n            pop_node = self.top\n            self.top = self.top.next\n            self.size -= 1\n            return pop_node.value</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to select all records from a table called “customers”, and adjust the order based on the column “first_name” in descending order. [/INST] SELECT * FROM customers ORDER BY first_name DESC;</s>"
  },
  {
    "text": "<s>[INST] Create a function using JavaScript to generate a random string of up to 10 characters in length. [/INST] function randomString(length) {\n  let result           = '';\n  let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for ( let i = 0; i < length; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a loop in JavaScript that prints out each item in an array.\n\nlet arr = [1,2,3,4,5] [/INST] for (let i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet in Python to generate a random float with up to 4 decimal places. [/INST] import random\ndef random_float(a,b):\n  return round(random.uniform(a,b), 4)</s>"
  },
  {
    "text": "<s>[INST] What is the value of variable \"a\" at the end of the code?\n\na = 0\nfor i in range (10):\n    a += i [/INST] 45</s>"
  },
  {
    "text": "<s>[INST] Below is a simple function, improve it for efficiency and readability:\n\ndef get_sum(x, y):\n    m = max(x, y)\n    n = min(x, y)\n    z = 0\n    while n <= m:\n        z += n\n        n += 1\n    return z [/INST] def get_sum(x, y):\n    # get the lower bound and upper bound\n    lower, upper = min(x, y), max(x, y)\n\n    # apply the arithmetic series formula\n    return (upper * (upper + 1) - lower * (lower - 1)) // 2</s>"
  },
  {
    "text": "<s>[INST] Insert the missing symbol which will make the code syntactically correct.\n\nif x 0 [/INST] if x == 0</s>"
  },
  {
    "text": "<s>[INST] Combine the two objects with the same property value.\n\nobj1 = {\n  \"name\": \"John\",\n  \"age\": 22\n}\n\nobj2 = {\n  \"name\": \"John\",\n  \"location\": \"New York\"\n} [/INST] obj3 = {\n  \"name\": \"John\",\n  \"age\": 22,\n  \"location\": \"New York\"\n}</s>"
  },
  {
    "text": "<s>[INST] Complete the code to slice the list up to index 4.\n\nmy_list = [1, 2, 3, 4, 5, 6, 7] [/INST] my_list = my_list[:4] # my_list is now [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Construct a regex pattern to match the following words.\n\nwords = [\"cat\", \"bat\", \"rat\"] [/INST] pattern = r\"(cat|bat|rat)\"</s>"
  },
  {
    "text": "<s>[INST] Using SQL, write a query to fetch the names of all products with a price lower than $50.\n\nTable: products\nColumns: id, name, price\nEntries:\n1, Produce A, $35\n2, Produce B, $45\n3, Produce C, $75 [/INST] SELECT name\nFROM products\nWHERE price < 50;</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to determine the greatest common factor of two numbers.\n\n14, 63 [/INST] #include <iostream>\n \nint gcd(int a, int b) \n{ \n    if (b == 0) {\n        return a; \n    }\n    return gcd(b, a % b); \n} \n  \nint main() \n{ \n    int a = 14;\n    int b = 63;\n  \n    std::cout << \"GCD of \" << a << \" and \" << b << \" is \" << gcd(a, b) << std::endl; \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Given the following list of strings, return a new list with only the strings that contain the letter \"e\"\n\n[\"hello\", \"world\", \"foo\", \"bar\", \"elephant\", \"cat\"] [/INST] [\"hello\", \"elephant\"]</s>"
  },
  {
    "text": "<s>[INST] Convert the following list of numbers from decimal notation to binary notation.\n\n[45, 11, 80, 12] [/INST] [101101, 1011, 1010000, 1100]</s>"
  },
  {
    "text": "<s>[INST] Using the Jest JavaScript test framework, write a test that checks if a given number is divisible by 2.\n\nn = 6 [/INST] test('divisible by 2', () => {\n expect(n % 2).toBe(0);\n});</s>"
  },
  {
    "text": "<s>[INST] Create a mongoose model for employees who have the fields 'name', 'age', 'gender', and 'salary'. [/INST] const mongoose = require(\"mongoose\");\n\nconst EmployeeSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  gender: String,\n  salary: Number,\n});\n\nmodule.exports = mongoose.model(\"Employee\", EmployeeSchema);</s>"
  },
  {
    "text": "<s>[INST] Re-write the code below in Java to reverse the first string while preserving the order of the elements in the other strings.\n\narr = [string1, string2, string3] [/INST] String[] arr = {\"string1\", \"string2\", \"string3\"}; \n \nString temp = arr[0]; \narr[0] = new StringBuilder(temp).reverse().toString(); \n \nSystem.out.println(Arrays.toString(arr));</s>"
  },
  {
    "text": "<s>[INST] Sort the following array of objects based on the 'name' key in descending order.\n\narr = [ \n  { name: ‘Bill’, age: 25 }, \n  { name: ‘Bob’, age: 21 },\n  { name: ‘Adam’, age: 20 } \n] [/INST] arr.sort((a, b) => (a.name < b.name) ? 1 : -1);</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all books with a title starting with “The” from the database.\n\nTable: books\nColumns: id, title, year\nEntries\n1, ‘The Millionaire Network’, 2020\n2, ‘Web Development for Dummies’, 2020\n3, ‘The Network for Beginners’, 2021 [/INST] SELECT * \nFROM books \nWHERE title LIKE ‘The%’;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the names of all customers who bought a laptop from a store.\n\nTableName: Customers\n\nColumns:\nCustomerId INT \nName VARCHAR(50) \nPurchaseItem VARCHAR(20)\n\nTableName: Purchases\n\nColumns:\nPurchaseId INT \nCustomerId INT \nPurchaseItem VARCHAR(20) [/INST] SELECT c.Name\nFROM Customers c\nINNER JOIN Purchases p ON c.CustomerId = p.CustomerId\nWHERE p.PurchaseItem = 'laptop';</s>"
  },
  {
    "text": "<s>[INST] Create a regex expression to extract all words that contain 3 consonants in a row. [/INST] [a-zA-Z]*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]{3}[a-zA-Z]*</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in pseudocode to convert a temperature given in Celsius to its equivalent value in Fahrenheit. [/INST] // Algorithm to convert Celsius to Fahrenheit\n\n// Input: numeric value in Celsius (c)\n// Output: numeric value in Fahrenheit (f)\n\n// Step 1: Multiply c by 9\n// Step 2: Divide the result 9 by 5\n// Step 3: Add 32 to the result\n// Step 4: Output f\n\nf = ( 9 / 5 ) * c + 32</s>"
  },
  {
    "text": "<s>[INST] Design a logic in Rust to check if an entered integer is a prime number or not. [/INST] fn is_prime(number: i32) -> bool {\n    if number == 0 || number == 1 {\n        return false\n    }\n    for i in 2..(number/2) {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to count all buyers from a country.\n\nTableName: Customers\n\nColumns: \nCustomerID INT \nName VARCHAR(40) \nCountry VARCHAR(20)\n\nTableName: Purchases\n\nColumns:\nPurchaseID INT \nCustomerID INT [/INST] SELECT COUNT(*)\nFROM Customers c\nINNER JOIN Purchases p ON c.CustomerID = p.CustomerID\nWHERE c.Country = 'CountryName';</s>"
  },
  {
    "text": "<s>[INST] Construct a regex expression to identify all numbers within a given string. [/INST] \\d+</s>"
  },
  {
    "text": "<s>[INST] Implement a function in Python that takes two array-like structures and returns a new array containing all elements from the first one that do not appear in the second one.\n\nlist_1 = [9, 4, 2, 1, 5]\nlist_2 = [4, 6, 2] [/INST] def difference_array(list_1, list_2):\n  new_list = []\n  for i in list_1:\n    if i not in list_2:\n      new_list.append(i)\n  return new_list</s>"
  },
  {
    "text": "<s>[INST] Create a script that prints the prime numbers up to a given integer n. [/INST] def printPrimesUpTo_n(n):\n\n    while n > 1:\n        if not (n % 2 and n > 2):\n            flag = False\n            for i in range(2, int(n**0.5) +1):\n                if not n % i:\n                    flag = True\n                    break\n            if not flag:\n                print(n)\n        n -= 1</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java that takes an integer n and prints the first n Fibonacci numbers. [/INST] public void printFibonacci(int n) {\n\tint a = 0, b = 1, c;\n \n\tif (n == 0)\n\t\treturn;\n \n\tfor (int i = 1; i <= n; i++) {\n\t\tc = a + b;\n\t\tSystem.out.print(a + \" \");\n\t\ta = b;\n\t\tb = c;\n\t}\n}</s>"
  },
  {
    "text": "<s>[INST] Design a procedure in SQL to get maximum salary from the 'employees' table. [/INST] SELECT MAX(salary) \nFROM employees;</s>"
  },
  {
    "text": "<s>[INST] Implement a function in Python that takes a list of integers and the size of the list. The function should return a list in which every element is multiplied by three and none of the elements exceeding the size of the list.\n\ns=[1,2,3,4] [/INST] def multiply_by_3(s):\n    result = []\n    for x in s:\n        if x*3 <len(s):\n            result.append(x * 3)\n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a piece of code in C++ to write \"Hello World\" to the console. [/INST] #include <iostream> \nint main() \n{ \n    std::cout << \"Hello World!\"; \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript that removes all vowels from a string. [/INST] function removeVowels(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if ((str[i] !== 'a') && (str[i] !== 'e') && (str[i] !== 'i') && (str[i] !== 'o') && (str[i] !== 'u')) {\n      result += str[i];\n    }\n  }\n  return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in Python to count how many words a given string contains. [/INST] def count_words(string):\n\twords = string.split()\n\treturn len(words)</s>"
  },
  {
    "text": "<s>[INST] Design an SQL query to find all the records where the salary is between 10000 and 20000 in the 'employees' table. [/INST] SELECT * \nFROM employees \nWHERE salary BETWEEN 10000 AND 20000;</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to concatenate two strings without using the concat() method. [/INST] function concat_str(str1, str2) {\n    let result = \"\";\n    for (let i = 0; i < str1.length; i++) {\n        result += str1[i];\n    }\n    for (let j = 0; j < str2.length; j++) {\n        result += str2[j];\n    }\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to count the number of unique customers who purchased an item in a given month.\n\nTable name: \"Orders\" [/INST] SELECT COUNT(DISTINCT customer_id)\nFROM Orders\nWHERE MONTH(order_date) = <month_number>;</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL schema to store a table of products. [/INST] CREATE TABLE products (\n  id int NOT NULL AUTO_INCREMENT, \n  name VARCHAR(255) NOT NULL,\n  description VARCHAR(255) NOT NULL,\n  price DECIMAL(10, 2) NOT NULL,\n  PRIMARY KEY (id)\n);</s>"
  },
  {
    "text": "<s>[INST] Implement a Java program to search the title of books in a library. [/INST] public class LibrarySearch {\n\n    private ArrayList<String> titles;\n\n    public LibrarySearch() {\n        titles = new ArrayList<String>();\n    }\n    \n    public boolean searchTitle(String title) {\n        for (int i = 0; i < titles.size(); i++) {\n            String titleInList = titles.get(i);\n            if (title.equals(titleInList)) {\n                return true;\n            }\n        }\n       \n        return false;\n    }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a script in JavaScript to validate an email address. [/INST] function isValidEmail(email) { \n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script that can validate if a given string is a valid IP address. [/INST] function validateIP(ip) { \n  return filter_var(ip, FILTER_VALIDATE_IP); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a C# method that takes a string and counts the number of times a given character appears.\n\n\"Mississippi\", 'i' [/INST] public static int countCharacter(string text, char character)\n         {\n             int count = 0;\n             foreach (char c in text)\n             {\n                 if(c == character)\n                 {\n                     count++;\n                 }\n             }\n             return count;    \n         }</s>"
  },
  {
    "text": "<s>[INST] Create a schema for a collection in MongoDB to store product data.\n\nCollection name: products\nSchema should include: name, type (string), description (string), price (integer), availability (boolean) [/INST] const ProductSchema = new Schema({\n  name: { type: String },\n  type: { type: String },\n  description: { type: String },\n  price: { type: Number },\n  availability: { type: Boolean },\n});</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all rows where the name contains \"John\".\n\nTable name: employees\nTable information: id, name, age [/INST] SELECT * \nFROM employees \nWHERE name LIKE '%John%'</s>"
  },
  {
    "text": "<s>[INST] Update a MongoDB document with the following information.\n\nDatabase name: products\nCollection name: items\nDocument ID: 5e9697d50a5173c078b5306b\nField to update: description\nValue: This item is now available in 3 sizes [/INST] db.items.updateOne(\n   { _id: ObjectId(\"5e9697d50a5173c078b5306b\") },\n   { $set: { description: \"This item is now available in 3 sizes\" } }\n)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all rows where the age is greater than or equal to 30.\n\nTable name: employees\nTable information: id, name, age [/INST] SELECT *\nFROM employees\nWHERE age >= 30</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm to return all possible permutations of a given string.\n\nString: \"abc\" [/INST] const permute = str => {\n  let results = [];\n  \n  const permutations = (subStr, rest) => {\n    if (!rest.length) {\n      results.push(subStr);\n    } else {\n      for (let i = 0; i < rest.length; i++) {\n        let newSubStr = subStr + rest[i];\n        let newRest = rest.substring(0, i) + rest.substring(i + 1);\n        permutations(newSubStr, newRest);\n      }\n    }\n  }\n\n  permutations('', str);\n  return results;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to join two tables ‘employees’ and ‘locations’ on the key ‘city’ and return only the employees of age 25-35\n\nTable A (employees):\nid | name | city | age\n\nTable B (locations):\ncity | region [/INST] SELECT\n    e.id,\n    e.name,\n    e.city,\n    e.age\nFROM \n    employees e\nINNER JOIN \n    locations l\nON \n    e.city =  l.city\nWHERE\n    e.age BETWEEN 25 AND 35;</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to remove all the values that are greater than 30 from the list\n\nlist_of_num = [25, 12, 36, 118, 200, 30] [/INST] new_list = [num for num in list_of_num if num <= 30]</s>"
  },
  {
    "text": "<s>[INST] Complete the SQL query which find the name and age of all female customers\n\nTable A (Customers):\nname | sex | age [/INST] SELECT\n    name,\n    age\nFROM\n    Customers\nWHERE \n    sex = 'female';</s>"
  },
  {
    "text": "<s>[INST] Modify the CSS in the given HTML code to style the web page\n\n<html>\n <head>\n  <title>Styled Page</title>\n </head>\n <body>\n  <h1>Styled Page</h1>\n </body>\n</html> [/INST] <html>\n <head>\n  <title>Styled Page</title>\n  <style type=\"text/css\">\n    body {\n        background-color: white;\n    }\n    h1 {\n        font-family: 'Arial', sans-serif;\n        font-size: 30px;\n        color: black;\n        text-align: center;\n    }\n  </style>\n </head>\n <body>\n  <h1>Styled Page</h1>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a user defined function to print the sum of two numbers [/INST] def add_two_numbers(a, b):\n    return a + b</s>"
  },
  {
    "text": "<s>[INST] Create a new method “listItems” which returns a list of strings [/INST] def listItems():\n    list_items = [\"item1\", \"item2\", \"item3\"]\n    return list_items</s>"
  },
  {
    "text": "<s>[INST] Write a function to print the four elements in the given list in reverse order\n\nlist = [\"a\", \"b\", \"c\", \"d\"] [/INST] def print_reverse_order(lst):\n    for item in reversed(lst):\n        print(item)\n\nprint_reverse_order(list)</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet that returns the root of a given binary tree.\n\ntree = \n        3\n      /   \\\n    4      5\n  /    \\    \\\n3       6    7 [/INST] def root(tree):\n    if not tree:\n        return None\n    return tree.val</s>"
  },
  {
    "text": "<s>[INST] Write a function in C to find the corresponding letter for a given prime number.\n\nint prime_no = 11; [/INST] char findLetterforPrime(int prime_no)\n{\n    char character;\n \n    switch (prime_no)\n    {\n        case 2:\n            character = 'A';\n            break;\n        case 3:\n            character = 'B';\n            break;\n        case 5:\n            character = 'C';\n            break;\n        case 7:\n            character = 'D';\n            break;\n        case 11:\n            character = 'E';\n            break;\n        default:\n            printf(\" prime number is not in list\");\n    }\n    return character;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following for loop to add a comment before each iteration.\n\nfor i in range(10):\n    print(i) [/INST] for i in range(10):\n    # loop iteration: i =\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet in SQL to show the town fields in a table called \"library.\" [/INST] SELECT town \nFROM library;</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet in Java that sorts a given array in ascending order. [/INST] public static void sortAscending(int[] arr) { \n    int n = arr.length; \n    for (int i = 0; i < n-1; i++) \n        for (int j = 0; j < n-i-1; j++) \n            if (arr[j] > arr[j+1]) \n            { \n                int temp = arr[j]; \n                arr[j] = arr[j+1]; \n                arr[j+1] = temp; \n            } \n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following Python code to add error handling for invalid inputs.\n\ndef area_triangle(base,height):\n    pass [/INST] def area_triangle(base,height):\n    if base == 0 or height == 0:\n        raise ValueError(\"Base and height should not be zero.\")\n    else:\n        return 0.5 * base * height</s>"
  },
  {
    "text": "<s>[INST] Create a C++ code to display the following pattern.\n\nx\nxxx\nxxxxx\nxxxxxxx [/INST] #include <iostream> \nusing namespace std; \n  \n// Function to demonstrate printing pattern \nvoid triangle(int n) \n{ \n    // Outer loop to handle number of rows \n    // n in this case \n    for (int i=0; i<n; i++) \n    { \n        // Inner loop to handle number of columns \n        // values changing acc. to outer loop \n        for (int j=0; j<=i; j++ ) \n        { \n            // Printing stars \n            cout << \"x\"; \n        } \n  \n        // Ending line after each row \n        cout << \"\\n\"; \n    } \n} \n  \n// Driver Function \nint main() \n{ \n    int n = 4; \n    triangle(n); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function that prints out the Pythagorean theorem in Python. [/INST] def pythagoras_theorem():\n    \"\"\"Print the Pythagorean theorem in Python.\"\"\"\n    print(\"The Pythagorean theorem states that the sum of the squares of the two sides of a right triangle is equal to the square of the hypotenuse.\")</s>"
  },
  {
    "text": "<s>[INST] Create an array that contains the numbers from 0 to 10 in Python. [/INST] arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</s>"
  },
  {
    "text": "<s>[INST] Create a new div element and add it to the DOM with id \"main-container\". [/INST] let myDiv = document.createElement('div');\nmyDiv.id = \"main-container\";\ndocument.body.appendChild(myDiv);</s>"
  },
  {
    "text": "<s>[INST] Write a Java method to transform a String input into a String array with each element the length of 4.\n\nString input = \"HelloWorld\"; [/INST] public static String[] stringToArray(String input) {\n    String[] stringArray = new String[input.length()/4];\n    int count = 0;\n    for (int i = 0; i < input.length(); i += 4) {\n        stringArray[count] = input.substring(i, i+4);\n        count++;\n    }\n    return stringArray;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to find the cube root of a number.\n\nlet num = 8; [/INST] function cubeRoot(num) {\n  return Math.pow(num, 1/3);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to get the number of records from the table \"users\" where the value of the \"active\" column is True. [/INST] SELECT COUNT(*) AS num_of_active \nFROM users \nWHERE active = true;</s>"
  },
  {
    "text": "<s>[INST] Create a jQuery function that animates an element's background color from red to green over 3 seconds. [/INST] $(\"#element\").animate({\n    backgroundColor: \"green\"\n  }, {\n    duration: 3000,\n    easing: \"linear\"\n});</s>"
  },
  {
    "text": "<s>[INST] Edit the following SQL statement to select all rows from the \"users\" table where the \"country_id\" is 2 and the \"level\" is greater than 5.\n\nSELECT * FROM users; [/INST] SELECT * FROM users\nWHERE country_id = 2 \nAND level > 5;</s>"
  },
  {
    "text": "<s>[INST] Create a CSS style to make all headings (h1, h2, h3, h4, h5, h6) bold and blue. [/INST] h1, h2, h3, h4, h5, h6{\n    font-weight: bold;\n    color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java that takes an input string and changes the case of each letter to its opposite (i.e. upper case to lower case and vice versa).\n\nString input = \"Hello World\"; [/INST] public static String changeCase(String input) {\n    StringBuilder outputString = new StringBuilder();\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (Character.isUpperCase(c)) {\n            outputString.append(Character.toLowerCase(c));\n        } else {\n            outputString.append(Character.toUpperCase(c));\n        }\n    }\n    return outputString.toString();\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that takes an input list of strings and returns the longest string in the list.\n\nlist = [\"cat\", \"dog\", \"elephant\"] [/INST] def longest_string(list):\n  longest_word = \"\"\n  for word in list:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return longest_word</s>"
  },
  {
    "text": "<s>[INST] Categorize a given dataset into three classes\n\n[1, 2, 3, 4, 5] [/INST] Class 1: [1]\nClass 2: [2, 3]\nClass 3: [4, 5]</s>"
  },
  {
    "text": "<s>[INST] Submit a valid Ruby program to remove special characters from a given string\n\nHello$#@World! [/INST] def remove_special_chars(str)\n   str = str.gsub(/[^a-zA-Z0-9\\s]/, '')\n   return str\nend\n\nputs remove_special_chars(\"Hello$#@World!\")</s>"
  },
  {
    "text": "<s>[INST] Edit the following class to make sure any variables created as part of the class cannot be modified by the program\n\nclass Example:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y [/INST] class Example:\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def x(self):\n        return self.__x\n    @x.setter\n    def x(self, val):\n        raise AttributeError(\"Cannot modify x\")\n    @property\n    def y(self):\n        return self.__y\n    @y.setter\n    def y(self, val):\n        raise AttributeError(\"Cannot modify y\")</s>"
  },
  {
    "text": "<s>[INST] Given a function, create a program to identify whether the output is equal to 1, 0 or -1.\n\ndef func(x):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 0\n    else:\n        return 1 [/INST] def func_val(x):\n    result = func(x)\n    if result == -1:\n        return -1\n    elif result == 0:\n        return 0\n    else:\n        return 1</s>"
  },
  {
    "text": "<s>[INST] Sort the following array in reversed order: [3, 2, 1, 5, 4, 6]\n\n[3, 2, 1, 5, 4, 6] [/INST] [6, 5, 4, 3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that takes as arguments two strings and returns a boolean if both strings are equal or not.\n\nstring1 = \"Hello\"\nstring2 = \"World\" [/INST] def is_equal(str1, str2):\n    if str1 == str2:\n        return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Explain the differences between Stacks and Queues in computer science. [/INST] Stacks are data structures that operate in a Last In First Out (LIFO) order, while Queues are data structures that operate in a First In First Out (FIFO) order. In a stack, items can only be added or removed from the top, while in a queue, items can be added at the front and removed from the rear. Additionally, stack elements have direct access to the top element, while queue elements are only able to access the front element.</s>"
  },
  {
    "text": "<s>[INST] Create a program to replace a given string with new text.\n\nOld Text: \"Hello World\" \nNew Text: \"Hello Universe\" [/INST] public static String replaceText(String old, String newText) {\n  return old.replace(old, newText);\n}</s>"
  },
  {
    "text": "<s>[INST] What are the benefits of using React for web development? [/INST] The benefits of using React for web development include increased efficiency, increased modularity, and easier maintenance due to its component-based architecture. React allows for quick loading times and scalability. React also allows developers to create reusable UI components. Finally, React’s large community makes debugging and finding resources for development easier.</s>"
  },
  {
    "text": "<s>[INST] You need to generate a random four-digit number and return it as an integer. [/INST] import random\n\ndef generateRandomNumber():\n    return random.randint(1000,9999)</s>"
  },
  {
    "text": "<s>[INST] Correct this function so that it returns a correct multiplication table.\n\ndef multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * row)\n        print(output) [/INST] def multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * column)\n        print(output)</s>"
  },
  {
    "text": "<s>[INST] Use the given data to print out the average of the numbers.\n\n[1, 7, 8, 10] [/INST] def calculateAverage(nums):\n    average = 0\n    for num in nums:\n        average += num\n    return average / len(nums)\n\nprint(calculateAverage([1,7,8,10]))\n# Output: 6.5</s>"
  },
  {
    "text": "<s>[INST] You are given a string, output a new string with its vowels removed.\n\n\"Hello World\" [/INST] def removeVowels(s):\n    vowels = 'aeiouAEIOU'\n    s_without_vowel = ''\n    for c in s:\n        if c not in vowels:\n            s_without_vowel += c\n    return s_without_vowel\n\nprint(removeVowels(\"Hello World\"))\n# Output: Hll Wld</s>"
  },
  {
    "text": "<s>[INST] Implement a basic calculator that takes an equation and outputs the result.\n\n\"3+3\" [/INST] def calculator(equation):\n    result = eval(equation)\n    return result\n\nprint(calculator(\"3+3\"))\n# Output: 6</s>"
  },
  {
    "text": "<s>[INST] Implement a stack to store and retrieve items in last-in first-out order. [/INST] class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[len(self.items)-1]\n    \n    def size(self):\n        return len(self.items)</s>"
  },
  {
    "text": "<s>[INST] Construct a machine learning model in Python for the given dataset.\n\nThe dataset contains information on the daily income of 500 students. You should be able to predict the income of a student based on the given characteristics. [/INST] import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load dataset\ndataframe = pd.read_csv('student_income_data.csv')\n\n# split into input X and output y\nX = dataframe.iloc[:,:-1]\ny = dataframe.iloc[:,-1]\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\n\n# create model\nmodel = LinearRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)</s>"
  },
  {
    "text": "<s>[INST] Compare the performance of two different neural network architectures.\n\nTwo convolutional neural networks (CNNs) with different depth of layers have been trained on the MNIST dataset. [/INST] # evaluate the performance on the test dataset\nfrom sklearn.metrics import accuracy_score\n\n# load the test dataset\nX_test, y_test = load_dataset()\n\n# evaluate each model\ny_pred_1 = model_1.predict(X_test)\nacc_1 = accuracy_score(y_test, y_pred_1)\n\ny_pred_2 = model_2.predict(X_test)\nacc_2 = accuracy_score(y_test, y_pred_2)\n\n# compare the performance\nif acc_1 > acc_2:\n    print('Model 1 has better performance than Model 2.')\nelif acc_2 > acc_1:\n    print('Model 2 has better performance than Model 1.')\nelse:\n    print('The performances of the two models are equal.')</s>"
  },
  {
    "text": "<s>[INST] Construct an algorithm in pseudocode to sort a given array of numbers.\n\n[3, 1, 4, 5, 7, 2] [/INST] sort(array A[]):\n  for i = 1 to n-1\n  begin\n    min = i\n    for j = (i + 1) to n\n      if A[j] < A[min]\n        min = j\n    swap the value at index min and index i\n  end\n  return A[]</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to get the name and age of the youngest student [/INST] SELECT name, age FROM students ORDER BY age asc LIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Create a function in R that calculates the mean of a given dataset\n\n[4.6, 8.9, 5.4, 7.2] [/INST] mean <- function(data) {\n  sum = 0\n  for (i in data) {\n    sum = sum + i\n  }\n  mean = sum / length(data)\n  return(mean)\n}</s>"
  },
  {
    "text": "<s>[INST] Compute the cross-entropy loss of a given classification problem\n\nGround truth: [0, 0, 0, 1, 1]\nPredicted: [0, 0, 0, 0.6, 0.8] [/INST] -1.2885609570312778</s>"
  },
  {
    "text": "<s>[INST] Write a sample program that performs text classification [/INST] import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# load dataset\ndataframe = pd.read_csv('text_classification_data.csv')\n\n# convert to vectors\nvectorizer = TfidfVectorizer()\nvectors = vectorizer.fit_transform(dataframe['text'])\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(vectors, dataframe['label'], test_size = 0.25)\n\n# create model\nmodel = LogisticRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to calculate the compound interest given the principal amount, rate of interest and number of years.\n\np = 1000\nr = 0.10\nn = 3 [/INST] def calc_comp_int(principal, rate, num_years):\n    return principal * (1 + rate) ** num_years - principal\n\nprint(calc_comp_int(p, r, n))</s>"
  },
  {
    "text": "<s>[INST] Change the following string to lowercase using C++.\n\n\"THIS STRING WILL BE LOWERCASED\" [/INST] #include <bits/stdc++.h>\nusing namespace std;\n \nint main()\n{   \n    string s = \"THIS STRING WILL BE LOWERCASED\";\n    transform(s.begin(), s.end(), s.begin(),\n              [](unsigned char c) { return std::tolower(c); });\n    cout << s;\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a more descriptive name for the following method.\n\ndef get_data(): [/INST] def retrieve_data_from_database():</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers and a search value, check if the value is present in the list and return a boolean value.\n\nnums = [2, 4, 6, 8, 10]\nvalue = 6 [/INST] def search_list(nums, value):\n    for num in nums:\n        if num == value:\n            return True\n    return False\n\nnums = [2, 4, 6, 8, 10]\nvalue = 6\n\nresult = search_list(nums, value)\nprint(result) # Output: True</s>"
  },
  {
    "text": "<s>[INST] Design a function to calculate the distance between two points in a 3-D space.\n\np1 = (3, 2, 1)\np2 = (5, 4, 6) [/INST] def get_distance(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\np1 = (3, 2, 1)\np2 = (5, 4, 6)\ndistance = get_distance(p1, p2)\nprint(distance) # Output: 5.196152422706632</s>"
  },
  {
    "text": "<s>[INST] Create a class that can be used to generate random numbers between a given range. [/INST] class RandomNumberGenerator:\n    def __init__(self, min_num, max_num):\n        self.min_num = min_num\n        self.max_num = max_num\n    \n    def get_random_number(self):\n        return random.randint(self.min_num, self.max_num)</s>"
  },
  {
    "text": "<s>[INST] Write a type annotation for a function that takes an integer as an input and returns a boolean. [/INST] def func(num: int) -> bool:\n    ...</s>"
  },
  {
    "text": "<s>[INST] Create a class for a Rectangle with attributes for its length and width, and methods to calculate its area, perimeter and diagonal. [/INST] class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def area(self):\n        return self.length * self.width\n    \n    def perimeter(self):\n        return (2*self.length) + (2*self.width)\n    \n    def diagonal(self):\n        return (self.length**2 + self.width**2)**0.5</s>"
  },
  {
    "text": "<s>[INST] Compile a C program to check for memory leaks.\n\n#include <stdio.h>\n\nint main() {\n  int* a = (int*)malloc(sizeof(int));\n  return 0;\n} [/INST] g++ -g -o program program.c -lm -lstdc++ && valgrind --leak-check=yes ./program</s>"
  },
  {
    "text": "<s>[INST] Create SQL code to query demographic data from a database.\n\nSELECT Name, Age, Gender, Location\nFROM User_table [/INST] SELECT Name, Age, Gender, Location\nFROM User_table\nWHERE Age > 18\nAND Gender = 'Female'</s>"
  },
  {
    "text": "<s>[INST] Generate HTML code to display an interactive button. [/INST] <button onclick=\"alert('Button was clicked!');\">Click Me!</button></s>"
  },
  {
    "text": "<s>[INST] Construct a Java class to execute a binary search.\n\npublic class BinarySearch {\n\n} [/INST] public class BinarySearch { \n  \n    int binarySearch(int arr[], int l, int r, int x) { \n        if (r >= l) { \n            int mid = l + (r - l) / 2; \n  \n            if (arr[mid] == x) \n                return mid; \n  \n            if (arr[mid] > x) \n                return binarySearch(arr, l, mid - 1, x); \n  \n            return binarySearch(arr, mid + 1, r, x); \n        } \n        return -1; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a Node program to merge two arrays. [/INST] const mergeArray = (arr1, arr2) => {\n  return [...arr1, ...arr2];\n};</s>"
  },
  {
    "text": "<s>[INST] Write an R code to identify DNA motifs of a given gene sequence.\n\nsequence <- c(\"AAATACTAGCTGAGTTTGTACGTATGGGCC\") [/INST] motifs <- findMotifs(sequence)\nprint(motifs)</s>"
  },
  {
    "text": "<s>[INST] Create CSS code to design an expandable menu. [/INST] .menu > ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n\n  .menu > ul > li {\n    float: left;\n  }\n\n  .menu li {\n    position: relative;\n  }\n\n  .menu > ul > li > ul {\n    position: absolute;\n    display: none;\n  }\n\n  .menu > ul > li:hover > ul {\n    display: block;\n  }</s>"
  },
  {
    "text": "<s>[INST] Generate a Perl script to check for palindromes. [/INST] sub check_palindrome {\n  my ($str) = @_;\n  my $reverse = reverse $str;\n  if($str eq $reverse){\n    return 1;  \n  }\n  else{\n    return 0;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a C# class to output the prime numbers up to n. [/INST] class PrimeNumber\n{\n    public static void Main()\n    {\n        Console.Write(\"Enter a number: \");\n        int n = int.Parse(Console.ReadLine());\n \n        for (int i = 2; i <= n; i++)\n        {\n            if (CheckPrime(i))\n            {\n                Console.Write(i + \" \");\n            }\n        }\n        Console.WriteLine();\n    }\n \n    public static bool CheckPrime(int numberToCheck)\n    {\n        int boundary = (int)Math.Floor(Math.Sqrt(numberToCheck));\n \n        if (numberToCheck == 1) return false;\n        if (numberToCheck == 2) return true;\n \n        for (int i = 2; i <= boundary; ++i)\n        {\n            if (numberToCheck % i == 0) return false;\n        }\n \n        return true;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Reorganize the following code in a more efficient way using Python.\n\ndef get_student_avg(students):\n    for student in students:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum / len(student['grades'])\n        student['avg'] = avg [/INST] def get_student_avg(students):\n    for student in students:\n        student['avg'] = sum(student['grades']) / len(student['grades'])</s>"
  },
  {
    "text": "<s>[INST] Correct any errors in the following code.\n\ndef get_student_avg (studentss):\n    for stdent in studentss:\n        sum = 0\n        for grade in stdent['grades']:\n            sum += grade\n        avg = sum // len studnet['grades']\n        stdent['avg']= avg [/INST] def get_student_avg (studentss):\n    for student in studentss:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum // len(student['grades'])\n        student['avg']= avg</s>"
  },
  {
    "text": "<s>[INST] Suggest a sorting algorithm to sort a list in ascending order.\n\nmy_list = [3, 8, 5, 4, 1, 9, 7] [/INST] The best sorting algorithm to use for this task would be the Bubble Sort algorithm. In the Bubble Sort algorithm, the list is looped through and elements are compared to each other and swapped if they are not in the correct order. This process is repeated until the list is sorted.</s>"
  },
  {
    "text": "<s>[INST] Suggest a linear search algorithm for the following task.\n\nGiven a list of numbers, search for the number 6 in the list and return its position. [/INST] The best linear search algorithm to use for this task is the linear search algorithm. In the linear search algorithm, the list is looped through and each element is compared to the target. If the item is found, its position is returned.</s>"
  },
  {
    "text": "<s>[INST] Sort the given list using the quicksort algorithm.\n\nmy_list = [8, 5, 3, 9, 6, 1] [/INST] def quick_sort(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\nquick_sort(my_list)</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script to run multiple commands [/INST] #!/bin/bash\n# A bash script which will run all the commands given below\n\n# command 1\ncommand 1\n\n# command 2\ncommand 2\n\n# command 3\ncommand 3\n\n# command 4\ncommand 4\n\netc...</s>"
  },
  {
    "text": "<s>[INST] Print the numbers in a Fibonacci series with a loop. [/INST] # Fibonacci Series using a loop\n# the first two numbers of the Fibonacci series is 0 and 1\n\na = 0\nb = 1\n\nprint(a)\nprint(b)\n\nfor i in range(10):\n    c = a + b\n    a = b\n    b = c\n    print(c)</s>"
  },
  {
    "text": "<s>[INST] Create an HTML table [/INST] <table>\n  <tr>\n    <td>Name</td>\n    <td>Age</td>\n    <td>Hobby</td>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>28</td>\n    <td>Travelling</td>\n  </tr>\n  <tr>\n    <td>Amanda</td>\n    <td>27</td>\n    <td>Reading</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Implement a function to solve a given equation.\n\n4x + 2y = 32 [/INST] def solve_equation(x, y):\n    A = 4\n    B = 2\n    C = 32\n    \n    y = (C - A*x)/B\n    return y</s>"
  },
  {
    "text": "<s>[INST] Edit the given code to fix the bug\n\ndef calculate_tax(price):\ntax_rate = 0.20\ntotal = price + (price * tax_rate)\nreturn total [/INST] def calculate_tax(price):\n    tax_rate = 0.20\n    total = price + (price * tax_rate)\n    return round(total, 2)</s>"
  },
  {
    "text": "<s>[INST] Generate a 5-dimensional array using the numpy library [/INST] import numpy as np\n\narr = np.zeros((5,5,5,5,5))</s>"
  },
  {
    "text": "<s>[INST] Add the following lines after the 2nd line in the given java program\n\npublic class Calculator {\n    public static void main(String args[]) {\n        int a = 10;\n        int b = 20;\n\nAdd the following lines\nint c = a + b;\nSystem.out.println(\"Sum : \"+c); [/INST] public class Calculator {\n    public static void main(String args[]) {\n        int a = 10;\n        int b = 20;\n        int c = a + b;\n        System.out.println(\"Sum : \"+c);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate an appropriate python code snippet to capitalize all elements of an array called A.\n\nA = ['welcome', 'to', 'my', 'website'] [/INST] A = ['welcome', 'to', 'my', 'website']\n\nA = [x.capitalize() for x in A]\n\nprint(A)</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to count the occurrence of number 4 in an array called arr.\n\narr = [1, 4, 2, 4, 5] [/INST] arr = [1, 4, 2, 4, 5]\n\ncount = 0\nfor num in arr:\n    if num == 4:\n        count += 1\n\nprint(count)</s>"
  },
  {
    "text": "<s>[INST] Generate a Pandas code snippet to calculate the averages of the elements of each row in the given dataframe?\n\ndataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c']) [/INST] import pandas as pd\n  \ndataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])\n \ndataframe['avg'] = dataframe.mean(axis=1)\n\nprint(dataframe)</s>"
  },
  {
    "text": "<s>[INST] Edit the following code snippet to make it calculate the median instead of the average?\n\nx = [1,2 ,3, 4, 5] [/INST] x = [1,2 ,3, 4, 5]\n\nimport statistics\n\nmedian = statistics.median(x)\nprint(median)</s>"
  },
  {
    "text": "<s>[INST] Generate a code snippet to perform an element-wise multiplication of two NumPy arrays named A and B.\n\nA = [1,2,3]\nB = [4,5,6] [/INST] import numpy as np\n \nA = np.array([1,2,3])\nB = np.array([4,5,6])\n \nC = np.multiply(A, B)\nprint(C)</s>"
  },
  {
    "text": "<s>[INST] Generate a code snippet to print out the top 3 highest numbers from an array A.\n\nA = [9, 4, 18, 24, 7, 22, 11] [/INST] A = [9, 4, 18, 24, 7, 22, 11]\n \nA.sort(reverse=True)\n \ntop_3 = A[:3]\n\nprint(top_3)</s>"
  },
  {
    "text": "<s>[INST] Subtract two matrices named A and B and store the result in matrix C?\n\nA = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\n  \nB = [[10, 11, 12],\n     [13, 14, 15],\n     [16, 17, 18]] [/INST] import numpy as np\n \nA = np.array([[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]])\n \nB = np.array([[10, 11, 12],\n              [13, 14, 15],\n              [16, 17, 18]])\n \nC = A - B\n\nprint(C)</s>"
  },
  {
    "text": "<s>[INST] Generate a code snippet to sort the students alphabetically by their last name in the following list?\n\nstudents = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')] [/INST] students = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')]\n\nstudents.sort(key= lambda x: x[1])\n\nprint(students)</s>"
  },
  {
    "text": "<s>[INST] Select the most suitable approach for compressing a given list of strings. [/INST] Using Huffman Coding.</s>"
  },
  {
    "text": "<s>[INST] Write the SQL query to delete all tables from a given database.\n\ndatabase: testdb [/INST] DROP DATABASE testdb;</s>"
  },
  {
    "text": "<s>[INST] Suggest the best way to implement an AI system for user authentication. [/INST] Using a combination of facial recognition and voice recognition.</s>"
  },
  {
    "text": "<s>[INST] Suggest the most appropriate approach to train a neural network model with a large dataset. [/INST] Using mini-batch gradient descent.</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to edit the following text data using NLP techniques\n\ntext = \"This is an exmaple\" [/INST] Using NLP techniques, the text can be edited in various ways such as lemmatisation, stemming and tokenisation. For example, the text can be tokenized and lemmatized so that the words \"example\" and \"exmaple\" are both converted to the root word \"example\".</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to exchange the values of two different variables.\n\nx = 10 \ny = 20 [/INST] x, y = y, x</s>"
  },
  {
    "text": "<s>[INST] Select the best approach to process large amount of data in parallel. [/INST] Using MapReduce.</s>"
  },
  {
    "text": "<s>[INST] Identify the most suitable language to create  a web application. [/INST] JavaScript.</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java called Student that stores four pieces of data: name, id, major, and gpa. [/INST] class Student { \n  \n    // data members \n    String name; \n    int id; \n    String major; \n    double gpa; \n  \n    // constructors \n    Student(String name, int id, String major, double gpa) {  \n        this.name = name; \n        this.id = id; \n        this.major = major; \n        this.gpa = gpa; \n    } \n  \n  \n    // method 1 \n    public String getName() \n    { \n        return this.name; \n    } \n  \n    // method 2 \n    public int getId() \n    { \n        return this.id; \n    } \n  \n    // method 3 \n    public String getMajor() \n    { \n        return this.major; \n    } \n  \n    // method 4 \n    public double getGPA() \n    { \n        return this.gpa; \n    } \n  \n    // method 5 \n    public void setName(String name) \n    { \n        this.name = name; \n    } \n  \n    // method 6 \n    public void setId(int id) \n    { \n        this.id = id; \n    } \n  \n    // method 7 \n    public void setMajor(String major) \n    { \n        this.major = major; \n    } \n  \n    // method 8 \n    public void setGPA(int gpa) \n    { \n        this.gpa = gpa; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create an array in Python with 6 elements and print the last three elements. [/INST] my_array = [1, 2, 3, 4, 5, 6] \n#Print the last three elements\nprint (my_array[-3:]) \n#Output:[4, 5, 6]</s>"
  },
  {
    "text": "<s>[INST] Generate an array in JavaScript with two elements of type boolean. [/INST] let booleanArray = [true, false];</s>"
  },
  {
    "text": "<s>[INST] Create a random matrix using NumPy where the elements have 2 decimal places. [/INST] import numpy as np \n\n# Create a 2×2 matrix \nrandom_matrix = np.random.rand(2,2) \n\n# Round to two decimal places \nnp.around(random_matrix, decimals=2)</s>"
  },
  {
    "text": "<s>[INST] Modify the following SQL statement to select only the rows with prices greater than 100.\n\nSELECT * FROM products; [/INST] SELECT * \nFROM products \nWHERE price > 100;</s>"
  },
  {
    "text": "<s>[INST] Determine the fraction of numbers in this list that are multiples of 3: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. [/INST] fraction = 3/10 = 0.3</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary in Python mapping the following characters to numbers: A = 1, B = 2, C = 3 [/INST] my_dict = { \n    'A': 1, \n    'B': 2, \n    'C': 3\n}</s>"
  },
  {
    "text": "<s>[INST] Classify the following sentence as positive, negative, or neutral: \"I am so happy to be here.\" [/INST] Positive</s>"
  },
  {
    "text": "<s>[INST] Build a function in Python that takes a string as the input and prints each letter of the string on a separate line. [/INST] def print_letters(string): \n    for letter in string: \n        print(letter)</s>"
  },
  {
    "text": "<s>[INST] Sort the following array in descending order using JavaScript:[\"cat\", \"dog\", \"fish\", \"elephant\"]. [/INST] my_arr = [\"cat\", \"dog\", \"fish\", \"elephant\"];\nmy_arr.sort().reverse();\nconsole.log(my_arr); //prints [\"elephant\", \"fish\", \"dog\", \"cat\"]</s>"
  },
  {
    "text": "<s>[INST] Modify the following C++ code to capitalize the uppercase letters in a given string.\n\n#include <iostream> \n#include <string> \n\nint main() \n{ \n    std::string str = \"hello world\"; \n    std::cout << str; \n\nreturn 0; \n} [/INST] #include <iostream> \n#include <string> \n#include <algorithm>\n\nint main() \n{ \n    std::string str = \"hello world\"; \n    //Convert to uppercase letters\n    std::transform(str.begin(), str.end(), str.begin(), ::toupper); \n        std::cout << str;\n\nreturn 0; \n}</s>"
  },
  {
    "text": "<s>[INST] How does the break statement work in a for loop? [/INST] The break statement is used to break out of a loop, including a for loop. When a break statement is encountered inside a loop, it causes the loop to stop executing and control to be transferred outside the loop. For example, in a for loop, if the break statement is encountered, the loop is terminated immediately, and the program control will be transferred outside the loop.</s>"
  },
  {
    "text": "<s>[INST] Generate a timestamp based on the current date. [/INST] import time\n\ntimestamp = int(time.time())\nprint(timestamp) # 1598059584</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to find all numbers divisible by 5 but not a multiple of 7, between 1500 and 2700 (both included). [/INST] result = []\nfor i in range(1500, 2701):\n  if i % 5 == 0 and i % 7 != 0:\n    result.append(i)\n\nprint(result) # [1505, 1540, 1575, 1610, 1645, 1680, 1715, 1750, 1785, 1820, 1855, 1890, 1925, 1960, 1995, 2030, 2065, 2100, 2135, 2170, 2205, 2240, 2275, 2310, 2345, 2380, 2415, 2450, 2485, 2520, 2555, 2590, 2625, 2660, 2695]</s>"
  },
  {
    "text": "<s>[INST] Debug the following PHP code which tries to connect to a remote host.\n\n$host = \"myserver.com\";\n$user = \"admin\";\n$password = \"123456\";\n\n$conn = new mysql_connect($host,$user,$password);\n\nif(!$conn) \n  die(\"Unable to connect!\"); [/INST] $host = \"myserver.com\";\n$user = \"admin\";\n$password = \"123456\";\n\n// Connecting, selecting database\n$conn = mysql_connect($host, $user, $password) or die('Could not connect: ' . mysql_error());</s>"
  },
  {
    "text": "<s>[INST] Generate a Python dictionary that contains student information.\n\nName: John; Age: 22; Grade: A; [/INST] {\n \"name\": \"John\",\n \"age\": 22,\n \"grade\": \"A\"\n}</s>"
  },
  {
    "text": "<s>[INST] Design a SQL query to select the top 5 movies based on the number of 'likes'.\n\nTable Name: Movies\nColumns:  Movie_ID, Movie_Name, Likes [/INST] SELECT Movie_Name \nFROM Movies\nORDER BY Likes\nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Classify the given sentence into either declarative or interrogative sentence.\n\nJohn is getting ready for the test. [/INST] Declarative sentence.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code that gets the URL of a web page. [/INST] var url = window.location.href;</s>"
  },
  {
    "text": "<s>[INST] Edit the following C code so it runs correctly.\n\n#include <stdio.h>\n\nint main(){\n    int score = 80;\n\n    printf(\"Your final score is: %i;\n\nreturn 0;\n} [/INST] #include <stdio.h>\n\nint main(){\n    int score = 80;\n\n    printf(\"Your final score is: %i\", score);\n\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Design a SQL query to find the names of the employees who have an age of 30 or more.\n\nTable Name: Employees\nColumns:  Employee_ID, Last_Name, Age [/INST] SELECT Last_Name \nFROM Employees\nWHERE Age >= 30;</s>"
  },
  {
    "text": "<s>[INST] Generate XML code for the following.\n\nStudent Name: John\nStudent ID: 123456\nCourse: Computer Science [/INST] <studentName>John</studentName>\n<studentID>123456</studentID>\n<course>Computer Science</course></s>"
  },
  {
    "text": "<s>[INST] Explain how expression-oriented programming works in Java. [/INST] Expression-oriented programming is a programming paradigm where all commands are based on expressions. In Java, expression-oriented programming is used with Java Lambda Expressions, where an expression is executed by passing the command inside parentheses and executing that expression in the context of the method. This approach enables the expression to be executed immediately, as opposed to the traditional approach of declaring a variable, calling a method, and assigning a value to it.</s>"
  },
  {
    "text": "<s>[INST] Evaluate the given value for the expression \"3 * 5 + 4 / 2\". [/INST] 17.</s>"
  },
  {
    "text": "<s>[INST] Explain how to use the built-in bubble sort function for sorting a given list of numbers.\n\n[4, 9, 0, 3, 5, 7] [/INST] The built-in bubble sort function can be used to sort the given list of numbers. The algorithm starts from the beginning of the list and compares two adjacent elements. If the first number is larger than the second number, they are swapped. This process is repeated until the end of the list is reached. After one iteration, the largest element is placed at the end of the list. This process is then repeated for the remaining elements until the list is completely sorted. To use the Python built-in bubble sort function, simply call the bubble sort on the list, and it will return the sorted list.</s>"
  },
  {
    "text": "<s>[INST] Convert a given list into a dictionary in Python\n\n[\"apple\", \"banana\", \"cherry\"] [/INST] dict = {\n    \"apple\": 0,\n    \"banana\": 1,\n    \"cherry\": 2\n}</s>"
  },
  {
    "text": "<s>[INST] Define a function to search for a specific element in an array\n\n[5, 10, 2, 4, 7] [/INST] def search(arr, e):\n    for i in range(len(arr)):\n        if (arr[i] == e):\n            return i\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of an ASCII table [/INST] An ASCII table is a table that shows the correspondence between characters and symbols commonly used in computers or electronic devices. It consists of a set of codes that represent unique characters, such as letters, numbers, and symbols. Each code is represented by a number between 0 and 127 and is referred to by its decimal, octal, hexadecimal, or binary numbers. It is used to store, transmit, and display characters in different computer systems.</s>"
  },
  {
    "text": "<s>[INST] Code a solution that prints out the string \"Hello, [name]!\" using string interpolation in JavaScript. [/INST] const name = \"John Doe\";\nconsole.log(`Hello, ${name}!`);</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following JavaScript code to make it compatible with older browsers.\n\nlet colors = [\"red\", \"blue\", \"green\"]; [/INST] var colors = [\"red\", \"blue\", \"green\"];</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that takes an array of numbers and returns an array containing only the even numbers. [/INST] function get_even_numbers(nums) {\n  return nums.filter(n => n % 2 == 0);\n}</s>"
  },
  {
    "text": "<s>[INST] Fill up the missing value in the given JSON array.\n\n[19, 10, 22, 25, ??, 4, 100] [/INST] [19, 10, 22, 25, 15, 4, 100]</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that has two paragraphs, a heading and a link to a website.\n\nLink: https://example.com\nHeading: Example Website\nParagraph 1: This is the first paragraph.\nParagraph 2: This is the second paragraph. [/INST] <html>\n    <head>\n        <title>Example Website</title>\n    </head>\n    <body>\n        <h1>Example Website<h1>\n        <p>This is the first paragraph.</p>\n        <p>This is the second paragraph.</p>\n        <a href=\"https://example.com\">Link to Website</a>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] What are the two basic components of a computer system? [/INST] The two basic components of a computer system are hardware and software.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to determine if a given string contains at least one upper case letter. [/INST] function hasUpperCase(str) {\n    return str.split('').some(function(l) {\n        return l.charCodeAt(0) >= 65 && l.charCodeAt(0) <= 90;\n    });\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code using the try-catch statement\n\nif (num!=0)\n  result = 1/num;\nelse\n  result = 0; [/INST] try {\n  result = 1 / num;\n} catch (err) {\n  result = 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML page to add a new heading and a link.\n\n<html>\n <head>\n  <title>Example Site</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n  <p>This is a Sample Page.</p>\n </body>\n</html>\nLink: http://example.com\nHeading: Sample Page [/INST] <html>\n <head>\n  <title>Example Site</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n  <h2>Sample Page</h2>\n  <p>This is a Sample Page</p>\n  <a href=\"http://example.com\">Link</a>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] You are given a string s, output the longest substring with no repeating characters.\n\ns = \"abcabcbb\" [/INST] def longest_substring(s):\n    length = len(s)\n    current_length = 1\n    last_occur= {s[0]:0 }\n    max_length = 0\n    i = 0 \n    while i < length:\n        if(s[i] in last_occur):\n            current_length = i - last_occur[s[i]]\n            if(current_length > max_length):\n                max_length = current_length\n            last_occur[s[i]] = i\n        else:\n            last_occur[s[i]] = i\n            current_length += 1\n            if(current_length > max_length):\n                max_length = current_length\n        i += 1\n    return max_length\n\nlongest_substring(s)\n3</s>"
  },
  {
    "text": "<s>[INST] Supply a CSS styling for the HTML structure in Task 2. [/INST] <style>\n    body { \n        background-color: #fafafa; \n        font-family: sans-serif; \n    }\n</style></s>"
  },
  {
    "text": "<s>[INST] Calculate the distance between two points (x1, y1) and (x2, y2).\n\nx1 = 5, x2 = 8\ny1 = 3, y2 = 12 [/INST] def calculate_distance(x1, x2, y1, y2):\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5\n    \ncalculate_distance(x1, x2, y1, y2)\n7.615773105863909</s>"
  },
  {
    "text": "<s>[INST] You are given an array of integers and an integer k. Output one of the maximum sums of k consecutive elements in the array.\n\narray = [1, -3, 4, 5, 7, 8, -2, 9, -1]\nk=3 [/INST] def max_sum_k_elements(array, k):\n    max_sum = array[0]\n    for i in range(len(array)-k+1):\n        sum_temp = 0\n        for j in range(k):\n            sum_temp += array[i+j]\n        if sum_temp > max_sum:\n            max_sum = sum_temp\n    return max_sum\n\nmax_sum_k_elements(array, k)</s>"
  },
  {
    "text": "<s>[INST] Fix the bug in the following Python script:\n\ndef is_odd(x):\n  if x % 2 == 1\n    return True\n\nis_odd(5) [/INST] def is_odd(x):\n  if x % 2 == 1:\n    return True\n  else:\n    return False\n\nis_odd(5)</s>"
  },
  {
    "text": "<s>[INST] Create a PHP class to represent a student with the following data fields: first name, last name, age, GPA. [/INST] class Student { \n  public $firstName;\n  public $lastName;\n  public $age;\n  public $GPA;\n  \n  public function __construct($firstName, $lastName, $age, $GPA) {\n    $this->firstName = $firstName;\n    $this->lastName = $lastName;\n    $this->age = $age;\n    $this->GPA = $GPA;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that calculates the area of a triangle based on the three sides provided. [/INST] function areaOfTriangle(a, b, c) {\n  var s = (a+b+c)/2;\n  return Math.sqrt(s*(s-a)*(s-b)*(s-c));\n}</s>"
  },
  {
    "text": "<s>[INST] Using the following PHP array, output each name in its own bold tags.\n\n$names = array(\"John\", \"Sarah\", \"Paul\"); [/INST] <?php\n  foreach($names as $name){\n    echo \"<b>\".$name.\"</b><br>\";\n  }\n?></s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML code to allow Google Chrome to accurately render the page.\n\n<html>\n<head>\n  <title>My Webpage</title>\n</head>\n<body>\n  <table>\n  <tr>\n    <th>Column 1</th>\n    <th>Coloumn 2</th>\n  </tr>\n</body>\n</html> [/INST] <html>\n  <head>\n    <title>My Webpage</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n      </tr>\n    </table>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a C program to print the numbers from 1 to 100, except for any number divisible by 3. [/INST] #include <stdio.h>\n\nint main() \n{ \n    for (int i = 1; i <= 100; i++) { \n        if (i % 3 != 0) \n            printf(\"%d\\n\", i); \n    } \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Locate and erase all text nodes from the following XML string.\n\n<body>\n  <div>Hello world!</div>\n  <div>Good bye world!</div>\n</body> [/INST] def delete_text_nodes(xml_string): \n  root = ET.fromstring(xml_string) # parse the XML string \n  elems = root.findall(\".//text()\") # find all text nodes \n  for e in elems: \n    e.getparent().remove(e) # remove the text node \n  return ET.tostring(root) # return the parsed XML string</s>"
  },
  {
    "text": "<s>[INST] Write a function to create a Nim game board with size n. [/INST] def create_game_board(n):\n    # Create an empty list\n    game_board = []\n    # Loop based on number of rows\n    for i in range(n):\n        # Create an empty row\n        row = []\n        # Loop based on number of columns\n        for j in range(n):\n            # Add value 0 at each position\n            row.append(0)\n        # Add the row in empty list\n        game_board.append(row)\n    # Return the game board\n    return game_board</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary with the keys of the students' IDs and their corresponding grades as the values.\n\nstudent_ids = [1000, 1001, 1002, 1003] \ngrades = [90, 80, 60, 50] [/INST] def create_grade_dict(student_ids, grades):\n    # Create an empty dictionary\n    grade_dict = {} \n    # Loop based on length of student ids \n    for i in range(len(student_ids)):  \n         # Add id as key and grade as value\n        grade_dict[student_ids[i]] = grades[i] \n    # Return the grade dictionary    \n    return grade_dict</s>"
  },
  {
    "text": "<s>[INST] In the given snippet of code, insert a line of code to display the sum of two numbers.\n\nint a = 10;\nint b = 20; [/INST] int a = 10;\nint b = 20;\nSystem.out.println(\"Sum of two numbers is \" + (a + b));</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python for sorting a given list of numbers.\n\n[29, 11, 46, 7, 248, 1724] [/INST] def sort_list(numbers):\n  return sorted(numbers)</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form for taking user input about his/her favorite ice-cream flavor. [/INST] <form action=\"/submit-flavor\" method=\"post\">\n  <label>Choose your favorite flavor:</label>\n  <select name=\"Flavor\" required>\n    <option value=\"Vanilla\">Vanilla</option>\n    <option value=\"Chocolate\">Chocolate</option>\n    <option value=\"Strawberry\">Strawberry</option>\n    <option value=\"Mint\">Mint</option>\n    <option value=\"Coffee\">Coffee</option>\n  </select><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a function in R for converting a string into uppercase. [/INST] upperCase <- function(string){\n  return(toupper(string))\n}</s>"
  },
  {
    "text": "<s>[INST] Design a CSS style sheet for a given HTML table. [/INST] table {\n  border: 1px solid black;\n  border-collapse: collapse;\n}\n\nth, td {\n  padding: 5px;\n  border: 1px solid black;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the name and the average value of all the transactions for each customer. [/INST] SELECT customer.name, AVG(transaction.value) \nFROM customer \nINNER JOIN transaction\nON customer.customer_id = transaction.customer_id\nGROUP BY customer.name</s>"
  },
  {
    "text": "<s>[INST] Generate a valid C++ code to implement a linked list with basic operations. [/INST] #include<iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n};\n\nclass LinkedList {\n    Node* head;\n\npublic:\n    LinkedList(){ \n         head = NULL; \n    }\n    \n    void append(int data) {\n        Node* newNode = new Node;\n        newNode->data = data;\n        newNode->next = NULL;\n\n        if (head == NULL) {\n            head = newNode;\n        } else {\n            Node* temp = head;\n            while (temp->next != NULL) {\n                temp = temp->next;\n            }\n            temp->next = newNode;\n        }\n    }\n\n    void deleteNodeByData(int data) {\n        if (head == NULL) {\n            return;\n        }\n\n        if (head->data == data) {\n            Node *temp = head;\n            head = head->next;\n            delete temp;\n            return;\n        }\n\n        Node *prev;\n        Node *curr = head;\n\n        while(curr != NULL && curr->data != data) {\n            prev = curr;\n            curr = curr->next;\n        }\n\n        prev->next = curr->next;\n        delete curr;\n        return;\n    }\n\n\n    void printList() { \n        Node* temp = head;\n        while (temp != NULL) {\n            cout << temp->data << endl; \n            temp = temp->next; \n        } \n    }\n};</s>"
  },
  {
    "text": "<s>[INST] Write a Bash shell script to print the unique elements in the given array.\n\nlist=(1 2 3 1 4 2 5) [/INST] #!/bin/bash\n\nlist=(1 2 3 1 4 2 5)\nunique_list=()\n\nfor num in ${list[@]}; do\n    if [[ ! ${unique_list[*]} =~ $num ]]; then\n        unique_list+=($num)\n    fi\ndone\n\necho ${unique_list[@]}</s>"
  },
  {
    "text": "<s>[INST] Generate a valid CSS rule to center align the text with the id \"heading_text\" [/INST] #heading_text {\n    text-align: center;\n}</s>"
  },
  {
    "text": "<s>[INST] Using the comment as a guide, edit the following CSS so that the text of the id 'heading_text' is green when an element of class 'selected' is active.\n\n.selected {\n\tborder: 1px solid green;\n} [/INST] .selected {\n\tborder: 1px solid green;\n}\n#heading_text {\n    color: green;\n}\n.selected:active #heading_text {\n    color: green;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code to link Google Search page inside an iframe [/INST] <iframe src=\"https://www.google.com/search\" height=\"500px\" width=\"800px\"></iframe></s>"
  },
  {
    "text": "<s>[INST] Create a HTML form and assign 'onSubmit' handler to it. [/INST] <form onSubmit=\"alert('Form submitted')\">\n    <!-- Form Content -->\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to accept a string and display the characters in reverse order. [/INST] function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nlet str = \"JavaScript\";\nconsole.log(reverseString(str)); \n// Output: tpircSavaJ</s>"
  },
  {
    "text": "<s>[INST] Suggest a plugin or software that can be used to debug a React application. [/INST] React's official debugging tool, the React Developer Tools, is a great plugin for debugging React applications. It is available for both Chrome and Firefox, and provides detailed information about the component hierarchy, current props and state of the application, and detailed performance metrics. Additionally, React's Error Boundary feature can be used to detect and debug errors and issues in the React application.</s>"
  },
  {
    "text": "<s>[INST] Create a switch statement in JavaScript to compare two values. [/INST] let x = 1;\nlet y = 2;\n\nswitch (x) {\n case 1: \n  if (y === 2) {\n    console.log('x is 1 and y is 2');\n    break;\n  }\n default:\n  console.log('No match');\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest an algorithm to search an element in a sorted array using Java. [/INST] public int binarySearch(int[] arr, int element){\n    int low = 0;\n    int high = arr.length - 1;\n    while(low <= high){\n        int mid = (low + high) / 2;\n        if(arr[mid] == element)\n            return mid;\n        else if(arr[mid] > element)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}</s>"
  },
  {
    "text": "<s>[INST] Initialize a 2D array with all elements set to 0 in C. [/INST] int arr[N][M] = {0};</s>"
  },
  {
    "text": "<s>[INST] Calculate the area of a square with side length 4. [/INST] Area = 4 x 4 = 16</s>"
  },
  {
    "text": "<s>[INST] Create a React component that displays the text \"Hello World!\". [/INST] import React from 'react';\n\nconst HelloWorld = () => (\n  <h1>Hello World!</h1>\n);\n\nexport default HelloWorld;</s>"
  },
  {
    "text": "<s>[INST] Generate a Fibonacci sequence up until 50. [/INST] 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55</s>"
  },
  {
    "text": "<s>[INST] What is the output of the following code?\n\ndef check_even(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nprint(check_even(3)) [/INST] Odd</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML code to make all the headings bold.\n\n<h1>Heading 1</h1>\n<h2>Heading 2</h2> [/INST] <h1><strong>Heading 1</strong></h1>\n<h2><strong>Heading 2</strong></h2></s>"
  },
  {
    "text": "<s>[INST] Name 3 popular JavaScript frameworks. [/INST] Three popular JavaScript frameworks are React, Angular, and Vue.</s>"
  },
  {
    "text": "<s>[INST] What are the best practices when writing Javascript code? [/INST] The best practices for writing JavaScript code include using valid and properly formatted code, utilizing functions, avoiding global variables, using comments to explain code, using object and array literals, and avoiding memory leaks.</s>"
  },
  {
    "text": "<s>[INST] Classify the given code as \"correct\" or \"incorrect\".\n\ndef extract_file_name(file_path):\n    dot_index = file_path.find('.')\n    slash_index = file_path.find('/') [/INST] correct</s>"
  },
  {
    "text": "<s>[INST] Convert the following code from if/else to a ternary operator and output the result as a string.\n\nif age > 18:\n    verdict = \"Adult\"\n    \nelse:\n    verdict = \"Minor\" [/INST] verdict = \"Adult\" if age > 18 else \"Minor\"</s>"
  },
  {
    "text": "<s>[INST] Generate a SQL query to return all records from the table with a specified column including null values\n\nTable name: my_table\nColumn name: age [/INST] SELECT * \nFROM my_table \nWHERE age IS NULL OR age != '';</s>"
  },
  {
    "text": "<s>[INST] Construct an if-else statement to determine if a given number is divisible by 4 [/INST] if (number % 4 == 0) \n    System.out.println(\"The number is divisible by 4\"); \nelse \n    System.out.println(\"The number is not divisible by 4\");</s>"
  },
  {
    "text": "<s>[INST] Formulate a SQL query that fetches the records with the latest date\n\nTable name: my_table\nColumns: id, date [/INST] SELECT *\nFROM my_table \nORDER BY date DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write a script in JavaScript to iterate over a given array of objects and return all objects with the color green.\n\nconst arr = [{ color: 'blue', shape: 'square' }, { color: 'red', shape: 'triangle' }, { color: 'green', shape: 'circle' }] [/INST] const greenObjects = arr.filter(obj => obj.color === 'green');</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that returns that number of elements from an array of numbers which sum up to a given target.\n\narray = [2, 3, 7, 8, 10] \ntarget = 11 [/INST] function findElementsSum(array, target){\n    let result = [];\n    for (let i = 0; i < array.length; i++){\n        for (let j = i+1; j < array.length; j++){\n            if (array[i] + array[j] == target){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to check if a given string is a palindrome and has all the vowels in it. [/INST] def all_vowels_palindrome(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if not word == word[::-1]:\n        return False\n    for char in vowels:\n        if char not in word:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to detect if two numbers have the same frequency of digits. [/INST] def same_frequency(num1,num2):\n    str1 = str(num1)\n    str2 = str(num2)\n    if len(str1) != len(str2):\n        return False\n    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    for char in str2:\n        if not char in dict:\n            return False\n        dict[char] -= 1\n    for k in dict:\n        if dict[k] != 0:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Writing a Python function which takes a 2D array as an argument and transposes it.\n\narr = [[4, 5, 44], [3, 8, 20], [2, 5, 10]] [/INST] def transpose_(arr):\n  transposedarr = []\n  for i in range(len(arr[0])):\n    row = []\n    for j in range(len(arr)):\n      row.append(arr[j][i])\n    transposedarr.append(row)\n  return transposedarr</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to search an element in a given sorted array.\n\narr = [1, 3, 4, 5, 6, 7, 9, 11] [/INST] function sortedArraySearch(arr, el) {\n  let start = 0, end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === el) return true;\n    else if (arr[mid] < el) start = mid + 1;\n    else end = mid - 1;\n  }\n  return false;\n}</s>"
  },
  {
    "text": "<s>[INST] What is polymorphism and how it is used in object-oriented programming? [/INST] Polymorphism is the ability of an object to be interpreted and used differently in different contexts. In object-oriented programming, it allows operations to be performed on objects despite different underlying data types. For example, it allows functions to take multiple types of arguments and still be able to process them, without requiring different lines of code for each data type. Polymorphism also allows for code reuse through the concept of inheritance, where subclasses can inherit all the methods and properties of their parent class. As a result, objects can be written more efficiently and with less repetition.</s>"
  },
  {
    "text": "<s>[INST] Edit the following code in Java to include a new method “printName()”.\n\npublic class Person {\n    String name;\n    void displayAge(){\n        System.out.println(\"age is: \"+ age);   \n    }\n} [/INST] public class Person {\n    String name;\n    \n    void displayAge(){\n        System.out.println(\"age is: \"+ age);   \n    }\n    \n    void printName(){\n        System.out.println(\"Name: \"+ name);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Describe the use of the class keyword in C++. [/INST] The class keyword in C++ is used to declare a class, which contains (public or private) data members, member functions, and constructors. A class can be thought of as a blueprint for creating objects that have their own state and behavior. Data members represent the state of an object, and the member functions represent the behavior of the object. Class constructors are special member functions that allow for the creation of an instance of a class.</s>"
  },
  {
    "text": "<s>[INST] Compute the average age of the following ages: 18, 20, 17, 19, 15. [/INST] Average age = 17.8</s>"
  },
  {
    "text": "<s>[INST] Explain how a min-heap works. [/INST] A min-heap is a data structure used for storing and retrieving data. It is a complete binary tree, where the root node is the minimum element in the heap. Each node of the heap follows the \"min-heap\" property, where the parent node is always less than or equal to its children. This property allows for efficient data retrieval; the parent node can always be deleted from the heap, since it is the minimum value, and the heap can be re-balanced in O(log n) time.</s>"
  },
  {
    "text": "<s>[INST] Write a shell command to switch to a given directory\n\nDirpath=/Users/username/Documents [/INST] cd /Users/username/Documents</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop in Python to iterate through the items in the list and print their corresponding index.\n\nlst = [1,2,3] [/INST] for i, num in enumerate(lst):\n    print(i, num)</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to get the name of the planet which is the fifth planet from the sun. [/INST] name_planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nfifth_planet = name_planets[4]\nprint(fifth_planet)</s>"
  },
  {
    "text": "<s>[INST] Write code to delete all elements in a given Python list which are NOT integer type.\n\nlst = [1, \"a\", 2.3, False, 4, \"abc\"] [/INST] for item in lst[:]:\n    if not isinstance(item, int):\n        lst.remove(item)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL statement to add two new columns, 'size' and 'color', to the existing products table. [/INST] ALTER TABLE products \nADD COLUMN size INT, \nADD COLUMN color VARCHAR(100);</s>"
  },
  {
    "text": "<s>[INST] Write code to create a dictionary from a list of tuples, where each tuple consists of a color name and its value.\n\nitems = [(\"red\", \"#FF0000\"), (\"blue\", \"#0000FF\")] [/INST] colors = dict(items)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the list of products whose price is greater than 50. [/INST] SELECT * \nFROM products\nWHERE price > 50;</s>"
  },
  {
    "text": "<s>[INST] Design a MySQL query to find the average monthly salary of people in the table \"Employees\".\n\nTable: Employees\nColumns: employee_id, name, salary [/INST] SELECT AVG(salary) as avg_salary FROM Employees WHERE MONTH(CURDATE()) = MONTH(salary);</s>"
  },
  {
    "text": "<s>[INST] Create a css class to set the text color of a h1 element to blue. [/INST] h1 {\n  color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a python anonymous function that squares an input number. [/INST] square_num = lambda x: x ** 2</s>"
  },
  {
    "text": "<s>[INST] Suggest a type of join to use to find all customers with an order total greater than $100.\n\nTable: Customers\nColumns: customer_id, name \nTable: Orders\nColumns: order_id, customer_id, total [/INST] SELECT c.customer_id, c.name \nFROM Customers c INNER JOIN Orders o \nON c.customer_id = o.customer_id\nWHERE o.total > 100;</s>"
  },
  {
    "text": "<s>[INST] Write a python loop to print all the even numbers between 2 and 15 (inclusive). [/INST] for i in range(2, 16):\n    if i % 2 == 0:\n        print(i)</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to select the name and age of all employees that are younger than 25.\n\nTable: Employees\nColumns: employee_id, name, age [/INST] SELECT name, age FROM Employees WHERE age < 25;</s>"
  },
  {
    "text": "<s>[INST] Write a python statement to calculate the factorial of 6. [/INST] import math\n\nfactorial = math.factorial(6)</s>"
  },
  {
    "text": "<s>[INST] Print all the elements in the following array in descending order.\n\n[4, 2, 6, 8, 5, 9, 1] [/INST] 9 8 6 5 4 2 1</s>"
  },
  {
    "text": "<s>[INST] Design a data structure to store the details of a student (Name, Age, Course). [/INST] struct Student {\n  name: String,\n  age: u32,\n  course: String,\n}</s>"
  },
  {
    "text": "<s>[INST] Create a method to transform a string from lowercase to title case. [/INST] def to_title_case(string):\n    return string.title()</s>"
  },
  {
    "text": "<s>[INST] Modify the following block of code to set a maximum length of the list\n\nlist = [1, 2, 3, 4, 5, 6] [/INST] list = [1, 2, 3, 4, 5, 6][:5]</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to swap two elements a[i] and a[j] in a given array a. [/INST] def swap(a, i, j):\n    temp = a[i]\n    a[i] = a[j]\n    a[j] = temp</s>"
  },
  {
    "text": "<s>[INST] Update the strings stored in a dictionary, so that all strings have the same length.\n\nd = {\n  'apple': 'small',\n  'orange': 'medium size'\n} [/INST] d = {\n  'apple': 'small  ',\n  'orange': 'medium size'\n  }</s>"
  },
  {
    "text": "<s>[INST] Create an object to store the variables that are necessary for the following code snippet.\n\nx = 10\ny = 20\nz = 30 [/INST] class Coordinates:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\ncoordinates = Coordinates(x=10, y=20, z=30)</s>"
  },
  {
    "text": "<s>[INST] Make a program to determine if the elements of the array are in increasing order\n\n[3, 5, 7] [/INST] def isIncreasing(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Generate a correct c++ program to compute the YTM of a bond [/INST] #include <iostream> \n#include <cmath>\n\nusing namespace std; \n\n// Function to calculate bond yield \nfloat calculateYTM(float faceValue, float price,  \n                   int numInterestPayments,  \n                   float couponRate, float MaturityPeriod) \n{ \n    float guess = 0.1, ytm = 0; \n    float a, b; \n  \n    while (ytm != guess) \n    { \n        ytm = guess; \n        a = price; \n  \n        // Calculating the bond price \n        // using the YTM guess \n        for (int i = 0; i < MaturityPeriod; i++) \n            a = a - (faceValue * (couponRate/2) / \n                     (pow((1 + ytm/2), (numInterestPayments/2 - i)))); \n        a = a - (faceValue / (pow((1 + ytm/2),  \n                         (numInterestPayments/2)))); \n        b = MaturityPeriod * (faceValue * (couponRate/2 / \n            (pow((1 + ytm/2), (numInterestPayments/2 - MaturityPeriod)))) + (faceValue/ (pow((1 + ytm/2),  \n            (numInterestPayments/2)))); \n  \n        // calculating YTM using Newton's Method \n        guess = ytm + (a/b); \n    } \n  \n    return guess * 2; \n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a code snippet to detect a cycle in a linked list [/INST] def contains_cycle(head):\n    slow = head\n    fast = head\n    while fast is not None and fast.next is not None:\n        fast = fast.next.next\n        slow = slow.next\n        if slow is fast:\n            return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Given a list of integers, write a function in Python to sort and reverse the list.\n\ninput_list = [3, 8, 10, 1, 9] [/INST] def sort_and_reverse(list): \n  res_list = sorted(list, reverse=True) \n  return res_list \n  \nsort_and_reverse(input_list) \n\n# Output \n[10, 9, 8, 3, 1]</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to calculate the area of a square given the length of a side. [/INST] public class CalculateSquareArea {\n \n  public static double calculateArea(double sideLength) {\n    double area = sideLength * sideLength;\n    return area;\n  }\n \n  public static void main(String[] args) {\n    double sideLength = 5;\n \n    double area = calculateArea(sideLength);\n    System.out.println(\"The area of a square with side length \" + sideLength + \" is \" + area);\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a unique ID string of length 12 using a Python function. [/INST] import string, random\ndef generate_unique_id(stringLength=12):\n  lettersAndDigits = string.ascii_letters + string.digits\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nunique_string = generate_unique_id()\nprint(\"unique string: \",unique_string)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the distinct cities from a table of customer data. [/INST] SELECT DISTINCT city FROM customer_data;</s>"
  },
  {
    "text": "<s>[INST] Convert a given number to its corresponding Roman numeral. [/INST] def convertToRoman(num): \n  val = [ \n            1000, 900, 500, 400, \n            100, 90, 50, 40, \n            10, 9, 5, 4, \n            1 \n        ] \n  syb = [ \n            \"M\", \"CM\", \"D\", \"CD\", \n            \"C\", \"XC\", \"L\", \"XL\", \n            \"X\", \"IX\", \"V\", \"IV\", \n            \"I\"\n        ]\n\n        roman_num = '' \n        i = 0\n        while  num > 0: \n            for _ in range(num // val[i]): \n                roman_num += syb[i] \n                num -= val[i] \n            i += 1\n        return roman_num\n\n# Driver Code\nnum = 13 \nprint(convertToRoman(num)) \n\n# Output: XIII</s>"
  },
  {
    "text": "<s>[INST] Generate a list of all even numbers between 20 and 40. [/INST] even_numbers = []\nfor num in range(20, 41): \n  if num % 2 == 0: \n    even_numbers.append(num) \n  \nprint(even_numbers) \n\n# Output: [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]</s>"
  },
  {
    "text": "<s>[INST] Find the reverse of an array in Python.\n\narr = [1, 2, 3, 4, 5] [/INST] arr = [5, 4, 3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Output the name of the font styles available in HTML. [/INST] normal, italic, oblique, small-caps, inherit</s>"
  },
  {
    "text": "<s>[INST] Write JavaScript code for a for loop with condition that iterates 8 times. [/INST] for (let i = 0; i < 8; i++) { \n  // code to be executed \n}</s>"
  },
  {
    "text": "<s>[INST] Count the number of elements in an array using HTML.\n\narr = ['a', 'b', 'c', 'd'] [/INST] arr.length //4</s>"
  },
  {
    "text": "<s>[INST] Find two missing numbers in an array in C++.\n\narr = [1, 3, 6, 5, 8, 9, 10] [/INST] #include <algorithm>\n#include <iostream>\n#include <vector>\n\nstd::vector<int> find_missing_numbers(const std::vector<int>::iterator begin,\n                                      const std::vector<int>::iterator end) {\n  int n = end - begin;\n  int total_sum = (n + 2)*(n + 1)/2;\n\n  int missing_sum = 0;\n  for (auto it = begin; it != end; ++it) {\n    missing_sum += *it;\n  }\n  \n  int difference = total_sum - missing_sum;\n  int a = difference/2;\n  int b = a + difference;\n  \n  return {a, b};\n}\n\nint main() {\n  std::vector<int> arr = {1, 3, 6, 5, 8, 9, 10};\n  std::vector<int> results = find_missing_numbers(arr.begin(), arr.end());\n\n  std::cout << results[0] << \" \" << results[1] << std::endl;\n  return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write Python code to extract the title from a URL.\n\nurl = \"https://www.google.com/search?q=gpt-3&oq=GPT+3\" [/INST] def get_title(url): \n    url_parsed = urlparse(url)\n    query_parsed = parse_qs(url_parsed.query)\n    title = query_parsed['q'][0]\n    return title\n\nprint(get_title(url))\n\n# Output: GPT 3</s>"
  },
  {
    "text": "<s>[INST] Create a function in C to check whether a given string contains any punctuations or not. [/INST] bool containsPunctuation(string s) {\n  for (char c : s) {\n    if (ispunct(c)) \n      return true;\n  }\n  return false;\n}</s>"
  },
  {
    "text": "<s>[INST] How can you remove duplicate characters from a string in Java? [/INST] We can use a Set collection to remove duplicate characters from a string in Java. We can loop through the characters in the string, and add them to a Set, which does not allow duplicate elements. Then we can loop through the set and append each character to a new string. This new string will be free of duplicate characters.</s>"
  },
  {
    "text": "<s>[INST] Create a Java method that computes the factorial of an integer. [/INST] public static int factorial(int n) {\n   int factorial = 1; \n   for (int i = 1; i <= n; i++) {\n      factorial *= i;\n   }\n   return factorial;\n}</s>"
  },
  {
    "text": "<s>[INST] In Python, how can you iterate a list in reverse order? [/INST] We can use the reversed() function to iterate a list in reverse order in Python. For example:\n\nmy_list = [1, 2, 3, 4]\n\nfor element in reversed(my_list):\n    print(element)</s>"
  },
  {
    "text": "<s>[INST] How can you create a dictionary in Python with 3 key-value pairs? [/INST] We can create a dictionary in Python with 3 key-value pairs by declaring a dictionary variable with the desired contents. For example:\n\nmy_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}</s>"
  },
  {
    "text": "<s>[INST] Given a list, write a Python code snippet to print the elements of the list in reverse order.\n\nmy_list = [\"one\", \"two\", \"three\", \"four\", \"five\"] [/INST] for element in reversed(my_list):\n    print(element)</s>"
  },
  {
    "text": "<s>[INST] Run the given code and determine the result.\n\na = 3\nb = 5\nc = a + b [/INST] c = 8</s>"
  },
  {
    "text": "<s>[INST] Using Python, reverse a given string \"Hello World!\". [/INST] \"!dlroW olleH\"</s>"
  },
  {
    "text": "<s>[INST] Make the following CSS code work properly on the web page.\n\n.special {\n    background-color: #eee;\n    border: 2px solid #999;\n} [/INST] .special {\n    background-color: #eee;\n    border: 2px solid #999;\n    padding: 10px;\n    display: block;\n}</s>"
  },
  {
    "text": "<s>[INST] Train a machine learning model without using any frameworks with the folowing input and output data.\n\nInput Data: A, B, C, D\nOutput Data: 0, 1, 0, 1 [/INST] model = Model()\nmodel.fit(x=[A, B, C, D], y=[0, 1, 0, 1])</s>"
  },
  {
    "text": "<s>[INST] Create a functional HTML form using the following attributes.\n\nname, email, country [/INST] <form>\n    <label for=\"name\">Name</label>\n    <input type=\"text\" name=\"name\">\n\n    <label for=\"email\">Email</label>\n    <input type=\"email\" name=\"email\">\n\n    <label for=\"country\">Country</label>\n    <select name=\"country\"> \n        <option>---------</option>\n        <!-- To be populated dynamically -->\n    </select>\n\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a React component for a button that takes two props: an onClick event handler and an id. [/INST] const MyButton = props => {\n    return (\n    <button onClick={props.onClick} id={props.id}>\n        Click Me\n    </button>\n    )\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java that will print the two integers added together. [/INST] public class Addition {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(add(5,7));\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a bash script that will take 2 arguments as input and print \"Arguments are equal\" if both arguments are equal or \"Arguments are not equal\" otherwise. [/INST] #!/bin/bash\n\nif [ $1 -eq $2 ]; \nthen \n    echo \"Arguments are equal\"\nelse\n    echo \"Arguments are not equal\"\nfi</s>"
  },
  {
    "text": "<s>[INST] What changes can you suggest in order to optimize the following Java code?\n\npublic class Student {\n    //private variables\n    private String name;\n    private int age;\n    private int grade; [/INST] public class Student {\n    //private variables\n    private String name;\n    private int age;\n    private int grade;\n  \n    //create getters and setters for the fields\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public int getGrade() {\n        return grade;\n    }\n\n    public void setGrade(int grade) {\n        this.grade = grade;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that can compute the area of a rectangular room in square feet.\n\nlength = 20\nwidth = 15 [/INST] def findArea(length, width):\n  area = length * width\n  return area\n\n# Call the function\narea = findArea(20, 15)\nprint(\"The area of the room is: \" + str(area) + \"sq.ft\")</s>"
  },
  {
    "text": "<s>[INST] Design a data structure in Python to store customer contact details. [/INST] #Create a class to store customer information\nclass ContactData:\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone\n\n#Create a dictionary to store the customer contact details\ncustomer_details = {}\n\n# function to add customer details in the dictionary\ndef add_customer_details(name, email, phone):\n    customer_details[name] = ContactData(name, email, phone)\n\n#Function to display customer details\ndef display_customer_details():\n    for key in customer_details.keys():\n        customer = customer_details[key]\n        print(\"Name: {}, Email: {}, Phone: {}\".format( \n            customer.name, customer.email, customer.phone))</s>"
  },
  {
    "text": "<s>[INST] Suggest the missing line of code in the following Python program.\n\nnums = [1, 2, 3]\nfor n in nums:\n    print(n) [/INST] nums = [1, 2, 3]\nfor n in nums:\n    print(n)\n\n#Print the sum of the list\nprint(sum(nums))</s>"
  },
  {
    "text": "<s>[INST] Merge the following two linked lists.\n\nLinked List 1: 1->3->5\nLinked List 2: 2->4 [/INST] def merge(head1, head2):\n    # If either is empty\n    if not head1 or not head2:\n        return head1 or head2\n    # if first linked list is smaller \n    if head1.data < head2.data:\n        head1.next = merge(head1.next, head2)\n        return head1\n    else: # if second linked list is smaller or equal\n        head2.next = merge(head1, head2.next)\n        return head2</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that returns all the students with their marks from the following table.\n\nStudent ( id, name, marks)\nMarks (sub_id, marks) [/INST] SELECT s.name, m.marks \nFROM Student s, Marks m \nWHERE s.id = m.sub_id</s>"
  },
  {
    "text": "<s>[INST] Complete the following bash script with conditional statements.\n\n#!/bin/bash\necho \" Enter an integer \" \nread num [/INST] #!/bin/bash\necho \"Enter an integer\" \nread num\n\nif (( num > 0 )); then\n    echo \"The number is positive\"\nelif (( num < 0 )); then\n    echo \"The number is negative\"\nelse\n    echo \"The number is zero\"\nfi</s>"
  },
  {
    "text": "<s>[INST] Develop a web page that displays the current temperature in various cities. [/INST] <!DOCTYPE html>\n<html>\n<head>\n    <title>Weather Tracker</title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n</head>\n<body>\n    <h1>Current Weather</h1>\n    <div class=\"data-table\"></div>\n\n    <script>\n        $(function() {\n            $.get('https://weather-tracker-server.herokuapp.com', function(data) {\n                var cityNames = [];\n                var temperatures = [];\n                $(data).each(function(index, item) {\n                    cityNames.push(item.name);\n                    temperatures.push(item.temperature);\n                });\n                $('.data-table').append(`<span>City</span><span>Temperature</span>`);\n                for (var i = 0; i < data.length; i++) {\n                    $('.data-table').append(`<span>${cityNames[i]}</span><span>${temperatures[i]}</span>`);\n                }\n            });\n        });\n    </script>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Design a MySQL Table to store company employees. [/INST] CREATE TABLE `employee` (\n  `employee_id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  `name` varchar(255) NOT NULL,\n  `dob` datetime NOT NULL,\n  `salary` decimal(10,2) NOT NULL,\n  `address` varchar(255)\n);</s>"
  },
  {
    "text": "<s>[INST] Classify the type of the expression 5 + 4 * 3 - 7 [/INST] The expression 5 + 4 * 3 - 7 is a mathematical expression of arithmetic operations.</s>"
  },
  {
    "text": "<s>[INST] Write a code that takes a list as input and returns a list of every permutation of that list\n\n[1, 2, 3] [/INST] def get_permutations(input_list): \n    result = [] \n    if len(input_list) == 0: \n        return [] \n    if len(input_list) == 1: \n        return [input_list] \n    for i in range(len(input_list)): \n        x = input_list[i] \n        xs = input_list[:i] + input_list[i+1:] \n        for p in get_permutations(xs): \n            result.append([x] + p) \n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a code that takes a string and a character as an argument and counts the number of occurrences of that character in the string\n\nAvengers: \"He brought the team together\"\nCharacter: t [/INST] def count_character(input_string, character):\n    count = 0\n    for char in input_string:\n        if char == character:\n            count +=1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Create a code that edits a list by adding two to each element\n\n[1, 2, 3] [/INST] def add_two(input_list):\n    new_list = []\n    for num in input_list:\n        new_list.append(num + 2)\n    return new_list</s>"
  },
  {
    "text": "<s>[INST] Write a code that takes a numeric value and returns the factorial of that number\n\n3 [/INST] def factorial(n):\n    result = 1\n    for i in range(1,n+1):\n        result *= i\n    return result</s>"
  },
  {
    "text": "<s>[INST] Write a code that takes a list as an input and returns the elements in reverse order\n\n['apple', 'banana', 'cherry'] [/INST] def reverse_list(input_list):\n    reversed_list = []\n    for i in range(len(input_list)-1,-1,-1):\n        reversed_list.append(input_list[i])\n    return reversed_list</s>"
  },
  {
    "text": "<s>[INST] Create a program to determine the type of triangle given 3 side lengths\n\n[5, 4, 3] [/INST] def determine_triangle_type(triangle_sides):\n    if triangle_sides[0] == triangle_sides[1] and triangle_sides[1]  == triangle_sides[2]:\n        return 'equilateral'\n    elif triangle_sides[0] == triangle_sides[1] or triangle_sides[1] == triangle_sides[2] or triangle_sides[2] == triangle_sides[0]:\n        return 'isosceles'\n    else:\n        return 'scalene'</s>"
  },
  {
    "text": "<s>[INST] Create a while loop in Java to calculate the Fibonacci numbers up to the number 10. [/INST] int num1 = 0, num2 = 1, fibo = 0;\n\nwhile(fibo <= 10) {\n     fibo = num1 + num2;\n     num1 = num2;\n     num2 = fibo;\n     System.out.print(fibo +\" \"); \n}</s>"
  },
  {
    "text": "<s>[INST] Using only JavaScript, determine the length of a given string \"Hello World\". [/INST] let stringLength =  \"Hello World\".length; \nconsole.log(stringLength); // output 11</s>"
  },
  {
    "text": "<s>[INST] Write a query to find all employees whose age is between 25 and 30 and whose department is Marketing. [/INST] SELECT\n  *\nFROM\n  Employees\nWHERE\n  age BETWEEN 25 and 30\nAND\n  department = 'Marketing';</s>"
  },
  {
    "text": "<s>[INST] Using HTML, create a button that displays a message when clicked. [/INST] <button onclick=\"alert('Hello World!')\"> Click me! </button></s>"
  },
  {
    "text": "<s>[INST] Construct a regex statement to select all words starting with a capital letter. [/INST] \\b[A-Z]\\w+</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the count of all the books listed in a library catalog. [/INST] SELECT\n COUNT(*)\nFROM\n library_catalog;</s>"
  },
  {
    "text": "<s>[INST] Create a method to sort a given array of integers without using any of the built-in sorting functions in JavaScript.\n\narray = [5, 4, 3, 2, 1] [/INST] \"\"\"\nCreate a method to sort a given array of integers without using any of the built-in sorting functions in JavaScript\n\nInput: array = [5, 4, 3, 2, 1]\n\"\"\"\n\n// bucket sort\nfunction bucketSort(arr) {\n  let buckets = new Array(arr.length); \n  let result = []; \n  \n  for (let i = 0; i < arr.length; i++) {\n    buckets[i] = 0;\n  }\n  \n  for (let i = 0; i < arr.length; i++) {\n    buckets[arr[i]]++;\n  }\n  \n  for (let i = 0; i < arr.length; i++) {\n    while (buckets[i] > 0) {\n      result.push(i);\n      buckets[i]--;\n    }\n  }\n  \n  return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to get the current exchange rate between two currency using the OpenExchangeRates API.\n\nfromCurrency = \"USD\"\ntoCurrency = \"GBP\" [/INST] \"\"\"\nWrite a code to get the current exchange rate between two currency using the OpenExchangeRates API.\n\nInput: fromCurrency = \"USD\"\n        toCurrency = \"GBP\"\n\"\"\"\n\nimport requests\nimport json\n\ndef get_exchange_rate(fromCurrency, toCurrency):\n    baseUrl = 'https://openexchangerates.org/api/latest.json?app_id=YOUR_APP_ID'\n    response = requests.get(baseUrl)\n    data = json.loads(response.text)\n    rates = data['rates']\n    fromRate = rates[fromCurrency]\n    toRate = rates[toCurrency]\n    return (toRate/fromRate)\n            \nif __name__ == '__main__':\n    print(get_exchange_rate(\"USD\", \"GBP\"))</s>"
  },
  {
    "text": "<s>[INST] Create a method which receives a list of names and outputs the name which occurs the most in that list.\n\nlist = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon'] [/INST] \"\"\"\nCreate a method which receives a list of names and outputs the name which occurs the most in that list.\n\nInput: list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\n\"\"\"\n\ndef getMostFrequent(list):\n    frequency = dict()\n    holder = None\n    max_count = 0\n\n    for name in list:\n        if name in frequency: \n            frequency[name] += 1\n        else: \n            frequency[name] = 1\n\n        if frequency[name] > max_count: \n            max_count = frequency[name] \n            holder = name\n\n    return holder \n\nlist = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\nprint(getMostFrequent(list))</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript code that takes a number as input and returns its factorial.\n\nnum = 5 [/INST] \"\"\"\nCreate a JavaScript code that takes a number as input and returns its factorial.\n\nInput: num = 5\n\"\"\"\n\nfunction factorial(num) {\n    if (num === 0) {\n        return 1;\n    } else {\n        return num * factorial(num-1);\n    }\n}\n\nconsole.log(factorial(5))</s>"
  },
  {
    "text": "<s>[INST] Create a code in Python to get the current stock price of a company from yahoo finance.\n\nticker = \"AAPL\" [/INST] \"\"\"\nCreate a code in Python to get the current stock price of a company from yahoo finance.\n\nInput: ticker = \"AAPL\"\n\"\"\"\n\nimport requests\n\ndef get_stock_price(ticker):\n    url = 'https://finance.yahoo.com/quote/' + ticker\n    response = requests.get(url)\n    data = response.text.split('\"regularMarketPrice\":{\"raw\":')[1].split(',\"fmt\"')[0]\n    return float(data)\n\nprint(get_stock_price('AAPL'))</s>"
  },
  {
    "text": "<s>[INST] Create a method to join an array of strings together.\n\narr = ['one', 'two', 'three'] [/INST] \"\"\"\nCreate a method to join an array of strings together.\n\nInput: arr = ['one', 'two', 'three']\n\"\"\"\n\nfunction joinStrings(arr) {\n  let joinedStr = '';\n  \n  for (let i = 0; i < arr.length; i++) {\n    joinedStr += arr[i]\n    if (i < arr.length - 1) {\n      joinedStr += ' ';\n    }\n  }\n  \n  return joinedStr;\n}\n\nconsole.log(joinStrings(['one', 'two', 'three']));</s>"
  },
  {
    "text": "<s>[INST] Edit the code so it displays the numbers 1 to 5.\n\nfor i in range(2, 10):\n    print(i) [/INST] for i in range(1, 6):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Calculate the factorial of n using a recursive function. [/INST] def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)</s>"
  },
  {
    "text": "<s>[INST] Given the following array and a number k, write a program to determine if it contains a pair of numbers that add up to k.\n\narr = [1, 2, 3, 4, 5]\nk = 7 [/INST] def has_pair_with_sum(arr, k): \n    temp_set = set() \n  \n    for i in range(len(arr)): \n        temp = k - arr[i] \n        if temp in temp_set: \n            return True\n        temp_set.add(arr[i]) \n  \n    return False</s>"
  },
  {
    "text": "<s>[INST] Summarize the following text using an algorithm.\n\nThe average daily temperature in Chicago during the month of January is usually below zero degrees Celsius. As such, the streets become icy and treacherous for the residents. [/INST] Chicago residents face treacherous icy streets during the month of January due to average daily temperatures below zero degrees Celsius.</s>"
  },
  {
    "text": "<s>[INST] Write the definition of function to calculate the perimeter of a triangle. [/INST] def perimeter(a, b, c):\n    return a + b + c</s>"
  },
  {
    "text": "<s>[INST] Explain what is meant by the term ‘machine learning’. [/INST] Machine learning is the process of teaching a machine to recognize patterns in data and make decisions based on those patterns. It involves feeding a machine large amounts of data, which it can then use to learn, develop and form predictions based on patterns it identifies.</s>"
  },
  {
    "text": "<s>[INST] How could Big data analysis be used to provide better services and products ? [/INST] Big data analysis can provide companies with data-driven insights that can be used to improve services and products. By accurately analyzing customer trends, companies can build targeted marketing campaigns and make decisions on which services and products to focus on, helping them reach their desired market more efficiently. Additionally, it can help organizations create better customer experiences by identifying areas of improvement in customer support and services.</s>"
  },
  {
    "text": "<s>[INST] Develop a C program to print a pattern like a pyramid. [/INST] #include <stdio.h> \nint main() \n{ \nint i, j, k, rows; \nprintf(\"Enter the number of rows \\n\");\nscanf(\"%d\",&rows); \nfor(i=1; i<=rows; i++ ) \n{ \nfor(k=rows; k >= i; k--)  \nprintf(\" \"); \nfor(j=1; j<= (2*i-1) ; j++ ) \nprintf(\"*\"); \nprintf(\"\\n\"); \n} \nreturn 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Describe your approach to sorting a variety of data with a single sorting algorithm. [/INST] My approach to sorting a variety of data would involve using a single sorting algorithm. Depending on the type of data, I would select the most appropriate sorting algorithm which would involve understanding the complexity of the data and the type of sorting required. Generally, I would use quick sort or merge sort as they are efficient and have good performance. However, if needed, I would be open to using insertion or bubble sort as well.</s>"
  },
  {
    "text": "<s>[INST] Edit a program to show the area of the rectangle\n\n#include <stdio.h>\n \nint main()\n{\n    int length, width;\n    printf(\"Enter the length : \");\n    scanf(\"%d\", &length);\n \n    printf(\"Enter the width : \");\n    scanf(\"%d\", &width);\n   \n    printf(\"The Perimeter of rectangle is : %d \\n\", 2*(length + width));\n \n    return 0;\n} [/INST] #include <stdio.h>\n \nint main()\n{\n    int length, width;\n    printf(\"Enter the length : \");\n    scanf(\"%d\", &length);\n \n    printf(\"Enter the width : \");\n    scanf(\"%d\", &width);\n   \n    printf(\"The Perimeter of rectangle is : %d \\n\", 2*(length + width));\n    printf(\"The Area of rectangle is : %d \\n\", length * width);\n \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a custom exception class for a restaurant that has no menu items. [/INST] class NoMenuItemsError(Exception): \n    def __init__(self, message): \n        super().__init__(message)\n        self.message = message \n\ndef raise_error():\n    raise NoMenuItemsError(\"No menu items are available\")</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary in which keys are characters and values are the occurences of that character in a given string.\n\nstring = \"apple\" [/INST] def get_char_count(string):\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count</s>"
  },
  {
    "text": "<s>[INST] Write a function to calculate all the possible paths for a N x N matrix. [/INST] def calculate_paths(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n  \n    dp = [[0 for _ in range(cols)] for _ in range(rows)] \n  \n    dp[0][0] = 1\n  \n    for i in range(rows):\n        for j in range(cols): \n            if i-1 >= 0: \n                dp[i][j] = dp[i][j] + dp[i-1][j]\n            if j-1 >= 0:\n                dp[i][j] = dp[i][j] + dp [i][j-1]\n  \n    return dp[rows-1][cols-1]</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to initialize a 10 x 10 matrix with random values. [/INST] import random\n\ndef init_matrix():\n    matrix = [[0 for _ in range(10)] for _ in range(10)]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = random.randint(0,100)\n    return matrix</s>"
  },
  {
    "text": "<s>[INST] Describe the recursive approach for solving a problem. [/INST] Recursive approach is an approach wherein a problem is broken down into multiple subproblems until the base case is reached. Once the base case is reached, the results of each sub-problem are combined to obtain a solution to the original problem. It is used when the problem exhibits the self-similarity property.</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to convert a string to pig-latin. [/INST] function toPigLatin(str) {\n const vowels = ['a', 'e', 'i', 'o', 'u'];\n let result = '';\n str.split(' ').forEach(word => {\n if (vowels.includes(word[0])) {\n result += `${word}ay `;\n } else {\n result += `${word.substring(1)}${word[0]}ay `;\n }\n });\n return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Using React, create a component to display an alert message. [/INST] import React from 'react'\n\nconst AlertMessage = () => {\n return (\n <div className=\"alert-message\">\n <p>This is an alert message!</p>\n </div>\n )\n}\n\nexport default AlertMessage;</s>"
  },
  {
    "text": "<s>[INST] Design a database schema for an online banking system. [/INST] CREATE TABLE users (\n user_id INT NOT NULL AUTO_INCREMENT,\n first_name VARCHAR(50) NOT NULL,\n last_name VARCHAR(50) NOT NULL,\n username VARCHAR(50) NOT NULL,\n password VARCHAR(50) NOT NULL,\n PRIMARY KEY (user_id)\n);\n \nCREATE TABLE accounts (\n account_id INT NOT NULL AUTO_INCREMENT,\n user_id INT NOT NULL,\n balance DECIMAL(20),\n type VARCHAR(20),\n PRIMARY KEY (account_id),\n FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE transactions (\n transaction_id INT NOT NULL AUTO_INCREMENT,\n account_id INT NOT NULL,\n amount DOUBLE,\n date DATE,\n type VARCHAR(10),\n PRIMARY KEY (transaction_id),\n FOREIGN KEY (account_id) REFERENCES accounts(account_id)\n);</s>"
  },
  {
    "text": "<s>[INST] Using CSS, use a flex box layout to arrange a sidebar, main content, and footer in a single row. [/INST] <div class=\"container\">\n <div class=\"sidebar\">Sidebar</div>\n <div class=\"main-content\">Main Content</div>\n <div class=\"footer\">Footer</div>\n</div>\n\n<style type=\"text/css\">\n .container {\n display: flex;\n flex-direction: row;\n }\n \n .sidebar {\n flex: 1;\n }\n \n .main-content {\n flex: 3;\n }\n \n .footer {\n flex: 1;\n }\n</style></s>"
  },
  {
    "text": "<s>[INST] Using python, create two variables that are equal to each other. [/INST] x = 5\ny = 5</s>"
  },
  {
    "text": "<s>[INST] Write a regex expression that matches sentences with the word \"cat\" followed by any number of characters except the letter \"z\". [/INST] /cat[^z]*/</s>"
  },
  {
    "text": "<s>[INST] Create a list of 5 strings in Java. [/INST] List<String> list = Arrays.asList(\"hello\", \"world\", \"news\", \"sun\", \"moon\");</s>"
  },
  {
    "text": "<s>[INST] Write a command line program in C++ which takes a string as input and prints all its characters in reverse order.\n\ninput_string = \"Hello world!\" [/INST] #include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() \n{\n    string input;\n    cin >> input;\n    \n    int size = input.length(); \n    \n    for (int i=size-1; i>=0; i--) {\n        cout << input[i];\n    }\n    \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL statement to select the column names from a table.\n\ntable_name=\"customers\" [/INST] SELECT column_name FROM customers;</s>"
  },
  {
    "text": "<s>[INST] Write a bash script that prints out the current working directory. [/INST] #!/bin/bash\nDIR=$( pwd )\necho \"Current working directory: $DIR\"</s>"
  },
  {
    "text": "<s>[INST] Create a style sheet in CSS to display an element as a block with a width of 200px and a padding of 10px. [/INST] .element {\n    display: block;\n    width: 200px;\n    padding: 10px;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a quicksort algorithm in JavaScript that takes an array of numbers as input and returns a sorted array.\n\ninput_array = [21, 4, 1, 3, 9, 20, 25] [/INST] function quicksort(input_array) {\n    if (input_array.length <= 1) {\n        return input_array;\n    }\n\n    const pivot = input_array[0];\n    const left = [];\n    const right = [];\n\n    for (let i = 1; i < input_array.length; i++) {\n        if (input_array[i] < pivot) {\n            left.push(input_array[i]);\n        } else {\n            right.push(input_array[i]);\n        }\n    }\n\n    return [...quicksort(left), pivot, ...quicksort(right)];\n}\n\ninput_array = [21, 4, 1, 3, 9, 20, 25]\nconsole.log(quicksort(input_array)) // prints [1, 3, 4, 9, 20, 21, 25]</s>"
  },
  {
    "text": "<s>[INST] Create an object in C++ that has two integer values and two functions. [/INST] class MyObject {\npublic:\n    int x;\n    int y;\n    void Add() { x + y; }\n    void Multiply() { x * y; }\n};</s>"
  },
  {
    "text": "<s>[INST] Construct a MySQL query to select all records from a table named Users. [/INST] SELECT * \nFROM Users;</s>"
  },
  {
    "text": "<s>[INST] Modify the given Java code to print the first character of each word in a sentence.\n\nString sentence = \"Today is a good day\"; [/INST] String sentence = \"Today is a good day\";\nString[] words = sentence.split(\" \");\n \nfor (String word : words) {\n    System.out.print(word.charAt(0));\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a HTML table with four columns. [/INST] <table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] What is the syntax of an if-else block in Java? [/INST] The syntax of an if-else block in Java is:\n\nif (condition) {\n  // execute this code if the condition is true\n} else {\n  // execute this code if the condition is false\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to delete the records whose age is greater than 30. [/INST] DELETE FROM table_name WHERE Age > 30;</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to loop over the characters in a string and add them to an array in Python. [/INST] def loop_over_string(s):\n    arr = []\n    for c in s:\n        arr.append(c)\n    return arr</s>"
  },
  {
    "text": "<s>[INST] How can you delete an object in JavaScript? [/INST] To delete an object in JavaScript, you can use the delete keyword, e.g. delete object_name;</s>"
  },
  {
    "text": "<s>[INST] Change the function to eliminate passing by reference\n\ndef f(arr):\n    arr.remove(arr[0]) [/INST] def f(arr):\n    arr_copy = arr[::]\n    arr_copy.remove(arr_copy[0])\n    return arr_copy</s>"
  },
  {
    "text": "<s>[INST] Given an array of positive numbers, write a function to return the maximum number of adjacent numbers with the same sign.\n\narr = [5, 2, 3, -2, 4, -5, 2, 3] [/INST] def maxAdjSameSign(arr): \n    \"\"\"\n    This function returns the maximum number of adjacent numbers with the same sign.\n    \"\"\"\n    max_count = 0\n    count = 1\n  \n    for i in range(0, len(arr)-1):\n        # If current element and the next element\n        # have the same sign \n        if (arr[i] > 0 and arr[i+1] > 0) or (arr[i] < 0 and arr[i+1] < 0):\n            count += 1\n        else: \n            max_count = max(max_count, count) \n  \n        # Reset count to 1\n        count = 1\n  \n    return max(max_count, count)</s>"
  },
  {
    "text": "<s>[INST] Print the longest palindrome from the given string\n\ns = \"abbaba\" [/INST] def longestPalindrome(s):\n    \"\"\"\n    This function prints the longest palindrome from the given string.\n    \"\"\"\n    longest_str = \"\"\n    n = len(s) \n  \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n        # check for even conditions\n        middle = ''\n        left = i \n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n  \n    return longest_str</s>"
  },
  {
    "text": "<s>[INST] Count the number of quadruples that sum up to zero\n\narr = [-2, -1, 0, 1, 2] [/INST] def countQuadruplesSumZero(arr):\n    \"\"\"\n    This function returns the number of quadruples that sum up to zero.\n    \"\"\"\n    quad = 0\n           \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == 0:\n                        quad += 1\n                            \n    return quad</s>"
  },
  {
    "text": "<s>[INST] Write a Spark program to count the number of words for a given text.\n\nText: This is a test text. [/INST] val data = Array(\"This is a test text.\") \nval wordsRDD = sc.parallelize(data).flatMap(x => x.split(\" \")) \nval wordCounts = wordsRDD.countByValue() \nfor ((word, count) <- wordCounts) println(word + \" : \" + count)</s>"
  },
  {
    "text": "<s>[INST] Create a matrix of size 3 x 3 in Python. [/INST] # 3x3 matrix \nmatrix3x3 = [[10, 20, 30],  \n             [15, 25, 35],  \n             [27, 29, 37]]</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code for adding a yellow background for a block of text. [/INST] p {\n    background-color: yellow;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a PHP script to generate a random password with 8 characters. [/INST] <?php  \n  \n// Generate random password   \nfunction generateRandomPassword() { \n    $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'; \n   \n    // Maximum characters in the password \n    $max = 8;  \n      \n    $password = array(); //Initialize the password array  \n    $alphaLength = strlen($alphabet) - 1; //Length of the alphabet string \n   \n    for ($i = 0; $i < $max; $i++) { \n        $n = rand(0, $alphaLength); \n        $password[] = $alphabet[$n]; \n    } \n   \n    return implode($password); //Return the joined string \n} \n\n$password = generateRandomPassword(); \n  \n//Print out the random password \necho $password;\n?></s>"
  },
  {
    "text": "<s>[INST] Write a sql query that joins two tables on a condition and select distinct records.\n\nTableA:\nid | name | type\n\nTableB:\nid | age | gender [/INST] SELECT DISTINCT A.id, A.name, A.type, B.age, B.gender\nFROM TableA A \nINNER JOIN TableB B \nON A.id = B.id;</s>"
  },
  {
    "text": "<s>[INST] Output the following data in json format\n\nName: John\nAge: 24\nLocation: USA [/INST] {\n    \"name\": \"John\",\n    \"age\": 24,\n    \"location\": \"USA\"\n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm for computing the sum of all digits between 1 to N. [/INST] def sum_digits(n):\n    sum = 0\n    for i in range(1, n+1):\n        digits = list(str(i))\n        for digit in digits:\n            sum += int(digit)\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Fill in the blanks to correctly identify the type of the following variable\n\nThe variable x is an __________. [/INST] The variable x is an integer.</s>"
  },
  {
    "text": "<s>[INST] Compute the modulo of following two numbers\n\n56 % 7 [/INST] 0</s>"
  },
  {
    "text": "<s>[INST] Generate an HTML element [/INST] <html>\n    <body>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Construct a python list comprehension\n\nList of numbers from 2 to 8 [/INST] list_nums = [x for x in range(2, 9)]</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that returns the records of the table that have a value larger than 5\n\nTableA: id | name | type [/INST] SELECT *\nFROM TableA\nWHERE type > 5;</s>"
  },
  {
    "text": "<s>[INST] Write a function to remove the value x from a list l\n\nx = 2\nl = [1, 2, 3, 4, 5] [/INST] def remove_x(x, l):\n    l.remove(x)\n    return l</s>"
  },
  {
    "text": "<s>[INST] Generate a React class component that handles one event type.\n\nEvent Type: onMouseLeave [/INST] class MyComponent extends React.Component {\n  handleMouseLeave = (event) => {\n    // Handle mouse leave event\n  }\n \n  render() {\n    return (\n      // Render component here\n    );\n  }\n};</s>"
  },
  {
    "text": "<s>[INST] How could you add a classname of \"main\" to the div element in this HTML code?\n\n<div>Hello World!</div> [/INST] <div class=\"main\">Hello World!</div></s>"
  },
  {
    "text": "<s>[INST] Name the type of data structure used in the following algorithm.\n\nIn this algorithm, we iterate through an array of elements, and perform an action on each of these elements:\n\nfor element in array:\n    performAction(element) [/INST] This algorithm uses an array as its data structure.</s>"
  },
  {
    "text": "<s>[INST] Write a query to find the names of all employees who have the same salary as the employee with the highest salary.\n\nTable Name: Employees\nColumns: Name, Salary [/INST] SELECT Name\nFROM Employees\nWHERE Salary = (SELECT MAX(Salary) \n                FROM Employees);</s>"
  },
  {
    "text": "<s>[INST] Generate a programming workflow for analyzing a large text dataset.\n\nDataset size: 1 million words [/INST] 1. Pre-process the input text dataset to remove punctuation and special characters. \n2. Split the dataset into equal chunks for easier parallel processing \n3. Use a language model such as BERT or GPT-2 to tokenize the chunks \n4. Use embeddings to represent words in the dataset \n5. Perform descriptive analytics such as identifying highest frequency words, collocations, etc. \n6. Perform prediction tasks such as sentiment analysis, parts-of-speech analysis, topic modeling, etc. \n7. Pattern recognition tasks such as document classification and clustering. \n8. Generate visualizations such as word clouds, topic maps, etc.</s>"
  },
  {
    "text": "<s>[INST] Create a SQLite database table using the following information\n\nTable Name: Students\nColumns: Name (string), Age (integer), GPA (float) [/INST] CREATE TABLE Students \n(\n  Name text,\n  Age integer,\n  GPA float\n);</s>"
  },
  {
    "text": "<s>[INST] Create a Bash script that runs a Python code\n\nPython code:\n\ndef hello_world():\n    print(\"Hello World!\") [/INST] #!/bin/bash\n \npython << END\ndef hello_world():\n    print(\"Hello World!\")\nhello_world()\nEND</s>"
  },
  {
    "text": "<s>[INST] Write an HTML page including 1 form element\n\nForm Element: text area control [/INST] <html>\n<head>\n  <title>Form Element</title>\n</head>\n<body>\n \n  <form action=\"\">\n    <textarea placeholder=\"Enter your text here...\" rows=\"4\" cols=\"50\"></textarea>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n \n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Suggest an algorithm to search for a matching string in a large text\n\nText: “This is a long piece of text with a searching string”\nSearching string: “searching string” [/INST] The most efficient algorithm for this task would be the KMP (Knuth-Morris-Pratt) algorithm. This is an efficient string matching algorithm that is used to match a pattern string in a given text string. The KMP algorithm is more efficient than traditional string matching algorithms as it pre-processes the pattern string to generate a lps (longest proper prefix which is also a suffix) array, which is then used to compare characters in the text string with characters in the pattern string.</s>"
  },
  {
    "text": "<s>[INST] Write a short python script to determine whether a given number is divisible by 5. [/INST] def is_divisible_by_5(number):\n    \"\"\"Check whether a given number is divisible by 5 or not.\"\"\"\n    if number % 5 == 0:\n        return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Write a python command which prints the text “Hello World” if a given number is even.\n\nnumber = 10 [/INST] if number % 2 == 0:\n    print(\"Hello World\")</s>"
  },
  {
    "text": "<s>[INST] Answer the following question: What Python library is used for web scraping? [/INST] The Python library used for web scraping is called 'BeautifulSoup'.</s>"
  },
  {
    "text": "<s>[INST] Create a for loop which prints the first 5 numbers in a given list.\n\nlist_numbers = [1, 2, 3, 4, 5, 6, 7] [/INST] for i in range(0, 5):\n    print(list_numbers[i])</s>"
  },
  {
    "text": "<s>[INST] Which sorting algorithm is the best for linked lists? [/INST] The best sorting algorithm for linked lists is Merge Sort. Merge Sort is more efficient than other sorting algorithms such as Quicksort or Insertion Sort because it does not require extra space. Furthermore, it is an in-place sorting algorithm, which means that resources are used to sort the linked list without the need to use extra space.</s>"
  },
  {
    "text": "<s>[INST] Format the following code according to PEP 8 style guidelines.\n\ndef function1(  a,  b,  c):\n\td = a+b*c\n\treturn d [/INST] def function1(a, b, c):\n    d = a + b * c\n    return d</s>"
  },
  {
    "text": "<s>[INST] Write a python command which prompts the user to input text [/INST] input_text = input(\"Enter some text: \")</s>"
  },
  {
    "text": "<s>[INST] What data type is returned by the Python function pow()? [/INST] The Python function pow() returns a float data type.</s>"
  },
  {
    "text": "<s>[INST] Create a try/except block which checks that the input is a valid integer\n\ninput_text = input(\"Enter a number: \") [/INST] try:\n    input_text = int(input(\"Enter a number: \"))\nexcept ValueError:\n    print(\"Invalid input\")</s>"
  },
  {
    "text": "<s>[INST] What is the GIL in Python and what is its purpose? [/INST] The Global Interpreter Lock (GIL) is a mechanism used by Python to manage and control access to shared data and resources. It prevents multiple threads from accessing the same data or using shared resources at the same time. The purpose of the GIL is to prevent the Python interpreter from crashing due to race conditions.</s>"
  },
  {
    "text": "<s>[INST] Write a code to print out an array of the first ten positive even numbers. [/INST] def printEvenNumbers():\n    my_list = []\n    for item in range(2,21,2):\n        my_list.append(item) \n    print(my_list)\n\nprintEvenNumbers() # prints [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</s>"
  },
  {
    "text": "<s>[INST] Design a class to normalize the salary of an employee with a minimum salary of 20,000. [/INST] class SalaryNormalizer:\n    def __init__(self, salary):\n        self.minimum = 20000\n        self.input_salary = salary\n \n    def normalize(self):\n        if self.input_salary < self.minimum:\n            self.normalized_salary = self.minimum\n        else:\n            self.normalized_salary = self.input_salary\n \n        return self.normalized_salary</s>"
  },
  {
    "text": "<s>[INST] Compute the square root of a number without using the square root function.\n\nnumber = 4 [/INST] def sqrt(number):\n    x = number\n    y = 1\n    epsilon = 0.000001\n    while x-y > epsilon:\n        x = (x + y)/2\n        y = number/x\n    return x\n\nsqrt(number) # returns 2.0</s>"
  },
  {
    "text": "<s>[INST] Create a function to check if a given triangle is an equilateral triangle.\n\na = 5, b = 5, c = 5 [/INST] def isEquilateral(a, b, c):\n    if (a == b == c): \n        return True\n    else: \n        return False\n  \nisEquilateral(a, b, c) # returns True</s>"
  },
  {
    "text": "<s>[INST] Is the following code valid Python?\n\nif bool == true:\n    print(\"True\") [/INST] False</s>"
  },
  {
    "text": "<s>[INST] Which of the following statements is/are valid in Javascript?\n\nlet x = \"Hello World!\";\nlet y = 'Hello World!' [/INST] Both statements are valid in Javascript. The first statement uses double quotes, while the second statement uses single quotes.</s>"
  },
  {
    "text": "<s>[INST] What data type should the following expression evaluate to?\n\n3 + 4 * 5 [/INST] The expression 3 + 4 * 5 will evaluate to 23, which is a number data type.</s>"
  },
  {
    "text": "<s>[INST] Write a code to process a given array and add 10 to each value stored in the array.\n\narr = [1, 2, 3, 4, 5] [/INST] #Process a given array and add 10 to each value\narr = [1, 2, 3, 4, 5]\n\n#Loop through the array\nfor i in range(len(arr)):\n    #Add 10 to the current element\n    arr[i] = arr[i] + 10\n\n#Print the modified array\nprint(arr)\n\n\"\"\"\nOutput:\n[11, 12, 13, 14, 15]\n\"\"\"</s>"
  },
  {
    "text": "<s>[INST] Format a given date in the following format: \"Month Day, Year\"\n\ndate = '2020-10-25' [/INST] #Format a given date\ndate = '2020-10-25'\n\n#Split the date\nmonth, day, year = date.split('-')\n\n#Format the date\nformatted_date = month + ' ' + day + ', ' + year\n\n#Print the formatted date\nprint(formatted_date)\n\n\"\"\"\nOutput:\nOctober 25, 2020\n\"\"\"</s>"
  },
  {
    "text": "<s>[INST] How can you check if a given key exists in a dictionary? [/INST] You can check if a given key exists in a dictionary using the `in` keyword. For example:\n\nmy_dict = {\n    'name': 'John',\n    'age': 20\n}\nif 'name' in my_dict:\n    print('Key found')</s>"
  },
  {
    "text": "<s>[INST] Construct a list of integers from m to n.\n\nm = 3\nn = 8 [/INST] lst = []\nfor i in range(m, n+1):\n    lst.append(i)</s>"
  },
  {
    "text": "<s>[INST] Find the greatest common divisor (GCD) of 24 and 32. [/INST] The greatest common divisor (GCD) of 24 and 32 is 8.</s>"
  },
  {
    "text": "<s>[INST] Compare two objects and return 0 if they are equal, -1 if the first is less than the second, and 1 if the first is greater than the second.\n\nobject1 = 7\nobject2 = 8 [/INST] def compare(object1, object2):\n    if object1 == object2:\n        return 0\n    elif object1 < object2:\n        return -1\n    else:\n        return 1</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression to match only words containing a single 'a' character. [/INST] pattern = r\"\\b[^a]*a[^a]*\\b\"</s>"
  },
  {
    "text": "<s>[INST] Capitalize the letters A - Z in the given string.\n\ntext = \"We are learning natural language processing\" [/INST] text = \"We Are Learning Natural Language Processing\"</s>"
  },
  {
    "text": "<s>[INST] Generate a C++ program to sum up the elements of an array [/INST] #include<iostream>\nusing namespace std;\n \nint sumArray(int arr[], int size)\n{\n\tint sum = 0;\n\tfor (int i=0; i<size; i++)\n\t\tsum += arr[i];\n\t \n\treturn sum;\n}\n \nint main()\n{\n\tint arr[] = {1, 2, 3, 4, 5};\n\tint size = sizeof(arr) / sizeof(arr[0]);\n\t \n\tcout << \"Sum of array elements: \" << sumArray(arr, size);\n\treturn 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Identify the type of a given function\n\nf(x)=2^x [/INST] Exponential function.</s>"
  },
  {
    "text": "<s>[INST] Write a Regex expression to extract all numbers larger than 0 in a string [/INST] \\b[1-9][0-9]*</s>"
  },
  {
    "text": "<s>[INST] Generate a HTML code to display a basic webpage with\n\nHeading: Welcome\nText: Hello World! [/INST] <html>\n  <head>\n    <title>Welcome</title>\n  </head>\n  <body>\n    <h1>Welcome</h1>\n    <p>Hello World!</p>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Identify the correct syntax to declare a variable in Java [/INST] dataType variableName;</s>"
  },
  {
    "text": "<s>[INST] Construct a CSS style sheet\n\nChange the default color of the HTML text to be purple [/INST] * {\n    color: #7a00e6;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop to print the integer from 0 to 50. [/INST] for i in range(51):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Which boolean value will be returned if the expression 5 is not equal to 10 is evaluated? [/INST] True</s>"
  },
  {
    "text": "<s>[INST] How many parameters does the following function require?\n\ndef multiply(a, b):\n    return a * b [/INST] Two, 2.</s>"
  },
  {
    "text": "<s>[INST] Replace all the x in the given list with y.\n\nlist = [1, 2, 'x', 'x', 1] [/INST] list = [1, 2, 'y', 'y', 1]</s>"
  },
  {
    "text": "<s>[INST] Generate a list of dictionary keys from the given dictionary.\n\nmy_dict = {'Name':'John','Age':24,'City':'New York'} [/INST] list_keys = list(my_dict.keys()) \nprint(list_keys)\n\nOutput:\n['Name', 'Age', 'City']</s>"
  },
  {
    "text": "<s>[INST] Make a list of numbers from 0 to 20 that are divisible by 3. [/INST] numbers = [x for x in range(21) if x % 3 == 0]</s>"
  },
  {
    "text": "<s>[INST] Generate a random hex color in Python. [/INST] import random \n  \ndef random_hex_colour_code(): \n    return '#' + ''.join([random.choice('0123456789ABCDEF') for x in range(6)]) \n  \nprint (\"Random Hex Color Code:\", random_hex_colour_code())</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a layout consisting of 3 containers: one on the left and two on the right. [/INST] <html>\n    <head>\n    </head>\n\n    <style>\n        #container{\n            width: 100%;\n            display: flex;\n        }\n\n        #left-container{\n            width: 20%;\n        }\n\n        #right-containers{\n            width: 80%;\n            display: flex;\n        }\n\n        #right-container1{\n            width: 50%;\n        }\n\n        #right-container2{\n            width: 50%;\n        }\n    </style>\n\n    <body>\n        <div id=\"container\">\n            <div id=\"left-container\">\n                <!-- Left Container Content -->\n            </div>\n            <div id=\"right-containers\">\n                <div id=\"right-container1\">\n                    <!-- Right Container 1 Content -->\n                </div>\n                <div id=\"right-container2\">\n                    <!-- Right Container 2 Content -->\n                </div>\n            </div>\n        </div>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create an if statement in Ruby that checks if a given number is a prime number. [/INST] def is_prime?(number)\n  if number < 2\n    return false\n  else\n    (2...number).each do |i|\n      if number % i == 0\n        return false\n      end\n    end\n    true\n  end\nend</s>"
  },
  {
    "text": "<s>[INST] Output a triangle shape using only asterisks (e.g. *) in Java. [/INST] public class Triangle {\n \n    public static void main(String[] args) \n    {\n        int limit=15;\n \n        System.out.println(\"Right Angle Triangle\");\n \n        for (int i = 0; i < limit; i++) \n        {\n            for (int j = 0; j <= i; j++) \n            {\n                System.out.print(\"*\");\n            }\n \n            System.out.println();\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a loop in PHP to iterate over an associative array and print each key and value.\n\n$arr = [\"a\" => 1, \"b\" => 2, \"c\" => 3]; [/INST] foreach ($arr as $key => $value) { \n  echo \"Key=\" . $key . \", Value=\" . $value; \n  echo \"\\n\"; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a list of integers as an argument and calculates the mean average. [/INST] def calculate_mean(numbers):\n    total_sum = 0; \n    for num in numbers:\n        total_sum += num\n    \n    mean_average = total_sum / len(numbers)\n    return mean_average</s>"
  },
  {
    "text": "<s>[INST] Output all items from an array in descending order in Java. [/INST] public static void printDescendingOrder(int[] arr) { \n// sort the array in descending order \nArrays.sort(arr, Collections.reverseOrder()); \n\nfor (int i=0; i<arr.length; i++) \n    System.out.print(arr[i] + \" \"); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a while loop in JavaScript to print the Fibonacci series. [/INST] let result = [];\nlet prev = 0;\nlet next = 1;\n\nwhile (next < 10) {\n  temp = prev;\n  prev = next;\n  next = temp + next;\n  result.push(next);\n}\nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to split a given string into the words in the string. [/INST] def split_string(string):\n    return string.split()</s>"
  },
  {
    "text": "<s>[INST] Edit the following C# code to throw an exception if the divisor is equal to 0.\n\nint result = dividend / divisor; [/INST] int result; \ntry \n{ \n    result = dividend / divisor; \n    if (divisor == 0) \n        throw new ArithmeticException(\"Divisor cannot be zero\"); \n    \n} \ncatch (DivideByZeroException e) \n{ \n    Console.WriteLine(\"Exception caught: {0}\", e); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript class named \"Student\" that has the following fields. [/INST] class Student {\n    constructor(name, age, email) {\n        this.name = name;\n        this.age = age;\n        this.email = email;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Reverse this array in-place using Python.\n\narr = [4, 2, 8, 6] [/INST] arr.reverse() # arr is now [6, 8, 2, 4]</s>"
  },
  {
    "text": "<s>[INST] Explain the difference between String comparison operators == and === in JavaScript. [/INST] The \"==\" operator is the equality comparison operator, which compares two values and returns true if they are equal. The \"===\" operator is the strict equality comparison operator, which compares two values and returns true only if both the values and their type are equal.</s>"
  },
  {
    "text": "<s>[INST] Using the following code snippet, generate a list containing numbers from 1 to n.\n\nn = 5 [/INST] nums = list(range(1, n+1)) # nums is now [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Convert this list of strings to a single string without using the \"join\" method.\n\nstr_list = [\"I\", \"am\", \"a\", \"list\", \"of\", \"strings\"] [/INST] result = ''\nfor string in str_list:\n    result += string\n# result is now \"Iamalistofstrings\"</s>"
  },
  {
    "text": "<s>[INST] Determine the code complexity for the following codse sample.\n\ndef get_sum(list):\n   sum = 0\n   for num in list:\n       sum += num\n   return sum [/INST] The code complexity of the given function is O(n), where n is the length of the list.</s>"
  },
  {
    "text": "<s>[INST] use regular expression to determine the number of words in a string.\n\nThis is a string of text [/INST] import re\n\ndef get_num_words(inp_str):\n    words = re.findall(r'\\w+', inp_str)\n    return len(words)\n\nif __name__ == '__main__':\n    inp_str = 'This is a string of text'\n    print(get_num_words(inp_str)) # Output: 4 words</s>"
  },
  {
    "text": "<s>[INST] Convert the following data into Excel Format.\n\n[\n    {'name': 'John', 'age': 20},\n    {'name': 'Paul', 'age': 22},\n    {'name': 'Ringo', 'age': 19}\n] [/INST] \"\"\"\nConvert data into Excel format\n\"\"\"\n\nimport csv\n\ndef to_excel(data):\n    with open('data.csv', 'w', newline='') as csvfile:\n        fieldnames = ['name', 'age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        for row in data:\n            writer.writerow(row)\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'John', 'age': 20},\n        {'name': 'Paul', 'age': 22},\n        {'name': 'Ringo', 'age': 19}\n    ]\n\n    to_excel(data)</s>"
  },
  {
    "text": "<s>[INST] Design a data structure to model the evolution of a population. [/INST] \"\"\"\nModel the evolution of a population\n\"\"\"\n\nclass Population:\n    def __init__(self):\n        self.population = []\n        self.generation = 0\n\n    def add_member(self, member):\n        self.population.append(member)\n\n    def next_generation(self):\n        self.generation += 1\n        self.population = self.population.create_next_generation()\n\nclass Member:\n    def __init__(self, data):\n        self.data = data\n\n\n    def create_next_generation(self):\n        next_gen_data = []\n        # perform population evolution algorithm\n        # ...\n        return [Member(g) for g in next_gen_data]</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, implement a quick sort algorithm.\n\n[7, 4, 5, 9, 1] [/INST] def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n \n    pivot = arr[0]\n    less = [i for i in arr[1:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\nif __name__ == '__main__':\n    arr = [7, 4, 5, 9, 1]\n    print(quick_sort(arr)) # Output:[1, 4, 5, 7, 9]</s>"
  },
  {
    "text": "<s>[INST] Set up a basic HTML page with a title that says \"My Web Page\". [/INST] <!DOCTYPE html>\n<html>\n<head>\n    <title>My Web Page</title>\n</head>\n<body>\n\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select rows from the table \"Customers\" where the \"City\" column equals \"London\". [/INST] SELECT * FROM Customers WHERE City = 'London';</s>"
  },
  {
    "text": "<s>[INST] Write a Java code snippet to set the 3rd element in an array of integers to the value 5.\n\nint[] arr = {1, 2, 3, 4, 5}; [/INST] arr[2] = 5;</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of 3, 5, 7 and 17 using JavaScript. [/INST] let sum = 3 + 5 + 7 + 17;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that sums the values in the \"Amount\" column of a table called \"Transactions\". [/INST] SELECT SUM(Amount) FROM Transactions;</s>"
  },
  {
    "text": "<s>[INST] Create a C++ variable with the name \"name\" that can store a string value. [/INST] string name;</s>"
  },
  {
    "text": "<s>[INST] Generate a unique 8 digit alphanumeric ID using Java. [/INST] String alphaNumericString = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                        + \"0123456789\"\n                        + \"abcdefghijklmnopqrstuvxyz\";\n\nStringBuilder sb = new StringBuilder(8);\n\nfor (int i = 0; i < 8; i++) {\n int index  = (int)(alphaNumericString.length() * Math.random());\n sb.append(alphaNumericString.charAt(index));\n}\nString generatedID = sb.toString();</s>"
  },
  {
    "text": "<s>[INST] Generate an HTML form in PHP to gather user information such as name and address. [/INST] <html>\n<head>\n<title>User Form</title>\n</head>\n<body>\n\n<form action=\"process_form.php\" method=\"post\">\n Name: <input type=\"text\" name=\"name\"><br>\n Address: <input type=\"text\" name=\"address\"><br>\n <input type=\"submit\" value=\"Submit\">\n</form>\n\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Python program that reads a list of words and prints the most frequently used one.\n\n['apple', 'banana', 'orange', 'apple'] [/INST] \"\"\"\nProgram to read a list of words and print the most frequently used one\n\nInput: List of words\nOutput: Most frequently used word\n\"\"\"\n\ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \n  \n    # Iterate over the list of words \n    for word in words: \n        # Check if word is already present in the freq dictionary \n        if (word in freq): \n            #Increment the count of word \n            freq[word] += 1\n        else: \n            # Add it to the dictionary with a count of one \n            freq[word] = 1\n  \n    # Get the count of most frequent word \n    max_count = max(freq.values()) \n  \n    # Loop over words and return the most frequent one \n    for key, value in freq.items(): \n        if value == max_count: \n            return key \n\n\nif __name__ == '__main__': \n    # Input\n    words = ['apple', 'banana', 'orange', 'apple']\n\n    # Result\n    print(most_freq_word(words))</s>"
  },
  {
    "text": "<s>[INST] Generate a class in Java for a contact record, including name, age, phone number, email, and address information. [/INST] public class Contact {\n    String name;\n    int age;\n    String phoneNumber;\n    String email;\n    String address;\n    \n    public Contact(String name, int age, String phoneNumber, String email, String address){\n        this.name     = name;\n        this.age      = age;\n        this.phoneNumber = phoneNumber;\n        this.email    = email;\n        this.address  = address;\n    }\n    \n    public String getName(){\n        return name;\n    }\n    public int getAge(){\n        return age;\n    }\n    public String getPhoneNumber(){\n        return phoneNumber;\n    }\n    public String getEmail(){\n        return email;\n    }\n    public String getAddress(){\n        return address;\n    }\n    \n    \n    public void setName(String name){\n        this.name = name;\n    }\n    public void setAge(int age){\n        this.age = age;\n    }\n    public void setPhoneNumber(String phoneNumber){\n        this.phoneNumber = phoneNumber;\n    }\n    public void setEmail(String email){\n        this.email = email;\n    }\n    public void setAddress(String address){\n        this.address = address;\n    }\n    \n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to return a length 5 array of zeros.\n\nint[] array = new int[10]; [/INST] int[] array = new int[5];\nfor(int i=0; i<array.length; i++){\n    array[i] = 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Output a string which is the reverse of the input string.\n\n\"Hello World\" [/INST] \"\"\"\nFunction to reverse a given string \n\nInput: String\nOutput: Reversed string\n\"\"\"\n\ndef reverse_string(string): \n    # Create an empty string to store the reversed string \n    reversed_string = \"\"\n\n    # Iterate over the string from the last character \n    for i in range(len(string)-1, -1, -1): \n        reversed_string += string[i] \n  \n    return reversed_string\n\n\nif __name__ == '__main__': \n    # Input \n    string = \"Hello World\"\n  \n    # Result \n    print(reverse_string(string))</s>"
  },
  {
    "text": "<s>[INST] Output a code to edit the following HTML to add a new heading 'Introduction' before the existing heading 'About'.\n\n<h1>About</h1> [/INST] <h1>Introduction</h1>\n<h1>About</h1></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all the customers who have an account balance of more than $1000. [/INST] SELECT * FROM customers WHERE account_balance > 1000;</s>"
  },
  {
    "text": "<s>[INST] Write a function to output the maximum value possible from a given array.\n\n[-1, 2, 4, 6, -3, 5] [/INST] def max_val(arr):\n    maximum = arr[0]\n    for i in arr:\n        if i > maximum:\n            maximum = i\n    return maximum\n\nmax_val([-1, 2, 4, 6, -3, 5])  # Output: 6</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop that calculates the sum of the numbers from 0 to n. [/INST] n = 5\ntotal = 0\nfor i in range(n+1): \n    total += i\n   \nprint(total) # Output: 15</s>"
  },
  {
    "text": "<s>[INST] Generate an SQL query that will combine two tables.\n\ntable A with 2 columns (id and name) and 2 rows (1, Tom) (2, Abigail) \ntable B with 2 columns (id and address) and 2 rows (1, USA) (2, Canada) [/INST] SELECT A.id, A.name, B.address \nFROM A \nINNER JOIN B \nON A.id = B.id</s>"
  },
  {
    "text": "<s>[INST] Create a text classifier using supervised learning. [/INST] import scikit-learn as sklearn\n\n# Load the data\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Train the classifier\nclassifier = sklearn.naive_bayes.MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Test the classifier\ny_predicted = classifier.predict(X_test)\n\n# Check the accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) \nprint(\"Accuracy score: {:.2f}\".format(accuracy)) # Output: Accuracy score: 0.89</s>"
  },
  {
    "text": "<s>[INST] Create a machine learning model that predicts whether an email is spam or not. [/INST] import scikit-learn as sklearn\n\n# Load the data\nX = dataset[['email_body', 'send_from', 'subject', 'num_links']]\ny = dataset['is_spam']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0, stratify=y)\n\n# Train the model\nclassifier = sklearn.linear_model.LogisticRegression()\nclassifier.fit(X_train, y_train)\n\n# Test the model\ny_predicted = classifier.predict(X_test)\n\n# Check the accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) \nprint(\"Accuracy score: {:.2f}\".format(accuracy)) # Output: Accuracy score: 0.95</s>"
  },
  {
    "text": "<s>[INST] Using the Pandas library, parse the given json object.\n\n{\n   \"name\": \"James\",\n   \"age\": \"60\",\n   \"address\":{\n      \"street\": \"123 Fake Street\",\n      \"city\": \"Springfield\",\n      \"state\": \"MA\"\n }\n} [/INST] import pandas as pd\n\ndata = {\n    'name': [\"James\"],\n    'age': [60],\n    'street': [\"123 Fake Street\"],\n    'city': [\"Springfield\"],\n    'state': [\"MA\"],\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n# Output: \n  name  age         street       city state\n0 James   60  123 Fake Street  Springfield    MA</s>"
  },
  {
    "text": "<s>[INST] Generate a numpy array of shape (3,3) with random values between 0 and 10. [/INST] import numpy as np\n\narray = np.random.randint(0, 10, size=(3, 3))\nprint(array)\n\n# Output: \n[[5 4 9]\n [6 8 5]\n [4 7 6]]</s>"
  },
  {
    "text": "<s>[INST] Find the sum of factors of a given number. [/INST] def sum_factors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\nsum_factors(12) # Output: 28</s>"
  },
  {
    "text": "<s>[INST] Create a function that returns true if a given set is a subset of another set.\n\nset1 = {1,2,3}\nset2 = {1,2,3,4,5,6} [/INST] def is_subset(s1, s2):\n    for e in s1:\n        if e not in s2:\n            return False\n    return True\n\nis_subset({1,2,3}, {1,2,3,4,5,6}) # Output: True</s>"
  },
  {
    "text": "<s>[INST] Design a function that takes in a matrix and finds its number of rows and columns.\n\nmatrix = [[1, 2, 3, 4], \n          [5, 6, 7, 8], \n          [9, 10, 11, 12]] [/INST] def matrix_dimensions(matrix):\n    num_rows = len(matrix)\n    num_columns = len(matrix[0])\n    return num_rows, num_columns\n\nmatrix = [[1, 2, 3, 4], \n          [5, 6, 7, 8], \n          [9, 10, 11, 12]]\n\nnum_rows, num_columns = matrix_dimensions(matrix)\nprint(num_rows) # Output will be 3\nprint(num_columns) # Output will be 4</s>"
  },
  {
    "text": "<s>[INST] Create a class definition in Python for a vehicle with attributes like make, model, year. [/INST] class Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n \n    # Other methods...</s>"
  },
  {
    "text": "<s>[INST] Explain a Python program to check whether a number is Armstrong or not. [/INST] def is_armstrong(num):\n    digits = [int(d) for d in str(num)]\n    num_digits = len(digits)\n    armstrong_sum = 0\n    for digit in digits:\n        armstrong_sum += digit ** num_digits\n    return num == armstrong_sum\n\n#Test code\nnum = 153\nprint(is_armstrong(num)) # Output will be True</s>"
  },
  {
    "text": "<s>[INST] Design a program to select the names of the students who have secured more than 80% marks in a given exam.\n\nstudents = [(\"John\", 75), (\"Mary\", 90), (\"Simon\", 80), (\"Rose\", 80)] [/INST] def get_high_scorers(students):\n    # Get the names of students with marks greater than 80\n    high_scorers = []\n    for student in students:\n        if student[1] > 80:\n            high_scorers.append(student[0])\n    return high_scorers\n\nstudents = [(\"John\", 75), (\"Mary\", 90), (\"Simon\", 80), (\"Rose\", 80)]\nprint(get_high_scorers(students)) # Output will be [\"Mary\"]</s>"
  },
  {
    "text": "<s>[INST] Design a class in C++ to represent a 2D point and define the addition operation for two points.\n\nclass Point {\n    private:\n        int x, y;\n    public: \n        Point(int x, int y) : x{x}, y{y} {}; [/INST] class Point {\n    private:\n        int x, y;\n    public: \n        Point(int x, int y) : x{x}, y{y} {};\n\n        Point operator + (const Point& other) {\n            return Point(this->x + other.x, this->y + other.y);\n        }\n};</s>"
  },
  {
    "text": "<s>[INST] Write Python code to fill missing values in a Pandas dataframe with a given value.\n\nimport pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n]) [/INST] import pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])\n\ndf.fillna(value='NA', inplace=True)</s>"
  },
  {
    "text": "<s>[INST] Read this HTML code and extract the content between the <h1> and </h1> tags.\n\n<h1>This is a heading</h1> [/INST] This is a heading</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL statement to sort the table results by the column \"id\" in ascending order.\n\nSELECT * FROM table_name [/INST] SELECT * FROM table_name \nORDER BY id ASC</s>"
  },
  {
    "text": "<s>[INST] Implement a function in JavaScript that returns true if an object is empty, false otherwise. [/INST] function isEmptyObject(obj) {\n    return Object.keys(obj).length === 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form to take user input from a web page. [/INST] <form action=\"\">\n    <label>Name:</label>\n    <input type=\"text\" name=\"name\" placeholder=\"Your name\" required><br><br>\n    <label>Email:</label>\n    <input type=\"email\" name=\"email\" placeholder=\"Your email address\" required><br><br>\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Find the syntax error in the given C# code.\n\nint x = 5;\nif (x > 4) console.WriteLine(\"Hello\"); [/INST] The syntax error is that 'console.WriteLine(\"Hello\");' should be within a pair of curly braces. i.e. The correct syntax should be \"if (x > 4) { Console.WriteLine(\"Hello\") };\"</s>"
  },
  {
    "text": "<s>[INST] Define the term \"polymorphism\" in programming. [/INST] Polymorphism is a feature in object-oriented programming that allows objects to behave differently depending on the context. It is used to reduce the amount of code needed for different operations and to increase the code's maintainability. Polymorphism allows objects to be defined from a common class in which each instance can be used in a different way based on its particular context. This enables a code to work in multiple forms depending on the data input. It simplifies the coding process by allowing for a single interface to access multiple objects at the same time.</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form that takes one input field - an email address. [/INST] <form action=\"action.php\" method=\"post\">\n  <label for=\"email\">Email:</label><br>\n  <input type=\"text\" name=\"email\" placeholder=\"Enter your email\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a select query to fetch all the customers with a name starting with 'A'. [/INST] SELECT * FROM customers\nWHERE name LIKE 'A%';</s>"
  },
  {
    "text": "<s>[INST] Write a shell command to print the system IP address. [/INST] ifconfig | grep \"inet \" | awk '{ print $2 }'</s>"
  },
  {
    "text": "<s>[INST] How to extract the domain name from an email address using JavaScript? [/INST] function getDomainFromEmail(email_address) {\n  return email_address.split('@')[1];\n}\n\ngetDomainFromEmail('example@domain.com'); // 'domain.com'</s>"
  },
  {
    "text": "<s>[INST] Create a function 'greet' that takes a string parameter 'name' and returns the string 'Hello name!' [/INST] function greet(name) {\n  return 'Hello ' + name + '!';\n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of 5 increasing numbers starting from 10. [/INST] var arr = [10, 11, 12, 13, 14];</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to return the 5 oldest employees from a table named 'employees'. [/INST] SELECT * FROM employees ORDER BY age DESC LIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Write a method 'addString' in Java that takes two strings as parameters and returns a single string that concatenates the two strings. [/INST] public static String addString(String str1, String str2) {\n\treturn str1 + str2;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes four strings as parameters and returns a single string with all strings concatenated together. [/INST] def concatenate(str1, str2, str3, str4):\n  return str1 + str2 + str3 + str4</s>"
  },
  {
    "text": "<s>[INST] Write an if-else statement in JavaScript that prints 'positive' if a number is greater than 0 and 'negative' if a number is less than 0. [/INST] if (number > 0) {\n  console.log('positive');\n} else if (number < 0) {\n  console.log('negative');\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function 'subStr' that takes a string and a start and end index and returns a substring between the start and end index. [/INST] def subStr(str, start, end):\n  return str.substring(start, end)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the users from table 'users' who are born after 1985. [/INST] SELECT * FROM users WHERE birthdate > 1985;</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java that takes a string as a parameter and returns the string in lowercase letters. [/INST] public static String LowerCase(String str) {\n  return str.toLowerCase();\n}</s>"
  },
  {
    "text": "<s>[INST] Provide instructions to create a linked list in Java. [/INST] In Java, to create a linked list, you need to declare a node class with instance variables for data and reference to the next node. Then create a LinkedList class with a head node and other methods for insertion, deletion and searching in the linked list. To add an element to the linked list, create a node with the given data and traverse the linked list until you reach the end and set the reference of the last node to the new node.</s>"
  },
  {
    "text": "<s>[INST] Categorize a given tweet.\n\n\"This new software program is supposed to make life so much easier!\" [/INST] positive</s>"
  },
  {
    "text": "<s>[INST] Identify the type of bug for the following code snippet.\n\ndef print_message(messsage):\n    print(\"My message is: \" + message) [/INST] Syntax error. The function name is missing a single letter \"s\", it should be \"print_message\".</s>"
  },
  {
    "text": "<s>[INST] Add a function to the following Javascript code so that it calculates the average of the two numbers.\n\nconst add = (a, b) => {\n\treturn a + b;\n}; [/INST] const add = (a, b) => {\n\treturn a + b;\n};\n\nconst average = (a, b) => {\n    return (a + b) / 2;\n};</s>"
  },
  {
    "text": "<s>[INST] Suggest an additional function needed to complete the following programme.\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None [/INST] class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n    def getData(self):\n        return self.data</s>"
  },
  {
    "text": "<s>[INST] Select what section of the code must be changed for the following C++ code snippet to compile correctly.\n\nint main() {\n    std:cout << \"Hello World!\";\n    return 0;\n} [/INST] The section of the code that must be changed is: std:cout << \"Hello World!\";\nThe correct expression should be: std::cout << \"Hello World!\";</s>"
  },
  {
    "text": "<s>[INST] Suggest a change to render the following CSS code more efficient.\n\n.image-box {\n    display: block;\n    width: 100px;\n    height: 100px;\n    background-image: url(\"logo.png\");\n} [/INST] .image-box {\n    display: inline-block;\n    width: 100px;\n    height: 100px;\n    background-image: url(\"logo.png\");\n    background-size: contain;\n}</s>"
  },
  {
    "text": "<s>[INST] Describe in one sentence what a variable declaration statement is. [/INST] A variable declaration statement is a line of code that assigns a value to a variable name.</s>"
  },
  {
    "text": "<s>[INST] Suggest a solution to the following problem: Write a program to sort a list of strings in alphabetical order.\n\nlist_of_strings = ['banana', 'apple', 'orange', 'kiwi'] [/INST] list_of_strings.sort()   # Sorts the list in alphabetical order</s>"
  },
  {
    "text": "<s>[INST] Create a function to find cube of any number [/INST] def cube(n):\n    return n**3</s>"
  },
  {
    "text": "<s>[INST] Extract the unique elements from a given list of numbers\n\nlist_of_nums = [5, 2, 5, 3, 7, 8, 2] [/INST] unique_nums = set(list_of_nums)  # {2, 3, 5, 7, 8}</s>"
  },
  {
    "text": "<s>[INST] Explain what is the purpose of the try-except block [/INST] The purpose of the try-except block is to handle exceptions that may be raised while a program is executing, so as to avoid crashing of the program.</s>"
  },
  {
    "text": "<s>[INST] Define a function to compare two strings [/INST] def compareStrings(string1, string2):  \n    if(string1 == string2): \n        return 0\n    elif(string1 > string2): \n        return 1\n    else: \n        return -1</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to get the names, address and age of employees with age more than 25. [/INST] SELECT name, address, age FROM employees WHERE age > 25;</s>"
  },
  {
    "text": "<s>[INST] Write a pseudocode to compare two strings and determine which is longer. [/INST] Function CompareStrings(str1, str2)\n  if Length(str1) > Length(str2)\n    return str1\n  else\n    return str2\nEnd Function</s>"
  },
  {
    "text": "<s>[INST] Implement a function to generate the Fibonacci series upto 'n' terms.\n\nn = 10 [/INST] def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b</s>"
  },
  {
    "text": "<s>[INST] Parse the given markup language to extract out the attributes and their corresponding values.\n\n<html>\n    <head>\n        <title>My Amazing Website</title>\n    </head>\n</html> [/INST] title: My Amazing Website</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of a deadlock in a multithreaded program. [/INST] A deadlock occurs in a multithreaded program when two or more threads are blocked from accessing a resource, because each thread is waiting for a resource that is being held by one of the other threads. This results in all threads being stuck, unable to proceed.</s>"
  },
  {
    "text": "<s>[INST] Modify the given code to accept input in Celsius and convert it to Fahrenheit.\n\ndef c2f():\n  return ((9/5)*temp + 32) [/INST] def c2f(temp):\n  return ((9/5)*temp + 32)</s>"
  },
  {
    "text": "<s>[INST] Write code to times the number entered by the user by 3. [/INST] num = int(input('Enter a number:'))\nprint(num*3)</s>"
  },
  {
    "text": "<s>[INST] Find the square root of the given number using the Newton-Raphson method.\n\nNumber: 100 [/INST] x_n+1 = x_n - f(x_n) / f'(x_n)\nx_0 = 100\n\nx_1 = 50 - (50*50 - 100) / (2*50)\n   = 50 - (2500 - 100) / 100 \n   = 50 - 24 / 100 \n   = 26\n\nx_2 = 26 - (26*26 - 100) / (2*26)\n   = 26 - (676 - 100) / 52 \n   = 26 - 576 / 52 \n   = 10\n\nx_3 = 10 - (10*10 - 100) / (2*10)\n   = 10 - (100 - 100) / 20 \n   = 10 - 0 / 20 \n   = 10\n\nThe square root of 100 is 10.</s>"
  },
  {
    "text": "<s>[INST] Identify the byte sequence that produces the following output.\n\nHello World! [/INST] 48 65 6c 6c 6f 20 57 6f 72 6c 64 21</s>"
  },
  {
    "text": "<s>[INST] Create a Regular Expression to match URLs [/INST] ^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$</s>"
  },
  {
    "text": "<s>[INST] Modify the given code snippet to make all elements of the list uppercase.\n\nlist = [\"hello\", \"world\"] [/INST] list = [x.upper() for x in list]</s>"
  },
  {
    "text": "<s>[INST] What is deadlock in operating system? [/INST] Deadlock is a situation in an operating system where two or more processes are unable to move forward due to the resources already being used by some of the other processes. This is a state of equilibrium where no progress can be made in executing the processes due to a circular wait for resources. A process might be waiting indefinitely for an event that will never occur. This can cause a system to become unresponsive as no progress can be made in execution. It is important for operating system designers to identify potential deadlocks and manage them effectively.</s>"
  },
  {
    "text": "<s>[INST] Classify the following sentence according to the type of speech it is.\n\nJohn said: \"Let's go to the zoo.\" [/INST] Direct speech.</s>"
  },
  {
    "text": "<s>[INST] Write a Regular Expression to identify all words that end with \"ing\". [/INST] \\w+ing$</s>"
  },
  {
    "text": "<s>[INST] Erase the duplicated elements of a list.\n\nlist1 = [13, 15, 16, 18, 15, 20, 17] [/INST] list1 = list(set(list1))</s>"
  },
  {
    "text": "<s>[INST] Convert the following code snippet into a function.\n\nnum1 = 4\nnum2 = 6\nresult = num1 + num2 [/INST] def add(num1, num2):\n    result = num1 + num2\n    return result</s>"
  },
  {
    "text": "<s>[INST] What data structure do you choose to represent a sparse matrix in programming? [/INST] A sparse matrix can be represented using a hashmap (dictionary) data structure. The hashmap will contain the non-zero elements of the matrix, where each entry will include the row index, column index and the value at that location. This helps in storing and retrieving massive amounts of data in an efficient manner.</s>"
  },
  {
    "text": "<s>[INST] Compile a java program that prints out \"Hello World!\" [/INST] javac HelloWorld.java</s>"
  },
  {
    "text": "<s>[INST] Create a function to test if an integer is prime or not. [/INST] def is_prime(x):\n    if x < 2: \n        return False\n    for n in range(2, x - 1):\n        if x % n == 0: \n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Implement Merge Sort algorithm in C++ [/INST] #include <iostream> \nusing namespace std; \n  \nvoid merge(int arr[], int l, int m, int r) \n{ \n    int i, j, k; \n    int n1 = m - l + 1; \n    int n2 =  r - m; \n  \n    int L[n1], R[n2]; \n  \n    for (i = 0; i < n1; i++) \n        L[i] = arr[l + i]; \n    for (j = 0; j < n2; j++) \n        R[j] = arr[m + 1+ j]; \n  \n    i = 0;  \n    j = 0; \n    k = l;   \n    while (i < n1 && j < n2) \n    { \n        if (L[i] <= R[j]) \n        { \n            arr[k] = L[i]; \n            i++; \n        } \n        else\n        { \n            arr[k] = R[j]; \n            j++; \n        } \n        k++; \n    } \n  \n    while (i < n1) \n    { \n        arr[k] = L[i]; \n        i++; \n        k++; \n    } \n  \n    while (j < n2) \n    { \n        arr[k] = R[j]; \n        j++; \n        k++; \n    } \n} \n  \nvoid mergeSort(int arr[], int l, int r) \n{ \n    if (l < r) \n    { \n        int m = l+(r-l)/2; \n  \n        mergeSort(arr, l, m); \n        mergeSort(arr, m+1, r); \n  \n        merge(arr, l, m, r); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Generate a classification network in a deep learning framework. [/INST] import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation\n\nmodel = Sequential()\n\nmodel.add(Dense(64, input_dim = 8))\nmodel.add(Activation('relu'))\nmodel.add(Dense(16))\nmodel.add(Activation('sigmoid'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss = 'categorical_crossentropy',\n              optimizer = 'adam',\n              metrics = ['accuracy'])</s>"
  },
  {
    "text": "<s>[INST] Create a set of transformation rules to convert a valid XML document to a valid HTML document. [/INST] 1. Replace <?xmlns> element with <html>\n2. Replace <xml> tag with <head>\n3. Add a <meta> tag inside the <head> tag containing the charset UTF-8 and the content type text/html\n4. Replace all <body> elements with <div> elements\n5. Replace all <title> elements with <h1> elements\n6. Replace all <ul> elements with <ol> elements\n7. Replace all <li> elements with <p> elements\n8. Replace all <p> elements with <span> elements\n9. Replace <link> elements with <style> elements\n10. Replace <link/> elements with <script> elements\n11. Replace <image> with <img>\n12. Replace <video> with <video> with the source attribute specified\n13. Replace <audio> with <audio> with the src attribute specified \n14. Replace <text> and <textarea> with <p> and <textarea> respectively\n15. Replace all <form> with <form>\n16. Replace all <input> elements with <input> and optionally add features like placeholder, checked, etc \n17. Replace all <nav> elements with <nav>\n18. Replace <svg> with <svg></s>"
  },
  {
    "text": "<s>[INST] You are given a list of numbers and you need to calculate the standard deviation of the numbers.\n\n[1, 2, 3, 4, 5] [/INST] import statistics\n\ndef calculate_std_dev(nums):\n return statistics.stdev(nums)</s>"
  },
  {
    "text": "<s>[INST] Read the code and determine all the variables that have been declared or used.\n\ndef func(x, y, z):\n    a = x + y + z\n    b = x * y * z\n    c = a / b [/INST] The variables are x, y, z, a, b, and c.</s>"
  },
  {
    "text": "<s>[INST] We need to find all unique combinations of elements from a given list of items.\n\n[1, 2, 3, 4] [/INST] def find_unique_combinations(items):\n result = []\n for i in range(1, len(items) + 1):\n for combination in itertools.combinations(items, i):\n result.append(list(combination))\n return result</s>"
  },
  {
    "text": "<s>[INST] We need to write a program to generate all permutations of a given string. [/INST] def generate_permutations(s):\n results = []\n if len(s) == 1:\n results.append(s)\n else:\n for i, c in enumerate(s):\n for perm in generate_permutations(s[:i] + s[i + 1:]):\n results.append(c + perm)\n return results</s>"
  },
  {
    "text": "<s>[INST] You are given a string and you need to clear the line breaks.\n\n\"This is a \ntest\nstring\" [/INST] def clear_line_breaks(s):\n return s.replace(\"\\n\", \"\")</s>"
  },
  {
    "text": "<s>[INST] We need to build a function to compute the product of the elements of a given array.\n\n[1, 2, 3, 4, 5] [/INST] def product_of_array(arr):\n prod = 1\n for i in arr:\n prod *= i\n return prod</s>"
  },
  {
    "text": "<s>[INST] We need to find the maximum element in a given array of numbers.\n\n[1, 2, 3, 4, 5] [/INST] def find_max(arr):\n maximum = arr[0]\n for i in arr[1:]:\n if i > maximum:\n maximum = i\n return maximum</s>"
  },
  {
    "text": "<s>[INST] Create a python function which finds the intersection of two lists\n\nlist1=[2, 5, 8, 10]\nlist2=[3, 5, 8, 10] [/INST] def intersect(list1,list2):\n    return [i for i in list1 if i in list2]</s>"
  },
  {
    "text": "<s>[INST] Write a python program that takes a string as a parameter and prints the character at index 4 if the length of the string is greater than 4.\n\nastring = \"Python\" [/INST] def character_at_index(astring):\n    if len(astring) > 4:\n        print(astring[4])</s>"
  },
  {
    "text": "<s>[INST] Create a python class that stores the name of the student, their total marks and return the student name with their total marks.\n\nname = 'John'\nmarks = 75 [/INST] class Student:\n    def __init__(self, name, marks):\n        self.name = name\n        self.marks = marks\n\n    def get_details(self):\n        return self.name + \": \" + str(self.marks)</s>"
  },
  {
    "text": "<s>[INST] Write an if statement that checks if an integer, num, is less than 10.\n\nnum = 7 [/INST] if num < 10:\n    print(\"num is less than 10\")</s>"
  },
  {
    "text": "<s>[INST] Create a program to take a string of words and return the count of each word.\n\nword_string = \"This is a sentence of words\" [/INST] def countWords(word_string):\n    words = word_string.split()\n    count_dict = {}\n    for word in words:\n        count_dict[word] = words.count(word)\n    return count_dict</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two strings's, two string length's and returns true if the second string is a rotation of the first.\n\nstring1 = \"Hello World\"\nstring2 = \"WorldHello\"\nlength1 = 11\nlength2 = 11 [/INST] def isRotation(string1, string2, length1, length2):\n    if length1 == length2 and len(string1)>0:\n        string1string1 = string1 + string1\n        return string2 in string1string1</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a string and a number n, then return n characters from the end of the string.\n\nstring = \"Hello World\"\nn = 3 [/INST] def getCharactersFromEnd(string, n):\n    return string[-n:]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the details of all Customers from the database. [/INST] SELECT * FROM Customers;</s>"
  },
  {
    "text": "<s>[INST] List all the methods available in axelrod python library [/INST] Methods available in axelrod Python library are constructor method, player_names method, init method, play method, get_history method, reset method, sign_string method, find_conformers method, oppose_strategy method, strategy method, final_score method, cooperation method, defect method, normalised_score method, and elo_rating method.</s>"
  },
  {
    "text": "<s>[INST] Compute P(A | B) given that  P(B | A) = 0.8, P(A) = 0.4, and P(B) = 0.7 [/INST] P(A|B) = P(B|A) * P(A) / P(B)\n     = 0.8 * 0.4 / 0.7\n     = 0.5714286</s>"
  },
  {
    "text": "<s>[INST] Prompt a clarification from the user when the reply provided is unclear\n\nInput Reply: I don't know [/INST] Can you please explain what you mean when you say \"I don't know\"?</s>"
  },
  {
    "text": "<s>[INST] Solve the quadratic equation 3x^2 + 8x + 4 = 0 [/INST] x = (-8 ± √-112) / (2 × 3)\n   = (-8 ± 4√7) / 6\n   = (-2 ± 2√7) / 3</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, write a recursive program to merge two sorted subarrays ar1 and ar2\n\nar1 = [1, 4, 7, 9]\nar2 = [2, 5, 6, 8] [/INST] def mergeSortedSubarrays(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n    return result</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of all characters in a string using a for loop\n\nString: Python [/INST] total = 0\nfor ch in 'Python':\n    total += ord(ch)\nprint(total)\n\n# Output: 686</s>"
  },
  {
    "text": "<s>[INST] Construct a binary search tree from a list of given items\n\nItems: [1, 5, 7, 9, 11, 16] [/INST] 9\n    /   \\  \n   5    11\n  /    /  \\\n 1    7    16</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm to generate the permutations of a string [/INST] def permutations(string):\n    if len(string) <= 1:\n        return set([string])\n\n    # get the last character\n    last_char = string[-1]\n\n    # get all permutations for the remaining characters\n    all_permutations = permutations(string[:-1])\n\n    # create permutations for including the last character\n    permutations_with_last_char = set()\n    for permutation in all_permutations:\n        for idx in range(len(string)):\n            permutation_with_last_char = permutation[:idx] + last_char + permutation[idx:]\n            permutations_with_last_char.add(permutation_with_last_char)\n\n    return permutations_with_last_char</s>"
  },
  {
    "text": "<s>[INST] Write a Python parser to parse the json string to a dictionary.\n\n{\"name\": \"John\", \"age\": 23} [/INST] import json\n\ndef json_parser(string):\n  data = json.loads(string)\n  return data</s>"
  },
  {
    "text": "<s>[INST] Suggest a code that sort a list by the last digit of each element. [/INST] def sort_by_last_digit(list):\n return sorted(list, key=lambda x: x % 10)</s>"
  },
  {
    "text": "<s>[INST] Suggest a completion for the following code that generates a sequence of integers.\n\ndef generate_sequence(starting_number, step): [/INST] def generate_sequence(starting_number, step):\n num = starting_number\n while True: \n  yield num\n  num += step</s>"
  },
  {
    "text": "<s>[INST] Write a function to obtain the result of a given mathematical expression.\n\n2 + 3 - 5 [/INST] def calculate_expression(expression):\n return eval(expression)</s>"
  },
  {
    "text": "<s>[INST] Suggest a solution to convert a given number from one base to another. [/INST] def base_conversion(num, base_from, base_to):\n if base_from == 10:\n  num = int(num, base_to)\n elif base_to == 10:\n  num = int(str(num), base_from)\n else:\n  num = int(str(int(str(num), base_from)), base_to) \n return num</s>"
  },
  {
    "text": "<s>[INST] Develop a GUI application in Java to reverse a string.\n\nUser should be able to enter a string in the text field. [/INST] import java.awt.BorderLayout;\nimport java.awt.event.*;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\nclass Reverse extends JFrame \n{\n  JTextField inputTF;\n  JTextField outputTF;\n  JButton reverseBtn;\n \n  Reverse() \n  {\n    inputTF = new JTextField(20);\n    outputTF = new JTextField(20);\n    outputTF.setEditable(false);\n    reverseBtn = new JButton(\"Reverse\");\n\n    JPanel panel = new JPanel();\n    panel.add(inputTF);\n    panel.add(reverseBtn);\n    panel.add(outputTF);\n\n    reverseBtn.addActionListener(new ActionListener() \n    {\n      public void actionPerformed(ActionEvent ae) \n      {\n        String userInput = inputTF.getText();\n        StringBuilder sb = new StringBuilder();\n        sb.append(userInput);\n        sb = sb.reverse();\n\n        outputTF.setText(sb.toString());\n      } \n    });\n    add(panel, BorderLayout.CENTER);\n    setVisible(true);\n  } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find all employees whose salary is greater than the average salary of their department.\n\nTable of Employees:\nID | Name | Department | Salary [/INST] SELECT E.Name\nFROM EMPLOYEES E \nINNER JOIN \n  (SELECT DEPARTMENT, AVG(SALARY) AVG_SALARY \n   FROM EMPLOYEES \n   GROUP BY DEPARTMENT \n  ) T \n  ON E.DEPARTMENT = T.DEPARTMENT \nWHERE E.SALARY > T.AVG_SALARY</s>"
  },
  {
    "text": "<s>[INST] Develop a Node.js program that prints out the current time in a specified timezone. [/INST] const moment = require('moment-timezone');\n\nconst timezone = 'America/New_York';\nconst currentTime = moment().tz(timezone).format('h:mm a z');\n\nconsole.log(`The current time in ${timezone} is ${currentTime}`);</s>"
  },
  {
    "text": "<s>[INST] Develop a ReactJS program that displays the sum of two number inputs.\n\nThe two numbers that the user will input should be positive integers. [/INST] import React, { useState } from \"react\";\n\nfunction SumInput() {\n  const [number1, setNumber1] = useState(\"\");\n  const [number2, setNumber2] = useState(\"\");\n  const [sum, setSum] = useState(0);\n\n  const handleNumber1Change = e => setNumber1(e.target.value);\n  const handleNumber2Change = e => setNumber2(e.target.value);\n  const handleSumCalc = () => setSum(parseInt(number1) + parseInt(number2));\n\n  return (\n    <div>\n      <input type=\"text\" value={number1} onChange={handleNumber1Change} />\n      +\n      <input type=\"text\" value={number2} onChange={handleNumber2Change} />\n      =\n      <input type=\"text\" value={sum} readOnly />\n      <button onClick={handleSumCalc}>Calculate Sum</button>\n    </div>\n  );\n}\n\nexport default SumInput;</s>"
  },
  {
    "text": "<s>[INST] Develop a code to perform linear regression in R [/INST] fit <- lm(y ~ x,data)\nsummary(fit)</s>"
  },
  {
    "text": "<s>[INST] Develop a Swift program that returns the index of a given element in an array.\n\nGiven an array of integers and a target element. [/INST] func searchIndex(arr: [Int], target: Int) -> Int? {\n      for index in 0..<arr.count {\n          if arr[index] == target {\n              return index\n          }\n      }\n      return nil\n}</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in Java that prints the prime numbers between 1 and 100. [/INST] class PrimeNumber{  \n public static void main(String args[]){  \n  int i,m=0,flag=0;    \n  int n=100;//it is the number to be checked  \n  m=n/2;    \n  for(i=2;i<=m;i++){    \n   if(n%i==0){    \n   System.out.println(\"Number is not prime\");    \n   flag=1;    \n   break;    \n   }    \n  }    \n  if(flag==0)    \n  System.out.println(\"Number is prime\");    \n}  \n}</s>"
  },
  {
    "text": "<s>[INST] Generate a code in Lua to find the maximum number in a given array. [/INST] function findMax(arr)\n    local maxValue = -math.huge\n    for i = 1, #arr do\n        if arr[i] > maxValue then\n            maxValue = arr[i]\n        end\n    end\n    return maxValue\nend</s>"
  },
  {
    "text": "<s>[INST] Use the information provided to initialize a dictionary in Python.\n\nkeys = [\"name\", \"age\", \"gender\"]\nvalues = [\"John Doe\", 25, \"Male\"] [/INST] my_dict = dict(zip(keys, values))</s>"
  },
  {
    "text": "<s>[INST] Compute the sum of two integers without using the \"+\" operator.\n\nx = 5\ny = 7 [/INST] sum = x ^ y + (x & y) << 1 # using bitwise operators</s>"
  },
  {
    "text": "<s>[INST] Update the dictionary values using the same keys.\n\nmy_dict = {\"key1\": 3, \"key2\": 6} [/INST] my_dict.update({\"key1\": 4, \"key2\": 8})</s>"
  },
  {
    "text": "<s>[INST] Calculate the total of all the elements in the list using a loop.\n\nmy_list = [2, 5, 9, 4] [/INST] total = 0\nfor num in my_list:\n    total += num\nprint(total) # 20</s>"
  },
  {
    "text": "<s>[INST] Create a list of students which contains a nested list of the student’s name and age.\n\nstudents = [\"Sam\", 19], [\"Alice\", 20], [\"Linda\", 21] [/INST] student_list = [[student[0], student[1]] for student in students]</s>"
  },
  {
    "text": "<s>[INST] Change the following if-else expression to a ternary operator\n\na = 10\nb = 5\n\nif a > b:\n    c = a\nelse:\n    c = b [/INST] c = a if a > b else b</s>"
  },
  {
    "text": "<s>[INST] Define an absolute difference function in Python to find the difference between two numbers. [/INST] def absolute_difference(x, y):\n    return abs(x - y)</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML tag to make the link open in a new tab.\n\n<a href=\"https://www.example.com\">Example</a> [/INST] <a href=\"https://www.example.com\" target=\"_blank\">Example</a></s>"
  },
  {
    "text": "<s>[INST] Classify the following sentence as a declaration or an instruction\n\nBe careful while crossing the street. [/INST] Instruction</s>"
  },
  {
    "text": "<s>[INST] Given two lists, write a Python code to find the common elements in both the lists\n\nlist1 = [3, 7, 14, 19]\nlist2 = [6, 8, 14, 17] [/INST] common_elements = [element for element in list1 if element in list2]\n\nprint(common_elements) #[14]</s>"
  },
  {
    "text": "<s>[INST] Explain the use of the continue keyword in Python [/INST] The continue keyword can be used to skip over certain elements in a loop body. It is often used to skip over certain unwanted elements. It works by returning to the loop condition by stopping the current iteration of the loop and jumping straight to the next iteration.</s>"
  },
  {
    "text": "<s>[INST] Using the following data, generate a random string in Python\n\ndata = [“H”, “e”, “l”, “l”, “o”] [/INST] import random\n\nrandom_string = \"\".join(random.choices(data, k=5))\n\nprint(random_string) #helll or olleh or leloh or any other combination</s>"
  },
  {
    "text": "<s>[INST] Generate a unit test for the following bubble sort algorithm\n\ndef bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] [/INST] import unittest\n\nclass TestBubbleSort(unittest.TestCase):\n    def test_sort(self):\n        arr = [5, 2, 3, 7, 1]\n        bubble_sort(arr)\n        self.assertEqual(arr, [1, 2, 3, 5, 7])\n\nif __name__ == '__main__':\n    unittest.main()</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to classify the following sentence\n\nIt's raining cats and dogs [/INST] import nltk\nfrom nltk.tokenize import word_tokenize\n\nsentence = \"It's raining cats and dogs\"\ntokens = word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nprint(tagged) #[('It', 'PRP'), (\"'s\", 'VBZ'), ('raining', 'VBG'), ('cats', 'NNS'), ('and', 'CC'), ('dogs', 'NNS')]</s>"
  },
  {
    "text": "<s>[INST] Construct a 2-dimensional array, A, of size M*N, filled with all zeroes.\n\nM=4, N=5 [/INST] A = [[0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0]]</s>"
  },
  {
    "text": "<s>[INST] Given a course consisting of 5 lessons, write a program to display the first lesson.\n\nLessons = [\"Python Basics\", \"Javascript Basics\", \"C++ Basics\", \"Data Structures\", \"Object-Oriented Programming\"] [/INST] def display_first_lesson(lessons):\n    print(\"The first lesson is: \" + lessons[0])\n\nLessons = [\"Python Basics\", \"Javascript Basics\", \"C++ Basics\", \"Data Structures\", \"Object-Oriented Programming\"]\n\ndisplay_first_lesson(Lessons)</s>"
  },
  {
    "text": "<s>[INST] Add styling to the HTML anchor tag.\n\n<a href=\"index.html\">Home</a> [/INST] <a style=\"color: blue; font-weight: bold\" href=\"index.html\">Home</a></s>"
  },
  {
    "text": "<s>[INST] Assign a value to a given key in a dictionary.\n\ndictionary = {'key': 'value'} [/INST] dictionary['key'] = 'updated value'</s>"
  },
  {
    "text": "<s>[INST] Translate the text \"Hello\" to Spanish. [/INST] \"Hola\"</s>"
  },
  {
    "text": "<s>[INST] Find the smallest number in the array using the reduce method.\n\narray = [2, 7, 3, 8, 5] [/INST] import functools\n\narray = [2, 7, 3, 8, 5]\n\nsmallest = functools.reduce(lambda x,y: x if x < y else y, array)\n\nprint(smallest)</s>"
  },
  {
    "text": "<s>[INST] Print a string in reverse.\n\nstring = \"Hello World!\" [/INST] print(string[::-1])</s>"
  },
  {
    "text": "<s>[INST] Create a class named Square and create a method to calculate the area. [/INST] class Square:\n    def __init__(self, side):\n        self.side = side\n \n    def area(self):\n        return self.side * self.side</s>"
  },
  {
    "text": "<s>[INST] Show the memory size of a list using Java.\n\nList<Integer> list = new ArrayList<Integer>();\nlist.add(3);\nlist.add(4);\nlist.add(5); [/INST] // Show the memory size of the list\nint memorySize = list.size() * Integer.SIZE / 8;\nSystem.out.println(memorySize);</s>"
  },
  {
    "text": "<s>[INST] Change all the element in the array to negative using JavaScript.\n\nvar arr = [1, 2, 3, 4, 5]; [/INST] // Change all the element in the array to negative \nfor (var i = 0; i < arr.length; i++) {\n    arr[i] = -arr[i];\n}</s>"
  },
  {
    "text": "<s>[INST] Find the sum of all elements in a matrix using C.\n\nint A[2][2] = { {1, 2}, \n                {3, 4} }; [/INST] // Find the sum of all elements of the matrix\nint sum = 0; \nfor (int i = 0; i < 2; i++)\n   for (int j = 0; j < 2; j++)\n      sum = sum + A[i][j];</s>"
  },
  {
    "text": "<s>[INST] Sort the strings alphabetically using C++.\n\nstring arr[] = {\"Geeks\", \"for\", \"Geeks\"}; [/INST] // Sort the strings alphabetically \nsort(arr, arr+3);</s>"
  },
  {
    "text": "<s>[INST] Check whether all elements in the array are equal using Python.\n\narr = [2,2,2] [/INST] # Check whether all elements in the array are equal\nif all(x == arr[0] for x in arr):\n    print(\"All elements are equal\")\nelse:\n    print(\"Elements are not equal\")</s>"
  },
  {
    "text": "<s>[INST] Perform a linear search to find if a key exists in an array using C.\n\nint arr[] = {4, 3, 2, 10, 40}; \nint key = 40; [/INST] // Perform linear search \nint flag = 0; \nfor (int i = 0; i < 5; i++) { \n   if (arr[i] == key) { \n      flag = 1; \n      break; \n   } \n} \nif (flag == 1) \n    printf(\"Present\"); \nelse\n    printf(\"Not Present\");</s>"
  },
  {
    "text": "<s>[INST] Create an object of your own class using JavaScript. [/INST] // Create an object of your own class \nclass MyClass {\n    constructor(name) {\n        this.name = name;\n    }\n}\nlet obj = new MyClass(\"MyObject\");\nconsole.log(obj);</s>"
  },
  {
    "text": "<s>[INST] Replace all the negative numbers in an array to zero using Ruby.\n\narr = [3, 4, -2, -1] [/INST] # Replace all negative numbers in an array to zero \narr.each_with_index do |num, i|\n  arr[i] = 0 if num < 0\nend</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to create a timer that counts down from 10. [/INST] let countDown = 10;\nlet interval = setInterval(() => {\n  countDown--;\n  if (countDown == 0) {\n    clearInterval(interval);\n  }\n}, 1000);</s>"
  },
  {
    "text": "<s>[INST] Use the provided text to generate a python ``dict``.\n\nKEY1:VALUE1,KEY2:VALUE2,KEY3:VALUE3 [/INST] {'KEY1': 'VALUE1', 'KEY2': 'VALUE2', 'KEY3': 'VALUE3'}</s>"
  },
  {
    "text": "<s>[INST] Implement a search algorithm with the given data structure.\n\ndef searchTree(T, k):\n    \"\"\"\n    Tree T is either empty or a node with two subtrees, left and right. \n    The value at the root is a[0]\n    \"\"\" [/INST] def searchTree(T, k):\n    if not T:\n        return False\n\n    if k == T[0]:\n        return True\n    elif k < T[0]:\n        return searchTree(T[1], k)\n    else:\n        return searchTree(T[2], k)</s>"
  },
  {
    "text": "<s>[INST] Generate a regular expression that matches strings containing at least one digit and one uppercase letter. [/INST] ^(?=.*[A-Z])(?=.*[0-9])[A-Z0-9]+$</s>"
  },
  {
    "text": "<s>[INST] Classify the given input text into one of the 4 categories (\"sports\", \"weather\", \"finance\", \"technology\").\n\nApple Inc. reported earnings today [/INST] technology</s>"
  },
  {
    "text": "<s>[INST] Explain what is meant by recursion in programming. [/INST] Recursion is a programming technique which involves a function calling itself in order to solve a problem. It allows the function to repeat itself until a certain condition is met, by breaking the problem down into simpler versions of itself. This is done by using a base case, which is a smaller version of the problem that can be solved without using recursion, and the recursive case, which is the same problem but broken down in a way that it can call itself as a subproblem. This technique can be used to solve complex problems and be used for things such as sorting algorithms, tree traversals, and graph algorithms.</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two inputs, a list and a target number, and prints only the list items whose total add up to the target number.\n\nlist = [1, 5, 9, 10], target = 10 [/INST] def sum_of_list(lst, target):\n    \"\"\"\n    This function takes a list and a target number as inputs, and prints only the list items whose total add up to the target number.\n    \"\"\"\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                print (lst[i], lst[j])\n\nsum_of_list(list, target)</s>"
  },
  {
    "text": "<s>[INST] Given the following Node.js code, explain its functionality.\n\nconst express = require(\"express\");\nconst app = express(); [/INST] The above code initializes an Express web application by importing the express module and creating an Express application instance. The Express module is a web development framework for Node.js that provides a set of features that facilitate the creation of web applications and API's. The app instance is the express router, which is responsible for handling different HTTP methods and routes. It also allows middleware functions to be registered, which are functions that are called before the request is processed. This code is the foundation of any Express web application and is necessary for setting up the app.</s>"
  },
  {
    "text": "<s>[INST] Find and replace all occurrences of \"cat\" with \"dog\" in the given string.\n\nI have a cat and two cats [/INST] I have a dog and two dogs</s>"
  },
  {
    "text": "<s>[INST] Debug the following code, describe the changes and explain their purpose.\n\nfunction reverseString(str) { \n  let newString = \"\"; \n  for (let i = str.length - 1; i >= 0; i--) { \n    newString += str[i]; \n  } \n  return newString; \n} [/INST] function reverseString(str) { \n  let newString = \"\"; \n  for (let i = str.length - 1; i >= 0; i--) { \n    newString += str[i]; \n  } \n  // Added return statement\n  return newString; \n} \n\n// The change is a return statement that has been added to the end of the function. The purpose of this return statement is to ensure that the value that is calculated by the function is returned to the calling function. This allows the reversed string to be used by other parts of the program. Without this return statement, the reversed string calculated by the function would never be accessed by the other parts of the program.</s>"
  },
  {
    "text": "<s>[INST] Write a regex expression to match strings that start with \"abc\" and end with \"xyz\". [/INST] ^abc.*xyz$</s>"
  },
  {
    "text": "<s>[INST] How can you create a dictionairy from the following two lists in Python?\n\nlist1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3] [/INST] dict_from_lists = dict(zip(list1, list2))</s>"
  },
  {
    "text": "<s>[INST] Design a ML algorithm to classify a given handwritten digit. [/INST] The ML algorithm should be a convolutional neural network architecture like LeNet and should take a 28x28 image of a handwritten digit as input. The output of the model should be a one hot vector of 10 elements representing the probability of the corresponding digit.</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form with two text fields that accept a first and last name, respectively. [/INST] <form>\n  <label for=\"firstName\">First Name</label>\n  <input type=\"text\" id=\"firstName\" name=\"firstName\">\n\n  <label for=\"lastName\">Last Name</label>\n  <input type=\"text\" id=\"lastName\" name=\"lastName\">\n\n<input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function for sorting a list of strings alphabetically by their third letter.\n\n[\"apple\",\"pear\",\"banana\",\"grape\"] [/INST] function sortByThirdLetter(arr) {\n  return arr.sort((a, b) => {\n    if (a[2] < b[2]) return -1;\n    if (a[2] > b[2]) return 1;\n    return 0;\n  });\n}\n\nsortByThirdLetter([\"apple\", \"pear\", \"banana\", \"grape\"]);  // [\"apple\", \"grape\", \"banana\", \"pear\"]</s>"
  },
  {
    "text": "<s>[INST] How would you create a MySQL table with the following columns?\n\nPerson (id, first_name, last_name, birth_date, age) [/INST] CREATE TABLE Person ( \n  id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, \n  first_name VARCHAR(42) NOT NULL, \n  last_name VARCHAR(42) NOT NULL, \n  birth_date DATE NOT NULL, \n  age INT NOT NULL \n);</s>"
  },
  {
    "text": "<s>[INST] Create an HTML webpage with a main navigation at the top. [/INST] <html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Navigation</title>\n  </head>\n  <body>\n    <nav>\n      <ul>\n        <li><a href=\"home.html\">Home</a></li>\n        <li><a href=\"about.html\">About</a></li>\n        <li><a href=\"blog.html\">Blog</a></li>\n        <li><a href=\"contact.html\">Contact</a></li>\n      </ul>\n    </nav>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a Ruby method to sum all numbers from 1 to the given number n. [/INST] def summation(n) \n  sum = 0\n  for i in 1..n \n    sum += i\n  end \n  return sum \nend</s>"
  },
  {
    "text": "<s>[INST] Create a CSS class for creating a two-column layout. [/INST] .column-layout{\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n}\n\n.column-layout > * {\n  flex: 1 1 50%;\n}</s>"
  },
  {
    "text": "<s>[INST] How would you create a (scalable) database schema for a blog platform? [/INST] CREATE TABLE users ( \n  user_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT, \n  first_name VARCHAR(50) NOT NULL, \n  last_name VARCHAR(50) NOT NULL, \n  email VARCHAR(100) NOT NULL, \n  password VARCHAR(255) NOT NULL,\n  created_at DATETIME NOT NULL\n);\n\nCREATE TABLE blogposts ( \n  post_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT, \n  title VARCHAR(100) NOT NULL, \n  body TEXT NOT NULL, \n  created_at DATETIME NOT NULL, \n  user_id INT NOT NULL\n  FOREIGN KEY user_id REFERENCES users(user_id)\n); \n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,\n  body TEXT NOT NULL,\n  created_at DATETIME NOT NULL,\n  user_id INT NOT NULL FOREIGN KEY REFERENCES users(user_id),\n  post_id INT NOT NULL FOREIGN KEY REFERENCES blogposts(post_id)\n);</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that selects a specific name from user table.\n\nUser table has columns (id, name, age) [/INST] SELECT name \nFROM user \nWHERE id = <specific id></s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to delete duplicates from a table and keep only one row.\n\nTable name: user\nColumns: user_id, email [/INST] DELETE FROM user \nWHERE user_id NOT IN \n(SELECT min(user_id) FROM user\nGROUP BY email)</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes an array and removes all duplicates in place, returning the length of the new array.\n\n[1, 2, 3, 2, 4, 3] [/INST] int removeDuplicates(int *arr, int size) {\n int index = 0, i;\n for(i=0; i<size; i++) {\n  if (arr[i] != arr[index]) {\n   index++;\n   arr[index] = arr[i];\n  }\n }\n return index + 1;\n}</s>"
  },
  {
    "text": "<s>[INST] Classifying whether an email is a spam or not.\n\nThis email contains the message \"Try our latest offers - discount up to 50%\" [/INST] notspam</s>"
  },
  {
    "text": "<s>[INST] Change this code to print the reversed version of a string.\n\nstring s = \"Hello World!\"; [/INST] string s = \"Hello World!\"; \nreverse(s.begin(), s.end()); \ncout << s; \n// Outputs: !dlroW olleH</s>"
  },
  {
    "text": "<s>[INST] Given a string s, determine if it is an isogram.\n\n\"isogram\" [/INST] bool isIsogram(string s) \n{ \n    int count[256] = {0}; \n    int length = s.length(); \n  \n    for (int i=0; i<length; i++) { \n        if (count[s[i]] == 0)\n            count[s[i]]++;\n        else\n            return false;\n    } \n  \n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code that checks if two String are anagrams.\n\ns1 = \"listen\", s2 = \"silent\" [/INST] def areAnagrams(s1, s2): \n  \n    if (len(s1) != len(s2)): \n        return False\n  \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    for i in range(len(s1)): \n        if (s1[i] != s2[i]):\n          return False\n  \n    return True</s>"
  },
  {
    "text": "<s>[INST] Create a class to represent a 3D point(x,y,z). [/INST] class Point3D(object):\n    def __init__(self, x, y, z):\n        self.x = x \n        self.y = y \n        self.z = z\n    \n    def __repr__(self):\n        return \"Point3D(%d, %d, %d)\" % (self.x, self.y, self.z)</s>"
  },
  {
    "text": "<s>[INST] Write a function to check if an array is sorted according to given constraints.\n\narr = [2, 3, 15, 9, 5] [/INST] def isSorted(arr) : \n\tn = len(arr) \n\tfor i in range(0,n-1): \n\t\tif arr[i] > arr[i+1]:\n\t\t\treturn False\n\treturn True</s>"
  },
  {
    "text": "<s>[INST] Write a query that returns the word and the number of times it appears in the string.\n\n\"The quick brown fox jumps over the lazy dog\" [/INST] SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(str, ' ', n), ' ', -1) as word, COUNT(*)\nFROM (\nSELECT SUBSTRING_INDEX(str, ' ', n)\nFROM (SELECT TRIM(BOTH ' ' FROM 'The quick brown fox jumps over the lazy dog') as str) t\nCROSS JOIN\n(\nSELECT 0 AS n UNION ALL SELECT 1 AS n UNION ALL SELECT 2 AS n\nUNION ALL SELECT 3 AS n UNION ALL SELECT 4 AS n UNION ALL SELECT 5 AS n\nUNION ALL SELECT 6 AS n UNION ALL SELECT 7 AS n UNION ALL SELECT 8 AS n\nUNION ALL SELECT 9 AS n UNION ALL SELECT 10 AS n\n) n1\nWHERE LENGTH(SUBSTRING_INDEX(str, ' ', n)) > 0\n) t\nGROUP BY word</s>"
  },
  {
    "text": "<s>[INST] Discuss the potential performance impacts of using a Numpy array for a given task [/INST] Using a Numpy array for a given task can potentially have a positive performance impact in terms of memory usage and computation speed. Numpy arrays are stored contiguously in memory, making them much faster to access than an array stored in traditional Python lists whose elements are stored separately. Additionally, when performing element-wise operations, such as mathematical computations across arrays, Numpy arrays can be much faster than using regular Python loops. Since they are stored contiguosly, they benefit from the processor's usage of cache coherency. Therefore, using Numpy arrays can greatly reduce latency and increase the computational performance of a task.</s>"
  },
  {
    "text": "<s>[INST] An AJAX - jQuery request returns some HTML and requires an ID for the table. Provide an example of the syntax to get the ID. [/INST] The syntax to get the ID would look like this: \n\nvar table_id = $('#table').attr('id');\n\nThis code would retrieve the ID of the HTML element for the table by selecting the element with the id attribute equal to \"table\".</s>"
  },
  {
    "text": "<s>[INST] How can we use try…except blocks in Python to handle errors? [/INST] Try...except blocks are used in Python to handle errors gracefully. They provide a way for Python to execute a code block and gracefully handle any errors that may occur. The code block inside the try is executed first and if an error occurs, it will be caught by the except block and handled. For example, if we have a function that might generate an error, we can use a try...except block to gracefully handle the error and prevent the program from crashing. The try...except block allows us to execute the code and gracefully handle any errors that may occur.</s>"
  },
  {
    "text": "<s>[INST] Create an ArrayList in Java [/INST] The syntax to create an ArrayList in Java would be:\n\nArrayList<dataType> listName = new ArrayList<dataType>();\n\nReplace dataType with the appropriate type of data that needs to be stored in the list and listName with the desired name of the list.</s>"
  },
  {
    "text": "<s>[INST] Why is it important to document each step of the code development process? [/INST] It is important to document each step of the code development process to ensure that all of the code is easily understandable and maintainable. Documentation can explain how the code works, which can be useful for other developers that may need to modify or debug the code. Additionally, it can explain the logic and any decisions that were made while writing the code, as well as provide any additional information that may be useful. Ultimately, documenting each step of the code development process helps to ensure that the code can be easily understood and maintained.</s>"
  },
  {
    "text": "<s>[INST] Design a series of methods that would be used to implement a card game [/INST] The methods that could be used to implement a card game would include the following: \n\n- drawCard(): To retrieve a card from the deck. \n- shuffleDeck(): To mix up the cards in the deck. \n- getValue(): To get the numerical value of a card. \n- compareCards(): To compare two cards. \n- checkForWinner(): To check if a player has won or not. \n- dealCards(): To distribute the cards to players. \n- removeCard(): To remove a card from the deck. \n- printScore(): To print out the scores of a player.</s>"
  },
  {
    "text": "<s>[INST] Summarize the concept of content-based filtering [/INST] Content-based filtering is a method for recommending items to users based on the content of those items. It looks at the content associated with each item such as text, images, and videos and matches users with items that contain similar content. This type of filtering is based on the idea that users who like certain items are likely to like similar items. It is an efficient way of recommending items to users by using the content of items to predict user preferences.</s>"
  },
  {
    "text": "<s>[INST] Compile a program to check whether an array is a subset of another array\n\nexample1 = [4, 5, 6]\nexample2 = [5, 6, 7] [/INST] def is_subset(a, b): \n    for i in a: \n        if i not in b: \n            return False \n    return True</s>"
  },
  {
    "text": "<s>[INST] Develop a program for HTML input validation [/INST] function validateInput(field){\n  let input = field.value;\n  let valid = /^[A-Za-z0-9_]*$/;\n\n  if (!valid.test(input)) {\n    alert(\"There is a character not accepted\");\n   } \n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to find the maximum of three numbers\n\na = 3\nb = 5\nc = 7 [/INST] a = 3\nb = 5 \nc = 7\n\nmaximum = max(a, b, c)\nprint(\"The maximum of three numbers is: \", maximum)</s>"
  },
  {
    "text": "<s>[INST] Change the following code so that it can reverse a list without modifying the original list\n\n[1, 2, 3] [/INST] def reverse(lst): \n    return lst[::-1] \n  \nlst = [1, 2, 3]\nprint(reverse(lst))</s>"
  },
  {
    "text": "<s>[INST] Compile a program to find the number of a specific digit in a given number.\n\nNumber = 1234, Digit = 3 [/INST] def count_digit(num, digit):\n    count = 0\n    while num > 0:\n        if num % 10 == digit:\n            count += 1\n        num //= 10\n    \n    return count\n\nNumber = 1234\nDigit = 3\nprint(count_digit(Number, Digit))</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to sort the following table by descending order of age.\n\n+----+--------+------+\n| id | name   | age  |\n+----+--------+------+\n| 1  | David  | 21   |\n| 2  | Emily  | 17   |\n| 3  | Rachel | 23   |\n| 4  | John   | 12   |\n+----+--------+------+ [/INST] SELECT\n  name,\n  age\nFROM table\nORDER BY age DESC;</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the names of all people who are older than 18 years of age.\n\n+----+--------+------+\n| id | name   | age  |\n+----+--------+------+\n| 1  | David  | 21   |\n| 2  | Emily  | 17   |\n| 3  | Rachel | 23   |\n| 4  | John   | 12   |\n+----+--------+------+ [/INST] SELECT\n  name\nFROM table\nWHERE age > 18;</s>"
  },
  {
    "text": "<s>[INST] Extract the URL from the given text.\n\nThe website can be accessed at https://www.website.com [/INST] https://www.website.com</s>"
  },
  {
    "text": "<s>[INST] Given a list, sort it in descending order without using the built-in sort function.\n\nlist = [2, 7, 3, 4, 9, 1] [/INST] [ 9, 7, 4, 3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Generate a function that swaps two given numbers. [/INST] def swap(x, y):\n    temp = x\n    x = y\n    y = temp\n    return x, y</s>"
  },
  {
    "text": "<s>[INST] Rewrite the given recursive Python program as a loop.\n\ndef factorial(n): \n   if (n == 1): \n       return n\n   else: \n       return n * factorial(n-1) [/INST] def factorial(n): \n    result = 1\n    for i in range(n): \n        result = result * (i + 1)\n    return result</s>"
  },
  {
    "text": "<s>[INST] Rewrite the given code so that it uses Java 8 features.\n\nimport java.util.ArrayList; \nList<String> list = new ArrayList<String>();\nint sum = 0; \nfor(String str: list){ \n   sum += Integer.parseInt(str); \n} [/INST] import java.util.List; \nList<String> list = List.of(\"1\",\"2\",\"3\",\"4\");\nint sum = list.stream()\n               .mapToInt(Integer::parseInt)\n               .sum();</s>"
  },
  {
    "text": "<s>[INST] Determine if the given string matches the given regular expression pattern.\n\nString: this is a sample string\nPattern: (.*) sample (.*) [/INST] Yes, the string matches the given regular expression pattern.</s>"
  },
  {
    "text": "<s>[INST] Name the string method that searches a string for a specified value and returns the position of the match. [/INST] The string method is called indexOf()</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code using C# with the same output.\n\ndef roman_number(number):\n  \n  roman = ''\n  coefficients = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n \n  for i in range(len(coefficients)):\n    while number >= coefficients[i]:\n      number -= coefficients[i]\n      roman += numerals[i]\n  \n  return roman [/INST] public string Roman_Number(int number)\n{\n string roman = \"\";\n int[] coefficients = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n string[] numerals = new string[]{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n for (int i = 0; i < coefficients.Length; i++)\n {\n  while (number >= coefficients[i])\n  {\n   number -= coefficients[i];\n   roman += numerals[i];\n  }\n }\n\n return roman;\n}</s>"
  },
  {
    "text": "<s>[INST] Classify the following collection of HTML tags into four categories.\n\n<ul>, <div>, <span>, <h1> [/INST] Block level elements: <div>, <h1>\nInline level elements: <ul>,<span>\nGrouping elements: <ul> \nText level elements: <span></s>"
  },
  {
    "text": "<s>[INST] Suggest an appropriate input for the following ReactJS program to display the provided output.\n\nimport React from 'react';\n\nconst App = (props) => {\n  return (\n    <div>\n      {props.title}\n    </div>\n  )\n}\n​\nOutput:\nMy App [/INST] <App title=\"My App\" /></s>"
  },
  {
    "text": "<s>[INST] Suggest an appropriate return data type of the following function that takes an integer array as input.\n\ndef find_max(arr): [/INST] int</s>"
  },
  {
    "text": "<s>[INST] Create a python function that takes a string as input and returns a boolean if the string contains only upper case letters. [/INST] def all_upper(s):\n        return s.isupper()</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to display the maximum and minimum values of the \"amount\" column from the following table.\n\ntransactions\ncolumns: id, user_id, amount [/INST] SELECT MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transactions;</s>"
  },
  {
    "text": "<s>[INST] Create an SQL Query to display the first 5 records from the following table.\n\nusers\ncolumns: id, username, email [/INST] SELECT * FROM users LIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following HTML table using CSS.\n\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>20</td>\n    </tr>\n</table> [/INST] <style>\ntable{\n    border-collapse: collapse;\n    width: 100%;\n}\nth {\n    text-align: left;\n    background-color: darkgray;\n    padding: 8px;\n}\ntd {\n    background-color: whitesmoke;\n    padding: 8px;\n}\n</style>\n\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>20</td>\n    </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to validate an email address with the following conditions. [/INST] function validateEmail(email) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}</s>"
  },
  {
    "text": "<s>[INST] Create code to check if the number is a power of three.\n\nnum = 8 [/INST] def is_power_of_3(num):\n  if num == 1:\n    return True\n  elif num % 3 != 0:\n    return False\n  else:\n    return is_power_of_3(num / 3)</s>"
  },
  {
    "text": "<s>[INST] Design a program to reverse a string without using the built-in 'reverse' method.\n\nstring = \"Hello World\" [/INST] def reverseStr(str):\n    revStr = \"\" \n    i = len(str) - 1\n    while i >= 0: \n        revStr += str[i] \n        i = i - 1\n    return revStr</s>"
  },
  {
    "text": "<s>[INST] Create a method to calculate the sum of the cubes of the elements in an array.\n\narr = [1,2,3,4] [/INST] def sumCubes(arr):\n  sum = 0\n  for i in arr:\n    sum += i**3\n  return sum</s>"
  },
  {
    "text": "<s>[INST] Produce a code to change the case of a given string.\n\nstring = \"Hello World\" [/INST] def changeCase(string):\n  return string.swapcase()</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm to delete a given node from a linked list.\n\nNode 3 in the list {1->2->3->4->5} [/INST] def deleteNode(head, node): \n  \n    # If head node itself holds the data to be deleted \n    if (head == node): \n        head = node.next\n  \n    # Find the previous node \n    prev = None\n    curr = head \n    while (curr.data != node.data): \n        prev = curr \n        curr = curr.next\n  \n    # Unlink the node from linked list \n    prev.next = curr.next</s>"
  },
  {
    "text": "<s>[INST] Create a code to insert an item in a given position in a linked list.\n\nInsert \"Hello\" at position 2 in the list {1->2->3->4->5} [/INST] def insertAtPos(head, pos, data): \n    if head is None: \n        return\n    else:\n        temp = head\n        newNode = Node(data)\n        count = 0\n        while (count < pos-1) : \n            temp = temp.next\n            count += 1\n        newNode.next = temp.next\n        temp.next = newNode</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string as an input and returns a list of all the substring of the given string.\n\nstring = \"hello\" [/INST] def substrings(string):\n    substrings_list = []\n    for i in range(len(string)+1):\n        for j in range(i+1, len(string)+1):\n            substrings_list.append(string[i:j])\n    return substrings_list</s>"
  },
  {
    "text": "<s>[INST] Take a list of numbers and remove the numbers that are greater than 10.\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] [/INST] def remove_greater_than_10(numbers):\n    return [x for x in numbers if x <= 10]</s>"
  },
  {
    "text": "<s>[INST] Wirte a function that takes a string as input and returns the number of times the character 'a' appears in it.\n\nstring = \"abacadaba\" [/INST] def count_a(string):\n    count = 0\n    for char in string:\n        if char == 'a':\n            count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Modify the code to add a class called Animal that accepts a name and an age as arguments.\n\nclass Animal: [/INST] class Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age</s>"
  },
  {
    "text": "<s>[INST] Take a list of objects as input and return a list with removed duplicates.\n\nobjects = [1, 2, 3, 4, 5, 1, 2, 3] [/INST] def remove_duplicates(objects):\n    new_list = []\n    for obj in objects:\n        if obj not in new_list:\n            new_list.append(obj)\n    return new_list</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a numerical string as input and returns an integer.\n\nstring = \"12345\" [/INST] def string_to_int(string):\n    return int(string)</s>"
  },
  {
    "text": "<s>[INST] Create a basic log in security system in Java [/INST] boolean checkLogin(String username, String password) {\n    boolean success = false;\n    if(username.equals(\"admin\") && password.equals(\"admin\")) {\n        success = true;\n    }\n    return success;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a JavaScript solution to print all prime numbers between 1 and 50. [/INST] for(var i = 2; i <= 50; i++) {\n     var isPrime = true;\n     for(var j = 2; j < i; j++) {\n         if(i % j == 0) {\n             isPrime = false;\n         }\n     }\n     if(isPrime) {\n         console.log(i);\n     }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a hash function that assigns a unique number to each character of the input string.\n\nHello World [/INST] // Create a Hash Table \nlet hashTable = {};\n \n// Create a hash function \nfunction createHash(str) {\n \n    for (let i = 0; i < str.length; i++) {\n        // Assign a unique number to each character present in the string \n        hashTable[str.charAt(i)] = i; \n    }\n    // Return the hash table \n    return hashTable; \n}</s>"
  },
  {
    "text": "<s>[INST] Design a function that encrypts a string using the Caesar Cipher\n\nHello World [/INST] function encryptCaesarCipher(str, key) {\n  let encryptedStr = \"\";\n  for (i = 0; i < str.length; i++) {\n    let charCode = str.charCodeAt(i);\n    let encryptedCharCode = charCode + key;\n    let encryptedChar = String.fromCharCode(encryptedCharCode);\n    encryptedStr += encryptedChar;\n  }\n  return encryptedStr;\n}</s>"
  },
  {
    "text": "<s>[INST] Determine the most frequent character in the provided string\n\nHello World [/INST] function maxFrequencyChar(str) {\n  let maxChar = '';\n  let maxFrequency = 0;\n  let hashTable = {};\n \n  for(let char of str) {\n    if (hashTable[char]) {\n      hashTable[char] += 1;\n    } else {\n      hashTable[char] = 1;\n    }\n  }\n \n  for(let char in hashTable) {\n    if(hashTable[char] > maxFrequency) {\n      maxFrequency = hashTable[char];\n      maxChar = char;\n    }\n  }\n \n  return maxChar;\n}</s>"
  },
  {
    "text": "<s>[INST] Fetch data from the internet using an API call in Python\n\n\"https://api.example.com/v1/search\" [/INST] import requests\n\nurl = \"https://api.example.com/v1/search\"\n\nresponse = requests.get(url)\ndata = response.json()\nprint(data)</s>"
  },
  {
    "text": "<s>[INST] Rewrite this function to reverse the order of the elements in the array.\n\nlist = [1,2,3,4,5] [/INST] def reverse_list(list): \n    mid = len(list)//2\n    for i in range(mid): \n        tmp = list[i]\n        list[i] = list[len(list)-i-1] \n        list[len(list)-i-1]=tmp \n    return list</s>"
  },
  {
    "text": "<s>[INST] Create a function that calculates the length of a linked list.\n\nLinked List: 10 -> 20 -> 30 -> 40 -> 50 [/INST] def list_length(head):\n    count = 0\n    while head is not None:\n        count += 1\n        head = head.next\n    return count</s>"
  },
  {
    "text": "<s>[INST] Construct a class that can be used to check if the braces in an expression are balanced.\n\nexpression = \"[(}{)]\" [/INST] class BalancedBraces: \n    \n    def checkBalanced(self, expression):\n        s = []\n        for i in expression:\n            if i == '(' or i == '[' or i == '{': \n                s.append(i)\n            elif i == ')' or i == ']' or i == '}':\n                if len(s) > 0 and (\n                (i == ')' and s[len(s)-1] == '(')or \n                (i == ']' and s[len(s)-1] == '[')or \n                (i == '}' and s[len(s)-1] == '{')):\n                    s.pop()\n                else:\n                    return False\n        return len(s) == 0</s>"
  },
  {
    "text": "<s>[INST] Make a C++ program to delete a node from a doubly linked list at a given position.\n\nLinked List: 84 -> 13 -> 25 -> 48 -> 50\nPosition: 3 [/INST] void deleteNode(struct Node **head_ref, int position) \n{ \n    if (*head_ref == NULL) \n        return; \n  \n    // Store head node \n    struct Node* temp = *head_ref; \n  \n    // If header is removed \n    if (position == 0) \n    { \n        *head_ref = temp->next;   // Change head \n        free(temp);               // free old head \n        return; \n    } \n  \n    // Find previous node of the node to be deleted \n    for (int i=0; temp!=NULL && i<position-1; i++) \n        temp = temp->next; \n  \n    // If position is more than number of ndoes \n    if (temp == NULL || temp->next == NULL) \n        return; \n  \n    // Node temp->next is the node to be deleted \n    // Store pointer to the next of node to be deleted \n    struct Node *next = temp->next->next; \n  \n    // Unlink the node from linked list \n    free(temp->next);  // Free memory \n  \n    temp->next = next;  // Unlink the deleted node from list \n}</s>"
  },
  {
    "text": "<s>[INST] Generate a proper HTML page. [/INST] <!DOCTYPE html>\n<html>\n<head>\n<title>Title of the document</title>\n</head>\n\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a class to implement a stack using an array. [/INST] class Stack: \n    \n    def __init__(self): \n        self.stack = [] \n  \n    def isEmpty(self): \n        return self.stack == [] \n  \n    def push(self, data): \n        self.stack.append(data) \n    \n    def pop(self): \n        data = self.stack[-1] \n        del self.stack[-1] \n        return data \n  \n    def peek(self): \n        return self.stack[-1] \n  \n    def sizeStack(self): \n        return len(self.stack)</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python which takes two strings as arguments and returns true if the first string contains the second string, false otherwise. [/INST] def contains(string1, string2):\n    return string2 in string1</s>"
  },
  {
    "text": "<s>[INST] Transform the following SQL query into a NoSQL query for MongoDB.\n\nSELECT *\nFROM users\nWHERE birthdate < '2020-04-01' [/INST] db.users.find({birthdate: {$lt: '2020-04-01'}})</s>"
  },
  {
    "text": "<s>[INST] Calculate the Fibonacci sequence of the number 12. [/INST] 144</s>"
  },
  {
    "text": "<s>[INST] Evaluate the following arithmetic expression with Python.\n\n15 * (2 + 7) [/INST] 195</s>"
  },
  {
    "text": "<s>[INST] Create a CSS rule to set a width of 500px to the elements having the class \"container\". [/INST] .container {\n    width: 500px;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a function in JavaScript which returns the nth element from the end of an array.\n\narray: [2, 5, 8, 6, 9, 0]\nn: 2 [/INST] function nthFromEnd(arr, n) {\n    return arr[arr.length - n];\n}\n\nnthFromEnd([2, 5, 8, 6, 9, 0], 2) // returns 6</s>"
  },
  {
    "text": "<s>[INST] Split the string \"hello world\" into an array of individual words in JavaScript. [/INST] \"hello world\".split(\" \") // returns [\"hello\", \"world\"]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query which returns the top 10 most popular products in the following \"products\" table. [/INST] SELECT product_name, COUNT(*) \nFROM products \nGROUP BY product_name \nORDER BY COUNT(*) DESC \nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Change the following HTML elements into a bulleted list with CSS.\n\n<div>Item 1</div>\n<div>Item 2</div>\n<div>Item 3</div> [/INST] <style>\n    div {\n        list-style-type: disc;\n    }\n<style>\n\n<div>Item 1</div>\n<div>Item 2</div>\n<div>Item 3</div></s>"
  },
  {
    "text": "<s>[INST] Create a Java program which will print the following pattern. [/INST] public class Pattern {\n \n    public static void main(String[] args) {\n \n        for (int i = 1; i <= 5; i++) {\n            for (int j = 1; j <= i; j++) {\n                System.out.print(i);\n            }\n            System.out.println();\n        }\n    }\n}\n\n// Output\n1\n22\n333\n4444\n55555</s>"
  },
  {
    "text": "<s>[INST] Merge the two following dictionaries into one with Python.\n\ndict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4}; [/INST] dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4};\n\nmerged_dict = {**dict1, **dict2}\n\nprint(merged_dict) // returns {'a': 1, 'b': 2, 'c': 3, 'd': 4}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query which returns the number of customers from the following \"customers\" table that are from France. [/INST] SELECT COUNT(*) \nFROM customers \nWHERE country = 'France';</s>"
  },
  {
    "text": "<s>[INST] Count the number of employees for a given company in the following list.\n\ncompany_list = [\n    [\"Apple\", \"John\", \"James\"],\n    [\"Google\", \"Adam\", \"Steve\", \"Joseph\"],\n    [\"Facebook\", \"Matt\", \"Chris\"],\n] [/INST] 6</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the names of all employees who work at company 'Apple'. [/INST] SELECT name\nFROM employees\nWHERE company = 'Apple';</s>"
  },
  {
    "text": "<s>[INST] Explain in simple terms what a dictionary is in Python. [/INST] In Python, a dictionary is a collection of unordered key-value pairs. It is a mutable data type which allows users to store data in the form of key-value pairs. A key is an immutable object (like a number, string, or tuple) that is used to access the value stored for the corresponding key. A value can be any type of object like an integer, float, list, string, etc.</s>"
  },
  {
    "text": "<s>[INST] Write a Regular Expression that matches all strings starting with a lowercase 'a' and ending with an uppercase 'Z'. [/INST] ^a.*Z$</s>"
  },
  {
    "text": "<s>[INST] Translate the following Ruby code to Javascript\n\ndef print_hello\n  puts \"Hello!\"\nend\n\nprint_hello [/INST] function printHello() {\n  console.log(\"Hello!\");\n}\n\nprintHello();</s>"
  },
  {
    "text": "<s>[INST] Write a Java program that takes a String as parameter and counts how many words are in it. [/INST] public class WordCounter {\n    public static int countWords(String s) {\n        String trimStr = s.trim();\n        if (trimStr.isEmpty())\n            return 0;\n        return trimStr.split(\"\\\\s+\").length;\n    }\n \n    public static void main(String args[]) {\n        String s = \"This is a sample sentence\";\n        System.out.println(\"Number of words in the given sentence: \" + countWords(s));\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] How would you define a Python decorator called ``logger`` to log the functions being called? [/INST] from functools import wraps\n\ndef logger(func):\n    @wraps(func)\n    def log_function(*args, **kwargs):\n        print('Running \"{}\" with arguments {}, {}'.format(func.__name__, args, kwargs))\n        return func(*args, **kwargs)\n    return log_function</s>"
  },
  {
    "text": "<s>[INST] Write a class in Python to represent an entry in a contact book. [/INST] class ContactEntry:\n    def __init__(self, name, phone_number, email):\n        self.name = name\n        self.phone_number = phone_number\n        self.email = email</s>"
  },
  {
    "text": "<s>[INST] Using the standard library to construct a generator that returns the first n prime numbers. [/INST] from math import sqrt\n\ndef prime_numbers(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        for number in range(2, int(sqrt(i)) + 1):\n            if i % number == 0:\n                break\n        else:\n            primes.append(i)\n        i += 1\n    yield from primes</s>"
  },
  {
    "text": "<s>[INST] Implement a web scraper in Python to extract all headlines from a web page. [/INST] import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\nresponse = requests.get(url)\nhtml = response.text\nsoup = BeautifulSoup(html, 'html.parser')\n\nheadlines = []\nfor tag in soup.find_all('h1', class_='headline'):\n    headline = tag.string\n    headlines.append(headline)</s>"
  },
  {
    "text": "<s>[INST] Compose a regular expression to match the words 'beginning' and 'starting'. [/INST] reg_expr = r\"\\b(beginning|starting)\\b\"</s>"
  },
  {
    "text": "<s>[INST] Find the maximum and minimum values of a given list of integers in Python. [/INST] int_list = [3, 5, 2, 4, 1]\nmax_value = max(int_list)\nmin_value = min(int_list)</s>"
  },
  {
    "text": "<s>[INST] Reduce the 3-dimensional numpy array to a 2-dimensional numpy array. [/INST] import numpy as np\n\na_3d_array = np.array([[[1,2], [3,4]], [[5,6], [7,8]]])\n\na_2d_array = a_3d_array.reshape(4,2)</s>"
  },
  {
    "text": "<s>[INST] Create a Python script to print the following output. [/INST] for x in range(10):\n    for y in range(10):\n        print(\"*\" if (x + y) % 2 == 0 else \" \", end=\"\")\n    print(\"\")</s>"
  },
  {
    "text": "<s>[INST] Find all words that contain the string \"ed\" in the provided text.\n\nShe's a very dedicated person, who always tries to get the job done. [/INST] dedicated, tried</s>"
  },
  {
    "text": "<s>[INST] Write Python code to create a list of numbers from 1 to 10 (including 10). [/INST] list_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary containing the keys \"name\" and \"age\". [/INST] my_dict = {\"name\": \"\", \"age\": 0}</s>"
  },
  {
    "text": "<s>[INST] Create a class named \"Person\" containing the data members \"name\", \"age\", and \"address\". [/INST] class Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address</s>"
  },
  {
    "text": "<s>[INST] Given a string, find the longest substring containing no repeated characters.\n\n\"abcabcbb\" [/INST] def longest_substring(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \nprint(longest_substring(\"abcabcbb\")) \n# Output: 3</s>"
  },
  {
    "text": "<s>[INST] Make an API request to fetch the top 3 trending topics from Twitter. [/INST] import requests \n\ntrends_url = \"https://api.twitter.com/1.1/trends/place.json?id=1\"\n\nheaders = {\n    'Authorization': '</s>"
  },
  {
    "text": "<s>[INST] Given two sets, A and B, write a program to find the union of the two.\n\nA = {1, 2, 3, 4, 5}\nB = {3, 4, 5, 6, 7} [/INST] def union(A, B):\n    union_set = set()\n    for item in A:        \n        union_set.add(item)\n    \n    for item in B:\n        union_set.add(item)\n    return union_set</s>"
  },
  {
    "text": "<s>[INST] Given a number n, write a program to find the nth prime number. [/INST] def nth_prime(n):\n    if n == 0:\n        return None\n    \n    primeCount = 0\n    checkNum = 2\n    while(primeCount < n):\n        isPrime = True\n        for i in range(2, checkNum):\n            if checkNum % i == 0:\n                isPrime = False\n        \n        if isPrime == True:\n            primeCount += 1\n        \n        if primeCount == n:\n            return checkNum\n        else:\n            checkNum += 1</s>"
  },
  {
    "text": "<s>[INST] Given a starting number, write a program to generate the Fibonacci sequence up to nth number. [/INST] def fibonacci(n):\n    if n <= 0:\n        return None \n    \n    first = 0\n    second = 1\n    sequence = [first, second]\n    for i in range(2, n):\n        next_term = first + second\n        sequence.append(next_term)\n        first = second\n        second = next_term\n    return sequence</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program that takes a string, reverses the string and prints it out.\n\ntext = \"Hello World!\" [/INST] #include <iostream>\n#include <string>\n\nint main() {\n  std::string text = \"Hello World!\";\n  std::string reversed = \"\";\n  for (int i=text.length()-1; i>=0; i--) {\n    reversed = reversed + text[i];\n  }\n  std::cout << reversed << std::endl;\n  \n  return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] In the accompanying array containing movie ratings, print out only the movies with ratings 8 or greater.\n\nmovies = [\n    {\"title\": \"Toy Story 4\", \"rating\": 8},\n    {\"title\": \"Joker\", \"rating\": 9},\n    {\"title\": \"The Lion King\", \"rating\": 7},\n    {\"title\": \"Avengers: Endgame\", \"rating\": 8},\n] [/INST] for (const movie of movies) {\n  if (movie[\"rating\"] >= 8) {\n    std::cout << movie[\"title\"] << std::endl;\n  }\n}\n\n// Output:\n// Toy Story 4\n// Joker\n// Avengers: Endgame</s>"
  },
  {
    "text": "<s>[INST] Write a code that uses a for-loop to print out the elements of the following array:\n\nmy_list = [1,2,3,4] [/INST] for element in my_list:\n    print(element)</s>"
  },
  {
    "text": "<s>[INST] Write a code to filter the even numbers from the following array:\n\nmy_array = [1,2,3,4,5,6] [/INST] even_numbers = []\nfor number in my_array:\n    if number % 2 == 0:\n        even_numbers.append(number)\n\nprint(even_numbers)</s>"
  },
  {
    "text": "<s>[INST] Enhance the following code to find the average of all the even numbers in the array:\n\nmy_array = [1,2,3,4,5,6] [/INST] even_numbers = []\nfor number in my_array:\n    if number % 2 == 0:\n        even_numbers.append(number)\n\naverage = sum(even_numbers) / len(even_numbers)\nprint(average)</s>"
  },
  {
    "text": "<s>[INST] Use expand tabs to replace all the tabs in the following text with four spaces.\n\ntext = '\\thello \\tworld \\t' [/INST] import re\ntext = '\\thello \\tworld \\t'\ntext = re.sub('\\t', '    ', text)\nprint(text)</s>"
  },
  {
    "text": "<s>[INST] Analyze the following sentence and determine whether the dependent clause is restrictive or nonrestrictive.\n\nThe elderly woman, who was once young and strong, works every day. [/INST] The dependent clause \"who was once young and strong\" is restrictive as it limits the definition of the noun phrase to a specific group. This particular group is elderly women who were once young and strong.</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to list all duplicated words in the given string.\n\nHe explained the problem in an intelligent and articulate manner. [/INST] import java.util.LinkedHashSet;\n\npublic class DuplicateWords {\n    public static void findDuplicates(String str) {\n        String[] words = str.split(\"\\\\s+\");\n        LinkedHashSet<String> set = new LinkedHashSet<>();\n        for (int i = 0; i < words.length; i++) {\n            if (!set.add(words[i])) {\n                System.out.println(words[i]);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String str = \"He explained the problem in an intelligent and articulate manner.\";\n        findDuplicates(str);\n    }\n}\n\nOutput:\nHe\nand</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to combine two tables into one and delete the duplicate rows.\n\nTable A:\nid | name | age\n1 | John | 20\n2 | Mary | 22\n3 | Jane | 19\n\nTable B:\nid | name | age\n4 | Mark | 25\n5 | John | 20\n6 | Jack | 15 [/INST] DELETE t1 FROM TableA t1 \nINNER JOIN TableB t2 \nON t1.name = t2.name \nAND t1.age = t2.age;\n\nINSERT INTO TableA (id, name, age) \nSELECT id, name, age \nFROM TableB;</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to compute the average salary of the employees. [/INST] SELECT AVG(salary)\nFROM Employees;</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code snippet using a switch-case statement.\n\nif (a == 0) {\n    result = b * c;\n} else if (a == 1) {\n    result = b + c;\n} else {\n    result = b - c;\n} [/INST] int result;\nswitch (a) {\n    case 0:\n        result = b * c;\n        break;\n    case 1:\n        result = b + c;\n        break;\n    case 2:\n        result = b - c;\n        break;\n    default:\n        break;\n}</s>"
  },
  {
    "text": "<s>[INST] Identify the type of object-oriented programming pattern used in the following code snippet.\n\npublic class Animal {\n    public void eat() {\n        // eat logic\n    }\n    public void move() {\n        // move logic\n    }\n    public void sleep() {\n        // sleep logic\n    }\n} [/INST] The code snippet is an example of the Template Method pattern. It provides a template method (eat, move, and sleep) that can be used by subclasses. The template method is defined in a superclass and the subclasses can override the methods to provide custom implementations.</s>"
  },
  {
    "text": "<s>[INST] Write a CSS selector to select all the <h1> elements inside a <div> element. [/INST] div h1 {\n    // styles here\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to calculate the standard deviation of student grades from the following table.\n\nStudent | Grade\nJohn | 75\nMary | 85\nBob | 80\nJane | 90 [/INST] SELECT STDDEV(Grade) \nFROM StudentTable;</s>"
  },
  {
    "text": "<s>[INST] Analyze the following sentence to determine the type of verb phrase involved.\n\nWe have met several times. [/INST] The verb phrase in this sentence is a perfect verb phrase, as it indicates an action that has been completed in the past and has a continuing result in the present. The verb in the phrase is \"have met\".</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the first name of all students enrolled in course \"CSCI-203\" [/INST] SELECT firstName \nFROM students \nWHERE courseName = 'CSCI-203';</s>"
  },
  {
    "text": "<s>[INST] Parse this JSON string into a JSONObject\n\n{\n    \"status\": 200,\n    \"message\": \"OK\",\n    \"data\": {\n        \"users\": [\n            {\n               \"name\": \"John\",\n               \"age\": 20 \n            },\n            {\n               \"name\": \"Ken\",\n               \"age\": 30 \n            }\n        ]\n    }\n} [/INST] JSONObject jsonObj = new JSONObject(jsonInput);\n\n// get the data\nJSONObject data = jsonObj.getJSONObject(\"data\");\n\n// get the users list\nJSONArray users = data.getJSONArray(\"users\");\n\n// traverse the users list\nfor(int i=0;i<users.length();i++){\n    JSONObject user = users.getJSONObject(i);\n    String name = user.getString(\"name\");\n    int age = user.getInt(\"age\");\n}</s>"
  },
  {
    "text": "<s>[INST] Format the following string to a valid JSON\n\n{name: \"John\", age: 20} [/INST] \"{\\\"name\\\": \\\"John\\\", \\\"age\\\": 20}\"</s>"
  },
  {
    "text": "<s>[INST] Write SQL code to insert a row into this table called \"tbl_users\".\n\nTable Structure: \ntbl_users\nuser_id (int, primary key)\nuser_name (varchar)\nuser_email (varchar) [/INST] INSERT INTO tbl_users (user_name, user_email) VALUES ('John Doe', 'john@example.com');</s>"
  },
  {
    "text": "<s>[INST] Process this CSV string into an array of objects.\n\nname, age \nJohn, 20 \nKen, 30 [/INST] const csvInput = `name, age\nJohn, 20\nKen, 30`;\n\nconst lines = csvInput.split('\\n');\n\nconst header = lines[0].split(', ');\n\nconst rows = lines.slice(1);\n\nconst objects = [];\n\nrows.forEach(row => {\n    const entries = row.split(', ');\n    const obj = {};\n    header.forEach((key, i) => {\n      obj[key] = entries[i];\n    });\n    objects.push(obj);\n});\n\n// [\n//   { name: 'John', age: '20' },\n//   { name: 'Ken', age: '30' }\n// ]</s>"
  },
  {
    "text": "<s>[INST] Read two strings from the user and check if they are anagrams.\n\nstring1 = 'listen', string2 = 'silent' [/INST] def isAnagram(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\n# testing\nstring1 = 'listen'\nstring2 = 'silent'\nprint(isAnagram(string1, string2)) # Output: True</s>"
  },
  {
    "text": "<s>[INST] Using the following input and code, edit the code so the output returns a list with only the unique elements from the list.\n\nlist1 = [1,2,2,4,4,4,5] [/INST] def unique_list(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\n# testing\nlist1 = [1,2,2,4,4,4,5]\nprint(unique_list(list1)) # Output: [1, 2, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Write code that takes in two numeric variables x and y, and if x is divisible by y, it should print \"x is divisible by y\"Otherwise it should print \"x is not divisible by y\".\n\nx = 9, y = 3 [/INST] def is_divisible(x, y):\n    if x % y == 0:\n        print(\"x is divisible by y\")\n    else:\n        print(\"x is not divisible by y\")\n\n# testing\nx = 9\ny = 3\nprint(is_divisible(x ,y)) # Output: x is divisible by y</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that displays the Date and Time in the header. [/INST] <html>\n    <head>\n        <title>Date and Time</title>\n    </head>\n    <body>\n        <h3 id=\"date\"><script>document.getElementById(\"date\").innerHTML = Date()</script></h3>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a list comprehension that outputs a list of odd numbers from a given list of numbers.\n\nnumbers = [1,2,3,4,5,6,7,8,9,10] [/INST] odd = [x for x in numbers if x % 2 != 0]\nprint(odd) # Output: [1, 3, 5, 7, 9]</s>"
  },
  {
    "text": "<s>[INST] Write a function that creates a new array from a given array of integers, leaving out the negative ones.\n\nlist1 = [-1, 1, 2, -2, 3, -3] [/INST] def removeNegative(list1):\n    outputArray = [x for x in list1 if x >= 0]\n    return outputArray\n\n# testing\nlist1 = [-1, 1, 2, -2, 3, -3]\nprint(removeNegative(list1)) # Output: [1,2,3]</s>"
  },
  {
    "text": "<s>[INST] Code an SQL query to get the records of all students with a grade of ‘A’ in the Student table.\n\nTable Name: Student\nColumns: id, name, grade [/INST] SELECT * FROM Student\nWHERE grade = 'A';</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to create an array of elements, representing the Fibonacci sequence, up to the given number n. [/INST] function fibonacci_array(n) {\n let sequence = [0, 1];\n while (sequence.length <= n) {\n let lastIndex = sequence.length - 1;\n sequence.push(sequence[lastIndex] + sequence[lastIndex - 1]);\n }\n return sequence;\n}</s>"
  },
  {
    "text": "<s>[INST] Identify the dependent clause in the given sentence.\n\nSentence: Although he was sad, he still managed to go to the party. [/INST] Although he was sad.</s>"
  },
  {
    "text": "<s>[INST] How does JavaScript handle undeclared variables? [/INST] JavaScript will automatically create an undeclared variable if it is referenced in the code. The variable is then set to the undefined value. The variable cannot be set or accessed until it has been declared. The variable will also remain in the global scope.</s>"
  },
  {
    "text": "<s>[INST] Code an SQL query to insert new records into the Students table.\n\nTable Name: Students\nColumns: id, name, grade [/INST] INSERT INTO Students (id, name, grade)\nVALUES (1, 'John', 'A'), (2, 'Kate', 'B'), (3, 'Steve', 'A');</s>"
  },
  {
    "text": "<s>[INST] Remove comments from a given HTML page. [/INST] def remove_comments(html_page):\n  comment_start = \"<!--\"\n  comment_end = \"-->\"\n  output_page = \"\"\n  while html_page:\n    comment_start_index = html_page.find(comment_start)\n    if comment_start_index == -1:\n      output_page += html_page\n      break\n    output_page += html_page[:comment_start_index]\n    html_page = html_page[comment_start_index:]\n    comment_end_index = html_page.find(comment_end) + len(comment_end)\n    html_page = html_page[comment_end_index:]\n  \n  return output_page</s>"
  },
  {
    "text": "<s>[INST] Draft a while loop to print the numbers up to and including 5. [/INST] i = 1\nwhile i <= 5:\n    print(i)\n    i += 1</s>"
  },
  {
    "text": "<s>[INST] Summarize the given article using the Gensim summarizer.\n\n[Article about Gensim summarizer](https://gensim.readthedocs.io/en/latest/summarization.html) [/INST] Gensim summarizer uses text preprocessing, tokenization, and summarization to generate extracted summaries from the given text. It supports manual summarization, latent semantic analysis, Latent Dirichlet Allocation, baseline summarization, and phrases-based summarization. Gensim summarizer provides a variety of ways to summarize text documents including manual summarization and auto summarization techniques.</s>"
  },
  {
    "text": "<s>[INST] Formulate a regular expression to identify even numbers up to 100. [/INST] ^([02468]|[13579][0-9]?)$</s>"
  },
  {
    "text": "<s>[INST] Create a function which returns the factorial of a given number. [/INST] \"\"\"\nFunction which returns factorial of a given number\n\"\"\"\n\ndef factorial(num):\n    if (num == 0):\n        return 1\n    else:\n        return num * factorial(num-1)\n    \nif __name__ == '__main__':\n    print(factorial(5))</s>"
  },
  {
    "text": "<s>[INST] Find the type of an object for the given object.\n\nObject: \"Hello World\" [/INST] str</s>"
  },
  {
    "text": "<s>[INST] Identify the Python statement used for looping. [/INST] for</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to cut the first 10 characters from a string.\n\nString: \"Hello World!\" [/INST] ```\nstring = \"Hello World!\"\nstring = string[10:]\nprint(string)\n```</s>"
  },
  {
    "text": "<s>[INST] How do you access the first element of the given list?\n\nList = [6, 7, 8] [/INST] list[0]</s>"
  },
  {
    "text": "<s>[INST] Write a code to validate an email entered by the user. [/INST] \"\"\"\nValidate an email entered by the user\n\"\"\"\n\nimport re\n\ndef validate_email(email):\n regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n if(re.search(regex, email)):\n  return True\n else:\n  return False\n  \nif __name__ == '__main__':\n email = input('Enter email address: ')\n if validate_email(email):\n  print('Valid email address')\n else:\n  print('Invalid email address')</s>"
  },
  {
    "text": "<s>[INST] Parse the data in the given json to a list of key-value dictionaries\n\n{\"country\": \"faculty of engineering\",\n  \"students\": 15000,\n  \"graduates\": 1200\n} [/INST] [{'country': 'faculty of engineering', 'students': 15000}, {'graduates': 1200}]</s>"
  },
  {
    "text": "<s>[INST] Generate a regex that detects an email [/INST] ^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$</s>"
  },
  {
    "text": "<s>[INST] Print the contents of the provided dictonary\n\nDictonary: {'name': 'John', 'age': 23, 'address': '123 Main Street'} [/INST] print('Name:', d['name'])\nprint('Age:', d['age'])\nprint('Address:', d['address'])</s>"
  },
  {
    "text": "<s>[INST] Output the smallest and greatest number from the provided list\n\nList: [53, 78, 25, 63, 23, 39] [/INST] Minimum: 23 \nMaximum: 78</s>"
  },
  {
    "text": "<s>[INST] Format the following string using the str.format() method.\n\nString: The name of the person is {} and his age is {} [/INST] print(\"The name of the person is {name} and his age is {age}\".format(name=\"John Doe\", age=23))</s>"
  },
  {
    "text": "<s>[INST] Raise an error with the message \"Invalid value\" when the following function is called and the value of \"n\" is below 0.\n\ndef check_value(n):\n    # TODO [/INST] def check_value(n):\n    if n < 0:\n        raise ValueError(\"Invalid value\")</s>"
  },
  {
    "text": "<s>[INST] Classify and label the outputs from a logistic regression.\n\n[-1, 0.1, 0.6, 1.8] [/INST] The outputs from the logistic regression are [-1, 0.1, 0.6, 1.8]. \nThe labels for these outputs are: -1 = \"Negative Class\", 0.1 = \"Close to Negative Class\", 0.6 = \"Neutral Class\", 1.8 = \"Positive Class\".</s>"
  },
  {
    "text": "<s>[INST] Write a code to group the elements in a list into a dictionary with the list element as the key and the number of times the element is repeated in the list as the value.\n\n[1, 2, 2, 2, 3, 3, 4, 4, 5] [/INST] def group_list(list): \n  result = {} \n  for element in list: \n    if element in result: \n      result[element] += 1 \n    else: \n      result[element] = 1 \n  \n  return result \n\nlist = [1, 2, 2, 2, 3, 3, 4, 4, 5] \nresult = group_list(list) \nprint(result) #{1: 1, 2: 3, 3: 2, 4: 2, 5: 1}</s>"
  },
  {
    "text": "<s>[INST] Generate a query to count the number of unique values in a SQL table. [/INST] SELECT COUNT(DISTINCT column_name) FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Generate a function to convert an infix expression to a postfix expression.\n\n\"A + B * C\" [/INST] def infix_to_postfix(exp):\n  stack = []\n  postfix_exp = \"\"\n  # Convert the expression to a list\n  exp_list = exp.split()\n\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n    elif char in ['+', '-', '*', '/']:\n      stack.append(char)\n    # When the closing parentheses is encountered, pop all the operators from the stack\n    elif char == ')':\n      while stack[-1] != '(': \n        postfix_exp += stack.pop() \n      stack.pop() #pop the opening parentheses\n\n  # Pop all the operators in the stack\n  while stack:\n    postfix_exp += stack.pop()\n  \n  return postfix_exp\n\nexp = \"A + B * C\" \nresult = infix_to_postfix(exp) \nprint(result) #ABC*+</s>"
  },
  {
    "text": "<s>[INST] Read the integers in a given list and return the sum of the squares of the list elements.\n\narr = [1, 2, 3] [/INST] def squares_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i] ** 2\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Create a format string in Python to output the sentence “Hello, my name is John Doe.”\n\nname = \"John Doe\" [/INST] print(f\"Hello, my name is {name}.\")</s>"
  },
  {
    "text": "<s>[INST] Split the following sentence into three words using regular expression.\n\nsentence = \"Meeting is at 4 pm\" [/INST] import re\n\nwords = re.split(r'\\s', sentence)\nprint(words)\n\n# Output: ['Meeting', 'is', 'at', '4', 'pm']</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to create a dictionary of key - value pairs from a list.\n\nlist = [\"apple\", \"banana\", \"cherry\"] [/INST] dictionary = dict.fromkeys(list, 0)\n\nprint(dictionary)\n\n# Output: {'apple': 0, 'banana': 0, 'cherry': 0}</s>"
  },
  {
    "text": "<s>[INST] Read an array of integers and sort it in increasing order.\n\narr = [3, 1, 4, 5, 2] [/INST] def sortArray(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\nsortArray(arr) \nprint(arr)\n\n# Output: [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Create a loop in Python to print odd numbers between 10 and 25. [/INST] for i in range(11, 25, 2):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Edit this code to create a function which prints the Fibonacci series. [/INST] def Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \nfor n in range(10):\n    print(Fibonacci(n))</s>"
  },
  {
    "text": "<s>[INST] Read a list of strings and return a list which contains only the strings with length at least 3.\n\nlist = [\"Apple\", \"cat\", \"dog\", \"banana\", \"mouse\"] [/INST] newList = [i for i in list if len(i) >= 3]\nprint(newList)\n\n# Output: ['Apple', 'banana', 'mouse']</s>"
  },
  {
    "text": "<s>[INST] Create a Java program which takes a year as input and prints whether it is a leap year or not.\n\nyear = 2020 [/INST] public class LeapYear \n{ \n    public static void main(String args[]) \n    { \n        int year = 2020; \n        if((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) \n            System.out.println(\"The year is a leap year.\"); \n        else\n            System.out.println(\"The year is not a leap year.\"); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that displays the 10 highest paid employees. [/INST] SELECT * \nFROM Employee \nORDER BY Salary DESC \nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Given a 2D array, transpose the array.\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] transpose_matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]</s>"
  },
  {
    "text": "<s>[INST] Format the given list of numbers in such a way that element at i'th index is the product of all elements in the list except the i'th element.\n\nnumbers = [1, 2, 3, 4] [/INST] def format_list(numbers):\n    result = []\n    prod = 1\n    for i in range(0, len(numbers)):\n        prod = prod * numbers[i]\n    for i in range(0, len(numbers)):\n        result.append(prod // numbers[i])\n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a function to compute the depth of a binary tree. [/INST] def tree_depth(root): \n    # Base case \n    if root is None: \n        return 0 ;  \n  \n    # If tree is not empty then height = 1 + max of left  \n    # height and right heights  \n    return 1 + max(tree_depth(root.left),  \n                    tree_depth(root.right))</s>"
  },
  {
    "text": "<s>[INST] Create a function to find a pair of elements in an array whose sum matches the given target.\n\nnumbers = [1, 2, 3, 4, 5], target = 6 [/INST] def find_pair(numbers, target):\n  nums_set = set(numbers)\n  for num in nums_set:\n    if target - num in nums_set:\n      return [num, target-num]</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a list of integer as input and return the most frequent value in the list.\n\n[3, 9, 5, 6, 3, 9, 5] [/INST] def most_frequent_value(list):\n    return max(set(list), key = list.count)</s>"
  },
  {
    "text": "<s>[INST] Alter the following CSS code to make font size \"40px\" for all h1 and h2 elements.\n\nh1, h2 {\n    font-size: 20px;\n} [/INST] h1, h2 {\n    font-size: 40px;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Javascript to be used for capitalizing the first letter of each word in a string of text. [/INST] const toTitleCase = (str) => {\n    return str.replace(/\\w\\S*/g, function(txt){\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a one-line solution for intersecting two given arrays in Javascript. [/INST] const intersection = (arr1, arr2) => arr1.filter(x => arr2.includes(x));</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following function to use the modern function syntax in Javascript.\n\nfunction greetUser(name) {\n    console.log('Hello ' + name + '!');\n} [/INST] const greetUser = (name) => console.log(`Hello ${name}!`);</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript class named “Apple” that holds one property, the “Name”. [/INST] class Apple {\n    constructor(name){\n        this.Name = name;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all flights departing from a given location after a given date and time.\n\nStartCity: NYC \nDate/Time: March 16, 2021 8:00 AM [/INST] SELECT flightno, startcity, starttime \nFROM flights \nWHERE startcity = 'NYC' AND starttime > '2021-03-16 08:00:00';</s>"
  },
  {
    "text": "<s>[INST] Create an object in Python that has three properties, \"Color\", \"Height\" and \"Weight\". [/INST] myObject = { \n    'color': '',\n    'height': 0,\n    'weight': 0\n}</s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to set the text size of all elements with the class “big-header” to 24px. [/INST] .big-header {\n    font-size: 24px;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML table that contains 10 rows and 3 columns. [/INST] <table>\n  <thead>\n    <tr>\n      <th>Column A</th>\n      <th>Column B</th>\n      <th>Column C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Compute the sum of all the numbers in the following array: [1, 2, 3, 4, 5]. [/INST] 15</s>"
  },
  {
    "text": "<s>[INST] List all the items in an associative array named ‘inventory’.\n\ninventory = {\n    \"fruits\": [\"Apple\", \"Banana\", \"Orange\"],\n    \"vegetables\": [\"Carrot\", \"Cucumber\", \"Spinach\"] \n} [/INST] [\"Apple\", \"Banana\", \"Orange\", \"Carrot\", \"Cucumber\", \"Spinach\"]</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to use more efficient algorithms to improve its performance.\n\nfor (int i = 0; i < n; i++)\n{\n    sum += i;\n} [/INST] int sum = 0; \nfor (int i = 0; i < n; i++) \n    sum += i;\nsum = n * (n + 1) / 2;</s>"
  },
  {
    "text": "<s>[INST] Observe the given piece of code and suggest the possible data structure to use.\n\nfor (int i = 0; i < input.length; i++)\n{\n    if (input[i] == 0)\n    {\n       output[output_index] = i;\n       output_index++;\n    }\n} [/INST] An array or a list should be used to store the positions of the numbers that are equal to 0 in the input. The output array should be used to store the positions. The output index should be used to keep track of the current position in the output array.</s>"
  },
  {
    "text": "<s>[INST] How would you go about sorting a million numbers in memory? [/INST] A common approach would be to use an efficient sorting algorithm, such as Quicksort, Merge Sort, or Heapsort. These algorithms typically take time proportional to n log n, where n is the number of elements being sorted.</s>"
  },
  {
    "text": "<s>[INST] Edit the Python code to reverse a linked list.\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None [/INST] # Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef reverse_list(head):\n    prev = None\n    while head != None:\n        next = head.next\n        head.next = prev\n        prev = head\n        head = next\n    return prev</s>"
  },
  {
    "text": "<s>[INST] Change the Python code to output the product of two numbers.\n\ndef multiply(a, b): \n    return a + b [/INST] def multiply(a, b): \n    return a * b</s>"
  },
  {
    "text": "<s>[INST] Change the Python code to find the occurrences of an item in a list\n\ndef count(list_of_items, item): \n    return len(list_of_items) [/INST] def count(list_of_items, item): \n    count = 0\n    for i in list_of_items:\n        if i == item:\n            count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Create a program to generate all subsets of a set.\n\ninput_set = {1, 2, 3} [/INST] def all_subsets(input_set):\n    res = [[]]\n    for ele in input_set:\n        res += [i + [ele] for i in res]\n    return res</s>"
  },
  {
    "text": "<s>[INST] Generate a Python program to generate the square of a number. [/INST] def square(n):\n    return n*n</s>"
  },
  {
    "text": "<s>[INST] Output the first 10 Fibonacci numbers. [/INST] 0 1 1 2 3 5 8 13 21 34</s>"
  },
  {
    "text": "<s>[INST] Create a basic login form in HTML. [/INST] <form action=\"\" method=\"POST\">\n\n <div>\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" name=\"username\" id=\"username\">\n </div>\n\n <div>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" name=\"password\" id=\"password\">\n </div>\n\n <button type=\"submit\">Log In</button>\n\n</form></s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm in C++ for finding the largest number in an array.\n\nint arr[] = {3, 7, 1, -2, 9, 5}; [/INST] #include <iostream> \n\nusing namespace std; \n  \nint largestNumber(int arr[], int n) \n{ \n    int max = arr[0]; \n  \n    for (int i = 0; i < n; i++) \n    { \n        if (arr[i] > max) \n            max = arr[i]; \n    } \n  \n    return max; \n} \n  \nint main() \n{ \n    int arr[] = {3, 7, 1, -2, 9, 5}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    cout <<\"The largest element is \"<< largestNumber(arr, n); \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create discrete buckets in a given array using the following algorithm.\n\n[2, 3, 6, 7, 8] [/INST] def create_buckets(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ncreate_buckets([2, 3, 6, 7, 8])\n# Output: [2, 3, 6, 8]</s>"
  },
  {
    "text": "<s>[INST] Construct a JavaScript function that implements a fibonacci sequence. [/INST] function fibonacci(num) {\n  let a = 1,\n    b = 0,\n    temp;\n\n  while (num >= 0) {\n    temp = a;\n    a = a + b;\n    b = temp;\n    num--;\n  }\n\n  return b;\n}</s>"
  },
  {
    "text": "<s>[INST] Fix the following code so it outputs the correct result.\n\ndef string_formatter(string):\n    new_str = string.split()\n    return new_str\n\nprint(string_formatter('This is a string')) [/INST] def string_formatter(string):\n    new_str = string.split()\n    return ' '.join(new_str)\n\nprint(string_formatter('This is a string'))\n# Output: This is a string</s>"
  },
  {
    "text": "<s>[INST] Find the minimum, maximum, and the average of a list of numbers.\n\n[1, 2, 3, 4, 5] [/INST] min = 1\nmax = 5\naverage = 3</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java called Student which contains string 'name' and int 'grade'. [/INST] public class Student {\n  private String name;\n  private int grade;\n \n  public void setName(String name) {\n    this.name = name;\n  }\n \n  public void setGrade(int grade) {\n    this.grade = grade;\n  }\n \n  public String getName() {\n    return name;\n  }\n \n  public int getGrade() {\n    return grade;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] How would you convert this list of strings to integers in Python?\n\nstr_list = ['1', '2', '3', '4'] [/INST] int_list = [int(i) for i in str_list]\n# Output: [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Find the position of an element in an array.\n\narr = [1, 4, 7, 9]\ntarget = 4 [/INST] def find_index(arr, target):\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n\nfind_index(arr, target)\n# Output: 1</s>"
  },
  {
    "text": "<s>[INST] Debug the following code to print out the result of the polynomial.\n\npolynomial equation: f(x) = x³ + 5x - 62\nx = 9 [/INST] \"\"\"\nDebug the following code to print out the result of the polynomial.\n\"\"\"\n\ndef evaluate_polynomial(coefficients, x):\n    result = 0\n    for i in range(len(coefficients)):\n        result += coefficients[i] * (x ** (len(coefficients) - i - 1))\n    return result\n\ncoefficients = [1, 5, -62]\nx = 9\n\nprint(evaluate_polynomial(coefficients, x)) # 390</s>"
  },
  {
    "text": "<s>[INST] Detect and output any phone numbers in the give text.\n\nText: \nHello, my name is John and my phone number is (123) 456-7890. [/INST] (123) 456-7890</s>"
  },
  {
    "text": "<s>[INST] Write a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.\n\nAddress: 1234 Main Street, San Francisco, CA [/INST] \"\"\"\nWrite a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.\n\"\"\"\n\nimport requests\n\ndef get_top_10_restaurants(address):\n    endpoint = 'https://api.yelp.com/v3/businesses/search'\n    headers = {'Authorization': 'Bearer your_api_key'} \n    params = {\n        'term': 'restaurants',\n        'location': address,\n        'limit': 10\n    }\n\n    response = requests.get(endpoint, headers=headers, params=params)\n    data = response.json()['businesses']\n\n    restaurants = []\n    for restaurant in data:\n        restaurants.append(restaurant['name'])\n    return restaurants\n\nif __name__ == '__main__':\n    print(get_top_10_restaurants('1234 Main Street, San Francisco, CA'))</s>"
  },
  {
    "text": "<s>[INST] Write code to print out the numbers up to and including the provided number, starting at 1.\n\nnumber = 10 [/INST] \"\"\"\nWrite code to print out the numbers up to and including the provided number, starting at 1.\n\"\"\"\n\ndef print_numbers_up_to(n):\n for i in range(1, n+1):\n print(i)\n\nif __name__ == '__main__':\n print_numbers_up_to(10)</s>"
  },
  {
    "text": "<s>[INST] Find the longest substring containing only digits from within the given string.\n\nString: This string contains 11111 and 123456 [/INST] ['11111']</s>"
  },
  {
    "text": "<s>[INST] Create a Python function to generate a random hex color code. [/INST] import random\n\ndef generate_random_hex_color_code():\n  hex_code = \"#\"\n  for i in range(6):\n    random_digit = random.choice(\"0123456789ABCDEF\")\n    hex_code += random_digit\n  return hex_code\n\nif __name__ == '__main__':\n  print(generate_random_hex_color_code())</s>"
  },
  {
    "text": "<s>[INST] Train a classification model to classify the sentiment of the given sentence.\n\nSentence: I love this new book! [/INST] \"\"\"\nTrain a classification model to classify the sentiment of the given sentence.\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n# Create the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),\n    tf.keras.layers.Dense(embedding_dim, activation='relu'),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_input_data, train_labels, epochs=num_epochs)\n\n# Make prediction\npred = model.predict([np.array([sentence])])\n\n# Print prediction result\nif pred[0][0] > pred[0][1]:\n  print(\"Negative sentiment\")\nelse:\n  print(\"Positive sentiment\")</s>"
  },
  {
    "text": "<s>[INST] Generate code for a for loop to iterate through the numbers from 0 to n-1.\n\nn = 5 [/INST] for i in range(0, n):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Write code to delete the given key from the given dictionary.\n\nDictionary: \nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nKey: 'd' [/INST] my_dict.pop('d')</s>"
  },
  {
    "text": "<s>[INST] What is an example of an algorithm for solving Sudoku? [/INST] One example algorithm for solving Sudoku is called 'Backtracking'. This algorithm works by first filling in possible solutions for the empty cells, then using a series of rules to determine the correct answer. The algorithm starts with each cell of the Sudoku and tries different numbers for it until a solution is found. If a solution is not found, it backtracks and tries a different number. This process is repeated until all cells have been filled in with the correct numbers, or there is no solution.</s>"
  },
  {
    "text": "<s>[INST] What is a heuristic for solving the traveling salesman problem? [/INST] A heuristic for the traveling salesman problem is to make use of the nearest neighbor algorithm or the brute-force algorithm. The nearest neighbor algorithm works by starting at a random node and visiting its nearest unvisited neighbor, then repeating the process until all nodes have been visited. The brute-force algorithm works by trying all possible combinations of nodes and finding the shortest route that visits all nodes.</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to find the longest substring with no repeating characters in a given string.\n\n\"abcabcbb\" [/INST] def longest_no_repeat(s):\n    max_length = 0\n    length = 0\n    seen = dict() \n    \n    for i in range(len(s)):\n        if s[i] not in seen:\n            length += 1\n            seen[s[i]] = i \n        else:\n            if length > max_length:\n                max_length = length\n            length = i - seen[s[i]]\n            for j in seen:\n                if seen[j] < seen[s[i]]:\n                    del seen[j]\n            seen[s[i]] = i\n  \n    if length > max_length:\n        max_length = length\n  \n    return max_length\n\nif __name__ == '__main__':\n    s = \"abcabcbb\"\n    print(longest_no_repeat(s))</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the network's throughput given a data rate and a size of the packets.\n\nData Rate = 10 Mbps; Packet size = 1000 bits [/INST] def calculate_throughput(data_rate, packet_size):\n    return data_rate / (packet_size / 8)  # converting bits to bytes\n\nif __name__ == '__main__':\n    data_rate = 10 # Mbps\n    packet_size = 1000 # bits\n    throughput = calculate_throughput(data_rate, packet_size)\n    print(throughput) # 125000.0</s>"
  },
  {
    "text": "<s>[INST] Print “Hello World” using the print() function. [/INST] print(\"Hello World\")</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in two strings and returns the number of times the first string is found within the second string.\n\nstring1 = \"ab\"\nstring2 = \"abcabcabc\" [/INST] def count_substring(string1, string2):\n  count = 0\n  for i in range(len(string2)-len(string1)+1):\n    if string2[i:i+len(string1)] == string1:\n      count += 1\n  return count</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to sort the given list of integers.\n\n[5, 7, 2, 4, 9] [/INST] def sort(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to print a specific pattern. [/INST] function printPattern(n) { \n    for (var i = 1; i <= n; i++) { \n        for (var j = 1; j <= i; j++) { \n            document.write(j + \" \"); \n        } \n        document.write(\"<br>\"); \n    } \n} \n  \nprintPattern(7);</s>"
  },
  {
    "text": "<s>[INST] Using any programming language, write a program which takes a number as an input and outputs the first two prime numbers after it.\n\n7 [/INST] def find_next_prime_numbers(num):\n    \"\"\"This function takes a number as an input\n    and returns the first two prime numbers after it\"\"\"\n    prime_numbers = []\n    # Increment num to the first prime number\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (first prime after input)\n    prime_numbers.append(num)\n    # Increment num to the second prime number\n    num += 1\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (second prime after input)\n    prime_numbers.append(num)\n    # Return the list of prime numbers\n    return prime_numbers\n\ndef is_prime(num): \n    \"\"\"Returns True if number is prime\"\"\"\n    if num <= 1: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False  \n    return True\n\nprint(find_next_prime_numbers(7)) # Output: [11, 13]</s>"
  },
  {
    "text": "<s>[INST] Replace the following comma-separated values with tabs.\n\nboats,cars,planes [/INST] boats\\tcars\\tplanes</s>"
  },
  {
    "text": "<s>[INST] Design a function in Python which takes a list of characters and returns the frequency of each character as a dictionary.\n\n[\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"] [/INST] def character_frequency(lst):\n    \"\"\"Function to count the frequency of each character in a list\"\"\"\n    frequencies = {}\n    for c in lst:\n        if c in frequencies:\n            frequencies[c] += 1\n        else:\n            frequencies[c] = 1\n    return frequencies\n\nprint(character_frequency([\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]))\n# Output: {'a': 3, 'b': 2, 'c': 1, 'd': 1}</s>"
  },
  {
    "text": "<s>[INST] Create a program which takes a string and replaces all instances of the letter \"e\" with \"X\".\n\n\"Hello world\" [/INST] def replace_e_with_x(s):\n    \"\"\"Function to replace all instances of the letter \"e\" with \"X\"\"\"\n    return s.replace('e', 'X')\n\nprint(replace_e_with_x(\"Hello world\")) # Output: \"HXllo world\"</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to delete all numbers from an array which are divisible by three.\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9] [/INST] public static int[] deleteByThree(int[] arr) {\n  int[] result = new int[arr.length];\n  int index = 0;\n  for(int i = 0; i < arr.length; i++) {\n    if(arr[i] % 3 != 0) {\n      result[index++] = arr[i];\n    }\n  }\n  return Arrays.copyOf(result, index);\n}\n\nSystem.out.println(Arrays.toString(deleteByThree(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}))); // Output: [1, 2, 4, 5, 7, 8 ]</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program which takes an array of dates and returns the average date.\n\n[2018-01-01, 2018-01-05, 2018-01-10] [/INST] function avgDate(dates) {\n  let sum = 0;\n  const dateLen = dates.length;\n\n  for (let i = 0; i < dateLen; i++) {\n    sum += Date.parse(dates[i]);\n  }\n\n  const avgDate = Date();\n  avgDate.setTime(sum / dateLen);\n\n  return avgDate;\n}\n\nconsole.log(avgDate([\"2018-01-01\", \"2018-01-05\", \"2018-01-10\"])); // Output: Mon Jan 07 2019 00:00:00 GMT+0545 (Nepal Time)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the most popular product by category.\n\nTable name: Products\nColumns: category (String), product_id (Integer), rating (Integer) [/INST] SELECT category, product_id, MAX(rating) \nFROM Products \nGROUP BY category \nORDER BY rating DESC</s>"
  },
  {
    "text": "<s>[INST] Construct a JavaScript program to sort a two-dimensional array by column 3 in ascending order.\n\nconst array = [\n    [7, 0, 5],\n    [3, 2, 1],\n    [2, 5, 9],\n    [0, 6, 8]\n] [/INST] function sortByColumn3Ascending(array) {\n    array.sort(function(a, b) {\n        return a[2] - b[2];\n    });\n    return array;\n}\n\nconsole.log(sortByColumn3Ascending(array));</s>"
  },
  {
    "text": "<s>[INST] Define a Java class 'Fruits' with three instance variables - name(String), quantity(int), and colour(String). [/INST] public class Fruits {\n    String name;\n    int quantity;\n    String colour;\n\n    public Fruits(String name, int quantity, String colour) {\n        this.name = name;\n        this.quantity = quantity;\n        this.colour = colour;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Modify the following array to output the sum of the second and third items in the array.\n\nconst array = [1, 2, 3, 4]; [/INST] const array = [1, 2, 3, 4];\nconst sum = array[1] + array[2];\nconsole.log(sum); // 5</s>"
  },
  {
    "text": "<s>[INST] Write a function to check if an integer is a multiple of another integer. [/INST] def is_multiple_of(num, multiple):\n    if num % multiple == 0:\n        return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Construct a C++ program to find the maximum value in an array of integers.\n\nint array[] = {1, -2, 3, 4, 7, 5} [/INST] #include <iostream> \nusing namespace std; \n\nint findMax(int array[], int array_size)\n{\n    int max_value = array[0];\n    for (int i = 1; i < array_size; i++) \n        if (array[i] > max_value) \n            max_value = array[i];\n    return max_value;\n}\n\nint main() \n{ \n    int array[] = {1, -2, 3, 4, 7, 5}; \n    int array_size = sizeof(array)/sizeof(array[0]); \n    cout << \"Max: \" << findMax(array, array_size); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write an R program to check if an array is in ascending order.\n\nx <- c(2, 4, 8, 10, 15) [/INST] is_ascending <- function(x) {\n    sorted_x <- sort(x)\n    if (sorted_x == x) {\n        return TRUE\n    }\n    else {\n        return FALSE\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Complete the program written in Java to add two numbers and print out the sum.\n\nint a = 3;\nint b = 5; [/INST] public class AddNumbers {\n public static void main(String[] args) {\n  int a = 3;\n  int b = 5;\n  int sum = a + b;\n  System.out.println(\"Sum is: \" + sum);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an API in node.js to get the details of a user using an ID\n\nid = \"12345\" [/INST] var express = require(\"express\");\n\nvar app = express();\n\n// API to get user details\napp.get(\"/user/:id\", function(req,res) {\n    var id = req.params.id;\n    var user = {\n        name: \"John Doe\",\n        age: 30\n    };\n    res.status(200).send(JSON.stringify(user));\n});\n\napp.listen(3000);</s>"
  },
  {
    "text": "<s>[INST] Design a user interface in HTML for a login form. [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Login Form</title>\n</head>\n<body>\n <form>\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\" required>\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\" required>\n  <input type=\"submit\" value=\"Login\">\n </form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Design a data structure in Java for storing student information. [/INST] public class Student {\n    private String studentId;\n    private String name;\n    private int age;\n    private String school;\n    private String address;\n    private String phoneNumber;\n\n    //Getters and Setters \n    public String getStudentId() {\n        return studentId;\n    }\n    \n    public void setStudentId(String studentId) {\n        this.studentId = studentId;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getSchool() {\n        return school;\n    }\n    \n    public void setSchool(String school) {\n        this.school = school;\n    }\n    \n    public String getAddress() {\n        return address;\n    }\n    \n    public void setAddress(String address) {\n        this.address = address;\n    }\n    \n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n    \n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a web service in Python to retrieve the current temperature from an external API. [/INST] import requests\n\n# Gets the current temperature from an external API\ndef get_current_temperature():\n    response = requests.get('https://weather.com/api/current-temperature')\n    response_json = response.json()\n    return response_json['current_temperature']</s>"
  },
  {
    "text": "<s>[INST] Design a web page in HTML5 with a heading, a paragraph and a button. [/INST] <!DOCTYPE html>\n<html>\n<head>\n <title>My Web Page</title>\n</head>\n<body>\n <h1>This is my title</h1>\n <p>This is some content.</p>\n <button>Click Me!</button>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the longest length of movies in a database called \"Movies\". [/INST] SELECT MAX(length) FROM Movies;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript module to get the current day and month. [/INST] var getDateInfo = (function() {\n    var today = new Date();\n    var day = today.getDate();\n    var month = today.getMonth() + 1; \n    return {\n        day : day,\n        month : month\n    };\n  })(); \n\n  module.exports = getDateInfo;</s>"
  },
  {
    "text": "<s>[INST] Determine what header is needed for the following function.\n\ndef split_list(a_list):\n    mid_point = int(len(a_list) / 2)\n    first_half = a_list[:mid_point]\n    second_half = a_list[mid_point:]\n    return first_half, second_half [/INST] import math\ndef split_list(a_list):\n    mid_point = int(math.floor(len(a_list) / 2))\n    first_half = a_list[:mid_point]\n    second_half = a_list[mid_point:]\n    return first_half, second_half</s>"
  },
  {
    "text": "<s>[INST] Express the following in a for loop\n\nPrint the squares of all the numbers from 1 to 10 [/INST] for i in range(1, 11):\n    print(i**2)</s>"
  },
  {
    "text": "<s>[INST] Write a function which takes a number and returns the Fibonacci sequence up to that number.\n\nn = 10 [/INST] def fibonacci(n):\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n        while len(fib_list) < n:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list</s>"
  },
  {
    "text": "<s>[INST] Develop a program to remove an element from a list at the specified index.\n\nmy_list = [4, 5, 6, 7]\nindex = 2 [/INST] def remove_at_index(my_list, index):\n    del my_list[index]\n    return my_list</s>"
  },
  {
    "text": "<s>[INST] Create a function which swaps the values of two list elements at a specific index.\n\nmy_list = [1, 2, 3] \nindex1 = 0\nindex2 = 2 [/INST] def swap_elements(my_list, index1, index2):\n    my_list[index1], my_list[index2] = my_list[index2], my_list[index1]\n    return my_list</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to determine the maximum element in a given list.\n\nmy_list = [3, 6, 4, 1] [/INST] def find_max(my_list):\n    max_num = 0\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num</s>"
  },
  {
    "text": "<s>[INST] Generate a program to perform string formatting on a given string.\n\nmy_string = \"Hello, World!\" [/INST] def string_format(my_string):\n    my_string = my_string.lower()\n    my_string = my_string.capitalize()\n    return my_string</s>"
  },
  {
    "text": "<s>[INST] Develop a function which returns the position of a given element in a list.\n\nmy_list = [1, 2, 3, 4]\nelement = 3 [/INST] def find_index(my_list, element):\n    for i in range(len(my_list)):\n        if my_list[i] == element:\n            return i</s>"
  },
  {
    "text": "<s>[INST] Create a program to return all the prime numbers under the nth number.\n\nn = 10 [/INST] def find_primes(n):\n    primes = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            primes.append(num)\n    return primes</s>"
  },
  {
    "text": "<s>[INST] Implement a function in C++ to return the inverse of a given 2-D array.\n\n[[1, 2], [3, 4]] [/INST] #include <vector>\n\nstd::vector< std::vector<int> > find_inverse(std::vector< std::vector<int> > arr)\n{\n    std::vector< std::vector<int> > inv;\n    inv.resize(arr[0].size(), std::vector<int>(arr.size(), 0));\n  \n    for (int i = 0; i < arr.size(); i++)\n        for (int j = 0; j < arr[0].size(); j++)\n            inv[j][i] = arr[i][j];\n  \n    return inv;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java to check if the sum of two given numbers is greater than two times the second number.\n\nnum1 = 6, num2 = 7 [/INST] public static boolean checkSum(int num1, int num2) {\n    if((num1 + num2) > (2 * num2))\n        return true;\n    else return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a shell script to list the contents of a given folder.\n\n/path/to/folder [/INST] #!/bin/sh\n\nls -al /path/to/folder</s>"
  },
  {
    "text": "<s>[INST] How would you create a function to calculate factorial of a given number in Python? [/INST] def factorial(n):\n    if n == 0: \n        return 1\n    return n * factorial(n-1)</s>"
  },
  {
    "text": "<s>[INST] Delete all comments that start with the string '#' from the given text.\n\nThe following program writes \"Hello World!\" to the screen. # This is a comment [/INST] The following program writes \"Hello World!\" to the screen.</s>"
  },
  {
    "text": "<s>[INST] What is the best way to format a large number such that it is easy to read? [/INST] The best way to format a large number is to add separator characters such as comma, underscore, period or space. This makes it easier to read and understand the large number.</s>"
  },
  {
    "text": "<s>[INST] Create a function to raise a given number to the Nth power. [/INST] def power(n, x):\n    if x == 0:\n        return 1\n    return n * power(n, x-1)</s>"
  },
  {
    "text": "<s>[INST] Print the number of days in the month of January 2021. [/INST] 31 days.</s>"
  },
  {
    "text": "<s>[INST] Create a program to output the squares of all numbers between 1 and 100. [/INST] for i in range(1, 101):\n    print(i**2)</s>"
  },
  {
    "text": "<s>[INST] How do you set up a yaml list with a specific size? [/INST] You can set up a yaml list with a specific size by declaring the list and adding the required number of elements to it, like so:\n\nmy_list:\n- Element 1\n- Element 2\n- Element 3\n- Element 4</s>"
  },
  {
    "text": "<s>[INST] Generate prime numbers between two given numbers\n\nstart = 8 \nend = 20 [/INST] The prime numbers between 8 and 20 are\n\n11, 13, 17, 19</s>"
  },
  {
    "text": "<s>[INST] Split a list into two parts\n\nmylist = [1, 2, 3, 4, 5, 6] [/INST] The two parts of the list will be [1, 2, 3, 4] and [5, 6].</s>"
  },
  {
    "text": "<s>[INST] Edit the following CSS code to make all text in an <H1> tag have a font size of 22 pixels.\n\nh1 {\n  color: CornflowerBlue;\n  font-size: 20px;\n} [/INST] h1 {\n  color: CornflowerBlue;\n  font-size: 22px;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate HTML code to create a login page with a username and password field. [/INST] <!DOCTYPE html>\n<html>\n  <head>\n    <title>Login</title>\n  </head>\n  <body>\n    <div>\n      <h1>Login</h1>\n      <form id=\"loginForm\" action=\"\" method=\"post\">\n        <label>Username:</label>\n        <input type=\"text\" name=\"username\" required/>\n        <label>Password:</label>\n        <input type=\"password\" name=\"password\" required/>\n        <input type=\"submit\" value=\"Login\"/>\n      </form>\n    </div>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to return every column from a table named 'books' where the title includes the word 'Ember'. [/INST] SELECT *\nFROM books\nWHERE title LIKE '%Ember%';</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML code so the inner text of all the <p> tags is centered.\n\n<p>This is some text.</p>\n<p>Some more text.</p> [/INST] <p style=\"text-align: center;\">This is some text.</p>\n<p style=\"text-align: center;\">Some more text.</p></s>"
  },
  {
    "text": "<s>[INST] Generate HTML code to create a button with the text \"Submit\". [/INST] <button type=\"submit\">Submit</button></s>"
  },
  {
    "text": "<s>[INST] Edit the following JavaScript code to create an array of only the even numbers from the given array.\n\n[5, 12, 7, 23, 10] [/INST] let arr = [5, 12, 7, 23, 10];\nlet evenNumbers = arr.filter(num => num % 2 == 0);</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select everyone from the table named 'users' with the first name equal to 'John'. [/INST] SELECT * FROM users WHERE firstname = 'John';</s>"
  },
  {
    "text": "<s>[INST] Edit the following CSS code to make the background color of all <a> tags equal to '#237ac2'.\n\na {\n  font-size: 16px;\n  color: #efefef;\n} [/INST] a {\n  font-size: 16px;\n  color: #efefef;\n  background-color: #237ac2;\n}</s>"
  },
  {
    "text": "<s>[INST] Extend the following code to ensure that the array of numbers is sorted using insertion sort.\n\narr = [9, 5, 7, 3] [/INST] def insertionSort(arr): \n    for i in range(1, len(arr)): \n        temp = arr[i] \n        j = i - 1\n        while j >= 0 and temp < arr[j]: \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = temp</s>"
  },
  {
    "text": "<s>[INST] Describe the purpose of a hash table. [/INST] A hash table is a data structure that is used to store key-value pairs. It allows efficient insertion, retrieval, and deletion of items by using a hash function to map keys to values. Hash tables are typically used for faster lookups, and they can be used to implement associative arrays, symbolic dictionaries, and many other data structures.</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following JavaScript function to be more concise.\n\nfunction findMax(nums) {\n  let currentMax = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > currentMax) currentMax = nums[i];\n  }\n  return currentMax;\n} [/INST] function findMax(nums) {\n  return nums.reduce((currentMax, num) => num > currentMax ? num : currentMax, 0);\n}</s>"
  },
  {
    "text": "<s>[INST] Debug the following code snippet in Python to find the maximum number accross a list of integers.\n\nlst = [-1, 5, 10, 0, -9] [/INST] def find_maximum(lst):\n  max_value = float('-inf')\n  for i in lst:\n    if i > max_value:\n      max_value = i\n  return max_value\n\nprint(find_maximum(lst))</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in JavaScript for finding all common elements between two given integer arrays.\n\n[1,7,9] and [2,7,8] [/INST] function findCommonElements(arr1, arr2) {\n  const commonElements = [];\n\n  arr1.forEach(num => {\n    if(arr2.includes(num)) {\n      commonElements.push(num);\n    }\n  });\n \n  return commonElements;\n}\n\nconsole.log(findCommonElements([1,7,9], [2,7,8]))</s>"
  },
  {
    "text": "<s>[INST] Create a regex expression in Python that finds all numbers from 1 to 100 inclusive. [/INST] import re\n\nregex = re.compile('[1-9]|[1-9][0-9]|100')</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java for representing a Rectangle that stores length and width attributes and a method to calculate its area. [/INST] public class Rectangle {\n  int length;\n  int width;\n \n  public Rectangle(int length, int width) {\n   this.length = length;\n   this.width = width;\n  }\n \n  public int calculateArea() {\n   return this.length * this.width;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the number of employees with the same name as the given name 'John'. [/INST] SELECT COUNT(*)\nFROM employees\nWHERE name = 'John';</s>"
  },
  {
    "text": "<s>[INST] Write a Java code snippet for creating an array with 10 random numbers between 1 and 50. [/INST] int[] randNums = new int[10];\nRandom rand = new Random();\n\nfor(int i = 0; i < randNums.length; i++) {\n  randNums[i] = rand.nextInt(50) + 1;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a regex expression that matches all strings with four alphabetic characters. [/INST] ^[a-zA-Z]{4}$</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to group the table by age and calculate the average salary of each group.\n\nTable name: employees\nFields: name (varchar(255)), age (int), salary (int) [/INST] SELECT AVG(salary)\nFROM employees\nGROUP BY age;</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the SQL HAVING clause? [/INST] The HAVING clause is used in SQL to restrict the results of a query based on a set of conditions. It filters records that are returned from the GROUP BY clause, and is used in conjunction with aggregate functions used in the SELECT clause. It is similar to the WHERE clause, but WHERE is used to filter records before they are grouped, while HAVING is used to filter the results of the group.</s>"
  },
  {
    "text": "<s>[INST] Construct a JavaScript program to find all the prime numbers within a range of numbers\n\nrange = [2,10] [/INST] function findPrimes(range) {\n  let primes = [];\n  for (let i=range[0]; i< range[1]; i++) {\n    if (checkPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\nfunction checkPrime(num) {\n  for (let i=2; i<=Math.sqrt(num); i++) {\n    if (num % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the sum of the squares of all natural numbers up to a certain number.\n\nn = 10 [/INST] def sumOfSquares(n): \n    sum = 0\n    for i in range(1, n+1): \n        sum += i*i\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Parse the following HTML code to get all the hyperlinks in the page.\n\n<a href=\"https://example.com/about\">About</a>\n<a href=\"https://example.com/products\">Products</a> [/INST] import re\n\nhtml_code = '''\n<a href=\"https://example.com/about\">About</a>\n<a href=\"https://example.com/products\">Products</a>\n'''\n\nlinks = re.findall(r'href=\"(.*?)\"', html_code)\nprint(links)\n# Output: ['https://example.com/about', 'https://example.com/products']</s>"
  },
  {
    "text": "<s>[INST] Write a java code to take a string as input and return the number of words present in it. [/INST] import java.util.StringTokenizer; \n\npublic class WordCounter \n{ \n    public static int countWords(String str) \n    { \n        StringTokenizer tokenizer = new StringTokenizer(str); \n        return tokenizer.countTokens(); \n    } \n  \n    public static void main(String[] args) \n    { \n        String str = \"Geeks for Geeks class\"; \n        System.out.println(\"Number of words in a given String : \" + countWords(str)); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Train a model in PyTorch to classify the following dataset into 4 classes. [/INST] import torch\n\n# Load the dataset\ntrain_data, valid_data, test_data = torch.utils.data.random_split(dataset, (1000, 400, 200))\n\n# Build the model\nmodel = torch.nn.Sequential(\n    torch.nn.Linear(7, 15), \n    torch.nn.ReLU(), \n    torch.nn.Linear(15, 4), \n    torch.nn.Softmax()\n)\n\n# Compile the model\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\n# Train the model\nmodel.train()\nfor epoch in range(10):\n    loss = 0\n    for data, target in train_loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        loss += criterion(output, target).item()\n        loss.backward()\n        optimizer.step()\n    \n    print(f'Epoch: {epoch}, Loss: {loss/len(train_data)}')</s>"
  },
  {
    "text": "<s>[INST] Delete all duplicated characters in a string.\n\nString: abcabcabc [/INST] abc</s>"
  },
  {
    "text": "<s>[INST] Compare and contrast SQL and NoSQL databases. [/INST] SQL databases store data in predefined tables and use structured query language (SQL) for querying the data. In contrast, NoSQL databases are designed to store large amounts of unstructured data and are commonly used for distributed data processing. Unlike SQL, NoSQL databases are known for their flexibility and scalability, since they do not require a fixed schema. They also offer a cost-effective alternative to traditional relational databases when large amounts of data must be processed.</s>"
  },
  {
    "text": "<s>[INST] What is Naive Bayes classification? [/INST] Naive Bayes classification is a supervised machine learning technique used for classification tasks which is based on the Bayes Theorem. It assumes that each input feature is independent of each other, which is called the assumption of \"naive\" Bayes. The algorithm uses prior knowledge of the data set and determines the probability of each class, given the data. Based on these probabilities it then assigns a class to the input, using a decision rule (usually the maximum a posteriori likelihood), to maximize the overall accuracy of the model.</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to print a right aligned triangle of asterisks.\n\nLength: 5 [/INST] *\n**\n***\n****\n*****</s>"
  },
  {
    "text": "<s>[INST] What is the significance of a long identifier name in programming? [/INST] A long identifier name is important for programming as it clearly and accurately describes the purpose of the identifier. It is easier for another programmer to understand what a specific code does if the identifier names are descriptive of their purpose. Long and descriptive names also make the code more organized and help to preserve the syntax. In addition, it allows for better debugging and easier maintenance in the long run.</s>"
  },
  {
    "text": "<s>[INST] How can a programmer optimize a code to improve its performance? [/INST] A programmer can optimize a code to improve its performance by using techniques like loop optimization, code refactoring, resource optimization, cache optimization, and parallel computing. Loop optimization involves reducing the number of iterations in loops, using variables instead of literals, removing redundant loops, debugging errors, and choosing the most efficient looping techniques. Code refactoring involves restructuring the code to make it more concise, readable, and maintainable. Resource optimization involves using efficient data structures, such as hash tables and balanced trees, to reduce computational resources as well as using optimized algorithms. Cache optimization involves designing well-crafted caches to store frequently accessed data, while parallel computing allows multiple tasks to be completed simultaneously on different CPU cores.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of using an exception handler? [/INST] The purpose of an exception handler is to catch and handle any unexpected errors that may occur while code is executing. It is a code block which is used to detect and handle runtime errors when they occur. This allows the code to immediately handle the error, thus avoiding a crash and providing the user with meaningful feedback.</s>"
  },
  {
    "text": "<s>[INST] How does debugging help a programmer? [/INST] Debugging helps a programmer by identifying the source of errors or bugs in the program. Through debugging, a programmer can pinpoint exactly where the issue is, rather than having to spend time searching through lines of code trying to find the problem. Debugging also allows a programmer to make well-informed decisions when trying to resolve the issue. By understanding the issue in detail and being able to trace the code line by line, the programmer can better assess which possible solutions will be most effective.</s>"
  },
  {
    "text": "<s>[INST] Generate a multiplication table for a given number in JavaScript.\n\nn = 5; [/INST] function createmultiplicationTable(n) \n{ \n for ( var i = 1; i <=10; i++ )\n {\n  document.write(n+\" x \"+i+\" = \"+n*i,\"<br>\");\n }\n} \ncreatemultiplicationTable(n);</s>"
  },
  {
    "text": "<s>[INST] Build a function to convert an adjacency matrix into an adjacency list.\n\nA = \n[[0, 1, 0, 0], \n [1, 0, 1, 1], \n [0, 1, 0, 0], \n [0, 1, 0, 0]] [/INST] def adjacency_matrix_to_list(A):\n    \"\"\"\n    Convert an adjacency matrix to an adjacency list\n    \n    Parameters\n    ----------\n    A: 2D list representing an adjacency matrix\n    \n    Returns\n    -------\n    adj_list: Adjacency list\n    \"\"\"\n    n = len(A)\n    adj_list = [[] for i in range(n)]\n        \n    for i in range(n):\n        for j in range(n):\n            if A[i][j] == 1:\n                adj_list[i].append(j)\n                \n    return adj_list</s>"
  },
  {
    "text": "<s>[INST] Explain why we use a Dictionary instead of Lists when we need to store multiple pairs of data (key-value pair)? [/INST] Lists are used to store an ordered collection of elements, but they are not suitable for storing key-value pairs of data because they don't provide an efficient way to look up values associated with specific keys. Dictionaries provide a more efficient way to store key-value pairs of data, as they use a hashmap underlying data structure. This allows them to quickly determine the value associated with a given key, which makes the fetching and insertion of data much faster and more efficient. Additionally, dictionaries provide the flexibility to insert and update multiple pairs of key-value data.</s>"
  },
  {
    "text": "<s>[INST] Mark the output of the following two lines of C++ code\n\nint a = 10; \nint b = ++a + ++a; [/INST] a = 11\nb = 23</s>"
  },
  {
    "text": "<s>[INST] Write a Regular Expression to match any line with vowels followed by numbers [/INST] \\w[aeiouAEIOU]\\d+</s>"
  },
  {
    "text": "<s>[INST] Find the number of unique subsets of a given set\n\ngiven_set = {1, 2, 3} [/INST] def unique_subsets_count(given_set): \n    \"\"\"\n    Find the number of unique subsets of a given set\n    \n    Parameters\n    ----------\n    given_set: Set of elements\n    \n    Returns\n    -------\n    count: Number of unique subsets\n    \"\"\"\n             \n    count = 1 << len(given_set)\n    \n    return count</s>"
  },
  {
    "text": "<s>[INST] Design a CSS class to center align a div with class name \"main\". [/INST] .main {\n    margin: 0 auto;\n    width: 50%;\n    text-align: center;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object with the keys \"name\", \"age\", and \"location\". [/INST] var person = {\n    name: 'John Doe',\n    age: 26,\n    location: 'New York'\n};</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to create a database called \"flower_shop\". [/INST] CREATE DATABASE flower_shop;</s>"
  },
  {
    "text": "<s>[INST] Parse the given XML document.\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bookstore>\n    <book>\n    <title>A Game of Thrones</title>\n    <author>George R. R. Martin</author>\n    <price>9.99</price>\n    </book>\n    <book>\n    <title>A Clash of Kings</title>\n    <author>George R. R. Martin</author>\n    <price>12.99</price>\n    </book>\n</bookstore> [/INST] #import the required modules \nimport xml.etree.ElementTree as ET \n  \n# parse the given xml document \ntree = ET.parse('document.xml') \nroot = tree.getroot() \n  \n# iterate over all the elements in the document \nfor book in root.findall('book'): \n    title = book.find('title').text \n    author = book.find('author').text \n    price = book.find('price').text \n  \n    # print the element and its attribute \n    print('Title:', title, ', Author:', author, ', Price:', price)</s>"
  },
  {
    "text": "<s>[INST] Write a shell script to monitor the usages of CPU and RAM. [/INST] #!/bin/bash\n  \n# Display free memory \necho \"Free Memory:\"; \nfree -h;\n  \n# Get disk partitions with available disk space \necho \"Available disk space:\"\ndf -h;\n  \n# Get CPU utilization info \necho \"CPU Utilization: \"\ntop -bn1 | grep \"Cpu(s)\" | \\\n    sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | \\\n    awk '{print 100 - $1\"%\"}';</s>"
  },
  {
    "text": "<s>[INST] Develop a Django application to store car model, make and year in the database. [/INST] # create Django project \ndjango-admin startproject car_database \n  \n# create Django app \ncd car_database \ndjango-admin startapp cars \n  \n# Add 'cars' to INSTALLED_APPS in settings.py\nINSTALLED_APPS = (  \n    ...\n    'cars',\n)\n  \n# Create models.py file\nclass Car(models.Model):\n    model = models.CharField(max_length=50)\n    make = models.CharField(max_length=50)\n    year = models.IntegerField()\n  \n# Make and apply migrations \npython manage.py makemigrations \npython manage.py migrate</s>"
  },
  {
    "text": "<s>[INST] Generate a bar chart in R using the given dataset.\n\nNumber of Movies Watched in the Last 6 Months\nMonth \tNumber\nJanuary \t5\nFebruary\t7\nMarch\t9\nApril\t8\nMay\t12\nJune\t11 [/INST] # install packages \ninstall.packages(\"ggplot2\")\n  \n# import required libraries \nlibrary(ggplot2) \n  \n# data \nmovies <- c(5, 7, 9, 8, 12, 11)\nmonths <- c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\")\n  \n# create dataframe object \ndata <- data.frame(months, movies) \n  \n# plot \nggplot(data, aes(x = months, y = movies)) + \n    geom_bar(stat = \"identity\", fill = \"#0066FF\")</s>"
  },
  {
    "text": "<s>[INST] Use HTML web storage to exchange data between a web page and the server. [/INST] // To store data\nlocalStorage.setItem(\"name\", \"John Doe\");\n  \n// To get data\nvar name = localStorage.getItem(\"name\");\n  \n// To remove data\nlocalStorage.removeItem(\"name\");</s>"
  },
  {
    "text": "<s>[INST] Write code to find the powers of two in a given range.\n\nRange:  0 to 20 [/INST] def powers_of_two(start, end):\n    powers = []\n    current_power = 1\n    while current_power < end:\n        if current_power >= start: \n            powers.append(current_power)\n        current_power *= 2\n    return powers</s>"
  },
  {
    "text": "<s>[INST] Build a quickly-sortable tree from a given array.\n\nArray = [3, 8, 4, 5, 2, 10, 7] [/INST] class TreeNode: \n    def __init__(self, key): \n        self.left = None\n        self.right = None\n        self.key = key \n\ndef quick_sort_tree(arr):\n    if not arr:\n        return None\n\n    pivot = arr[0]\n    pivot_node = TreeNode(pivot)\n    \n    left_subtree_elements  = [x for x in arr[1:] if x < pivot]\n    right_subtree_elements = [x for x in arr[1:] if x >= pivot]\n\n    pivot_node.left  = quick_sort_tree(left_subtree_elements)  \n    pivot_node.right = quick_sort_tree(right_subtree_elements) \n\n    return pivot_node</s>"
  },
  {
    "text": "<s>[INST] Design a class for a grocery store inventory management system. [/INST] class GroceryInventory:\n    def __init__(self):\n        self.inventory = {}\n\n    def add_item(self, item, quantity):\n        if item not in self.inventory:\n            self.inventory[item] = quantity\n        else:\n            self.inventory[item] += quantity\n            \n    def remove_item(self, item, quantity):\n        if item in self.inventory:\n            self.inventory[item] -= quantity\n            if self.inventory[item] <= 0:\n                del self.inventory[item]\n    \n    def get_inventory(self):\n        return self.inventory</s>"
  },
  {
    "text": "<s>[INST] Write a function that returns the number of times an element appears in a sorted array.\n\nArray = [3, 8, 10, 10, 10, 13, 15]\nElement = 10 [/INST] def get_count(arr, element):\n    left_index = bisect.bisect_left(arr, element) \n    right_index = bisect.bisect_right(arr, element)\n    return right_index - left_index</s>"
  },
  {
    "text": "<s>[INST] Given two strings, find the minimum number of operations required to convert one string to the other.\n\nString 1 = \"horse\"\nString 2 = \"ros\" [/INST] def find_edit_distance(str1, str2):\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n\n    matrix = [[0] * (len_str2+1) for _ in range(len_str1+1)]\n    for i in range(len_str1+1):\n        matrix[i][0] = i\n    for j in range(len_str2+1):\n        matrix[0][j] = j\n\n    for i in range(1, len_str1+1):\n        for j in range(1, len_str2+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = min(matrix[i-1][j]+1, matrix[i][j-1]+1, matrix[i-1][j-1]+1)\n\n    return matrix[len_str1][len_str2]</s>"
  },
  {
    "text": "<s>[INST] Implement a function to perform in-place array rotation.\n\narr = [1, 2, 3, 4, 5]\nrotation = 2 [/INST] def rotate_in_place(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n        count += 1</s>"
  },
  {
    "text": "<s>[INST] Given an array of numbers, find the longest increasing sequence in the array.\n\nArray = [2, 3, 5, 4, 7, 9, 6, 8] [/INST] def longest_increasing_sequence(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n    return sequence</s>"
  },
  {
    "text": "<s>[INST] Create a query in SQL to find the record with id 2 from the table \"users\".\n\nTable Name: users [/INST] SELECT * from users WHERE id = 2;</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two strings and determines if the first string is one character away from the second string.\n\nString 1 = \"cat\", String 2 = \"cot\" [/INST] def oneAway(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    if abs(len1 - len2) > 1: \n        return False\n    i = 0\n    j = 0 \n    count = 0 \n    while i < len1 and j < len2: \n        if str1[i] != str2[j]: \n            if count == 1: \n                return False\n            count = 1\n            if len1 > len2: \n                i += 1\n            elif len1 < len2: \n                j += 1 \n            else: \n                i +=1\n                j += 1 \n        else: \n            i += 1\n            j += 1\n    if i < len1 or j < len2: \n        count += 1 \n    return count == 1</s>"
  },
  {
    "text": "<s>[INST] Create a while loop in Python to increment a counter by 1 until it reaches 10.\n\ncounter = 0 [/INST] while counter < 10:\n    counter += 1</s>"
  },
  {
    "text": "<s>[INST] Manipulate a string in C++ to delete all special characters from it.\n\nString = “Hello!&@ This#%^$ is a string” [/INST] string s = \"Hello!&@ This#%^$ is a string\";\nfor (int i = 0; i < s.length(); i++) \n{ \n    if (!isalnum(s[i])) \n        s.erase(s.begin() + i); \n}</s>"
  },
  {
    "text": "<s>[INST] Assign the variable \"age\" with the value 18. [/INST] int age = 18;</s>"
  },
  {
    "text": "<s>[INST] Write a function to traverse a tree using depth-first search algorithm in Java. [/INST] public void traverseTree(Node root) {\nS tack<Node> stack = new Stack<>();\nstack.push(root);\nwhile (!stack.isEmpty()) {\n    Node node = stack.pop();\n    // Process the node\n    if (node.right != null)\n        stack.push(node.right);\n    if (node.left != null)\n        stack.push(node.left);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Regex in JavaScript to extract all words of length 6 or more from a sentence.\n\nSentence = \"This is a sample sentence with some words of length 6 or more\" [/INST] let regex = /\\w{6,}/g;\nlet words = sentence.match(regex);</s>"
  },
  {
    "text": "<s>[INST] Identify the data structure most suitable for storing 100 unique integers. [/INST] Hash Table</s>"
  },
  {
    "text": "<s>[INST] Write a loop in Java to add all elements of a given array.\n\nint[] arr = {1, 2, 3, 4, 5}; [/INST] int sum = 0; \n  \nfor (int i = 0; i < arr.length; i++) \n    sum += arr[i];</s>"
  },
  {
    "text": "<s>[INST] Explain the process of linear search in a few sentences. [/INST] Linear search is a technique for searching for an element in a list by repeatedly checking every element until a match is found or the end of the list is reached. It is typically implemented as a loop, where each element is compared to the search key until a match is found, or until all the elements have been searched.</s>"
  },
  {
    "text": "<s>[INST] Suppose a set of n numbers and write a program to calculate the median\n\nint[] numbers = {3,7,5,14,15,17}; [/INST] int n = numbers.length;\n\nif (n % 2 == 0) {\n    // if n is even\n    int m = n/2;\n    double median = (numbers[m-1] + numbers[m]) / 2.0\n} else {\n    // if n is odd\n    int m = (n+1) / 2;\n    double median = numbers[m-1];\n}</s>"
  },
  {
    "text": "<s>[INST] How would you test a Turing machine? [/INST] A Turing machine can be tested by providing sample inputs that cover various cases and examining the output. An ideal test would consist of input strings that cover all possible scenarios, such as inputs with no computation, inputs with long computations, inputs that flip a single bit, etc. Additionally, Turing machine implementations should be tested for edge cases, such as providing inputs with invalid syntax or supplying an input of exceptional size.</s>"
  },
  {
    "text": "<s>[INST] Write a java program to generate a Fibonacci series up to N numbers\n\nint N = 10; [/INST] public class Fibonacci{\n    public static void main(String args[]) {\n        int n1=0,n2=1,n3,i,count=10;\n        System.out.print(n1+\" \"+n2);//printing 0 and 1 \n    \n        for(i=2;i<count;++i)//loop starts from 2 because 0 and 1 are already printed\n        {    \n            n3=n1+n2;    \n            System.out.print(\" \"+n3);    \n            n1=n2;    \n            n2=n3;    \n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an algorithm to detect a cycle in a linked list [/INST] A cycle can be detected in a linked list using the Floyd's Algorithm. This algorithm works by using two pointers; a slow pointer and a fast pointer. The slow pointer moves one node of the list at a time, while the fast pointer moves two nodes at a time. If the two pointers point to the same node, then a cycle exists in the list.</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes an array of integers and prints out their product.\n\narray = [1,2,3,4,5] [/INST] def product(arr): \n    product = 1\n    for x in arr: \n        product *= x \n    return product \n  \n# Driver Code \narray = [1,2,3,4,5]\nprint(product(array))</s>"
  },
  {
    "text": "<s>[INST] Write a function to determine the largest integer in an unordered array.\n\narray = [6, 8, 1, 3, 4] [/INST] def largest_int(arr): \n    largest_int = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > largest_int: \n            largest_int = arr[i] \n    return largest_int \n  \n# Driver Code\narray = [6, 8, 1, 3, 4]\nprint(largest_int(array))</s>"
  },
  {
    "text": "<s>[INST] Write a code to generate a random password using random library of Python.\n\nlength = 8 [/INST] import string \nimport random \n\ndef generate_password(length): \n    # Generate a random string of characters \n    letters = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters) for i in range(length)) \n  \n    return password\n  \n# Driver Code\nlength = 8\nprint(generate_password(length))</s>"
  },
  {
    "text": "<s>[INST] Build a program to print the frequency of characters in an input string.\n\ninput_string = \"abcabcabcabc\" [/INST] def frequency_chart(input_string): \n    # Dictionary to store character frequency \n    freq = {} \n  \n    # Loop over the input string \n    for char in input_string: \n        if char in freq: \n            freq[char] += 1\n        else: \n            freq[char] = 1\n  \n    return freq \n  \n# Driver Code \ninput_string = \"abcabcabcabc\"\nprint(frequency_chart(input_string))</s>"
  },
  {
    "text": "<s>[INST] Write a function to get a string made of the first and last two characters of a given string.\n\ninput_string = \"spring\" [/INST] def string_two_characters(input_string): \n    # Get the length of the string \n    n = len(input_string) \n  \n    # Return the string which is made of the first and last two characters \n    return input_string[0:2] + input_string[n-2:n] \n  \n# Driver Code \ninput_string = \"spring\"\nprint(string_two_characters(input_string))</s>"
  },
  {
    "text": "<s>[INST] Return the maximum number of 256-bit numbers that fit in a 1GB RAM. [/INST] The maximum number of 256-bit numbers that fit in a 1GB RAM is 134217728.</s>"
  },
  {
    "text": "<s>[INST] What is the maximum number of nodes in a full binary tree with a given height?\n\nHeight: 4 [/INST] The maximum number of nodes in a full binary tree with a given height of 4 is 2^4 - 1, which is 15.</s>"
  },
  {
    "text": "<s>[INST] Convert a string to its corresponding integer value.\n\nString: \"123\" [/INST] def string_to_int(s):\n    res = 0\n    for char in s:\n        res = res * 10 + int(char)\n    return res</s>"
  },
  {
    "text": "<s>[INST] Remove all duplicates from an array.\n\n[1, 1, 2, 3, 4, 5, 3, 4] [/INST] def remove_duplicates(arr):\n    res = []\n    seen = set()\n    for element in arr:\n        if element not in seen:\n            res.append(element)\n            seen.add(element)\n    return res</s>"
  },
  {
    "text": "<s>[INST] What is the output of the following C code?\n\nint main() {\n    int x = 10;\n    x = x * -0.5;\n    printf(\"%d\", x);\n    return 0;\n} [/INST] The output of the above program is -5.</s>"
  },
  {
    "text": "<s>[INST] Create a new vector of size 5 filled with zeros. [/INST] vec = [ 0., 0., 0., 0., 0. ]</s>"
  },
  {
    "text": "<s>[INST] Implement the Euclidean distance formula using a def function in Python. [/INST] def euclidean_dist(x, y):\n    # write function here\n    dist = 0\n    # iterate through each coordinate of the points\n    for i in range(len(x)):\n        # calculate the distance between corresponding coordinates\n        dist += (x[i]-y[i])**2\n    return (dist**0.5)</s>"
  },
  {
    "text": "<s>[INST] Create a switch statement that prints \"Yay!\" if input is 1 and \"Nay!\" if input is 2. [/INST] switch(input){\n  case 1:\n    console.log(\"Yay!\");\n    break;\n  case 2:\n    console.log(\"Nay!\");\n    break;\n  default:\n    console.log(\"Invalid Input\")\n    break;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a for loop for printing the first 10 powers of 2. [/INST] for(let i = 0; i <= 10; i++){\n  console.log(2**i);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a tower of stars made up of 10 lines of increasing star lengths. [/INST] starString = \"*\";\nfor (let i = 1; i <= 10; i++){\n  console.log(starString);\n  starString += \"*\";\n}</s>"
  },
  {
    "text": "<s>[INST] Change the background color of all element with the class \"container\" to blue. [/INST] document.querySelectorAll(\".container\").forEach(function(container){\n  container.style.backgroundColor = \"blue\";\n});</s>"
  },
  {
    "text": "<s>[INST] Print out the sum of each row of a given 2 dimensional array.\n\narr = [\n  [1, 1, 1],\n  [2, 2, 2],\n  [3, 3, 3]\n] [/INST] // Total sum of each row\nfor(let row of arr){\n  let total = 0\n  for(let col of row){\n    total += col\n  }\n  console.log(total)\n}</s>"
  },
  {
    "text": "<s>[INST] Using conditional statements, print out whether a given number is odd or even.\n\nnumber = 7 [/INST] if(number % 2 == 0){\n  console.log('`number` is even')\n} else {\n  console.log('`number` is odd')\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function for removing duplicate values from an array. [/INST] function removeDuplicates(arr){\n  let result = [];\n  arr.forEach(function(element){\n    if(!result.includes(element)){\n      result.push(element);\n    }\n  });\n  return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Refactor this function to be less complex and more readable.\n\ndef calculate_price(products):\n  total_price=0\n  for p in products:\n    total_price+=p[0]*p[1]\n  return total_price [/INST] def calculate_price(products):\n  total_price = 0\n  for price, quantity in products: \n    total_price += price * quantity\n  return total_price</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression to match emails with domain example.com [/INST] /[a-zA-Z0-9_\\-\\.]+@example\\.com$/</s>"
  },
  {
    "text": "<s>[INST] Create a database table for a social media application. [/INST] CREATE TABLE users (\n    id int NOT NULL AUTO_INCREMENT,\n    username varchar(255) NOT NULL,\n    password varchar(255) NOT NULL,\n    email varchar(255) NOT NULL,\n    PRIMARY KEY (id)\n);</s>"
  },
  {
    "text": "<s>[INST] Create a React component for displaying a list of items with name, description, and price fields. [/INST] import React from 'react';\n\nconst ItemList = ({items}) => {\n  return (\n    <div className=\"item-list\">\n      {items.map(item => (\n        <div className=\"item\" key={item.name}>\n          <div className=\"name\">{item.name}</div>\n          <div className=\"description\">{item.description}</div>\n          <div className=\"price\">{item.price}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ItemList;</s>"
  },
  {
    "text": "<s>[INST] Compare the following two strings and print out which one is bigger.\n\nstr1=\"Hello\"\nstr2=\"World\" [/INST] let str1=\"Hello\";\nlet str2=\"World\";\n\nif(str1 > str2){\n console.log(str1 + \" is bigger than \" + str2);\n}\nelse{\n console.log(str2 + \" is bigger than \" + str1);\n}</s>"
  },
  {
    "text": "<s>[INST] Given an array of strings, generate an object with the strings as keys and the length of each string as values.\n\nlet arr = [\"Hello\", \"World\", \"Foo\", \"Bar\"] [/INST] let arr = [\"Hello\", \"World\", \"Foo\", \"Bar\"];\n\nlet obj = {};\n\nfor(let i=0; i<arr.length; i++){\n obj[arr[i]] = arr[i].length;\n}\n\nconsole.log(obj); // {Hello: 5, World: 5, Foo: 3, Bar: 3}</s>"
  },
  {
    "text": "<s>[INST] Create a css class for a card component with rounded corners, a light shadow, and a maximum width of 500px. [/INST] .card {\n    border-radius: 10px;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    max-width: 500px;\n}</s>"
  },
  {
    "text": "<s>[INST] Update the following code to add a method to retrieve elements from the list.\n\nclass MyList\n  def initialize\n    @list = []\n  end\nend [/INST] class MyList\n  def initialize\n    @list = []\n  end\n\n  def get(index)\n    @list[index]\n  end\n\nend</s>"
  },
  {
    "text": "<s>[INST] Given an array of numbers, calculate the average.\n\nlet arr=[5,7,8,9] [/INST] let arr=[5,7,8,9];\n\nlet sum=0;\nfor(let i=0; i<arr.length; i++){\n sum+=arr[i];\n}\nlet average=sum/arr.length;\n\nconsole.log(average); // 7.5</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to search for numbers in an array and replace them with their square roots.\n\n[1,2,3,4,5] [/INST] Function searchAndReplace(nums):\n  for i in range(len(nums)):\n    if nums[i] >= 0:\n      nums[i] = math.sqrt(nums[i])\n  return nums</s>"
  },
  {
    "text": "<s>[INST] Write a HTML code to display a ordered list of five items inside a div with the classname \"list\". [/INST] <div class=\"list\">\n  <ol>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    <li>Item 4</li>\n    <li>Item 5</li>\n  </ol>\n</div></s>"
  },
  {
    "text": "<s>[INST] Identify the correct loop structure to traverse through a list of numbers. [/INST] for number in list_of_numbers:</s>"
  },
  {
    "text": "<s>[INST] Create a 2D array with n columns and m rows and fill it with random numbers.\n\nRows: 6, Columns: 8 [/INST] import random\n\ndef create2DArray(row, col):\n  arr = [[random.randint(1,100) for j in range(col)] for i in range(row)]\n  return arr</s>"
  },
  {
    "text": "<s>[INST] Create a stack and add two elements to it. [/INST] class Stack():\n  def __init__(self):\n    self.items = []\n  \n  def push(self, item):\n    self.items.append(item)\n  \n  def pop(self):\n    return self.items.pop()\n\nstack = Stack()\nstack.push(5)\nstack.push(7)</s>"
  },
  {
    "text": "<s>[INST] Design a program to detect an infinite loop in a given program. [/INST] def detectInfiniteLoop(program):\n  setOfInstructions = set()\n  for line in program.split('\\n'):\n    if line in setOfInstructions:\n      return True\n    setOfInstructions.add(line)\n  return False</s>"
  },
  {
    "text": "<s>[INST] Describe a good object oriented design approach for the following problem statement:\n\nDesign an application that provides a way for users to store and access their banking records. [/INST] An object oriented design approach for the problem statement would involve the following: creating a base class for the banking records which has properties to store user details and banking information, providing a way to create a savings account and checking account class that can be derived from the base class and a set of methods which can add, delete, update, retrieve and access information from the banking records. Additionally, methods which securely store and access the data should be implemented to ensure the safety of the users' data.</s>"
  },
  {
    "text": "<s>[INST] Acquire the necessary data to apply linear regression on the following problem statement\n\nPredict the average property value in a particular city given population density, housing costs and average income. [/INST] The necessary data to apply linear regression on the problem statement would include population density, housing costs and average income of the particular city. Additionally, the average property value should also be collected as the target variable to be predicted. The data could be collected from public sources like census websites or through primary data collection methods such as surveys.</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program that updates the navigation menu based on user preferences [/INST] function updateNavMenu(preferences) {\n  // code to update navigation menu for each user preference\n  let html = '';\n  for (let preference in preferences) {\n    if (preferences[preference]) {\n      html += '<li>' + preference + '</li>';\n    }\n  }\n  document.getElementById(\"navMenu\").innerHTML = html;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Django application to serve an API endpoint\n\nThe API endpoint should take an ID and return a user's name and age. [/INST] The output would involve creating a Django application with an API view that takes in the ID as the parameter and returns a dictionary containing the user's name and age. The Django application should also include the necessary models and associated functions, a URL configuration, and a core application to be used in the root project directory.</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to help a user navigate through a maze [/INST] A possible algorithm to navigate through a maze could involve a Depth-First search approach. This approach involves finding a vertex within the maze, marking it as visited and then exploring all of its unvisited neighbors. After all of the neighbors are explored, the algorithm continues to explore the closest unvisited neighbor which is found on the same level of depth. This process continues until the user reaches the end of the maze.</s>"
  },
  {
    "text": "<s>[INST] Translate the following sentiment analysis model written in Python to JavaScript\n\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Dense(128, activation='relu', input_shape=(tem_train_data.shape[1],)),\n tf.keras.layers.Dense(2, activation='softmax')\n]) [/INST] const model = tf.sequential();\nmodel.add(tf.layers.dense({units: 128, activation: 'relu', inputShape: tem_train_data.shape[1]}));\nmodel.add(tf.layers.dense({units: 2, activation: 'softmax'}));</s>"
  },
  {
    "text": "<s>[INST] Develop a React Native application to display a list of recent news articles [/INST] The output would involve creating a React Native application with a News List component which fetches news data from an API and displays it as a list. The application should include features to sort the news list by category and to pull to refresh for the latest news. Additionally, the application should support the navigation between different categories and be responsive for different display sizes.</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to join 2 tables\n\nTable1: users\nID | Name | Email\n\nTable2: orders\nOrderID | UserID | OrderDate [/INST] SELECT users.ID, users.Name, users.Email, orders.OrderID, orders.OrderDate\nFROM users\nINNER JOIN orders\nON users.ID = orders.UserID;</s>"
  },
  {
    "text": "<s>[INST] Create a web application using Flask, which provides a search form [/INST] The output would involve creating a web application using Flask that renders a search form. The search form should be able to take in a user's query, process the query and return relevant search results in a structured format. Additionally, the application should include an appropriate error handler for incorrect or invalid queries.</s>"
  },
  {
    "text": "<s>[INST] Design a data structure for a deck of cards [/INST] A data structure for a deck of cards could involve creating an array of objects or associative arrays, where each object or associative array corresponds to a card in the deck. The object or associative array should include properties such as suit, rank, and value to store information about the card. Additionally, the data structure should also include functions to manipulate the deck such as shuffle, draw, and sort.</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to find the last four digit of the customer ID from the customer table.\n\ncustomer table\n| customer_id | customer_name | address |\n--------------------------------------------\n| 000001 | John Doe | Street 1 |\n| 000002 | Jane Doe | Street 2 |\n| 000003 | John Smith | Street 3 | [/INST] SELECT RIGHT(customer_id, 4) FROM customer;</s>"
  },
  {
    "text": "<s>[INST] Create a Tkinter window with a label that says “Hello World!” [/INST] import tkinter\n\nroot = tkinter.Tk()\nlabel = tkinter.Label(root, text=\"Hello World!\")\nlabel.pack()\nroot.mainloop()</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object with two properties, x and y, and set them to 10 and 20, respectively. [/INST] let obj = {\n    x: 10,\n    y: 20\n};</s>"
  },
  {
    "text": "<s>[INST] Write a code to generate a random float between -5 and 5. [/INST] import random\n\nrandom_float = random.uniform(-5, 5)\nprint(random_float)</s>"
  },
  {
    "text": "<s>[INST] Create a CSS class and style it to give any HTML element a blue background color. [/INST] .blue-bg {\n    background-color: #4f7ed4;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the most frequently occurring item in the list.\n\n[17, 25, 6, 30, 14, 28, 6, 20, 13, 25] [/INST] def most_frequent(data):\n    freq = {}\n    for x in data:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    max_freq = 0\n    for x in freq.values():\n        if x > max_freq:\n            max_freq = x\n    most_frequent_item = []\n    for x in freq.keys():\n        if freq[x] == max_freq:\n            most_frequent_item.append(x)\n    return most_frequent_item\n\ndata = [17, 25, 6, 30, 14, 28, 6, 20, 13, 25]\n\nprint(most_frequent(data))</s>"
  },
  {
    "text": "<s>[INST] Create a class to illustrate the concept of encapsulation in Python. [/INST] class Car:\n    def __init__(self, brand, model, year):\n        self.__brand = brand\n        self.__model = model\n        self.__year = year\n    \n    def get_brand(self):\n        return self.__brand\n    \n    def get_model(self):\n        return self.__model\n    \n    def get_year(self):\n        return self.__year</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two strings as parameters, compares them, and returns 0 if they are equal, 1 if the first string is greater, and -1 if the second string is greater. [/INST] def compare_strings(str1, str2):\n    if str1 == str2:\n        return 0\n    elif str1 > str2:\n        return 1\n    else:\n        return -1</s>"
  },
  {
    "text": "<s>[INST] Using the given context and dataframe \"df\", write code to select the targets and features.\n\nContext: We are building a logistic regression model.\n\nDataFrame \"df\": \n \nIndex  | Temp (C) | Humidity  | Rain (mm)  | Rainfall (yes/no)\n0      |     15   |    80     |    0       |     No\n1      |     16   |    75     |    0       |     No\n2      |     17   |    64     |    10      |     Yes [/INST] targets = df['Rainfall (yes/no)']\nfeatures = df[['Temp (C)', 'Humidity', 'Rain (mm)']]</s>"
  },
  {
    "text": "<s>[INST] Write code to calculate the cosine similarity between the two given sentences\n\nSentences: \"this is a great day\" and \"this is a superb day\" [/INST] from sklearn.metrics.pairwise import cosine_similarity\nsentence1 = \"this is a great day\"\nsentence2 = \"this is a superb day\"\nvector1 = sentence1.split()\nvector2 = sentence2.split()\ncos_sim = cosine_similarity([vector1], [vector2])\nprint(cos_sim[0][0])</s>"
  },
  {
    "text": "<s>[INST] Using \"dictionary\" as the input, write code to print out the frequency of the words in the dictionary.\n\ndictionary = {'apple':2, 'banana':3, 'cherry':1} [/INST] for key, value in dictionary.items():\n    print(\"The frequency of {} is {}\".format(key, value))</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select the \"name\" and \"salary\" columns of all employees with salary greater than 10000.\n\nTable name: employees [/INST] SELECT name, salary FROM employees\nWHERE salary > 10000;</s>"
  },
  {
    "text": "<s>[INST] What is the value of \"c\" after the code is executed?\n\na = 10\nb = 20\nc = a + b [/INST] 30.</s>"
  },
  {
    "text": "<s>[INST] Sort the list in Ascending order of the second element of each element in the list.\n\nlist = [(-5, 2), (1, 0), (1, 3), (3, 4), (-3, -9), (-10, -2)] [/INST] sorted_list = sorted(list, key=lambda x: x[1])\nprint(sorted_list)\n\n# Output: [(-3, -9), (1, 0), (-10, -2), (-5, 2), (1, 3), (3, 4)]</s>"
  },
  {
    "text": "<s>[INST] What is the data type of the given expression?\n\nexpression = 10 + 20 [/INST] Integer.</s>"
  },
  {
    "text": "<s>[INST] Using the given code, extract the year from the given dateTime object.\n\nimport datetime \n  \ndateTime = datetime.date.today() [/INST] year = dateTime.year\nprint(year)\n\n# Output: 2021</s>"
  },
  {
    "text": "<s>[INST] How do you develop a software application through agile? [/INST] Developing a software application through agile is a process that systematically focuses on small, incremental changes that are then tested on a regular basis to ensure their effectiveness. This type of development conflicts with traditional linear development approaches that focus on big, planned and predetermined changes. Agile development cycles include iterative sprints and frequent collaboration between stakeholders to ensure the project is proceeding in the right direction. In agile, software development proceeds in a cyclic and iterative manner, which involves planning, designing, coding, and testing. During the sprints, stakeholders review and discuss software progress to ensure continued progress is being made and to help with decision making. Agile development typically involves using automated tools and technologies such as configuration management software and integrated development environments to facilitate quicker development cycles.</s>"
  },
  {
    "text": "<s>[INST] How is AI used in finance? [/INST] AI is being increasingly used in finance to improve the accuracy and speed of processes, make better-informed decisions, and streamline customer service. Financial institutions use AI to automate and speed up operations such as accounts payable and receivable, loans underwriting, money management, fraud detection, and decision-making in stock markets. AI can also be used to help manage large amounts of data and detect patterns in the data. For example, AI can be used to perform sentiment analysis on large amounts of customer data or to detect potential fraudulent activity. It can also provide insights into customer behavior and preferences that can be used to personalize services and create targeted product offerings.</s>"
  },
  {
    "text": "<s>[INST] Create an array with the following numbers: 3,2,4,5,8. [/INST] let myArray = [3, 2, 4, 5, 8];</s>"
  },
  {
    "text": "<s>[INST] How can you utilize SQL in machine learning? [/INST] SQL is useful in machine learning projects because it allows the data scientist to organize and store large datasets. SQL can also be used to join different datasets and merge unstructured datasets efficiently. Further, with SQL, data scientists can filter and prepare the dataset for further machine learning modeling. Also, SQL can be used to find out the statistical properties of a dataset, such as maximum values, mean, median and other summary outputs, which are very useful for machine learning projects. Finally, SQL can be used to predict future values through statistical models.</s>"
  },
  {
    "text": "<s>[INST] How can you use recurrent neural networks for sequence prediction? [/INST] Recurrent neural networks (RNNs) can be used for sequence prediction tasks. RNNs are powerful models that are able to capture patterns from sequences of data and can remember information from previous inputs. The network is comprised of layers and nodes, and each layer contains nodes that are connected to the previous layer. When a sequence is fed into the network, the nodes of the first layer are activated based on the input. The output of the first layer serves as the input for the next layer, and so on. As the sequence progresses, the internal state of the network is updated and used to make predictions. The output of the RNN is then a prediction of the next element in the sequence.</s>"
  },
  {
    "text": "<s>[INST] Explain one of the most significant application of neural networks in computer science. [/INST] One of the most significant applications of neural networks in computer science is image recognition. Neural networks, with their deep learning capabilities, are able to tackle complex image recognition problems that are difficult to solve with traditional algorithmic approaches. Neural network based systems have been used successfully to identify objects in photos, process real-time video frames, and even to diagnose medical conditions such as cancer.</s>"
  },
  {
    "text": "<s>[INST] Design a memory efficient algorithm for a given problem.\n\nGiven a list of integers, find the average of all the elements. [/INST] def find_average(nums):\n    length = len(nums)\n    total = 0\n    \n    for i in range(length):\n        total += nums[i]\n        \n    return total / length</s>"
  },
  {
    "text": "<s>[INST] How would you code a basic spell-checker [/INST] def spell_checker(input_text):\n    correct_words = []\n    wrong_words = []\n    \n    for word in input_text.split():\n        if is_correct(word):\n            correct_words.append(word)\n        else:\n            wrong_words.append(word)\n            \n    return correct_words, wrong_words\n\n# where is_correct() is an appropriate function to determine if the word is spelled correctly or not</s>"
  },
  {
    "text": "<s>[INST] What data structure would you use to store a matrix in Python [/INST] The best data structure to store a matrix in Python is a two-dimensional list. A two-dimensional list is a list of lists where each sub-list represents a row in the matrix. This makes it easy to access and modify values in the matrix.</s>"
  },
  {
    "text": "<s>[INST] Find the angle between two given vectors [/INST] The angle between two vectors can be found using the following formula: theta = arccos(v1.v2 / (||v1||*||v2||)), where v1 and v2 represent the two given vectors and ||v1|| and ||v2|| are the magnitudes of the vectors.</s>"
  },
  {
    "text": "<s>[INST] Why is indexing important in databases? [/INST] Indexing in databases is important because it allows for faster access to data. Indexing works by creating an index data structure that stores a specific value or field in the database and a pointer to the data record containing that value. This strategy increases the speed of the query operations by allowing programs to quickly search the index to find the data instead of searching each record in the database one-by-one.</s>"
  },
  {
    "text": "<s>[INST] Sort a given array of integers using Quick Sort [/INST] def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)</s>"
  },
  {
    "text": "<s>[INST] What is the difference between static binding and dynamic binding [/INST] Static binding is the process of linking a procedure call to the code to be executed during compile-time. This link is done by compiler at the compile-time and is fixed for the life of the program. On the other hand, dynamic binding is the process of linking a procedure call to the code to be executed during run-time. This link is done by the program at the run-time and can be changed during the life of the program.</s>"
  },
  {
    "text": "<s>[INST] Alter the following given code so that it will implement the Bubble Sort Algorithm\n\ndef mySort(arr): \n\tn = len(arr) \n\n\tfor i in range(n-1): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] [/INST] def bubbleSort(arr):\n    n = len(arr) \n\n    for i in range(n): \n  \n        for j in range(0, n-i-1): \n  \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that outputs the names of all the students in a given table sorted in descending order [/INST] SELECT name FROM students ORDER BY name DESC;</s>"
  },
  {
    "text": "<s>[INST] Read in a string of comma-separated integers and create an array of the integers.\n\n\"1,2,3,4,5\" [/INST] int[] arr = {1,2,3,4,5};</s>"
  },
  {
    "text": "<s>[INST] Create a virtual environment in Python using the \"virtualenv\" tool. [/INST] python -m pip install virtualenv\nvirtualenv envname\nsource envname/bin/activate</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find all records of employees who are over 40 years old. [/INST] SELECT * FROM Employees WHERE age > 40;</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes in a max number and returns the sum of all numbers between 0 and the max number.\n\n10 [/INST] def sumFromZeroToMax(n):\n  sum = 0\n  for x in range(n+1):\n    sum += x\n  return sum\n\nprint(sumFromZeroToMax(10))</s>"
  },
  {
    "text": "<s>[INST] Fix the logic of the function to print out the element in the array.\n\nlet nums = [1, 2, 3, 4]; [/INST] let nums = [1, 2, 3, 4];\n\nfunction printArrElement(arr){\n    for(let i = 0; i < arr.length; i++){\n        console.log(arr[i]);\n    } \n}\n\nprintArrElement(nums);</s>"
  },
  {
    "text": "<s>[INST] Make an API call to get the current weather in a given city. [/INST] import requests\n\napi_key = \"<Enter API key here>\"\ncity = \"London\"\nurl = \"http://api.openweathermap.org/data/2.5/weather?q={}&appid={}\".format(city, api_key)\n\nres = requests.get(url)\ndata = res.json()\n \nprint(\"Current temperature in {} is {}°F\".format(city, data[\"main\"][\"temp\"]-273.15 * 9/5 + 32))</s>"
  },
  {
    "text": "<s>[INST] Write code to calculate the total number of votes for a candidate in an election.\n\ncandidates = [\"AJ Bascombe\", \"Maya Mathews\", \"Toby White\"]\nvotes = [2000, 4000, 3000] [/INST] total_votes = 0\nfor candidate in range(len(candidates)):\n total_votes+=votes[candidate]\nprint(total_votes)</s>"
  },
  {
    "text": "<s>[INST] Write a statement to print a formatted string.\n\nName: Joe\nAge: 31 [/INST] print(\"My name is {}, and I'm {} years old.\".format(\"Joe\",31))</s>"
  },
  {
    "text": "<s>[INST] Implement a simple search engine using recursion.\n\nquery = \"computer\"\ndata = [\"mobile\",\"computer\",\"laptop\",\"tablet\"] [/INST] def search(query, data):\n  # base case\n  if len(data) == 0:\n    return False\n  # recursive step\n  else:\n    if data[0] == query:\n      return True\n    else:\n      return search(query, data[1:])\n\nquery = \"computer\"\ndata = [\"mobile\",\"computer\",\"laptop\",\"tablet\"]\n\nprint(search(query, data))</s>"
  },
  {
    "text": "<s>[INST] Edit the given list to only include even numbers.\n\nlist = [2,3,4,5,6,7,8] [/INST] for i in list:\n  if i % 2 != 0:\n    list.remove(i)\n\nprint(list)</s>"
  },
  {
    "text": "<s>[INST] Edit this code to print out the square of a given number, using '#' as a marker.\n\nnum = 8 [/INST] num = 8 \n#\n#\n#\n#\n#\n#\n#\n# # # # # # # # # #</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to find all the Pythagorean triplets which sum up to the given number. [/INST] def find_triplet(n):\n    \"\"\"\n    @brief: Finds all Pythagorean triplets which sum upto the given number n\n    @param n: the sum which is the given number \n    @return: a list of all Pythagorean triplets which might sum upto n, or an empty list if none are found\n    \"\"\"\n    triplets = []\n    for a in range(1, n):\n        for b in range(a + 1, n - a):\n            c = int(n - a - b)\n            if (a*a) + (b*b) == (c*c):\n                triplets.append((a, b, c))\n    return triplets</s>"
  },
  {
    "text": "<s>[INST] Design a program to find all prime numbers up to a given limit n. [/INST] def find_primes(limit):\n    \"\"\"\n    @brief: Finds all prime numbers up to a given limit n\n    @param limit: the upper limit to find prime numbers\n    @return: a list of all prime numbers found\n    \"\"\"\n    primes = []\n    for n in range(2, limit + 1):\n        is_prime = True\n        for prime in primes:\n            if n % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to swap the values of two variables without using a third variable.\n\na = 5\nb = 3 [/INST] a = 5\nb = 3\n\na, b = b, a</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to determine the number of odd numbers in a given array. [/INST] def count_odds(arr):\n    \"\"\"\n    @brief: Counts the number of odd numbers in a given array\n    @param arr: array whose odd numbers are to be counted\n    @return: the number of odd numbers in the given array\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num % 2 == 1:\n            count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Given a list of integers and a target value, calculate two integers in the list that add up to the target value.\n\ntarget = 6\nlist = [1, 2, 3, 4, 5] [/INST] (1, 5)</s>"
  },
  {
    "text": "<s>[INST] Create an array in Python that contains five different values. [/INST] arr = [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Write a SELECT query to identify the names of authors who have published books with the topic ‘Artificial Intelligence’. [/INST] SELECT name FROM Author WHERE topic = 'Artificial Intelligence';</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to take a given number and add 10 to it. [/INST] function addTen(num) {\n  return num+10;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java class to define a student object that includes a name and a grade. [/INST] public class Student {  \n    //instance variables  \n    String name;  \n    int grade;  \n      \n    //constructor  \n    public Student(String studentName, int studentGrade) {  \n        name = studentName;  \n        grade = studentGrade;  \n    }  \n      \n    //methods  \n    public String getName(){  \n        return name;  \n    }  \n    public int getGrade(){  \n        return grade;  \n    }  \n}</s>"
  },
  {
    "text": "<s>[INST] Write an Iterative program in Java to print the first n terms of the Fibonacci sequence. [/INST] public static void printFibonacciIterative(int n) \n{ \n    int prev1=0, prev2=1, sum=0; \n  \n    for (int i = 0; i < n; i++) \n    { \n        System.out.print(sum + \" \"); \n        prev2 = sum; \n        sum = prev1 + prev2; \n        prev1 = prev2; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a bar chart in Python, plotting the following integer data set.\n\n[1, 2, 4, 8, 16, 32] [/INST] import matplotlib.pyplot as plt\n \ndata_set = [1, 2, 4, 8, 16, 32]\n \nplt.bar(range(len(data_set)), data_set)\nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Create a python script to determine whether a number is odd or even.\n\n15 [/INST] number = 15 \nif (number % 2 == 0): \n    print(\"even\") \nelse: \n    print(\"odd\")</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to output the full names from a 'persons' table. [/INST] SELECT first_name, last_name FROM persons;</s>"
  },
  {
    "text": "<s>[INST] Write a function in C++ to check if the given array of integers is in ascending order or not.\n\n[1, 2, 3, 4, 5] [/INST] bool is_ascending(int arr[], int arr_size) \n{ \n    if (arr_size == 1) \n        return true; \n  \n    // Recursively check if the \n    // array is sorted in \n    // non-decreasing order by \n    // calling for the rest of \n    // the array. \n    if (arr[0] < arr[1] && \n        is_ascending(arr + 1, arr_size - 1)) \n        return true; \n    else\n        return false; \n}</s>"
  },
  {
    "text": "<s>[INST] Convert the following array of strings to a set of tuples in Python.\n\n['Python', 'Java', 'JavaScript'] [/INST] arr =  ['Python', 'Java', 'JavaScript']\narr_tuple = tuple(arr)\nprint(arr_tuple)</s>"
  },
  {
    "text": "<s>[INST] From the given data set, calculate the mean and print it out.\n\n[1, 2, 3, 4, 5] [/INST] data_set = [1, 2, 3, 4, 5]\nmean = sum(data_set) / len(data_set)\nprint(\"The mean is {}\".format(mean))</s>"
  },
  {
    "text": "<s>[INST] Make a prediction using the following machine learning model in Python. [/INST] svm_model = SVC()\nsvm_model.fit(X_train, y_train)\npredictions = svm_model.predict(X_test)</s>"
  },
  {
    "text": "<s>[INST] Write a regex pattern to check if the given string is a US phone number. [/INST] regex = r\"^\\(?[2-9]{3}\\)?[-. ]?[2-9]{3}[-. ]?[0-9]{4}$\"</s>"
  },
  {
    "text": "<s>[INST] Create a random list of 10 numbers in the range of -10 to 10 in Python. [/INST] import random\n \nrandom_list = [random.randint(-10, 10) for i in range(10)] \nprint(random_list)</s>"
  },
  {
    "text": "<s>[INST] Generate a SQL statement to retrieve the title of all books in the library table. [/INST] SELECT title FROM Library;</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form with radio buttons and labels to get the user's gender. [/INST] <form>\n  <label>Gender:</label>\n  <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\">\n  <label for=\"male\">Male</label>\n  <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n  <label for=\"female\">Female</label>\n</form></s>"
  },
  {
    "text": "<s>[INST] Scan the given array and find the second largest number.\n\n[13, 54, 78, 54, 3, 87] [/INST] 78</s>"
  },
  {
    "text": "<s>[INST] Generate a JavaScript object that contains two key-value pairs. [/INST] let object = {\n  key1: \"value1\",\n  key2: \"value2\" \n}</s>"
  },
  {
    "text": "<s>[INST] Identify the wrong code in this JavaScript snippet.\n\nlet a = \"Hello World!\";\nconsole 'log(a); [/INST] console 'log(a); // lacks () parenthesis for the log method of the console object.</s>"
  },
  {
    "text": "<s>[INST] Write a query to retrieve all rows from the Students table where the Grade is \"A\". [/INST] SELECT * FROM Students WHERE Grade = 'A';</s>"
  },
  {
    "text": "<s>[INST] Write an Apache VTL code to check if the user is logged in or not. [/INST] #if(${user.loggedIn})\n  You are logged in.\n#else\n  You are not logged in.\n#end</s>"
  },
  {
    "text": "<s>[INST] Convert the string \"Hello World\" to upper case using a Java program. [/INST] String upperCaseString = \"Hello World\".toUpperCase();</s>"
  },
  {
    "text": "<s>[INST] What is the argument type of the function \"len()\" in Python? [/INST] The argument type of the function \"len()\" in Python is an object.</s>"
  },
  {
    "text": "<s>[INST] Modify the code below to create a new function called \"addSquares()\" that adds the squares of two numbers and returns the result.\n\ndef add(x, y):\n   return x + y [/INST] def add(x, y):\n   return x + y\n\ndef addSquares(x, y):\n   return x*x + y*y</s>"
  },
  {
    "text": "<s>[INST] Print all the numbers in a given string using Java.\n\nString str = \"123XYZ456ABC789\" [/INST] for (int i = 0; i < str.length(); i++) {\n   if (Character.isDigit(str.charAt(i))) {\n      System.out.print(str.charAt(i) + \" \");\n   }\n}\n\n// Output -> 1 2 3 4 5 6 7 8 9</s>"
  },
  {
    "text": "<s>[INST] Create a program in Java to print a multiplication table of size 5x5. [/INST] for (int i = 1; i <= 5; i++) {\n   System.out.printf(\"%d * %d = %d\\n\", i, i, i * i); \n   for (int j = 1; j <= 5; j++) {\n      System.out.printf(\"%d * %d = %d\\n\", i, j, i * j);\n   }\n   System.out.println();\n}</s>"
  },
  {
    "text": "<s>[INST] Find the power of a number using a C program.\n\nBase = 5, Exponent = 3 [/INST] #include <stdio.h>\n\nint main() \n{ \n    int base = 5, exponent = 3, result = 1; \n    while (exponent != 0) { \n        result *= base; \n        --exponent; \n    } \n  \n    printf(\"Result = %d\", result); \n    return 0; \n}\n\n// Output -> Result = 125</s>"
  },
  {
    "text": "<s>[INST] How many parameters does a C++ function have? [/INST] A C++ function can have any number of parameters, from zero parameters to an unlimited number of parameters.</s>"
  },
  {
    "text": "<s>[INST] What is the syntax for creating an object of the \"Car\" class in Java? [/INST] The syntax for creating an object of the \"Car\" class in Java is:\nCar myCar = new Car();</s>"
  },
  {
    "text": "<s>[INST] Write a Java function to compare two strings and print the longer string.\n\n// Two Strings:\nString str1 = \"stack\";\nString Str2 = \"overflow\"; [/INST] public static String longestString(String str1, String str2) {\n if (str1.length() > str2.length()) {\n  return str1;\n }\n return str2;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program for printing a pyramid pattern up to a given number.\n\n//n = 5 [/INST] #include<iostream>\nusing namespace std;\n \nint main()\n{\n    int i, j, rows;\n \n    cout << \"Enter number of rows: \";\n    cin >> rows;\n \n    for(i=1; i<=rows; i++)\n    {\n        for(j=1; j<=i; ++j)\n        {\n            cout<< \"* \";\n        }\n        cout << \"\\n\";\n    }\nreturn 0;</s>"
  },
  {
    "text": "<s>[INST] Using Flexbox (CSS Framework), center the text \"My Title\" horizontally and vertically on the page. [/INST] .container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n<div class=\"container\">\n    <h1>My Title</h1>\n</div></s>"
  },
  {
    "text": "<s>[INST] Construct a query in SQL to select users from the \"Users\" table aged between 30 and 40.\n\n// Table Name\nUsers [/INST] SELECT *\nFROM Users\nWHERE age BETWEEN 30 AND 40;</s>"
  },
  {
    "text": "<s>[INST] Craft a JavaScript snippet to create an array with elements from 0 to 10. [/INST] let array = Array.from({length: 11}, (v, k) => k);</s>"
  },
  {
    "text": "<s>[INST] Find the maximum element from a given array in JavaScript.\n\n//Array\nlet array = [2, 3, 6, 9, 5, 14]; [/INST] let maxElement = Math.max(...array);\nconsole.log(maxElement);\n//Output: 14</s>"
  },
  {
    "text": "<s>[INST] Create an HTML element that displays text “Welcome” with the color blue. [/INST] <span style=\"color: blue;\">Welcome</span></s>"
  },
  {
    "text": "<s>[INST] Modify a C++ program to print the following sequence of numbers using a loop:\n* 5, 4, 3, 2, 1\n\n//Existing code\ncout << \"Hello world!\" << endl; [/INST] #include <iostream>\nusing namespace std;\n\nint main ()\n{\n    int x;\n    cout << \"Hello world!\" << endl;\n    for (x=5; x>=1; x--) \n    { \n      cout << x <<\", \"; \n    }\n    cout << \"Blast off!\";\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to get the name of the oldest user from the \"Users\" table.\n\n// Table Name\nUsers [/INST] SELECT name  \nFROM Users\nORDER BY date_of_birth DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Create a function to register a new user using a given username, email and password.\n\nusername: angelina \nemail: angelina@example.com\npassword: abc12345 [/INST] \"\"\"\nFunction register: Registers a new user using a given username, email and password\n\"\"\"\n\ndef register(username, email, password):\n    # initialize user database\n    user_db = {}\n    # add user info to database\n    user_db[username] = {\n        'email': email,\n        'password': password\n    }\n    # return user database\n    return user_db\n\nif __name__ == '__main__':\n    username = 'angelina'\n    email = 'angelina@example.com'\n    password = 'abc12345'\n    print(register(username, email, password))</s>"
  },
  {
    "text": "<s>[INST] Compute the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\nA = 5 \nB = 7\nX = 31 [/INST] \"\"\"\nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \n    # Try all possible combinations between coins of A and B\n    max_money = 0\n    for a in range(max_A + 1):\n        for b in range(max_B + 1):\n            money = a * A + b * B\n            if money <= X:\n                max_money = max(max_money, money)\n  \n    return max_money\n\nif __name__ == '__main__':\n    A = 5\n    B = 7\n    X = 31\n    print(max_money(A, B, X))</s>"
  },
  {
    "text": "<s>[INST] Classify the given news title into two categories: Positive andNegative\n\nThe stock market bounces back [/INST] Positive.</s>"
  },
  {
    "text": "<s>[INST] Create a function to group a given set of numbers into a continuous range\n\nSet of numbers: [1, 3, 4, 6, 7, 8, 10] [/INST] \"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\n\ndef group_numbers(nums):\n    # Initialize left and right pointers\n    l = 0\n    r = 1\n    # Initialize ranges list\n    ranges = []\n    \n    while r < len(nums):\n        # If the end of the range is not same as the \n        # start of the next range, append the current range \n        if nums[r - 1] + 1 != nums[r]:\n            ranges.append(str(nums[l]) + \"->\" + str(nums[r - 1]))\n            l = r\n\n        r += 1\n\n    # Append the last range\n    ranges.append(str(nums[l]) + '->' + str(nums[r - 1]))\n\n    return ranges\n\nif __name__ == '__main__':\n    nums = [1, 3, 4, 6, 7, 8, 10]\n    print(group_numbers(nums))</s>"
  },
  {
    "text": "<s>[INST] Implement a comparator method in Java to compare two objects of the same class.\n\nclass Country {\n    String name;\n    double population;\n    double area;\n} [/INST] class CountryComparator implements Comparator<Country> {\n    @Override\n    public int compare(Country c1, Country c2) {\n        //compare by population\n        if (c1.population < c2.population) {\n            return -1;\n        } else if (c1.population > c2.population) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to display the most populous region with its population count [/INST] SELECT region, COUNT(*) AS population\n  FROM Census\n  GROUP BY region\n  ORDER BY population DESC\n  LIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to identify the most frequently occurring value in a given column [/INST] SELECT column_name, COUNT(*) AS frequency\nFROM table_name\nGROUP BY column_name\nORDER BY frequency DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write a HTML code to create a table with two columns, one for the name of a person and the other for their address. [/INST] <table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Address</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>John Doe</td>\n      <td>123 Main Street</td>\n    </tr>\n    <tr>\n      <td>Jane Doe</td>\n      <td>456 South Ave</td>\n    </tr>\n  </tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Create a PHP script to encode a given string in base-64. [/INST] <?php\n  // Function to encode a given string in base-64\n  function encodeBase64($str){\n    return base64_encode($str);\n  }\n\n  echo encodeBase64(\"Hello World!\");\n?></s>"
  },
  {
    "text": "<s>[INST] Write a MongoDB query to find documents where a given field contains a substring. [/INST] db.collection.find({$where: \"return this.field.includes('substring')\"})</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code to create a dropdown selection list with three options. [/INST] <select>\n  <option value=\"option1\">Option 1</option>\n  <option value=\"option2\">Option 2</option>\n  <option value=\"option3\">Option 3</option>\n</select></s>"
  },
  {
    "text": "<s>[INST] Compile and execute this Java code.\n\npublic class Main { \n public static void main(String[] args) { \n System.out.println(\"Welcome to Java\"); \n } \n} [/INST] Compilation successful.\n\nWelcome to Java</s>"
  },
  {
    "text": "<s>[INST] Explain the use of 'break' and 'continue' in for loops. [/INST] The “break” keyword is used to exit from the loop and continues to execute the code after the loop. The \"continue\" keyword is used to skip the rest of the loop and start from the beginning of the loop again. It is used mostly when you have defined certain condition and want to skip some codes when that condition is being met.</s>"
  },
  {
    "text": "<s>[INST] Create classes and interfaces to represent an online news system. [/INST] class NewsSystem {\n    public string title;\n    public string content;\n    \n    public NewsSystem(string title, string content) {\n        this.title = title;\n        this.content = content;\n    }\n}\n\ninterface INewsActions {\n    void PostNewArticle(NewsSystem article);\n    void EditArticle(NewsSystem article);\n    void DeleteArticle(NewsSystem article);\n}</s>"
  },
  {
    "text": "<s>[INST] Design a data structure that will store name, phone number and address of a person. [/INST] class PersonData {\n    String name;\n    String phoneNumber;\n    String address;\n\n    PersonData(String name, String phoneNumber, String address) {\n        this.name = name;\n        this.phoneNumber = phoneNumber;\n        this.address = address;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Convert this ES6 code to ES5.\n\nlet newList = myList.map(num => num * 2) [/INST] var newList = myList.map(function(num) {\n    return num * 2;\n});</s>"
  },
  {
    "text": "<s>[INST] Create a function that converts an arbitrary number from any base between 2 and 16 to its decimal representation.\n\nint value = 0xFE; [/INST] public static int ConvertToDecimal (int value, int base) \n{ \n    int decimalValue = 0; \n      \n    int i = 0; \n    while (value != 0 && i++ < 8) \n    { \n        int remainder = value % 10; \n        value /= 10; \n          \n        decimalValue += remainder * (int)Math.Pow(base, i); \n    }\n    return decimalValue;\n}</s>"
  },
  {
    "text": "<s>[INST] Describe the purpose of Asynchronous programming. [/INST] Asynchronous programming is a method of concurrent programming in which a unit of work runs separately from the main application thread and notifies the calling thread of its completion, failure or progress. It enables programs to run multiple operations at the same time without blocking other operations. This helps improve the performance of applications by allowing them to do work in parallel.</s>"
  },
  {
    "text": "<s>[INST] Describe the use of the HSL color model in web development. [/INST] The HSL (hue, saturation, lightness) color model is used in web development for specifying colors. Hue is the color in the color wheel, saturation is the intensity, and lightness is how light/dark the color is. This model is easy to use and understand because it uses values that are more familiar and natural to humans, making it possible to create more visually appealing and consistent color schemes.</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select all columns with the same last name from a database table.\n\nTable Name: \"Users\"\nColumns: \"FirstName\", \"LastName\" [/INST] SELECT * FROM Users WHERE LastName = (SELECT LastName FROM Users);</s>"
  },
  {
    "text": "<s>[INST] Edit the following function to only accept lowercase parameters.\n\ndef greeting(name):\n    print('Hello, ' + name + '!') [/INST] def greeting(name):\n    name = name.lower()\n    print('Hello, ' + name + '!')</s>"
  },
  {
    "text": "<s>[INST] Write SQL query to calculate total rental fees for customers who have rented a movie in the past 7 days.\n\nTable Name: \"Rentals\"\nColumns: \"CustomerId\", \"RentalDate\", \"RentalFee\" [/INST] SELECT SUM(RentalFee) \nFROM Rentals\nWHERE RentalDate >= DATE_SUB(CURDATE(),INTERVAL 7 DAY);</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the highest grossing movie.\n\nTable Name: \"Movies\"\nColumns: \"MovieName\", \"BoxOfficeGross\" [/INST] SELECT MovieName\nFROM Movies\nORDER BY BoxOfficeGross DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript to check if the given string contains a vowel or not. [/INST] function containsVowel(str) {\n  var vowels = \"aeiou\"\n  for(i=0; i<str.length; i++) {\n    if (vowels.indexOf(str[i]) !== -1)\n      return true;\n  }\n  return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Ruby script to loop through the items of a given array and print it on the command line.\n\nlist = [\"Apple\",\"Banana\",\"Orange\"] [/INST] list = [\"Apple\",\"Banana\",\"Orange\"]\n\nlist.each do |item|\n  puts item\nend</s>"
  },
  {
    "text": "<s>[INST] How can you access the last element of the following Python array?\n\narr = [\"A\",\"B\",\"C\",\"D\",\"E\"] [/INST] arr[-1]</s>"
  },
  {
    "text": "<s>[INST] How can you check if the given word is a palindrome in Python? [/INST] word = \"madam\"\n\nif word == word[::-1]:\n  print(\"It is a palindrome\")\nelse:\n  print(\"It is not a palindrome\")</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that returns the sum of inventories in the Inventory table. [/INST] SELECT SUM(Amount) FROM Inventory;</s>"
  },
  {
    "text": "<s>[INST] Create a data structure to store records of students' attendance. [/INST] struct StudentAttendance\n{\n    int studentId;  // Unique identifier for each student\n    int classId;    // Unique identifier for each class\n    int year;       // Year of the class\n    string month;   // Month of the class\n    int attendance; // Number of attendances\n};</s>"
  },
  {
    "text": "<s>[INST] Read the provided string and print the number of vowels in it.\n\n\"GPT-3 is an advanced language model\" [/INST] 7</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query that returns the top five most expensive items in the table. [/INST] SELECT ItemName, Price \nFROM Items \nORDER BY Price DESC \nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to insert a new node into a singly linked list.\n\nhead -> 3 -> 4 -> 6 -> null [/INST] // Insert 8 after 4\n\npublic static Node insertNode(Node head, int data) \n{ \n    Node node = new Node(data); \n  \n    // Empty List \n    if (head == null) \n    { \n        node.next=null; \n        head = node; \n        return head; \n    } \n  \n    Node CurrNode = head; \n  \n    while (CurrNode.data != 4) \n    { \n        CurrNode = CurrNode.next; \n    } \n  \n    Node temp = CurrNode.next; \n  \n    CurrNode.next = node; \n    node.next = temp; \n  \n    return head; \n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of numbers and check if a given number exists in the array. Output true if it exists, output false if it does not.\n\narr = [1,2,3,4,5]\nn = 4 [/INST] true</s>"
  },
  {
    "text": "<s>[INST] You receive an array of numbers as input and you need to calculate the median number.\n\narr = [3, 2, 4, 1, 5] [/INST] 3.0</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script that closes a MySQL connection. [/INST] mysqli_close($connection);</s>"
  },
  {
    "text": "<s>[INST] A website requires a logo to be displayed in the header. Design a logo and write the HTML code to display it. [/INST] <div class=\"logo\">\n \t<img src=\"logo.png\" alt=\"Company Logo\">\n</div></s>"
  },
  {
    "text": "<s>[INST] Read the provided code and determine whether it is using object-oriented programming or not. Output true if it is and false if it is not.\n\nfunction displayName(name) {\n  console.log(name);\n} [/INST] false</s>"
  },
  {
    "text": "<s>[INST] You need to write a function that validates a given password. It should only be valid if it contains at least one lowercase letter, one uppercase letter, one number, and one special character. [/INST] function validatePassword(password) {\n  if(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(password))\n  {\n      return true;\n  }\n  else\n  {\n      return false;\n  }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Devise a data structure to store an inventory of items in a store. [/INST] struct StoreInventory {\n    char itemName;  //Name of the item\n    int itemCode;   //Unique identifier for each item \n    float itemPrice; //Price of the item \n    int itemQuantity; //Quantity of the item \n};</s>"
  },
  {
    "text": "<s>[INST] Reverse a given array without using a loop.\n\narr = [1,2,3,4] [/INST] [4, 3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Write a code to generate 1000 random numbers and print the mean of these random numbers. [/INST] # Import the random module\nimport random\n\n# Generate 1000 random numbers \nrandom_numbers = [random.randint(1, 1000) for i in range(1000)]\n\n# Calculate mean of the random numbers\nmean = sum(random_numbers)/len(random_numbers)\n\n# Print mean of random numbers\nprint(\"The mean of 1000 random numbers is: \", mean)</s>"
  },
  {
    "text": "<s>[INST] Create a code to raise a number to a given power p.\n\n2 [/INST] # Define the function to raise a number to a given power\ndef power(x, p):\n \n # The base case is when power is 0 \n if p == 0:\n  return 1\n  \n # if power is not 0, then recursively call the function power \n return x * power(x, p-1)\n\n# Get the number\nx = 2\n\n# Get the power\np = 3\n\n# Calculate the result\nresult = power(x, p)\n\n# Print the result\nprint(\"The result is: \", result)</s>"
  },
  {
    "text": "<s>[INST] Create a code to print the items from a given array in reverse.\n\n[1,2,3,4] [/INST] # Define the function to print array in reverse\ndef print_reverse(arr):\n \n # Base case\n if len(arr) == 0 :\n  return\n\n # Print the last value\n print(arr.pop())\n\n # Recursive call with array - 1 \n return print_reverse(arr)\n\n# Get the array\narr = [1,2,3,4]\n\n# Print the array in reverse\nprint(\"The array in reverse is: \")\nprint_reverse(arr)</s>"
  },
  {
    "text": "<s>[INST] Given a two-dimensional array, write a code to print the elements column-wise.\n\n[[1, 2], [3, 4], [5, 6]] [/INST] # Define a function to print elements column-wise \ndef print_columnwise(arr):\n\n # Get the number of rows and columns\n num_rows = len(arr)\n num_cols = len(arr[0])\n \n # Initialize the columns \n k = 0\n\n # Iterate through the rows\n while k < num_cols :\n  # Iterate through the columns\n  for i in range(num_rows):\n   # Print the element\n   print(arr[i][k], end=\" \")\n  \n  # Update the column\n  k = k + 1\n  print()\n\n# Get the array\narr = [[1, 2], [3, 4], [5, 6]]\n\n# Print the elements column-wise \nprint_columnwise(arr)</s>"
  },
  {
    "text": "<s>[INST] Change the following text from uppercase to lowercase.\n\nMY NAME IS JOHN [/INST] my name is john</s>"
  },
  {
    "text": "<s>[INST] Write a CSS class that will make the font size of all elements 2 times larger. [/INST] .increase-font-size {\n    font-size: 2rem;\n}</s>"
  },
  {
    "text": "<s>[INST] Convert the given list of integers to a string of comma separated values.\n\n[1, 2, 3, 4, 5] [/INST] \"1,2,3,4,5\"</s>"
  },
  {
    "text": "<s>[INST] Create a function to find the total number of vowels in a series of strings.\n\nstring1: \"Hello\"\nstring2: \"World\" [/INST] public static int countVowels(String... strings) {\n    int count = 0;\n    \n    for (String str : strings) {\n        for (char c : str.toCharArray()) {\n            switch (c) {\n                case 'a':\n                case 'e':\n                case 'i':\n                case 'o':\n                case 'u':\n                    count++;\n            }\n        }\n    }\n    \n    return count;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to calculate the average of a list of integers given as input. [/INST] def average(nums):\n    \"\"\"\n    Takes a list of numbers and returns the average.\n    \"\"\"\n    \n    total = 0\n    for num in nums:\n        total += num\n    \n    return total / len(nums)</s>"
  },
  {
    "text": "<s>[INST] Create a css class for a table to be displayed on a mobile device. [/INST] .mobile-table {\n    width: 100%;\n    border-collapse: collapse;\n    overflow-x: scroll;\n}\n\n.mobile-table td {\n    padding: 10px;\n    vertical-align: top;\n    overflow-y: hidden;\n    overflow-x: auto;\n}</s>"
  },
  {
    "text": "<s>[INST] Split the given string into words and remove any words that have less than 4 characters.\n\nstring = 'This is a test string' [/INST] string = 'This is a test string'\nwords = string.split()\nfiltered_words = []\nfor word in words:\n    if len(word) >= 4:\n        filtered_words.append(word)\n\nprint(filtered_words)\n\n# Output:\n# ['This', 'test', 'string']</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to convert a given number to its Roman numeral equivalent. [/INST] function toRoman(num) {\n    // store roman equivalents of numbers\n    var romanNumerals = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L'\n    };\n  \n    // array to store roman numeral\n    var roman = [];\n  \n    // loop to check for roman equivalents\n    for (let i = Object.keys(romanNumerals).length; i >= 0; i--) {\n        let div = Math.floor(num / Object.keys(romanNumerals)[i]);\n        let rem = num % Object.keys(romanNumerals)[i];\n  \n        if (div > 0) {\n            roman.push(romanNumerals[Object.keys(romanNumerals)[i]].repeat(div));\n            num = rem;\n        }\n    }\n  \n    // return the new created string\n    return roman.join(\"\");\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes in a list of strings and returns True if any of the strings contains the letter `a`. [/INST] def contains_A(strings):\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to remove comments from the Java program.\n\npublic class HelloWorld {\n    /*\n    This is a multiline comment.\n    */\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\"); // This is a single line comment.\n    }\n} [/INST] public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\"); \n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a bash script to check the disk usage of the \"/tmp\" directory. [/INST] #!/bin/bash\n\necho \"Checking disk usage of the /tmp directory\"\n\n# Get the current disk usage\ndu -sh /tmp/</s>"
  },
  {
    "text": "<s>[INST] Create a PHP function that sorts the elements of an array in ascending order. [/INST] <?php\nfunction sort_array_ascending($array) {\n    sort($array);\n    return $array;\n}\n?></s>"
  },
  {
    "text": "<s>[INST] Write a loop to iterate through the following array and prints each element.\n\narr = [1, 2, 3, 4, 5] [/INST] arr = [1, 2, 3, 4, 5];\n\nfor (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Filter the array based on the given condition and return a new array of elements that satisfy the condition.\n\narr = [1, 2, 3, 4, 5] [/INST] arr = [1, 2, 3, 4, 5];\n\nconst filteredArray = arr.filter(item => item % 2 === 0);\n\nconsole.log(filteredArray);\n\n# Output:\n# [2, 4]</s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query to find all documents that have an array \"items\" with a field \"name\" equal to \"pen\". [/INST] db.collection.find( { \"items\": { $elemMatch: { \"name\": \"pen\" } } } )</s>"
  },
  {
    "text": "<s>[INST] Refactor the following condition to use the ternary operator instead of an if-else statement.\n\nif (x < 0) {\n   y = -1;\n} else {\n   y = 1;\n} [/INST] y = x < 0 ? -1 : 1;</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to check if a given string can be converted to a palindrome. [/INST] We can use a two pointer approach to traverse the string and compare the leftmost and rightmost characters. If the characters are not equal, then the string cannot be a palindrome. We can move the left pointer one character to the right, and move the right pointer one character to the left, and compare the characters again. We keep repeating this until either the left pointer is equal to the right pointer, or the left and right pointers have crossed each other. If one of the comparisons does not result in equality, then the string cannot be converted to a palindrome. If the left pointer is equal to the right pointer, or if the two pointers have crossed each other, then the string can be converted to a palindrome.</s>"
  },
  {
    "text": "<s>[INST] Describe a machine learning algorithm that uses supervised learning. [/INST] One popular supervised machine learning algorithm is the Support Vector Machine (SVM). It uses labelled data points to infer the best decision boundary between different classes. It uses an optimization function to maximize the margin between the support vectors (data points) and the decision boundary. The support vectors are the data points which are the closest to the hyperplane and the decision boundary is the one that best separates the different classes. The SVM could also be tweaked to use different kernels, such as the Gaussian Kernel which is commonly used for non-linear classification.</s>"
  },
  {
    "text": "<s>[INST] You are given an array of integers and you need to find the maximum sum of any subarray of the given array. [/INST] The maximum sum of any subarray of a given array of integers can be found with the Kadane's algorithm. This algorithm works by keeping track of the maximum sum seen so far and the current sum running. Whenever the current sum running is negative, the current sum running is reset to 0 and the maximum sum seen is compared with the current sum. Whenever the current sum running is positive, it is added to the maximum sum seen so far. This way, the maximum sum of any subarray of the given array can be found in one pass.</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to search for a target element in a binary search tree in less than O(n) time. [/INST] The binary search tree can be traversed in a depth-first manner to search for the target element in a time complexity of O(log n), where n is the number of nodes in the binary search tree. In a depth-first search, the target node is compared with each node in the tree and if it does not match, the left or right subtree is recursively searched depending on whether the target element is smaller or bigger than the current node. This way, the target element can be searched in less than O(n) time.</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to check if two given binary trees are identical. [/INST] We can use a recursive approach to compare two binary trees. We can start by a root node comparison and if the values of the two root nodes are not equal, the trees are not equivalent. Otherwise, we can move on to compare the left subtree and the right subtree of each tree for equality. To do so, we can recursively call the algorithm on the left nodes of each tree and the right nodes of each tree. If at any point, any of the nodes are not equal, the two trees are not identical. If all nodes are equal, the two binary trees are identical.</s>"
  },
  {
    "text": "<s>[INST] Design a function in Python to sort a list of tuples based on the first element. [/INST] def sort_list_of_tuples(my_list):\n    my_list.sort(key=lambda x: x[0])\n    return my_list</s>"
  },
  {
    "text": "<s>[INST] Format the strings given in the list so that only the first letter of each word is in upper case.\n\n[\"Hello world\", \"Wonderful DAY\"] [/INST] [\"Hello World\", \"Wonderful Day\"]</s>"
  },
  {
    "text": "<s>[INST] Write a function to sum values stored in a dictonary using for loop.\n\nmydict = {‘a’:1, ‘b’:2, ‘c’:3} [/INST] def sum_dict_values(mydict):\n  ans = 0\n  for key,val in mydict.items():\n    ans += val\n  return ans</s>"
  },
  {
    "text": "<s>[INST] Create an HTML table with two columns called \"Name\" and \"Age\", and three rows, with the name and age of Alice, Bob and Eve. [/INST] <table>\n <tr>\n  <th>Name</th>\n  <th>Age</th>\n </tr>\n <tr>\n  <td>Alice</td>\n  <td>20</td>\n </tr>\n <tr>\n  <td>Bob</td>\n  <td>30</td>\n </tr>\n <tr>\n  <td>Eve</td>\n  <td>40</td>\n </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Create a CSS class to make all the text in the body of the page blue. [/INST] body {\n    font-color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to insert values into a table called 'users' with three columns: 'name', 'email', and 'age'.\n\nname: John, email: john@example.com, age: 28 [/INST] INSERT INTO users (name, email, age) VALUES ('John', 'john@example.com', 28);</s>"
  },
  {
    "text": "<s>[INST] Create an Angular 10 service to fetch data from a remote API and print the results to the console.\n\naddress: 'www.example.com/api/v1/data'. [/INST] import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class DataService {\n  constructor(private http: HttpClient) {\n\n  }\n\n  async getData() {\n    const data = await this.http.get(address).toPromise();\n    console.log(data);\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a React component which renders an input box and a submit button. [/INST] import React from 'react';\n\nexport default function Form() {\n  return (\n    <form>\n      <input type=\"text\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}</s>"
  },
  {
    "text": "<s>[INST] Generate code to display a progress bar in HTML. [/INST] <div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 25%;\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Create a Swift class with a method named 'validate' which returns true if the given value is greater than 10 and false otherwise. [/INST] class Validation {\n  func validate(value: Int) -> Bool {\n    return value > 10\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C# program to sort a given array of integers.\n\nint[] nums = {8, 5, 1, 3, 9}; [/INST] int[] sorted = nums.OrderBy(n => n).ToArray();</s>"
  },
  {
    "text": "<s>[INST] Generate code to call an API and print the results using JavaScript.\n\nurl: 'www.example.com/api/v1/data' [/INST] fetch(url)\n  .then(response => {\n    return response.json()\n  }).then(data => {\n    console.log(data);\n  });</s>"
  },
  {
    "text": "<s>[INST] Using HTML, create an input field that stores an integer. [/INST] <input type=\"number\"></s>"
  },
  {
    "text": "<s>[INST] Use Java to generate a string containing 1000 random characters of length 10. [/INST] String chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\nStringBuilder randomString = new StringBuilder();\nRandom rand = new Random();\nfor (int i = 0; i < 1000; i++){\n int randIndex = rand.nextInt(chars.length());\n randomString.append(chars.charAt(randIndex));\n}\nString result = randomString.toString();</s>"
  },
  {
    "text": "<s>[INST] Using CSS, modify the background color of a div. [/INST] div { \n  background-color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form element to store a password with a validation of maximum 8 characters. [/INST] <form>\n  <label for=\"password\">Password: </label>\n  <input type=\"password\" id=\"password\" name=\"password\" maxlength=\"8\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a Python script to generate random numbers from 1 to 10 in a given range. [/INST] import random\n\ndef random_num_gen(start, end):\n  \n  random_nums = []\n  \n  for _ in range(start, end + 1):\n    random_nums.append(random.randint(1, 10))\n  \n  return random_nums</s>"
  },
  {
    "text": "<s>[INST] Using HTML, create a select option field with five given options.\n\nOptions: Option 1, Option 2, Option 3, Option 4, Option 5 [/INST] <select>\n  <option>Option 1</option>\n  <option>Option 2</option>\n  <option>Option 3</option>\n  <option>Option 4</option>\n  <option>Option 5</option>\n</select></s>"
  },
  {
    "text": "<s>[INST] Using JavaScript, create an input field to store a hexadecimal value. [/INST] <input type=\"text\" pattern=\"^#([A-Fa-f0–9]{6}|[A-Fa-f0–9]{3})$\"></s>"
  },
  {
    "text": "<s>[INST] Debug the following Java program to get the output \"Can you try again?\n\npublic class TryAgain {\n  public static void main (String[] args) {\n     x = 4;\n     System.out.println(x = 4);\n  }\n} [/INST] public class TryAgain {\n  public static void main (String[] args) {\n     int x = 4;\n     System.out.println(\"Can you try again?\");\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to sum all values in the \"amount\" column. [/INST] SELECT SUM(amount) FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to check whether a string contains all the vowels in alphabetical order. [/INST] function checkVowels(str) {\n  const sortedVowels = 'aeiou'.split('').sort().join('');\n  const sortedStr = str\n    .toLowerCase()\n    .split('')\n    .filter(letter => ['a','e','i','o','u'].includes(letter))\n    .sort()\n    .join('');\n  return sortedVowels === sortedStr;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to extract the URLs from a given list of strings.\n\n['https://stackoverflow.com/questions/42063887/how-to-extract-urls-from-a-list-of-strings-in-python',\n 'This is an example of a string without a URL'] [/INST] import re\n\ndef extract_urls(strings):\n  urls = []\n  for s in strings:\n    urls += re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', s)\n  return urls</s>"
  },
  {
    "text": "<s>[INST] Check if an integer is a power of two. [/INST] public static boolean isPowerOfTwo(int n) { \n   return (n > 0) && ((n & (n - 1)) == 0); \n}</s>"
  },
  {
    "text": "<s>[INST] Change the following code to use for-loops instead of while-loops.\n\nx = 0\nwhile x < 5:\n    print(x) \n    x += 1 [/INST] for x in range(5):\n  print(x)</s>"
  },
  {
    "text": "<s>[INST] Generate a correct Java program to swap two given numbers. [/INST] public class Swap { \n  public static void main(String[] args) {\n    int a = 10;\n    int b = 20;\n    System.out.println(\"before swap: a = \"+a+\" b = \"+b);\n    int temp = a; \n    a = b; \n    b = temp; \n    System.out.println(\"after swap: a = \"+a+\" b = \"+b);\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following code so that it prints out a right triangle of size n\n\nint n = 5;\nfor (int i = 0; i < n; i++) {\n  for (int j = 0; j <= i; j++) {\n    System.out.print(\"*\");\n  }\n  System.out.println();\n} [/INST] int n = 5;\nfor (int i = n; i > 0; i--) {\n  for(int j = 0; j < i; j++) {\n    System.out.print(\"*\");\n  }\n  System.out.println();\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a correct SQL query for checking if a record exists with a given condition.\n\nCheck if a record exists in the \"Customers\" table with the email address \"john@example.com\"; [/INST] SELECT COUNT(*) FROM Customers WHERE email = 'john@example.com';</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to convert a given binary string to its equivalent hexadecimal representation. [/INST] def bin_to_hex(binary_string):\n    dec = int(binary_string, 2)\n    hex_string = hex(dec).replace('x', '')\n    return hex_string</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the names of all users where the gender is `Female`. [/INST] SELECT Name \nFROM Users \nWHERE Gender = 'Female'</s>"
  },
  {
    "text": "<s>[INST] Write Python code to merge two given dictionaries into a single dictionary.\n\nDictionary 1: {'A':1, 'B':2} \nDictionary 2: {'C':3, 'D':4} [/INST] def merge_dicts(dic1, dic2): \n    res = {**dic1, **dic2} \n    return res</s>"
  },
  {
    "text": "<s>[INST] Find the largest integer in this list?\n\n[1, 4, 9, 3, 5] [/INST] largest_integer = max([1, 4, 9, 3, 5])\nprint(largest_integer)  # Output: 9</s>"
  },
  {
    "text": "<s>[INST] Write a Spring Boot Rest Controller to list all products in an online store. [/INST] @RestController\npublic class ProductController {\n \n    @Autowired\n    private ProductService productService;\n \n    @GetMapping(\"/products\")\n    public List<Product> getProducts(){\n        return productService.listProducts();\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Change the background color of all paragraphs in HTML code to blue.\n\n<p>I am a paragraph</p>\n<p>I am another paragraph</p> [/INST] <p style=\"background-color:blue;\">I am a paragraph</p>\n<p style=\"background-color:blue;\">I am another paragraph</p></s>"
  },
  {
    "text": "<s>[INST] Write a CSS code to align a button to the center of a webpage.\n\n<button>My Button</button> [/INST] button {\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script to check if the number of arguments supplied is equal to 3 or not. [/INST] #!/bin/bash\n\nif [ \"$#\" -eq 3 ]\nthen \n   echo \"Number of Arguments provided is 3\"\nelse\n   echo \"Number of Arguments provided is not 3\"\nfi</s>"
  },
  {
    "text": "<s>[INST] Find all words that start with the letter 'R' in a string.\n\nstring = \"hello world\" [/INST] def findAllWordsStartingWith(string,letter):\n    words = string.split(' ')\n    allWordsStartingWithLetter = [] \n    for word in words:\n        if word[0] == letter:\n            allWordsStartingWithLetter.append(word)\n    return allWordsStartingWithLetter\n\nprint(findAllWordsStartingWith('hello world', 'R')) # Output: []</s>"
  },
  {
    "text": "<s>[INST] Explode a string with a given delimiter.\n\ngiven_str = \"apple,banana,orange\" [/INST] def explode_string(given_str):\n  return given_str.split(\",\")\n\ngiven_str = \"apple,banana,orange\" \n\nexploded_str = explode_string(given_str)\nprint(exploded_str)\n# Output: ['apple', 'banana', 'orange']</s>"
  },
  {
    "text": "<s>[INST] Construct a Python class for a camera object. [/INST] class Camera:\n    \"\"\"Class representing a camera\"\"\"\n    \n    def __init__(self, brand, model):\n        \"\"\"\"\"\"\n        self.brand = brand \n        self.model = model \n    \n    def get_brand(self):\n        \"\"\"\"\"\"\n        return self.brand\n    \n    def get_model(self):\n        \"\"\"\"\"\"\n        return self.model</s>"
  },
  {
    "text": "<s>[INST] Program a binary search algorithm.\n\ndata: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  target: 16 [/INST] def binary_search(data, target):\n    low = 0\n    high = len(data) - 1\n    \n    while low <= high:\n        index = (low + high) // 2\n        value = data[index]\n\n        if value == target:\n            return index\n\n        if target < value:\n            high = index - 1\n        else:\n            low = index + 1\n\n    return -1\n\ndata = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\ntarget = 16\n\nindex = binary_search(data, target)\nif index != -1:\n    print(\"Target is at index: {}\".format(index))\nelse: \n    print(\"Target not found\")</s>"
  },
  {
    "text": "<s>[INST] Replace the \"TODO\" comment in this code with logic to calculate the mean of a list of numbers.\n\nnumbers = [1, 2, 3, 4, 5]\n# TODO: calculate the mean [/INST] numbers = [1, 2, 3, 4, 5]\n\n# calculate the mean\nmean = sum(numbers)/len(numbers)\n\nprint('The mean of the list of numbers is {}.'.format(mean))</s>"
  },
  {
    "text": "<s>[INST] Construct an if-else statement to compare two variables.\n\nvariable1: 5\n  variable2: 10 [/INST] variable1 = 5\nvariable2 = 10\n\nif variable1 > variable2:\n  print(\"variable1 is greater than variable2\")\nelif variable1 < variable2:\n  print(\"variable1 is less than variable2\")\nelse:\n  print(\"variable1 is equal to variable2\")</s>"
  },
  {
    "text": "<s>[INST] Debug the following code and update the list \"result\" accordingly.\n\ndef foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)\n        return result\n\nnums = [1, 2, 3, 4] [/INST] def foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)\n    return result\n\nnums = [1, 2, 3, 4]\n\nresult = foo(nums)</s>"
  },
  {
    "text": "<s>[INST] Consider the formula z=(x1n+x2+x3)(2x2+3x3)? find the value of y\n\nx1 = 2; x2 = 4; x3 = 6 [/INST] y = 28</s>"
  },
  {
    "text": "<s>[INST] Summarize the given code\n\ndef sumOfTwo(a, b):\n    \"\"\"Returns the sum of two integers.\"\"\"\n    c = a + b\n    return c [/INST] This function takes two integers as input and returns their sum.</s>"
  },
  {
    "text": "<s>[INST] Modify the program to work with any dataset\n\ndef sum_values(data):\n    \"\"\"Returns the sum of values in the given dataset.\"\"\"\n    sum = 0\n    # TODO: Your code here\n    return sum [/INST] def sum_values(data):\n    \"\"\"Returns the sum of values in the given dataset.\"\"\"\n    sum = 0\n    for val in data:\n        sum += val\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to calculate the sum of the digits in an integer\n\nN = 155 [/INST] def sum_digits(n):\n    s = 0\n    while(n):\n        s += n % 10\n        n //= 10\n    return s\n\nprint(sum_digits(155))</s>"
  },
  {
    "text": "<s>[INST] Output the 5th element in an array\n\n[1, 5, 9, 17, 24, 42, 50] [/INST] 24</s>"
  },
  {
    "text": "<s>[INST] Read the comment in the code and update the code accordingly.\n\ndef get_multiples(n, limit):\n    \"\"\"Return list of n's multiples for all numbers up to limit\"\"\"\n    multiples = []\n    # TODO: Your code here\n    return multiples [/INST] def get_multiples(n, limit):\n    \"\"\"Return list of n's multiples for all numbers up to limit\"\"\"\n    multiples = []\n    for i in range(limit + 1):\n        if i % n == 0:\n            multiples.append(i)  \n    return multiples</s>"
  },
  {
    "text": "<s>[INST] Perform a selection sort on the given array\n\n[4, 1, 10, 8, 5] [/INST] def selection_sort(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nprint(selection_sort([4, 1, 10, 8, 5]))</s>"
  },
  {
    "text": "<s>[INST] What will be the ouptut of below operation?\n\nprint(4 >> 2) [/INST] 1</s>"
  },
  {
    "text": "<s>[INST] Write a Java program that prints all numbers between 1 to 100. [/INST] public class PrintNumbers{\n    public static void main(String[] args){\n        // Prints numbers from 1 to 100\n        for(int i = 1; i <= 100; i++){\n            System.out.println(i); \n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Determine if the given input string is a valid C++ identifier or not.\n\nstringInput = \"my_age\" [/INST] true</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to show all the employees' names working in the company 'ABC'. [/INST] SELECT name\nFROM Employees\nWHERE company = 'ABC';</s>"
  },
  {
    "text": "<s>[INST] Explain the role of an HTML div tag. [/INST] The <div> tag defines a division or section in the HTML document. It is used to group blocks of related elements to structure and style a page. The <div> tag is a block-level element, meaning it can stand alone and not appear within any other tags.\n\nCSS can be used along with the <div> to define design elements such as the color, size, and position of the division.</s>"
  },
  {
    "text": "<s>[INST] Insert the missing code in the function below to sort an array of strings:\n\narr = [\"hello\", \"apple\", \"cat\"]\n\ndef sort_str(arr):\n  # Insert code here [/INST] def sort_str(arr):\n  # Insert code here\n  arr.sort()\n  return arr</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript statement to set the margin of an element with class \"myclass\" to 0. [/INST] document.querySelector('.myclass').style.margin = '0';</s>"
  },
  {
    "text": "<s>[INST] Construct an array in JavaScript that contains the numbers from 6 to 15. [/INST] let arr = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15];</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to display sales sum in ascending order of year.\n\nSalesSum(TOTAL) [/INST] SELECT YEAR, SUM(TOTAL) AS SalesSum\nFROM Orders\nGROUP BY YEAR\nORDER BY YEAR ASC</s>"
  },
  {
    "text": "<s>[INST] Generate a Java program that prints the sum of digits of a given number.\n\n17 [/INST] public class SumOfDigits {\n    \n    public static void main(String args[]) {\n        int num = 17;\n        int sum = 0;\n  \n        while(num > 0) \n        { \n            sum += num % 10; \n            num /= 10; \n        } \n        System.out.println(\"Sum of Digits of the Number: \" +sum); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Describe the different types of loops in Java. [/INST] In Java, there are three types of loops: while loops, for loops and do-while loops. While loops execute a block of code until a certain condition is met. For loops are used when the number of iterations is known, with the loop iterating a specific number of times. Do-while loops are similar to while loops, except the condition is tested after the loop iteration, so the loop body will always execute at least once.</s>"
  },
  {
    "text": "<s>[INST] Design a Java program to display the given integer in reverse.\n\n6789 [/INST] public class ReverseNumber { \n    public static void main(String[] args) \n    { \n        int num = 6789; \n        int reversed = 0; \n        while(num != 0) \n        { \n            int digit = num % 10; \n            reversed = reversed * 10 + digit; \n            num /= 10; \n        } \n  \n        System.out.println(\"Reversed Number: \" + reversed); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to display the product name from the table 'products' ordered by price in descending order. [/INST] SELECT product_name \nFROM products\nORDER BY price DESC</s>"
  },
  {
    "text": "<s>[INST] Generate a C program to encrypt a sentence using Caesar cipher.\n\nThe quick brown fox jumps over the lazy dog [/INST] #include <stdio.h> \n#include <string.h> \n\nchar encrypt(char ch, int key); \n\nint main() \n{ \n    char message[] = \"The quick brown fox jumps over the lazy dog\"; \n    int key;\n  \n    printf(\"Enter the key: \"); \n    scanf(\"%d\", &key);\n\n    char encrypted_message[100]; \n  \n    for (int i = 0; i < strlen(message); ++i) { \n        encrypted_message[i] = encrypt(message[i], key); \n    }\n\n    printf(\"Encrypted message: %s\\n\", encrypted_message); \n    return 0; \n} \n\nchar encrypt(char ch, int key) \n{ \n    if (ch >= 'a' && ch <= 'z') \n        return (char)('a' + (ch - 'a' + key) % 26); \n    else if (ch >= 'A' && ch <= 'Z') \n        return (char)('A' + (ch - 'A' + key) % 26); \n    else\n        return ch; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to read a list of numbers and print them as a single string without any space.\n\n[34, 32, 67, 85] [/INST] my_list = [34, 32, 67, 85] \n  \n# using join() \nprint(''.join(str(n) for n in my_list))</s>"
  },
  {
    "text": "<s>[INST] How does one go about creating a function in JavaScript? [/INST] In JavaScript, functions are declared using the 'function' keyword followed by the name of the function and a pair of parentheses. The code for the function should be enclosed within curly brackets. For example:\n\nfunction addTwoNumbers(a, b) {\nreturn a + b;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class to represent a blog post in Python. [/INST] class BlogPost:\n    def __init__(self, title, content, author):\n        self.title = title\n        self.content = content\n        self.author = author\n\n    def edit_post(self, new_title, new_content):\n        self.title = new_title\n        self.content = new_content</s>"
  },
  {
    "text": "<s>[INST] Write a script to scrape wikipedia page's html. [/INST] import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://en.wikipedia.org/wiki/Page_title\"\n\nresponse = requests.get(url)\n\nsoup = BeautifulSoup(response.content, 'html.parser')\n# Get the HTML of the page\nhtml = soup.prettify()\n\n# Save the scraped HTML\nwith open('page_title.html', 'w') as file:\n    file.write(html)</s>"
  },
  {
    "text": "<s>[INST] Create a regex expression to find a date format of \"yyyy-mm-dd\". [/INST] \\d{4}-\\d{2}-\\d{2}</s>"
  },
  {
    "text": "<s>[INST] How do you represent time in JavaScript? [/INST] In JavaScript, time is typically represented as the number of milliseconds that have elapsed since midnight on January 1st, 1970 (also known as the Unix Epoch). It can be represented as a Date object, or by using its individual components (such as hours, minutes, and seconds).</s>"
  },
  {
    "text": "<s>[INST] Compare and contrast AJAX and XMLHttpRequest. [/INST] AJAX (Asynchronous JavaScript and XML) is a technology that enables web developers to send and receive data asynchronously between the browser and the server without needing to make changes to the existing pages. It works by sending a request to the server using the XMLHttpRequest object, which then processes the request and sends back a response. XMLHttpRequests are used in AJAX, but they can also be used independently of AJAX to send and receive data. The main difference between AJAX and XMLHttpRequest is that AJAX can be used to send and receive multiple requests and responses at once, whereas XMLHttpRequest is limited to one request at a time.</s>"
  },
  {
    "text": "<s>[INST] Write a loop to iterate through all elements in an array in JavaScript. [/INST] for (let i = 0; i < array.length; i++) {\n   const element = array[i];\n   // perform operations on element\n}</s>"
  },
  {
    "text": "<s>[INST] Create two lists, one in Python and one in JavaScript, with 10 numbers each. [/INST] Python List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nJavaScript List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</s>"
  },
  {
    "text": "<s>[INST] Write a long-running Python script with a while loop? [/INST] while True:\n    # perform a long-running task\n    pass # or perform an action</s>"
  },
  {
    "text": "<s>[INST] How can one retrieve data from a web server using Node.js? [/INST] Using Node.js, one can retrieve data from a web server by making an HTTP request. This can be accomplished using the built-in 'http' module, or by using a third-party library such as Request or Axios. After making the request, the response from the server must be handled and the data can then be processed.</s>"
  },
  {
    "text": "<s>[INST] Compare and contrast JavaScript Objects and Arrays. [/INST] JavaScript Objects and Arrays are both used to store and organize data in JavaScript. However, they are two distinct data structures. Objects store data in key-value pairs, while Arrays are indexed collections of items. Additionally, Objects are mutable, whereas Arrays are not. Objects can have any type of data as a key, whereas Array indices must typically be represented by integers.</s>"
  },
  {
    "text": "<s>[INST] Create a regex expression to match the numbers from 0 to 9. [/INST] [0-9]</s>"
  },
  {
    "text": "<s>[INST] Create an array of five integers with any values. [/INST] int[] nums = {12, 24, 49, 37, 54};</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of angles in an octagon. [/INST] The sum of angles in an octagon is 1080° (360° × 3).</s>"
  },
  {
    "text": "<s>[INST] Create a C++ class called 'Car' with five fields - brand, color, year manufactured, engine type, and number of doors. [/INST] class Car {\n private:\n string brand;\n string color;\n int year;\n string engine;\n int doors;\n\n public:\n Car(string brand, string color, int year, string engine, int doors) {\n  this->brand = brand;\n  this->color = color;\n  this->year = year;\n  this->engine = engine;\n  this->doors = doors;\n }\n};</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object called 'book' with the following properties - title, author, genre, and number of pages. [/INST] let book = {\n title: \"The Great Gatsby\",\n author: \"F.Scott Fitzgerald\",\n genre: \"Novel\",\n pages: 180\n};</s>"
  },
  {
    "text": "<s>[INST] Calculate the area of a triangle given the following lengths of its sides a, b, and c.\n\na = 5, b = 6, c = 8 [/INST] double area = 0.25*sqrt((a + b + c)*(b + c - a)*(c + a - b)*(a + b - c));</s>"
  },
  {
    "text": "<s>[INST] Design a function in C++ that takes in a vector of integers and returns the maximum number in the vector. [/INST] int getMax(vector<int> nums) {\n // Rule out empty vector\n if (nums.empty()) {\n return -1;\n }\n \n int max = nums[0];\n // Iterate through every item in vector\n for (int i = 1; i < nums.size(); i++) {\n // Update max if needed\n if (nums[i] > max) {\n max = nums[i];\n }\n }\n return max;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a MySQL query to select the employee name and their salary from a table named 'employees' where the salary is greater than 30,000. [/INST] SELECT name, salary FROM employees WHERE salary > 30000;</s>"
  },
  {
    "text": "<s>[INST] Generate a regular expression that can detect if the length of given strings is above 10. [/INST] re.compile(r\".{10,}\")</s>"
  },
  {
    "text": "<s>[INST] Categorize this sentence as either an imperative instruction or a question.\n\nWrite a program to count the number of times a specific word appears in a given string. [/INST] Imperative instruction</s>"
  },
  {
    "text": "<s>[INST] Carve out a SQL query that selects the name and phone number from table named 'Customers'. [/INST] SELECT name, phone_number\nFROM Customers;</s>"
  },
  {
    "text": "<s>[INST] Create a class in C++ that can produce the result of an arithmetic expression with two numbers as input.\n\nnum1 = 5, num2 = 10 [/INST] class ArithmeticExpression {\n    public: \n        int CalculateExpression(int num1, int num2) {\n            return num1 + num2;\n        }\n};</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that print the Fibonacci sequence in the given range.\n\nmin = 0, max = 10 [/INST] public class Fibonacci {\n    public static void main(String[] args) {\n        int min = 0, max = 10;\n        int prev = 0, next = 1;\n        System.out.print(\"Fibonacci Sequence in the given range:\");\n        for (int i = 0; i <= max; i++) {\n            if (i >= min) {\n                System.out.print(\" \" + prev);\n            }\n            int sum = prev + next;\n            prev = next;\n            next = sum;\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate the ternary operator for the following expression: x > 0 ? 10 : 5. [/INST] x > 0 ? 10 : 5</s>"
  },
  {
    "text": "<s>[INST] Write a basic CSS rule that sets text color to red. [/INST] p {\n  color: red;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate the for loop in Java for iterating from 0 to the given number.\n\n4 [/INST] for (int i = 0; i < 4; i++) {\n   //code to be executed\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following code so that it prints the given value to the console.\n\nSystem.out.println(\"Hello World\");\n5 [/INST] System.out.println(5);</s>"
  },
  {
    "text": "<s>[INST] Change the if-else statement to a switch statement.\n\nif (x == 0) {\n Console.WriteLine(\"Zero\");\n}\nelse if (x == 1) {\n Console.WriteLine(\"One\");\n} [/INST] switch (x) {\n  case 0:\n       Console.WriteLine(\"Zero\");\n       break;\n  case 1:\n       Console.WriteLine(\"One\");\n       break;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form that takes 5 inputs: name, age, gender, email, and phone. [/INST] <form>\n  <label>Name:</label><input type=\"text\" name=\"name\" required /><br/>\n  <label>Age:</label><input type=\"text\" name=\"age\" required /><br/>\n  <label>Gender:</label><input type=\"text\" name=\"gender\" required /><br/>\n  <label>Email:</label><input type=\"text\" name=\"email\" required /><br/>\n  <label>Phone:</label><input type=\"text\" name=\"phone\" required /><br/>\n  <input type=\"submit\" />\n</form></s>"
  },
  {
    "text": "<s>[INST] Write an algorithm that reverses a string.\n\nHello World [/INST] def reverse_string(string):\n  reversed_string = \"\"\n  for char in string:\n    reversed_string = char + reversed_string\n  return reversed_string</s>"
  },
  {
    "text": "<s>[INST] Generate the syntax for initializing an array of integers with the given elements.\n\n[1, 2, 3] [/INST] int[] arr = {1, 2, 3};</s>"
  },
  {
    "text": "<s>[INST] Modify the following code so that it prints out the characters from the given string one at a time.\n\nString str = \"Hello World\"; [/INST] String str = \"Hello World\";\nfor (int i = 0; i < str.length(); i++) {\n  System.out.println(str.charAt(i));\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two arguments (n and m) and returns a randomly shuffled array of length n and containing only elements from 0 to m.\n\nn = 5\nm = 10 [/INST] def shuffle_array(n, m):\n    arr = []\n    for i in range(n):\n        arr.append(random.randint(0,m))\n    random.shuffle(arr)\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Using the heapsort algorithm, sort the following array of numbers in ascending order.\n\n[97,54,67,8,2,22,5,47] [/INST] [2, 5, 8, 22, 47, 54, 67, 97]</s>"
  },
  {
    "text": "<s>[INST] Determine which of the following two strings is a palindrome.\n\n\"kite\"\n\"racecar\" [/INST] \"racecar\" is a palindrome.</s>"
  },
  {
    "text": "<s>[INST] Implement the Caesar Cipher algorithm that shifts the characters in a string by a specified number of spaces.\n\nString: \"Hello World!\"\nShift by: 3 [/INST] Khoor Zruog!</s>"
  },
  {
    "text": "<s>[INST] Implement a function that takes an integer n as input and returns a matrix of size nxn consisting of the natural numbers from 1 to n^2 in row major order.\n\nn = 5 [/INST] [[1, 2, 3, 4, 5],\n[6, 7, 8, 9, 10], \n[11, 12, 13, 14, 15], \n[16, 17, 18, 19, 20],\n[21, 22, 23, 24, 25]]</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes in 2 lists, reverses the elements of each list and combines the elements to output a single list.\n\nlist1 = [1,2,3]\nlist2 = [4,5,6] [/INST] [6, 5, 4, 3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Compute the probability of each string from the below list.\n\n['apple', 'banana', 'watermelon', 'mango'] [/INST] The probability of 'apple' is 0.25,\nThe probability of 'banana' is 0.25, \nThe probability of 'watermelon' is 0.25, \nThe probability of 'mango' is 0.25.</s>"
  },
  {
    "text": "<s>[INST] Take a string as an input and determine the number of times the letter 'a' appears in the string.\n\nString: \"The quick brown fox jumps over the lazy dog\" [/INST] The letter 'a' appears 1 time in the string.</s>"
  },
  {
    "text": "<s>[INST] In the following code, what is the purpose of the 'if' statement?\n\nwords = [\"apple\", \"pie\", \"make\"]\n\nfor word in words:\n  if len(word) > 4:\n    print(word) [/INST] The 'if' statement is used to check if the length of the current word is greater than 4, and if it is, the word is printed.</s>"
  },
  {
    "text": "<s>[INST] Suggest an alternative data representation for the following code.\n\nages = {\"Alice\": 24, \"Bob\": 3, \"Carol\": 15} [/INST] ages = [('Alice', 24), ('Bob', 3), ('Carol', 15)]</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two parameters, an array of integers and an integer value, and returns the number of occurrences of the given value in the array.\n\ninput_array = [1, 2, 3, 2, 1]\ninput_value = 2 [/INST] def count_occurrences(input_array, input_value):\n    return len([item for item in input_array if item == input_value])</s>"
  },
  {
    "text": "<s>[INST] Write function to encrypt the text with Caesar Cipher.\n\ntext = \"hello\"\nshift = 3 [/INST] def caesar_cipher(text, shift):\n    ciphered = ''\n    for char in text:\n        ciphered += chr(ord(char) + shift)\n    return ciphered</s>"
  },
  {
    "text": "<s>[INST] Suggest an alternative way of writing the following code using list slicing.\n\na = [1,2,3,4,5]\n\nb = []\n\nfor i in range(len(a)):\n    if (i+1) % 2 == 0:\n        b.append(a[i]) [/INST] a = [1,2,3,4,5]\nb = a[1::2]</s>"
  },
  {
    "text": "<s>[INST] Construct a class which inherits from the parent class by implementing the abstract method.\n\nclass Parent:\n  def __init__(self):\n    pass\n  \n  def parent_func(self):\n    print('Parent Function')\n    \nclass Child(Parent):\n # TODO: implement abstract method [/INST] class Parent:\n  def __init__(self):\n    pass\n  \n  def parent_func(self):\n    print('Parent Function')\n    \nclass Child(Parent):\n  def abstract_method(self):\n    pass</s>"
  },
  {
    "text": "<s>[INST] Output the fifth letter of the given string.\n\nApple [/INST] e</s>"
  },
  {
    "text": "<s>[INST] Create a regex to detect URL. [/INST] \\b(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]</s>"
  },
  {
    "text": "<s>[INST] Change the given string to list.\n\nData Science [/INST] ['Data', 'Science']</s>"
  },
  {
    "text": "<s>[INST] Change the comparison operator in the given line to its equivalent.\n\nx != y [/INST] x <> y</s>"
  },
  {
    "text": "<s>[INST] Make a HTTP request to get the content of the given URL.\n\nhttps://example.com [/INST] import requests\n\nresponse = requests.get(\"https://example.com\")\nprint(response.content)</s>"
  },
  {
    "text": "<s>[INST] Format the given date and time as DD-MM-YYYY HH:MM\n\n19-03-2020 17:30 [/INST] 19-03-2020 17:30</s>"
  },
  {
    "text": "<s>[INST] Use the given string to find the number of occurrences of each letter.\n\nHello World [/INST] occurrences = {\n 'H': 1,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n ' ': 1, \n 'W': 1,\n 'r': 1,\n 'd': 1\n}</s>"
  },
  {
    "text": "<s>[INST] Update the code to print out the first five elements of the given list.\n\n[3, 4, 1, 6, 8, 9] [/INST] for i in range(5): \n print(arr[i])</s>"
  },
  {
    "text": "<s>[INST] Sort the given list with size constraint N in increasing order.\n\nN = 4\narr = [8, 7, 6, 5, 4, 1] [/INST] arr = [1, 4, 5, 6, 7, 8]</s>"
  },
  {
    "text": "<s>[INST] Write a query to select the employee name and salary whose salary is between 10000 and 50000. [/INST] SELECT name, salary \nFROM employees \nWHERE salary BETWEEN 10000 AND 50000;</s>"
  },
  {
    "text": "<s>[INST] Use the given string and convert it to hexadecimal representation.\n\nPython [/INST] 0x50797468</s>"
  },
  {
    "text": "<s>[INST] Administer a MySQL database to save the customer information below.\n\nHenry Smith;25;Real Estate Agent [/INST] INSERT INTO customers (name, age, occupation) VALUES ('Henry Smith', 25, 'Real Estate Agent');</s>"
  },
  {
    "text": "<s>[INST] Modify the code below to filter out negative numbers from the given array.\n\nvar arr = [2, -4, -6, 0, 1]; [/INST] var arr = [2, 0, 1]; \narr = arr.filter(element => element >= 0);</s>"
  },
  {
    "text": "<s>[INST] How many jokes can you write in Python? [/INST] There is no definite answer to this question. It depends on the creativity and programming skills of the individual. It is possible to write an infinite number of jokes, but writing a joke that is funny and unique will require more effort and expertise.</s>"
  },
  {
    "text": "<s>[INST] Implement a function that takes in three string parameters and prints out the longest one. [/INST] def longest_string(str1, str2, str3):\n    if len(str1) >= len(str2) and len(str1) >= len(str3):\n        print(str1)\n    elif len(str2) >= len(str1) and len(str2) >= len(str3):\n        print(str2)\n    else:\n        print(str3)</s>"
  },
  {
    "text": "<s>[INST] Create a class called \"BankAccount\" with two instance variables \"accountNumber\" and \"balance\". [/INST] class BankAccount():\n    \n    def __init__(self, accountNumber, balance):\n        self.accountNumber = accountNumber \n        self.balance = balance</s>"
  },
  {
    "text": "<s>[INST] Insert data into a specific field in a given table.\n\nTable Name: User\n\nField: Country\n\nData: Indonesia [/INST] INSERT INTO User (Country) VALUES ('Indonesia');</s>"
  },
  {
    "text": "<s>[INST] Complete the function definition so that it takes in two parameters \"x\" and \"y\" and returns the sum of x and y.\n\ndef sum(x, y): [/INST] def sum(x, y):\n    return x + y</s>"
  },
  {
    "text": "<s>[INST] Edit the given JavaScript code so that the output is the Fibonacci sequence from 1 to \"n\".\n\nlet a = 0, b = 1, result\nfor (let i = 1; i < n; i++) {\n  result = a + b\n  a = b\n  b = result\n}\nconsole.log(result) [/INST] let a = 0, b =1, result\nfor (let i = 0; i < n; i++) {\n  result = a + b\n  a = b\n  b = result\n  console.log(a)\n}</s>"
  },
  {
    "text": "<s>[INST] Calculate the value of \"x\" in the equation \"5x - 12 = 8\". [/INST] x = 4</s>"
  },
  {
    "text": "<s>[INST] Create SQL to select data from the table that has a specific value in the 'name' field.\n\nTable Name: Country\n\nField: Name\n\nValue: USA [/INST] SELECT * FROM Country WHERE Name = 'USA';</s>"
  },
  {
    "text": "<s>[INST] Create a class called \"Employee\" with three instance variables: 'Name', 'Salary', and 'Position'. [/INST] class Employee():\n    \n    def __init__(self, name, salary, position):\n        self.name =name \n        self.salary = salary \n        self.position = position</s>"
  },
  {
    "text": "<s>[INST] Convert the code from OOP to a functional programming style.\n\nclass Employee:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def print_details(self):\n        print(f\"Name: {self.name}, age: {self.age}\") [/INST] def Employee(name, age):\n    return (name, age)\n\ndef print_details(employee):\n    name, age = employee\n    print(f\"Name: {name}, age: {age}\")</s>"
  },
  {
    "text": "<s>[INST] Generate code that implements a method to compare two strings. [/INST] def compare_strings(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            return False\n\n    return True</s>"
  },
  {
    "text": "<s>[INST] Explain the difference between a shallow copy and a deep copy. [/INST] A shallow copy of an object creates a new object with the same values as the original but with a different location in memory. A deep copy of an object copies not just the values of the original object but also creates copies of any objects that the original object is referencing. The result is two objects which are completely independent of each other.</s>"
  },
  {
    "text": "<s>[INST] Create a Ruby program that reverses the characters of a provided string.\n\nInput: \"Hello world!\" [/INST] def reverse_string(str)\n  str.reverse\nend\n\nputs reverse_string(\"Hello world!\") #=> \"!dlrow olleH\"</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that generates the first 10 names starting with \"A\". [/INST] SELECT NAME\nFROM TABLE\nWHERE NAME LIKE \"A%\" \nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Categorize the following string as either a palindrome or not.\n\nInput: \"racecar\" [/INST] This string is a palindrome.</s>"
  },
  {
    "text": "<s>[INST] Write a shell script that exits with a status code of 0. [/INST] #!/bin/bash\n\nexit 0</s>"
  },
  {
    "text": "<s>[INST] Modify the following CSS code to target the links with the word \"Learn\".\n\na {\n    color: blue;\n} [/INST] a[href*=\"Learn\"] {\n    color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] What is the fifth prime number? [/INST] The fifth prime number is 11.</s>"
  },
  {
    "text": "<s>[INST] Subdivide the following HTML into two columns.\n\n<div>\n    <h1>Hello world!</h1>\n    <p>Welcome to my website.</p>\n</div> [/INST] <div class=\"columns\">\n    <div class=\"column\">\n        <h1>Hello world!</h1>\n    </div>\n    <div class=\"column\">\n        <p>Welcome to my website.</p>\n    </div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Create a randomized password of 10 characters. [/INST] F8a_3q4*f2</s>"
  },
  {
    "text": "<s>[INST] Edit the code so that it produces the desired output.\n\nanswer = n\nif answer % 2 == 0:\n    print('even')\nelse:\n    print('odd')\nOutput:\" [/INST] answer = n\nif answer % 2 == 0:\n    print('even')\nelif answer % 2 == 1:\n    print('odd')</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two strings and returns True if one of the strings is the other string reversed.\n\nstring_1 = \"abcde\"\nstring_2 = \"edcba\" [/INST] def isReverse(string_1, string_2):\n    if len(string_1) != len(string_2):\n        return False\n    for i in range(len(string_1)):\n        if string_1[i] != string_2[len(string_2)-i-1]:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Write a code that returns the longest substring of the given string without repeating characters.\n\nstring = \"abcabcbb\" [/INST] def longestSubstring(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n    return longest_string</s>"
  },
  {
    "text": "<s>[INST] Identify what type of error the code has\n\nx = 10\ny = \"10\"\nz = x + y [/INST] This code produces a TypeError as it is attempting to add an integer to a string.</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm to delete a node in a singly linked list, given only access to the node.\n\nhead = [4, 5, 1, 9]\ndel = 5 [/INST] def deleteNode(head, del): \n  \n    # If the node to be deleted is the head node \n    if head.data == del: \n        head = head.next\n        return head \n  \n    # Find previous node of the node to be deleted \n    previous = head \n    while previous.next and previous.next.data != del: \n        previous = previous.next\n  \n    # If node to be deleted is not present in the list \n    if previous.next is None: \n        return head \n  \n    # Change the next pointer of the previos node \n    previous.next = previous.next.next\n  \n    return head</s>"
  },
  {
    "text": "<s>[INST] Given a string containing a comma-separated list of integers, write code to print all the even numbers.\n\nstring = \"23, 2, 5, 16, 1, 9, 8\" [/INST] #Split the string into a list of integers\nnumbers = [int(x) for x in string.split(',')]\n\n#Iterate through the list, if the integer is even, print it\nfor number in numbers:\n    if number % 2 == 0:\n        print(number)</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two parameters, a string and an integer, and prints the string the given number of times.\n\nstring = \"Hello\"\nnumber = 3 [/INST] def printString(string, number):\n    for i in range(number):\n        print(string)\n\nprintString(string, number)</s>"
  },
  {
    "text": "<s>[INST] Given a list of lists, generate a single flattened list.\n\nlst = [[1, 2], [3, 4], [5, 6]] [/INST] lst = [[1, 2], [3, 4], [5, 6]]\nflattened = [item for sublist in lst for item in sublist]\nprint(flattened)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that displays a table of the ten most commonly used words in the given article.\n\nToday, I climbed the tallest mountain in the world. It was an incredible experience with stunning views and a sense of accomplishment at the top. [/INST] SELECT word, COUNT(*) AS occurrence \nFROM article \nGROUP BY word \nORDER BY occurrence DESC \nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Create a C program that asks for a user input, adds 10 to the value, and prints the result. [/INST] #include <stdio.h> \n \nint main() \n{ \n    int num; \n    printf(\"Enter a number: \"); \n    scanf(\"%d\", &num);\n    num += 10;\n    printf(\"The result is %d\", num);\n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Translate the following JavaScript code into Python.\n\nlet x = 10;\nif(x > 0){\n    console.log(\"x is positive\");\n} [/INST] x = 10\nif x > 0:\n    print(\"x is positive\")</s>"
  },
  {
    "text": "<s>[INST] Write a function to reverse a linked list in O(n) time complexity. [/INST] def reverse(head):\n    prev = None\n    curr = head\n    while curr is not None:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    head = prev\n    return head</s>"
  },
  {
    "text": "<s>[INST] Design a Java class for a Car which has the following attributes: name, model, year, and price. [/INST] class Car {\n \n private String name;\n private String model; \n private int year;\n private double price;\n \n //constructor to initialize Car object\n public Car(String name, String model, int year, double price) {\n  this.name = name;\n  this.model = model;\n  this.year = year;\n  this.price = price;\n }\n \n //getters and setters\n public String getName() {\n  return name;\n }\n \n public void setName(String name) {\n  this.name = name;\n }\n \n public String getModel() {\n  return model;\n }\n \n public void setModel(String model) {\n  this.model = model;\n }\n \n public int getYear() {\n  return year;\n }\n \n public void setYear(int year) {\n  this.year = year;\n } \n \n public double getPrice() {\n  return price;\n }\n \n public void setPrice(double price) {\n  this.price = price;\n }\n \n @Override\n public String toString() {\n  return \"Car: \" \n   + this.name \n   + \" \" + this.model \n   + \" (\" + this.year + \"), \" \n   + this.price;\n }\n  \n}</s>"
  },
  {
    "text": "<s>[INST] Create a Javascript function which takes an array as an argument and returns an array with the elements in reverse order.\n\n[1, 2, 3, 4, 5] [/INST] function reverseArray(arr) {\n  return arr.reverse();\n}</s>"
  },
  {
    "text": "<s>[INST] Design a Spring Boot class that provides a bean of type String to the application. [/INST] @Configuration\npublic class StringBeanProvider {\n\n    @Bean\n    public String provideString() {\n        return \"Hello World!\";\n    }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Tell me how to print an IMDB movie rating using Python [/INST] import imdb\n\n# create an instance of the IMDb class\nia = imdb.IMDb()\n\n# get the movie\nmovie = ia.get_movie('tt0111161') # The Shawshank Redemption\n\n# get the rating\nrating = movie['rating']\n\n# print the rating\nprint(f\"Rating for the movie 'The Shawshank Redemption': {rating}\")</s>"
  },
  {
    "text": "<s>[INST] Generate a pseudocode for an algorithm to check if an array is a palindrome. [/INST] FUNCTION isPalindrome(arr[], size)\n    START \n        i <- 0 \n        j <- size-1 \n \n        WHILE i < j DO\n            IF arr[i] != arr[j] \n                RETURN false\n            END IF \n            i <- i + 1\n            j <- j - 1\n        END WHILE \n        RETURN true\n    END</s>"
  },
  {
    "text": "<s>[INST] Name some of the important data types in Python. [/INST] The important data types in Python are integers, floats, strings, booleans, lists, tuples, dictionaries and sets.</s>"
  },
  {
    "text": "<s>[INST] Create a condition statement to check if all elements in a list are the same. [/INST] all_same = len(list) > 0 and all(x == list[0] for x in list)</s>"
  },
  {
    "text": "<s>[INST] Create a while loop to print all elements of an array.\n\narr = [1, 2, 3, 4, 5] [/INST] i = 0\nwhile i < len(arr):\n  print(arr[i])\n  i += 1</s>"
  },
  {
    "text": "<s>[INST] Create a loop to go through all elements of a dictionary.\n\nd = {'name':'John', 'age': 27, 'job': 'Programmer'} [/INST] for key, val in d.items():\n    print(f\"{key} : {val}\")</s>"
  },
  {
    "text": "<s>[INST] Design a data structure in Java to store and sort a list of customers by their age. [/INST] public class Customer{\n    private int age;\n    private String name;\n\n    public Customer(int age, String name) {\n        this.age = age;\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class AgeSortedCustomerList {\n    private List<Customer> customers = new ArrayList<>();\n\n    public void add(Customer customer) {\n        customers.add(customer);\n    }\n\n    public List<Customer> getSortedByAge(){\n        customers.sort(Comparator.comparing(Customer::getAge));\n        return customers;\n    }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Write code to produce the output mentioned.\n\nInput Array: [3, 4, 5, 7, 8]\nOutput Array: [7, 8, 5, 4, 3] [/INST] int[] input_arr = { 3, 4, 5, 7, 8 };\nint[] output_arr = new int[input_arr.length];\nfor (int i = 0; i < input_arr.length; i++) {\n    output_arr[i] = input_arr[input_arr.length - 1 - i];\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in C++ for a circle which includes radius as a member variable. [/INST] #include <iostream>\n\nclass Circle {\n    private:\n        double radius;\n\n    public:\n        Circle(double r) {\n            radius = r;\n        }\n\n        double getRadius() {\n            return radius;\n        }\n};</s>"
  },
  {
    "text": "<s>[INST] Edit the given code in Python to produce the desired output.\n\nlst = [3, 8, 9]\n\nfor i in lst:\n    print(i)\n\nExpected Output:\n3\n8\n9 [/INST] lst = [3, 8, 9]\n\nfor i in lst:\n    print(str(i))\n\n# Output\n3\n8\n9</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all employee records with salary greater than 30000.\n\nEmployees Table\n\nid | name  | age | salary\n------------------------\n1  | John  | 20  | 25000\n2  | Nancy | 27  | 35000\n3  | David | 30  | 40000\n4  | Mike  | 36  | 31000 [/INST] SELECT * FROM Employees\nWHERE salary > 30000;</s>"
  },
  {
    "text": "<s>[INST] In Ruby, write a method to find the sum of two numbers from the given string.\n\nString: “The sum of 4 and 8 is 12” [/INST] def sum_from_string(str)\n  array = str.scan(/\\d+/).map(&:to_i)\n  sum = array[0] + array[1]\n  return sum\nend\n\nsum_from_string(\"The sum of 4 and 8 is 12\") # Output: 12</s>"
  },
  {
    "text": "<s>[INST] Write a query in MySQL to find the particular employee's salary from an employee table.\n\nEmployee table\nname | age | salary\nBob  | 20  | 20000\nJohn | 45  | 27000\nTim  | 23  | 35000 [/INST] SELECT salary FROM Employee WHERE name = 'Bob';</s>"
  },
  {
    "text": "<s>[INST] Repair the given HTML code to display a ‘div’ element centered on the page with a width of 400px.\n\n<div style=\"width: 400px; margin: 0 auto;\"></div> [/INST] <div style=\"width: 400px; margin: 0 auto; text-align: center;\"></div></s>"
  },
  {
    "text": "<s>[INST] Write a custom CSS class to add a 3px solid blue border around a button with text size as 18px. [/INST] .button {\n    text-size: 18px;\n    border: 3px solid blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL trigger to store the times for insertion and updating a row in a table. [/INST] CREATE TRIGGER tr_storeTime\n BEFORE INSERT OR UPDATE ON <Table>\n FOR EACH ROW \nBEGIN\n  IF INSERTING THEN\n    SET NEW.addedTime = NOW();\n  END IF;\n  IF UPDATING THEN\n    SET NEW.updatedTime = NOW();\n  END IF;\nEND;</s>"
  },
  {
    "text": "<s>[INST] Reset the input field in areact Native form after submitting the form. [/INST] onSubmit() {\n  this.form.reset();\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in python to print all values between two given values. Do not include the two given values in the output. [/INST] def print_range(start, end): \n    for value in range(start + 1, end): \n        print(value, end = \" \")</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript that finds the maximum number between two given numbers. [/INST] function maxNum(num1, num2) {\n  if (num1 > num2) {\n    return num1;\n  } \n  else {\n    return num2;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a form that verifies if the email address entered is valid or not. [/INST] <form method=\"post\" action=\"verify.php\">\n  Enter your email address:<br>\n  <input type=\"text\" name=\"email\">\n  <br><br>\n  <input type=\"submit\" value=\"Verify\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to set a transparent border for all buttons on a page. [/INST] button {\n  border: 2px solid transparent;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML document with a heading \"Heading\" and a paragraph with the text \"Hello, World!\" [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>Example Document</title>\n</head>\n<body>\n  <h1>Heading</h1>\n  <p>Hello, World!</p>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Insert 15 random numbers between 0 and 10 in a list. [/INST] import random\n\nnumbers = []\nfor i in range(15):\n    numbers.append(random.randrange(0, 10))\nprint(numbers)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that takes an array of words and returns an array of the lengths of each of those words. [/INST] function lengths(words) {\n  var length = [];\n  for (var i = 0; i < words.length; i++) {\n    length.push(words[i].length);\n  }\n  return length;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to parse a text string given a regular expression and return the matches. [/INST] import re\n\ndef parse(expression, string):\n  matches = re.finditer(expression, string)\n  return [match.group(0) for match in matches]</s>"
  },
  {
    "text": "<s>[INST] Create a TensorFlow neural network model to classify animals into 4 categories. [/INST] import tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(4, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])</s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query to find all the documents containing the string \"Apple\" in the field \"Company\". [/INST] db.collection.find({Company: { $regex: /Apple/ }});</s>"
  },
  {
    "text": "<s>[INST] Describe how a web server handles a request. [/INST] When a web server receives a request, it typically passes the request to a request handler. The request handler interprets the request and takes the appropriate action. Depending on the type of request, this could include accessing a file or a database, or running an application. After the request has been processed, the response is typically sent back to the user in the form of HTML, XML, or JSON.</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to add a sharing feature that posts to Facebook.\n\ndef share(message):\n    #code here [/INST] def share(message):\n    import facebook\n    graph = facebook.GraphAPI(access_token=<ACCESS_TOKEN>)\n    graph.put_object(parent_object='me', connection_name='feed', message=message)</s>"
  },
  {
    "text": "<s>[INST] What does the “static” keyword do in Java? [/INST] The \"static\" keyword in Java is used to define static members of a class. This includes static methods, static variables, static blocks, and static inner classes. Static methods can be invoked without creating an instance of the class, and static variables are shared among all objects of the same class.</s>"
  },
  {
    "text": "<s>[INST] Create a class that represents a student that contains the following information: name, email, age and type of degree. [/INST] class Student:\n    def __init__(self, name, email, age, degree_type):\n        self.name = name\n        self.email = email\n        self.age = age\n        self.degree_type = degree_type</s>"
  },
  {
    "text": "<s>[INST] Create a program that takes in a numeric value, X, and prints all the positive divisors of that number.\n\nX = 8 [/INST] def print_divisors(x):\n    divisors = []\n    for i in range(1, x + 1):\n        if(x % i == 0):\n            divisors.append(i)\n    print(divisors)</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in an integer and returns true if the number is prime or false if the number is not prime. [/INST] def is_prime(num):\n    for n in range(2, num):\n        if(num % n == 0):\n            return False\n    else:\n        return True</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes an array of numbers, calculates the sum of the numbers across all the arrays, and returns the average of those sums.\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] def get_average_sum(arr):\n    total = 0\n    count = 0\n    for sub_arr in arr:\n        total += sum(sub_arr)\n        count += len(sub_arr)\n    return total / count</s>"
  },
  {
    "text": "<s>[INST] What type of optimization algorithm is used in the following snippet of code?\n\nweights = np.random.rand(2, 1)\nfor epoch in range(50):\n     predictions = predict(x, weights)\n     gradients = calcluate_gradients(x, predictions, y)\n     weights -= gradients * learning_rate [/INST] Stochastic Gradient Descent optimization algorithm is used in the given snippet of code.</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code to use loop instead of recursion.\n\ndef longest_substring(input_string):\n    if len(input_string) <= 1:\n        return input_string\n    else:\n        first_letter = input_string[0]\n        rest_substring = input_string[1:]\n        sub_string = longest_substring(rest_substring)\n        if first_letter in sub_string:\n            return sub_string\n        else:\n            return first_letter + sub_string [/INST] def longest_substring(input_string):\n    longest_substring = \"\"\n    for i in range(len(input_string)):\n        current_substring = \"\"\n        for j in range(i, len(input_string)):\n            if input_string[j] not in current_substring:\n                current_substring += input_string[j]\n            else:\n                break\n        if len(current_substring) > len(longest_substring):\n            longest_substring = current_substring\n    return longest_substring</s>"
  },
  {
    "text": "<s>[INST] Write a function which will print out a given pattern.\n\n*\n**\n***\n**** [/INST] def print_pattern(n):\n    for i in range(1, n+1):\n        print(\"*\" * i)\n\nprint_pattern(4)</s>"
  },
  {
    "text": "<s>[INST] Write a class that implements an arithmetic operator.\n\nNone [/INST] class ArithmeticOperator:\n    def __init__(self, operator, left, right):\n        self.operator = operator\n        self.left = left\n        self.right = right\n\n    def operate(self):\n        if self.operator == \"+\":\n            return self.left + self.right\n        elif self.operator == \"-\":\n            return self.left - self.right\n        elif self.operator == \"*\":\n            return self.left * self.right\n        elif self.operator == \"/\":\n            return self.left / self.right\n        else:\n            raise ValueError('Not a valid operator')</s>"
  },
  {
    "text": "<s>[INST] Print out the Fibonacci series up to a given number.\n\nn = 5 [/INST] def print_fibonacci_series(n):\n    a = 0\n    b = 1\n    print(a, end = \" \")\n    print(b, end = \" \")\n    for _ in range(2, n):\n        c = a + b\n        a = b\n        b = c\n        print(c, end = \" \")\n    print()\n\nprint_fibonacci_series(5)</s>"
  },
  {
    "text": "<s>[INST] Given the following code, find the output.\n\ndef f(x):\n        if x == 0 or x == 1:\n            return 1\n        return f(x-1) + f(x-2)\n\nprint(f(4)) [/INST] The output of the following code is 3.</s>"
  },
  {
    "text": "<s>[INST] Edit the given code to use dynamic programming to solve the problem.\n\ndef rod_cutting(arr, n):\n    if n <= 0:\n        return 0\n    max_val = 0\n    for i in range(0, n):\n        max_val = max(max_val, arr[i] + rod_cutting(arr, n-i-1))\n    return max_val [/INST] def rod_cutting(arr, n):\n    dp = [-1 for _ in range(n+1)]\n    dp[0] = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i] = max(dp[i], arr[j] + dp[i - j - 1])\n    return dp[n]</s>"
  },
  {
    "text": "<s>[INST] Create an array of random integers from 0-10 and print the sum of all elements in the array. [/INST] import random\n\n# generate random integers\nint_list = [random.randint(0, 10) for i in range(10)]\n\n# calculate the sum\ntotal = 0\nfor e in int_list:\n    total += e\n\n# print the sum\nprint(total)</s>"
  },
  {
    "text": "<s>[INST] Create a Flask application to display a web page containing the words \"Hello, World.\" [/INST] from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n   return \"<h1>Hello, World!</h1>\"\n\nif __name__ == '__main__':\n   app.run()</s>"
  },
  {
    "text": "<s>[INST] Use Python to reverse the order of a string input.\n\nI love coding [/INST] def reverse_string(string): \n    return string[::-1]\n\nstring_input = 'I love coding'\n\nreverse_string(string_input)</s>"
  },
  {
    "text": "<s>[INST] Create a Java class named \"MyClass\" with three methods - getName(), setName(), and displayName(). [/INST] public class MyClass {\n   private String name;\n \n   // constructor\n   public MyClass(String name) {\n      this.name = name;\n   }\n \n   // getName\n   public String getName() {\n      return this.name;\n   }\n \n   // setName\n   public void setName(String name) {\n      this.name = name;\n   }\n \n   // displayName\n   public void displayName() {\n      System.out.println(\"Name is: \" + this.name);\n   }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JSON from a given array.\n\n[1, 2, 3, 4, 5] [/INST] let array = [1, 2, 3, 4, 5];\n\nlet json = JSON.stringify(array);\n\nconsole.log(json);</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in JavaScript to sort an array of numbers.\n\n[5, 2, 4, 6, 1] [/INST] let arr = [5, 2, 4, 6, 1];\n\narr.sort(function(a, b){\n    return a-b;\n});\n\nconsole.log(arr);</s>"
  },
  {
    "text": "<s>[INST] Design a program to count the total number of even numbers in a given array.\n\n[1, 2, 3, 4, 5, 6] [/INST] def count_evens(arr):\n    count = 0\n    for i in arr:\n        if (i % 2)  == 0:\n            count+=1\n    return count\n\narr = [1, 2, 3, 4, 5, 6]\ncount = count_evens(arr)\n\nprint(count)</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm in JavaScript to check if a given string consists of only unique characters.\n\nHello [/INST] function isUnique(str) {\n    for(let i = 0; i<str.length; i++){\n        for(let j = i+1; j<str.length; j++){\n            if(str.charAt(i) === str.charAt(j)){\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nlet str = 'Hello';\nlet result = isUnique(str);\nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Modify the following CSS code to change the background color of the element to \"#FFC0CB\"\n\n.main-page {\n    background-color: #FFF;\n} [/INST] .main-page {\n    background-color: #FFC0CB;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an array with 3 elements, first element is 5, the second element is 17 and the third element is identical to the first element [/INST] [5, 17, 5]</s>"
  },
  {
    "text": "<s>[INST] Given the following data structure, write a function that takes two arguments and returns the value of the specified property from the object\n\nconst data = {\n  id: 1,\n  name: 'John'\n} [/INST] function getValue(data, key) {\n    return data[key];\n}</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary with three items of your choice [/INST] {\n    'apple': 'fruit',\n    'carrot': 'vegetable',\n    'sugar': 'sweetener'\n}</s>"
  },
  {
    "text": "<s>[INST] Using the same array, write a function that returns the largest number\n\n[3, 5, 22, 11, 16, 9] [/INST] function getMaxNumber(nums) {\n    let maxNum = nums[0];\n  \n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] > maxNum) {\n            maxNum = nums[i];\n        }\n    }\n  \n    return maxNum;\n}</s>"
  },
  {
    "text": "<s>[INST] Write the SQL query to select the last element of a table\n\ntable_name: users [/INST] SELECT * FROM users ORDER BY id DESC LIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Retrieve the company name from the following object\n\nconst user = {\n    name: 'John Doe',\n    company: 'Google'\n} [/INST] user.company</s>"
  },
  {
    "text": "<s>[INST] Round the number 3.1415 to the nearest hundredth [/INST] Math.round(3.1415 * 100) / 100;</s>"
  },
  {
    "text": "<s>[INST] Edit the given HTML code to create a paragraph element.\n\n<div>Hello World!</div> [/INST] <div><p>Hello World!</p></div></s>"
  },
  {
    "text": "<s>[INST] Create a query in MySQL which fetches the first 10 records from a table called 'table1'. [/INST] SELECT * FROM table1 LIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Edit the given python code to execute the arithmetic operation.\n\na = 8\nb = a+2 [/INST] a = 8\nb = a + 2\nc = a * b\nprint(c)</s>"
  },
  {
    "text": "<s>[INST] Use Predicate logic for representing the following statement.\n\n\"An elephant only lives in an African safari.\" [/INST] ∀x(Elephant (x) ∧ Lives_in(x, African_safari))</s>"
  },
  {
    "text": "<s>[INST] Develop an HTML page in which you can display a message to the user. [/INST] <html>\n    <head>\n        <title>Display Message</title>\n    </head>\n    <body>\n        <div>\n            <h1>Welcome!</h1>\n            <p>This page displays a message to the user.</p>\n        </div>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query which returns all columns from the table 'employees' [/INST] SELECT * FROM employees;</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python which checks if an input value is positive or negative. [/INST] def check_sign(x):\n  if x < 0:\n    print(\"The number is negative.\")\n  elif x > 0:\n    print(\"The number is positive.\")\n  else:\n    print(\"The number is 0.\")</s>"
  },
  {
    "text": "<s>[INST] Design a C++ class which adds the two arguments and returns the result. [/INST] class adder \n{ \n    int a, b;\n \npublic: \n    adder (int a, int b) \n    { \n        this->a = a; \n        this->b = b; \n    }\n \n    int add() \n    { \n        int sum = a + b; \n        return sum; \n    }\n};</s>"
  },
  {
    "text": "<s>[INST] Convert the given context free grammar to Chomsky Normal Form.\n\nS --> AaBb\nA --> aA | b\nB --> bB | a [/INST] S --> AaBb\nA --> aA | bB\nB --> bBB | bA | aB | aA</s>"
  },
  {
    "text": "<s>[INST] Define a function in R which takes two arguments and finds their average. [/INST] find_average <- function(x, y){\n    avg <- (x + y) / 2\n    return(avg)\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a Java code which assigns each element of an array to an individual variable. [/INST] int[] myArray = {1,2,3};\n\nint first = myArray[0];\nint second = myArray[1];\nint third = myArray[2];</s>"
  },
  {
    "text": "<s>[INST] Write a query in PostgreSQL for deleting a table. [/INST] DROP TABLE table_name;</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to read in a list of integers and separate them into two lists of even and odd numbers.\n\n[1, 4, 6, 7, 8, 10, 12] [/INST] List even = [4, 6, 8, 10, 12]\nList odd = [1, 7]</s>"
  },
  {
    "text": "<s>[INST] Use an object oriented approach to create an object in Java to store the temperature, humidity and wind speed from a weather forecast. [/INST] class WeatherData { \n    private int temperature; \n    private int humidity;\n    private int windSpeed;\n \n    // ... setter and getter methods\n}</s>"
  },
  {
    "text": "<s>[INST] Write a HTML structure using semantic tags to list the skills of a web developer.\n\nHTML, CSS, JavaScript, React [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Web Developer Skills</title>\n</head>\n<body>\n <h1>Web Developer Skills</h1>\n <ul>\n  <li>HTML</li>\n  <li>CSS</li>\n  <li>JavaScript</li>\n  <li>React</li>\n </ul>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a HTML to generate a form to login. [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Login</title>\n</head>\n<body>\n <form action=\"\">\n  <label for=\"username\">Username</label>\n  <input type=\"text\" placeholder=\"Username\" name=\"username\"><br><br>\n  <label for=\"password\">Password</label>\n  <input type=\"password\" placeholder=\"Password\" name=\"password\"><br><br>\n  <input type=\"submit\" value=\"Login\">\n </form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Use an object oriented approach to create a class in Java to store the cost and name of an item. [/INST] class Item { \n    private String name; \n    private double cost;\n \n    // ... setter and getter methods\n}</s>"
  },
  {
    "text": "<s>[INST] Create HTML code for a web page that has a centered title, a logo, and a colorscheme.\n\nTitle: \"My Website\" \nLogo: <link to logo file>\nColor Scheme: #123456, #234567, #345678 [/INST] <html>\n<head>\n<title>My Website</title>\n</head>\n<body>\n<h1 align=\"center\">My Website</h1>\n<img src=\"<link to logo file>\" align=\"center\">\n<style>\n  body {\n  background-color: #123456;\n  color: #234567;  \n  }\n  h1 {\n    color: #345678;\n  }\n</style>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Edit this text to make it more concise without losing any information.\n\nThe research assisted in understanding the ways in which we can better optimize our data structures. We discovered many new ways of more efficiently using the resources that we were given. [/INST] Research revealed ways to optimize data structures more efficiently, leading to new resource-saving techniques.</s>"
  },
  {
    "text": "<s>[INST] Write a Python function that takes a list of numbers and returns the mean and standard deviation of that list.\n\nlist = [1, 2, 3, 4, 5] [/INST] import statistics\n\ndef get_stats(list):\n mean = statistics.mean(list)\n stdev = statistics.stdev(list)\n return mean, stdev\n\nmean, stdev = get_stats(list)\nprint(\"Mean:\", mean)\nprint(\"Standard Deviation:\", stdev)</s>"
  },
  {
    "text": "<s>[INST] Create HTML code for a table that has 7 columns and 3 rows. [/INST] <html>\n<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n    <th>Column 5</th>\n    <th>Column 6</th>\n    <th>Column 7</th>\n  </tr>\n  <tr>\n    <td>Cell 1</td>\n    <td>Cell 2</td>\n    <td>Cell 3</td>\n    <td>Cell 4</td>\n    <td>Cell 5</td>\n    <td>Cell 6</td>\n    <td>Cell 7</td>\n   </tr>\n   <tr>\n     <td>Cell 8</td>\n     <td>Cell 9</td>\n     <td>Cell 10</td>\n     <td>Cell 11</td>\n     <td>Cell 12</td>\n     <td>Cell 13</td>\n     <td>Cell 14</td>\n   </tr>\n  </table>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the number of customers with a given state.\n\nstate = \"Texas\" [/INST] SELECT COUNT(*) \nFROM customers\nWHERE state = \"Texas\";</s>"
  },
  {
    "text": "<s>[INST] Create a Python program that prints out all even numbers between 0 and the given number n. [/INST] def print_even_numbers(n):\n  for i in range (0, n+1):\n    if i % 2 == 0:\n      print (i)\n\nprint_even_numbers(20)</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to create a dictionary with the given list as its keys and values.\n\nlist = [\"a\", \"b\", \"c\"] [/INST] def create_dict(list):\n  return dict(zip(list, list))\n\ndict = create_dict(list)\nprint(dict)\n# Output: {'a': 'a', 'b': 'b', 'c': 'c'}</s>"
  },
  {
    "text": "<s>[INST] Write a shell script which prints “Hello World” 5 times. [/INST] #!/bin/bash\n\nfor i in {1..5}; do\n  echo \"Hello World\"\ndone</s>"
  },
  {
    "text": "<s>[INST] Create a new list which contains even elements from the existing list A.\n\nA = [1, 4, 5, 12, 3, 7, 16] [/INST] A = [1, 4, 5, 12, 3, 7, 16]\neven_list = [x for x in A if x % 2 == 0 ]</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary which contains the product of keys and their individual values from another dictionary.\n\nd = {'X': 4, 'Y': 5} [/INST] d = {'X': 4, 'Y': 5}\nd2 = {k:v*v for k,v in d.items()}</s>"
  },
  {
    "text": "<s>[INST] Explain how to use trapezoidal approach for numerical integration. [/INST] The trapezoidal approach is a numerical integration technique of approximating the area under a curve or a function using the trapezoid rule. It uses the formula y0 + yn + 2(y1+y2+...+yn-1) and is a first-order numerical integration method that can be used to approximate a definite integral. It works by splitting the integration domain into trapezoids and computing the area of each trapezoid. This can be used to approximate the integral of the function and hence, solve the definite integral.</s>"
  },
  {
    "text": "<s>[INST] When would you use a while-loop in Python? [/INST] A while-loop in Python is used when we need to iterate through a set of instructions or code block until a condition is met or false. It allows us to perform an operation multiple times until the condition is met. For example, we can use a while-loop to iterate and check if a certain number is prime or not.</s>"
  },
  {
    "text": "<s>[INST] How would you create a function in Python to add two numbers? [/INST] def add(a, b):\n\treturn a + b \n\n# Usage \nprint(add(3,4)) # output: 7</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following instruction to print the binary value it holds.\n\nint n = 12; [/INST] System.out.println(Integer.toBinaryString(n));</s>"
  },
  {
    "text": "<s>[INST] Write a Java method to remove all whitespaces from a string [/INST] public static String removeWhitespace(String str) {\n  return str.replaceAll(\"\\\\s\", \"\");\n}</s>"
  },
  {
    "text": "<s>[INST] Create a shell script to print out the names of the all subdirectories in given directory [/INST] #!/bin/bash\nfor dir in $1/*\ndo\n    if [ -d $dir ]\n    then\n        echo $(basename $dir)\n    fi\ndone</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to find the sum of all the perfect numbers between two given inputs. [/INST] #include <iostream> \nusing namespace std; \n  \nint perfectNo(int low, int high) \n{ \n    int sum = 0; \n    for (int i=low; i<high; i++) \n    { \n        int div_sum = 0; \n  \n        for (int j=1; j<i; j++) \n            if (i % j == 0) \n                div_sum += j; \n  \n        if (div_sum == i && i != 1) \n            sum += i; \n    } \n    return sum; \n} \n  \nint main() \n{ \n    int low = 1, high = 25; \n    cout << perfectNo(low, high) << endl; \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to get the day of the month from given a Date object [/INST] public class DayFromDate {\n    public static void main(String[] args) {\n        Date date = new Date();\n        System.out.println(\"Day of the month: \" + date.getDate());\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Explain how inheritance works in programming. [/INST] Inheritance is a feature of object-oriented programming (OOP) that allows one class, known as the \"parent class\" or \"base class\", to pass its properties and methods to another class, known as the \"child class\" or \"inherited class\". This relationship between the classes allows for code reuse, as the child class can access the data and functionality of the parent class. Additionally, the child class is allowed to modify and add onto the parent class's features, allowing for even more code reuse between classes and creating more efficient developer workflows.</s>"
  },
  {
    "text": "<s>[INST] Design a class for a user profile. [/INST] class UserProfile:\n  def __init__(self, username, password, email, full_name, date_of_birth, address):\n    self.username = username\n    self.password = password\n    self.email = email\n    self.full_name = full_name\n    self.date_of_birth = date_of_birth\n    self.address = address\n \n  def update_phone_number(self, phone_number):\n    self.phone_number = phone_number</s>"
  },
  {
    "text": "<s>[INST] Use the comment as a guide, replace its content with the proper code.\n\nchar array1[10] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};\nchar array2[10];\n// TODO: copy the content of array1 to array2 [/INST] char array1[10] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};\nchar array2[10];\n\nfor (int i = 0; i < 10; i++) {\n array2[i] = array1[i];\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a JavaScript function to find all distinct prime factors of a given number. [/INST] function findPrimeFactors(num) { \n    let factors = []; \n    while (num % 2 === 0) { \n        factors.push(2); \n        num = num / 2; \n    } \n  \n    // num must be odd at this point \n    for (let i = 3; i <= Math.sqrt(num); i += 2) { \n        while (num % i === 0) { \n            factors.push(i); \n            num = num / i; \n        } \n    } \n  \n    // This condition is to handle the case \n    // when num is a prime number greater than 2 \n    if (num > 2) \n        factors.push(num); \n  \n    // Distinct prime factors\n    let uniqFactors = new Set(factors);\n    return [...uniqFactors];\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in JavaScript to encapsulate user information. [/INST] class User {\n  constructor(fullName, email, address) {\n    this.fullName = fullName;\n    this.email = email;\n    this.address = address;\n  }\n\n  updateName(name) {\n    // update the user's full name\n    this.fullName = name;\n  }\n  \n  updateEmail(email) {\n    // update the user's email address\n    this.email = email;\n  }\n  \n  updateAddress(address) {\n    // update the user's address\n    this.address = address;\n  }\n  \n  getFullName() {\n    // return the user's full name\n    return this.fullName\n  }\n  \n  getEmail() {\n    // return the user's email\n    return this.email\n  }\n  \n  getAddress() {\n    // return the user's address\n    return this.address\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the code to create a class for a profile.\n\nclass Profile {\n\n} [/INST] class Profile {\n  constructor(name, email, avatar_url) {\n    this.name = name;\n    this.email = email;\n    this.avatar_url = avatar_url;\n  }\n\n  updateName(name) {\n    // update the profile's name\n    this.name = name;\n  }\n  \n  updateEmail(email) {\n    // update the profile's email address\n    this.email = email;\n  }\n  \n  updateAvatar(url) {\n    // update the profile's avatar url\n    this.avatar_url = url;\n  }\n  \n  getName() {\n    // return the profile's name\n    return this.name;\n  }\n  \n  getEmail() {\n    // return the profile's email\n    return this.email;\n  }\n  \n  getAvatarUrl() {\n    // return the profile's avatar url\n    return this.avatar_url;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Design a HTML page to display a table of students’ grades for a specific subject. [/INST] <!DOCTYPE html>\n<html>\n<head>\n<style>\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n\ntr:nth-child(even) {\n  background-color: #dddddd;\n}\n</style>\n</head>\n<body>\n\n<h2>Students' Grades</h2>\n\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Grade</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>A</td>\n  </tr>\n  <tr>\n    <td>Steve</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>Jane</td>\n    <td>A+</td>\n  </tr>\n  <tr>\n    <td>Jeff</td>\n    <td>C+</td>\n  </tr>\n</table>\n\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to find the employees with the best rating during their last review. [/INST] SELECT * \nFROM Employees \nWHERE Rating IN \n    (SELECT MAX(Rating) FROM Reviews \n      WHERE ReviewDate = (SELECT MAX(ReviewDate) FROM Reviews) \n      GROUP BY EmployeeID) \nORDER BY Rating DESC;</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to determine if an integer is even or odd. [/INST] def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script to print out Fibonacci numbers up to 50. [/INST] <?php \nfunction Fibonacci($n){ \n  \n    if ($n == 0) \n        return 0;     \n    else if ($n == 1) \n        return 1;     \n      \n    else\n        return (Fibonacci($n-1) +  \n                Fibonacci($n-2)); \n} \n  \n$n = 50; \nfor ($i = 0; $i < $n; $i++) \n    echo Fibonacci($i),' '; \n  \n?></s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to calculate the distance between two points in 3D space. [/INST] #include <iostream>\n#include <cmath>\n \nusing namespace std;\n \nstruct Point\n{\n    double x, y, z;\n};\n \n//Calculate distance between two points\ndouble distance(Point p1, Point p2)\n{\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2) + pow(p2.z - p1.z, 2)*1.0);\n}\n \nint main()\n{\n    Point p1 = {2.0, 4.0, 9.0};\n    Point p2 = {5.1, 7.5, 10.0};\n    cout << \"Distance between p1 and p2 is \" << distance(p1, p2);  \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following JavaScript program using ES6 syntax.\n\nlet result=[];\nfor (let i=0;i<array.length;i++) {\nif (array[i]%2 == 0) {\nresult.push(array[i]);\n  }\n} [/INST] let result = array.filter(n => n % 2 == 0);</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm which is able to sort a given array of integers in descending order. [/INST] def sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] > nums[j]:\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums</s>"
  },
  {
    "text": "<s>[INST] Given the object below, debug the problem to make a valid code in JavaScript.\n\nlet obj = {\n    name: 'John',\n    age: 20,\n    printDetails: () => {\n        console.log(`The name is ${name} and age is ${age}`);\n    }\n} [/INST] let obj = {\n    name: 'John',\n    age: 20,\n    printDetails() {\n        console.log(`The name is ${this.name} and age is ${this.age}`);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Compute the average of the following three numbers: 5, 10, and 15. [/INST] 10.0</s>"
  },
  {
    "text": "<s>[INST] Create a for loop that prints the following output: [/INST] for i in range(10):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Using the given array, create a function that takes in two arguments, the array and a number, and returns the position of the number in the array.\n\nlet arr = [1, 7, 9, 8, 5] [/INST] function findIndexOf(array, num) {\n   return array.indexOf(num);\n}</s>"
  },
  {
    "text": "<s>[INST] Create an if statement that prints \"Fizz\" if a number is divisible by 3 and \"Buzz\" if a number is divisible by 5. [/INST] if (num % 3 == 0 && num % 5 == 0) {\n    console.log(\"FizzBuzz\");\n} else if (num % 3 == 0) {\n    console.log(\"Fizz\");\n} else if (num % 5 == 0) {\n    console.log(\"Buzz\");\n}</s>"
  },
  {
    "text": "<s>[INST] Reverse this sentence: \"I can do coding.\" [/INST] \"coding do can I\"</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script to read three numbers and print their sum to the screen. [/INST] #/bin/bash\n\necho \"Enter the first number: \"\nread num1\n\necho \"Enter the second number: \"\nread num2\n\necho \"Enter the third number: \"\nread num3\n\necho \"The sum of the three numbers is: \"\necho $(($num1 + $num2 + $num3))</s>"
  },
  {
    "text": "<s>[INST] Using the given object, create a function to print out the value of the property \"age\" within the object.\n\nlet obj = {\n    name: 'John',\n    age: 20,\n    printDetails: () => {\n        console.log(`The name is ${name} and age is ${age}`);\n    }\n} [/INST] function printAge(obj) {\n    console.log(obj.age);\n}</s>"
  },
  {
    "text": "<s>[INST] Use JavaScript to write a program that finds the greatest common divisor of two numbers.\n\nnum1 = 45\nnum2 = 36 [/INST] function findGCD(num1, num2) {  \n    let min = Math.min(num1, num2); \n    while (num1 % min !== 0 || num2 % min !== 0) {\n        min--; \n    }\n    return min;  \n}\n\nlet result = findGCD(45, 36); \nconsole.log(result); // output: 9</s>"
  },
  {
    "text": "<s>[INST] Implement a method in Java to generate a random float within the given range.\n\nmin = 0.3\nmax = 0.7 [/INST] /**\n * Generates a random float value within the given range (inclusive).\n * @param min the minimum value of the range\n * @param max the maximum value of the range\n * @return a random float value within the range\n */\npublic static float randomFloat(float min, float max) {\n    Random rand = new Random();\n    return rand.nextFloat() * (max - min) + min;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the code below to sort the list of integers given in the input.\n\nlist_in = [40, 32, 12, 19] [/INST] list_in = [40, 32, 12, 19]\nlist_in.sort()\nprint(list_in) #output: [12, 19, 32, 40]</s>"
  },
  {
    "text": "<s>[INST] Substitute the correct data type for each variable in the code below.\n\nname = <data_type>\nage = <data_type>\nif_married = <data_type> [/INST] name = str\nage = int\nif_married = bool</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to take the input and print the output as shown in the example below.\n\nlist1 = [10, 20, 30, [40, 50], [60, 70], 80] [/INST] print(list1[3][1])\nprint(list1[4][0])\n\nprint(list1[3][1]) # output: 50\nprint(list1[4][0]) # output: 60</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to find the names of all senior developers.\n\ndevelopers table: id INT, name VARCHAR(50), seniority VARCHAR(20) [/INST] SELECT name \nFROM developers \nWHERE seniority = 'Senior'</s>"
  },
  {
    "text": "<s>[INST] Let's try a different sort algorithm. Generate a Python code snippet to implement merge sort. [/INST] # Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n    n1 = m - l + 1\n    n2 = r- m \n  \n    # create temp arrays \n    L = [0] * (n1) \n    R = [0] * (n2) \n  \n    # Copy data to temp arrays L[] and R[] \n    for i in range(0 , n1): \n        L[i] = arr[l + i] \n  \n    for j in range(0 , n2): \n        R[j] = arr[m + 1 + j] \n  \n    # Merge the temp arrays back into arr[l..r] \n    i = 0     # Initial index of first subarray \n    j = 0     # Initial index of second subarray \n    k = l     # Initial index of merged subarray \n  \n    while i < n1 and j < n2 : \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n        k += 1\n  \n    # Copy the remaining elements of L[], if there \n    # are any \n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n  \n    # Copy the remaining elements of R[], if there \n    # are any \n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n  \n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n    if l < r: \n  \n        # Same as (l+r)//2, but avoids overflow for \n        # large l and h \n        m = (l+(r-1))//2\n  \n        # Sort first and second halves \n        mergeSort(arr, l, m) \n        mergeSort(arr, m+1, r) \n        merge(arr, l, m, r)</s>"
  },
  {
    "text": "<s>[INST] Create an input validation function in Python which checks that the input is an integer between 2-6. [/INST] def input_validation(input):\n    try:\n        input = int(input)\n        if input >= 2 and input <= 6:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Make a function in Python that sorts a list of integers in increasing order.\n\n[50, 2, 8, 7, 19, 29] [/INST] def sortInt(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if nums[i] > nums[j]:\n                #Swap\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums</s>"
  },
  {
    "text": "<s>[INST] Develop an HTML/CSS layout with 2 columns and a 2-row header. [/INST] <div class=\"container\">\n  <div class=\"header\">\n    <div class=\"row1\">Row1</div>\n    <div class=\"row2\">Row2</div>\n  </div>\n\n  <div class=\"main\">\n    <div class=\"column1\">Column1</div>\n    <div class=\"column2\">Column2</div>\n  </div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to select the top 10 sales records from the table \"sales\". [/INST] SELECT * FROM sales\nORDER BY amount DESC\nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query to find all records with a \"quantity\" field greater than 5. [/INST] db.collection.find({ \"quantity\": { $gt: 5 } })</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a basic calculator form that takes two numbers as inputs and computes and displays the sum. [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Calculator</title>\n  </head>\n  <body>\n    <h1>Calculator</h1>\n    <form>\n      <label>\n        Number 1: \n        <input type=\"text\" name=\"num1\" />\n      </label>\n      <br />\n      <label>\n        Number 2: \n        <input type=\"text\" name=\"num2\" />\n      </label>\n      <br />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <p id=\"answer\"></p>\n    <script>\n        let form = document.querySelector(\"form\");\n        \n        form.addEventListener(\"submit\", e => {\n          e.preventDefault();\n          \n          let nums = form.querySelectorAll(\"input[name=num]\");\n          let sum = 0;\n          \n          for (let n of nums) {\n            sum += parseInt(n.value);\n          }\n          \n          document.getElementById(\"answer\").textContent = `The sum is: ${sum}`;\n        });\n    </script>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to select the records whose name fields begins with an \"A\". [/INST] SELECT * FROM table_name WHERE name LIKE 'A%';</s>"
  },
  {
    "text": "<s>[INST] Develop a CSS/HTML page with a 3-column layout and a sticky navigation bar. [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Layout</title>\n    <style>\n        .row {\n            display: flex;\n            flex-wrap: wrap;\n        }\n\n        .column {\n            flex: 25%;\n        }\n    \n        #nav {\n            position: sticky;\n            top: 0;\n            background-color: #000;\n            padding: 10px;\n            text-align: center;\n        }    \n    </style>\n</head>\n<body>\n    <div id=\"nav\">Navigation Bar</div>\n    <div class=\"row\">\n        <div class=\"column\">Column1</div>\n        <div class=\"column\">Column2</div>\n        <div class=\"column\">Column3</div>\n    </div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a function that prints out the List of tuples.\n\nt = [(1, 5), (0, 1), (10, 20)] [/INST] def print_list_tuple(t):\n    for item in t:\n        print(item)</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to delete rows from a table that fulfill two conditions.\n\nTable Name: Customer\nConditions:\n(1) Country = ‘USA’ \n(2) Age = 18 [/INST] DELETE FROM Customer \nWHERE Country = 'USA' AND Age = 18;</s>"
  },
  {
    "text": "<s>[INST] Suggest a name for the variable that represents a temperature value in Fahrenheit [/INST] fahrenheit_temperature</s>"
  },
  {
    "text": "<s>[INST] Update the following code to create a valid URL\n\nurl = \"www.example.com:port/path?query=blah\" [/INST] url = \"http://www.example.com:port/path?query=blah\"</s>"
  },
  {
    "text": "<s>[INST] Create a function to encrypt a string using the XOR operator.\n\nkey = 'ABCDEFG' [/INST] def xor_encrypt(string, key):\n    encrypted_string = \"\"\n    for i, letter in enumerate(string):\n        encrypted_string += chr(ord(letter) ^ ord(key[i % len(key)]))\n    return encrypted_string</s>"
  },
  {
    "text": "<s>[INST] Create a class definition for a Car object with attributes of HP and speed. [/INST] class Car:\n    def __init__(self, hp, speed):\n        self.hp = hp\n        self.speed = speed</s>"
  },
  {
    "text": "<s>[INST] Change the case of all characters in a string.\n\nstring = \"Hello World!\" [/INST] def change_case(string):\n    return string.swapcase()</s>"
  },
  {
    "text": "<s>[INST] Create a web page with an input field and a button to reset the field. [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Input field and Reset button</title>\n</head>\n<body>\n    <input type=\"text\" placeholder=\"Type something\">\n    <button onclick=\"resetInput()\">Reset</button>\n\n    <script>\n        function resetInput() {\n            document.querySelector('input[type=\"text\"]').value = '';\n        }\n    </script>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the employees with the lowest salary. [/INST] SELECT * \nFROM employees \nORDER BY salary ASC \nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Explain what a constructor is and how it is used in C++. [/INST] A constructor is a special member function of a class which is used to initialize objects of its class type. A constructor has the same name as the class and its purpose is to initialize the members of an object with the given values when an object of that class is declared. In C++, constructors can be either default or parameterized. The default constructor is used to construct an object without any parameters, while the parameterized constructor is used to initialize an object with given parameters.</s>"
  },
  {
    "text": "<s>[INST] Create an XML document with a root element \"<name>\". [/INST] <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<name> </name></s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to center an HTML element. [/INST] .center {\n    margin: 0 auto;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to find a number in an array and print its index.\n\nint[] arr = {1, 2, 3, 4, 5};\nint num = 3; [/INST] public class Main {\n   public static void main(String[] args) {\n      int[] arr = {1, 2, 3, 4, 5};\n      int num = 3;\n      \n      int index = -1;\n      for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == num) {\n           index = i;\n           break;\n        }\n      }\n      \n      if (index == -1) {\n        System.out.println(\"Number not found.\");\n      } \n      else {\n        System.out.println(\"Number found at index \" + index);\n      }\n   }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C program to swap two numbers using pointers. [/INST] #include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 50;\n    int y = 100;\n    \n    printf(\"x = %d and y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"x = %d and y = %d\\n\", x, y);\n    \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Use CSS to style the following list items.\n\n<ul>\n    <li> Item 1 </li>\n    <li> Item 2 </li>\n    <li> Item 3 </li>\n</ul> [/INST] <ul style=\"list-style: none; font-size: 16px; font-weight: bold; color: #00b5e2;\">\n    <li> Item 1 </li>\n    <li> Item 2 </li>\n    <li> Item 3 </li>\n</ul></s>"
  },
  {
    "text": "<s>[INST] What algorithm should be used for predicting the output for a given input? [/INST] The type of algorithm to be used for predicting the output for a given input depends on the complexity of the task. Common algorithms used for prediction tasks include Support Vector Machines, Random Forests, k-Nearest Neighbors and Artificial Neural Networks.</s>"
  },
  {
    "text": "<s>[INST] Link the given HTML elements with the appropriate bootstrap style.\n\n<h1>Heading </h1>\n<button> Button </button> [/INST] <h1 class=\"text-primary\">Heading </h1>\n<button class=\"btn btn-secondary\"> Button </button></s>"
  },
  {
    "text": "<s>[INST] List the layers of an artificial neural network. [/INST] The layers of an artificial neural network typically include an input layer, one or more hidden layers and an output layer. In addition, some ANNs also include a convolutional layer and/or a pooling layer.</s>"
  },
  {
    "text": "<s>[INST] Analyze the following two functions to determine which one will be faster for executing a given operation.\n\nFunction 1:\n\ndef f1(x):\n    for i in range(1, x):\n        print(i)\n\nFunction 2:\n\ndef f2(x):\n    i = 1\n    while i < x:\n        print(i)\n        i += 1 [/INST] Function 2 will be faster than Function 1 for executing a given operation. This is because Function 2 uses a while loop, which checks the condition before executing the loop body, while Function 1 uses a for loop, which executes the loop body before checking the condition.</s>"
  },
  {
    "text": "<s>[INST] Name the most important benefit of using a database system. [/INST] The most important benefit of using a database system is the ability to store and retrieve data quickly and easily. Database systems also provide support for data security, data integrity, and concurrently accessing and modifying data from multiple systems.</s>"
  },
  {
    "text": "<s>[INST] Modify the following SQL query to list the top 3 customers with the highest orders.\n\nSELECT customers.name, \n        orders.amount \n    FROM customers \n    INNER JOIN orders \n    ON customers.id = orders.customer_id [/INST] SELECT customers.name, \n        orders.amount \n    FROM customers \n    INNER JOIN orders \n    ON customers.id = orders.customer_id\nORDER BY orders.amount DESC\nLIMIT 3</s>"
  },
  {
    "text": "<s>[INST] Differentiate between a compiler and an interpreter. [/INST] A compiler takes a source code and converts it into an executable program, while an interpreter takes the same source code and executes it directly. Compilers produce a single output file and are usually faster than interpreters. Interpreters take source code as input and produce output directly, and tend to be slower than compilers.</s>"
  },
  {
    "text": "<s>[INST] What is the advantage of using linear regression for predicting the output? [/INST] The advantage of using linear regression for predicting the output is that it can capture important relationship between input variables and the outcome. It is easy to interpret and explain, can produce easily interpretable results, and can also be used to optimize parameters for a given problem.</s>"
  },
  {
    "text": "<s>[INST] Create a class with two methods to generate a random Integer and String [/INST] import random\n\nclass randomGenerator:\n  \n    def __init__(self):\n        pass\n    \n    def generate_random_int(self):\n        return random.randint(0,100)\n    \n    def generate_random_string(self):\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nrandomGenerator = randomGenerator()</s>"
  },
  {
    "text": "<s>[INST] In Python, create a function that reverses a list. [/INST] def reverse_list(list): \n    return list[::-1] \n  \nlist = [10, 16, 1, 5] \n  \nprint(\"Original List\", list) \nprint(\"Reversed List\", reverse_list(list))</s>"
  },
  {
    "text": "<s>[INST] Sort the following array\n\narr = [4, 2, 3, 5, 1] [/INST] arr.sort()\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] Write a generic function to split an array into n equal slices.\n\narr = [1, 2, 3, 4, 5] [/INST] def splitArr(arr, n):\n    if n > len(arr):\n        return -1\n    result = []\n    for i in range(0, len(arr), n):\n        result.append(arr[i:i+n])\n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a function that returns the last element of an array.\n\narr = [1, 3, 6, 7, 12] [/INST] def lastElement(arr):\n    return arr[-1]</s>"
  },
  {
    "text": "<s>[INST] Given a string, remove any duplicate characters.\n\ninput_string = \"aaabbbccc\" [/INST] def removeDupChars(input_string): \n    string_set = set(input_string) \n    new_string = \"\". join(string_set)\n    return new_string</s>"
  },
  {
    "text": "<s>[INST] Write a function to sort a stack in ascending order.\n\nstack = [4, 7, 2, 1] [/INST] def sortStackAsc(stack):\n    sorted_stack = []\n\n    while stack:\n        current_element = stack.pop()\n        while sorted_stack and current_element < sorted_stack[-1]:\n            stack.append(sorted_stack.pop())\n        sorted_stack.append(current_element)\n\n    return sorted_stack</s>"
  },
  {
    "text": "<s>[INST] Generate a random number between the two numbers provided.\n\nmin = 5\nmax = 10 [/INST] import random\n\ndef randomNumber(min, max):\n    return random.randint(min, max)</s>"
  },
  {
    "text": "<s>[INST] From the array of integers given below, write a Python code snippet to select all even numbers.\n\narray = [1, 9, 4, 10, 5, 12]; [/INST] even_numbers = [num for num in array if num % 2 == 0]</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to print all natural numbers between 1 and 50, both inclusive. [/INST] public class Natural { \n    public static void main(String[] args) \n    { \n        int n = 1; \n        while (n <= 50) { \n            System.out.println(n); \n            n = n + 1; \n        } \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a CSS style for all <h1> tags to have a red border. [/INST] h1{ \n    border: 1px solid red;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the employee names and IDs from the table 'employees' where the name contains \"John\". [/INST] SELECT name, id FROM employees WHERE name LIKE '%John%';</s>"
  },
  {
    "text": "<s>[INST] Write an HTML structure to create a form with two text boxes and two submit buttons. [/INST] <form action=\"form_action.php\" method=\"POST\">\n    <input type=\"text\" name=\"name\">\n    <input type=\"text\" name=\"email\">\n    <input type=\"submit\" name=\"button1\" value=\"Submit\">\n    <input type=\"submit\" name=\"button2\" value=\"Cancel\">\n</form></s>"
  },
  {
    "text": "<s>[INST] From the object given below, write a PHP code snippet to extract the value of the key 'shipping_address'.\n\nobject = {\n    name: 'John Doe',\n    shipping_address: '123 Main Street'\n}; [/INST] <?php\n$shipping_address = $object['shipping_address'];\necho $shipping_address;\n?></s>"
  },
  {
    "text": "<s>[INST] Create a HTML structure for an ordered list with 5 items. [/INST] <ol>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    <li>Item 4</li>\n    <li>Item 5</li>\n</ol></s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to update the column 'name' to 'John' in the table 'employees'. [/INST] UPDATE employees SET name = 'John';</s>"
  },
  {
    "text": "<s>[INST] From the list of numbers given below, write a PHP code snippet to calculate the mean.\n\n$list = [1, 8, 4, 6, 5, 3]; [/INST] <?php\n$sum = 0;\nforeach ($list as $number) {\n    $sum += $number;\n}\n$mean = $sum / count($list);\necho $mean;\n?></s>"
  },
  {
    "text": "<s>[INST] What is the Big O complexity of this following code snippet?\n\ndef find_duplicates(nums):\n    duplicates = []\n    for num in nums:\n        if num in duplicates:\n            yield num\n        else:\n            duplicates.append(num) [/INST] The Big O complexity of this code snippet is O(n), since it takes linear time to loop through the array and check if the element has appeared before.</s>"
  },
  {
    "text": "<s>[INST] Write a CSS snippet to create five divs of size 200px by 200px side by side. [/INST] div {\n    width: 200px;\n    height: 200px;\n}\n\ndiv:nth-child(1) {\n    position: relative;\n}\ndiv:nth-child(2) {\n    position: relative;\n    left: 205px;\n}\ndiv:nth-child(3) {\n    position: relative;\n    left: 410px;\n}\ndiv:nth-child(4) {\n    position: relative;\n    left: 615px;\n}\ndiv:nth-child(5) {\n    position: relative;\n    left: 820px;\n}</s>"
  },
  {
    "text": "<s>[INST] How do the following Java methods work?\n\npublic static void main(String[] args) \n{ \n    int[] arr = {2,4,6,8,10}; \n    int n = 2; \n    int result = binarySearch(arr, 0, arr.length-1, n); \n    if (result == -1) \n        System.out.println(\"Element is not present\"); \n    else\n        System.out.println(\"Element is present at index \" +  \n                                             result); \n} \n  \nstatic int binarySearch(int arr[], int l, int r, int x) \n{ \n    while (l <= r) \n    { \n        int m = l + (r-l)/2; \n        if (arr[m] == x) \n            return m;  \n        if (arr[m] < x) \n            l = m + 1; \n        else\n            r = m - 1; \n    } \n    return -1;  \n} [/INST] The main method takes an array of integers and an element to search for. It calls binarySearch method which uses the binary search algorithm to search for the element in the given array. The algorithm starts by calculating the mid point of the given array. If the element at the mid point is equal to the element to search for, it returns the index of the mid point. If the element being searched for is less than the element at the mid point, the element can be searched in the left subarray by setting right boundary one less than mid point. If the element being searched for is greater than the element at the mid point, the element can be searched in the right subarray by setting the left boundary one greater than the mid point. The search continues until the element is found or whole array is searched. If the element is not present in the array,It returns -1.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all books that are rated 4 stars or higher. [/INST] SELECT * \nFROM books \nWHERE rating >= 4;</s>"
  },
  {
    "text": "<s>[INST] Explain the result of the following one-liner command.\n\necho Apple Banana Cat | cut -d\" \" -f2 [/INST] This command prints the second word of the list of words, i.e., \"Banana\". The echo command prints out the words 'Apple', 'Banana', and 'Cat', and the cut command is used to extract the parts of each word delimited by spaces. The -d flag specifies the delimiter, which in this case is a space, and the -f flag specifies the field number, which in this case is 2. Therefore, the output is \"Banana\".</s>"
  },
  {
    "text": "<s>[INST] What will be printed with the following Java code?\n\nString myString = \"Hello World\";\n\nfor (int i = 0; i < myString.length(); i++) {\n    System.out.print(i + \" = \" + myString.charAt(i) + \" \");\n} [/INST] 0 = H 1 = e 2 = l 3 = l 4 = o 5 =   6 = W 7 = o 8 = r 9 = l 10 = d</s>"
  },
  {
    "text": "<s>[INST] What should the input to the following JavaScript code be?\n\nconst capitalizeFirstLetter = word => word[0].toUpperCase() + word.slice(1);\n\nconst result = capitalizeFirstLetter(input); [/INST] The input to this JavaScript code should be a string. The code capitalizes the first letter of the string, and then concatenates the rest of the string after the first letter.\nFor example, if the input is \"hello\", the output will be \"Hello\".</s>"
  },
  {
    "text": "<s>[INST] Generate random numbers in the range of 1 to 100 using a for loop in Python. [/INST] import random\n\nfor i in range(100):\n\trand_num = random.randint(1, 100)\n\tprint(rand_num)</s>"
  },
  {
    "text": "<s>[INST] Create an object in C++ that stores the roll number and name of students in an array. [/INST] #include <iostream>\n#include <string>\n\nclass Student {\npublic:\n    int rollNumber;\n    std::string name;\n};\n\nStudent students[100];</s>"
  },
  {
    "text": "<s>[INST] Create an HTML button with a class and an ID attribute. [/INST] <button class=\"button\" id=\"button-id\">Click Me!</button></s>"
  },
  {
    "text": "<s>[INST] Write a script in JavaScript that gets the value of a certain input field whenever the user clicks it.\n\n<input type=\"text\" name=\"myInput\" value=\"Input\" /> [/INST] document.getElementById(\"myInput\").addEventListener(\"click\", function() {\n    var inputValue = document.getElementById(\"myInput\").value;\n    console.log(inputValue);\n});</s>"
  },
  {
    "text": "<s>[INST] Edit the given HTML code to add a title tag inside the head tag.\n\n<html>\n <head>\n </head>\n <body>\n   <h1>My Website</h1>\n </body>\n</html> [/INST] <html>\n <head>\n  <title>My Website</title>\n </head>\n <body>\n   <h1>My Website</h1>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a dictionary in Java containing employee information with their names as the key and salary as the values. [/INST] Map<String, Integer> employeeMap = new HashMap<>();\nemployeeMap.put(\"John\", 1000);\nemployeeMap.put(\"Amy\", 1200);\nemployeeMap.put(\"Dad\", 1500);\nemployeeMap.put(\"Mom\", 2000);</s>"
  },
  {
    "text": "<s>[INST] Calculate the Fibonacci sequence up to the 10th number using a for loop in JavaScript. [/INST] let n1 = 0, n2 = 1;\nlet fibonacci_sequence = [n1, n2];\n\nfor (let i = 2; i < 10; i++) {\n    let n3 = n1 + n2;\n    fibonacci_sequence.push(n3);\n    n1 = n2;\n    n2 = n3;\n}\n\nconsole.log(fibonacci_sequence);</s>"
  },
  {
    "text": "<s>[INST] Classify the following sentences into either a question or an instruction: “Please write a script to print all the prime numbers up to 50.” [/INST] Instruction: Please write a script to print all the prime numbers up to 50.</s>"
  },
  {
    "text": "<s>[INST] Add comments to the following code to explain briefly its purpose.\n\ndef sum_of_numbers(n):\n    total = 0\n    for i in range(n):\n        total += i\n    return total [/INST] \"\"\"\nThis function is used to calculate the \nsum of the first 'n' natural numbers\n\"\"\"\ndef sum_of_numbers(n): \n    # Initialize total to 0\n    total = 0 \n\n    # Loop through the first 'n' natural numbers\n    for i in range(n): \n        # Add the current number to the total\n        total += i \n\n    # Return total\n    return total</s>"
  },
  {
    "text": "<s>[INST] Write a Python script that prints out the Fibonacci sequence up to the nth number.\n\n10 [/INST] \"\"\"\nPrint out the Fibonacci sequence up to the nth number\n\"\"\"\ndef printFibSequence(n): \n    \n    # Initialize first two terms \n    a = 0\n    b = 1\n\t\n    # Add the first two terms \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(2, n): \n        c = a + b \n        print(c, end=\" \") \n        a = b \n        b = c \n\n# Main program\nif __name__ == '__main__':\n    n = 10 \n    printFibSequence(n)</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object with two keys \"firstName\" and \"lastName\".\n\nAhsan [/INST] let person = {\n    \"firstName\": \"Ahsan\",\n    \"lastName\": \"\"\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to persistently store data in a Java program. [/INST] A convenient way to persistently store data in a Java program is to use a database such as MySQL or SQLite. You can also use an API to store data in the cloud, such as AWS S3. Additionally, many Java libraries provide support for persistence such as JPA and Hibernate, which provide object-relational mapping and object-oriented querying capabilities.</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of the keyword ``this`` in Java. [/INST] In Java, the keyword \"this\" is used to refer to the current object. It can be used to access the values of instance variables and to call methods within the current object. It can also be used to pass the object itself as an argument to another method. \"this\" is used to differentiate instance variables from local variables in the same method.</s>"
  },
  {
    "text": "<s>[INST] Write a CSS selector for all elements with the ``highlight`` class. [/INST] .highlight {\n  \n}</s>"
  },
  {
    "text": "<s>[INST] Generate a random string of 10 characters in a JavaScript program. [/INST] let randomString = \"\";\nlet characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n \nfor (let i = 0; i < 10; i++) {\n  randomString += characters.charAt(Math.floor(Math.random() * characters.length));\n}\n\nconsole.log(randomString);</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to solve the following problem in Python: extracting the last element from a given list. [/INST] A convenient way to extract the last element from a given list in Python is to use negative indexing. This allows you to access the last element of a list by using the index -1. For example, the following code will return the last element of the list \"my_list\": \n\nmy_last_element = my_list[-1]</s>"
  },
  {
    "text": "<s>[INST] Compute the result of 2 + 6 in JavaScript. [/INST] let result = 2 + 6;\nconsole.log(result); // Outputs 8;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that orders the entries in the table \"tasks\" by their creation date. [/INST] SELECT * FROM tasks ORDER BY creation_date;</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page that takes your name as input and welcomes you on page load. [/INST] <html>\n<body>\n   <script>\n\t  function onPageLoad() {\n\t\t  var name = prompt('Please enter your name: ');\n\t\t  alert('Welcome ' + name + '!');\n\t  }\n\t  onPageLoad();\n   </script>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a model in scikit-learn to predict the label of a given input data.\n\nInput Data: [3.0, -4.0, 2.0, 0.8]\nLabel: Positive [/INST] from sklearn import svm \n\n# define model \nmodel = svm.SVC(kernel='linear', C=1.0) \n\n# define inputs \nX = [[3.0, -4.0, 2.0, 0.8]] \ny = ['Positive'] \n\n# fit model \nmodel.fit(X, y)</s>"
  },
  {
    "text": "<s>[INST] Construct an IPython code cell to display the content of a given pandas DataFrame.\n\nDataFrame:\nName      Age\nAlice      26\nBob        32\nCarol      12 [/INST] import pandas as pd\n\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Carol'],\n                   'Age': [26, 32, 12]})\n\ndf</s>"
  },
  {
    "text": "<s>[INST] Modify the following react code to make it render an h2 tag.\n\nimport React, {Component} from \"react\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello React!</h1>\n      </div>\n    )\n  }\n} [/INST] import React, {Component} from \"react\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello React!</h1>\n        <h2>Nice to meet you!</h2>\n      </div>\n    )\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a jQuery code to hide the first element of an HTML list.\n\n<ul>\n  <li>Item One</li>\n  <li>Item Two</li>\n  <li>Item Three</li>\n</ul> [/INST] $('ul li:first-of-type').hide();</s>"
  },
  {
    "text": "<s>[INST] Fix the bug in the following code to sort a given list of numbers in descending order.\n\nnums = [2, 3, 1, 4] [/INST] nums = [2, 3, 1, 4]\nnums.sort(reverse=True)\nprint(nums) # Output: [4, 3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Take the string ‘hello world’ and convert it to uppercase. [/INST] string = 'hello world'\nprint(string.upper()) # Output: 'HELLO WORLD'</s>"
  },
  {
    "text": "<s>[INST] Parse the given XML code and extract the value of the first attribute of the first element.\n\n<root>\n    <item attr1=\"value1\" attr2=\"value2\">\n        <value>Logged</value>\n    </item>\n</root> [/INST] import xml.etree.ElementTree as ET\n\ntree = ET.parse('test.xml') \nroot = tree.getroot() \n\nfirst_attr = root[0].attrib['attr1']\nprint(first_attr) # Output: 'value1'</s>"
  },
  {
    "text": "<s>[INST] Create a script to convert JSON to an array.\n\n{\"name\": \"John Doe\", \"age\": 30} [/INST] import json\n\njson_data = \"{\\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 30}\"\narray = json.loads(json_data)\nprint(array) # Output: {'name': 'John Doe', 'age': 30}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to log the integer 3 to the web console. [/INST] console.log(3);</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to read in a string and print its length. [/INST] import java.util.Scanner;\n\npublic class StringLength {\n public static void main(String[] args) {\n  Scanner scanner = new Scanner(System.in);\n  String inputString = scanner.nextLine();\n  System.out.println(\"Length of the string is: \"+ inputString.length());\n }\n}</s>"
  },
  {
    "text": "<s>[INST] In Java, write a program to read in an array of 5 integers and output their sum.\n\n[2, 5, 9, 8, 6] [/INST] import java.util.Scanner;\n\npublic class ArraySum {\n public static void main(String[] args) {\n  int[] array = {2, 5, 9, 8, 6};\n  int sum = 0;\n\n  for (int i = 0; i < array.length; i++) {\n   sum = sum + array[i];\n  }\n\n  System.out.println(\"The sum of the array is: \"+sum);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function which converts a string representation of number in English to a numerical value.\n\n\"one thousand two hundred and thirty four\" [/INST] \"\"\"\nCreate a function which converts a string representation of number in English to a numerical value.\n\"\"\"\n\ndef convert_english_number(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\n    final_num = 0\n    i=0\n    while i<len(word_list): \n        if word_list[i] in word_values.keys():\n            final_num += word_values[word_list[i]]\n        elif word_list[i]==\"hundred\":\n            final_num = final_num*100\n            \n        if(i+1<len(word_list) and word_list[i+1]==\"hundred\"):\n            final_num += word_values[word_list[i]]*100\n        i+=1\n    return final_num\n\nif __name__ == '__main__':\n    print(convert_english_number(\"one thousand two hundred and thirty four\"))</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.\n\nTarget: 10\nNumbers: [1,4,5,3,6] [/INST] \"\"\"\nCreate an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.\n\"\"\"\ndef optimal_sum(target, numbers): \n    if (target == 0): \n        return True\n    n = len(numbers) \n    subset = [True] + [False]*target \n      \n    for i in range(n): \n        for j in range(target,numbers[i]-1,-1): \n            subset[j] = subset[j] or subset[j-numbers[i]] \n  \n    return subset[target] \n\nif __name__ == '__main__': \n    target = 10\n    numbers = [1,4,5,3,6]\n    print(optimal_sum(target, numbers))</s>"
  },
  {
    "text": "<s>[INST] Generate a loop to read each word from a given sentence and display them as a list.\n\nSentence: \"Python is a great programming language\" [/INST] \"\"\"\nGenerate a loop to read each word from a given sentence and display them as a list.\n\"\"\"\nsentence = \"Python is a great programming language\"\nwords = sentence.split()\n\nword_list= []\nfor word in words:\n    word_list.append(word)\n\nprint(word_list)</s>"
  },
  {
    "text": "<s>[INST] Create a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.\n\nString 1: \"Hello World\" \nString 2: \"World Hello\" [/INST] \"\"\"\nCreate a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.\n\"\"\"\ndef check_order(str1,str2): \n    stack=[]\n    j=0\n    for i in range(len(str2)): \n        if str2[i]==str1[j]: \n            stack.append(str2[i]) \n            j+=1\n            if stack==str1: \n                return True\n                \n    return False\n\nif __name__ == '__main__': \n    str1 = \"Hello World\"\n    str2 = \"World Hello\"\n    print(check_order(str1,str2))</s>"
  },
  {
    "text": "<s>[INST] Use features of the Python language to implement 3-way partitioning of a given array.\n\nArray: [9,6,7,4,1,6,3] [/INST] \"\"\"\nUse features of the Python language to implement 3-way partitioning of a given array.\n\"\"\"\ndef threeWayPartition(array, pivot): \n    less = [] \n    equal = [] \n    greater = [] \n    for i in array: \n        if i < pivot: \n            less.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i)   \n    return less + equal + greater \n\nif __name__ == '__main__': \n    array = [9,6,7,4,1,6,3]\n    pivot = 6\n    print(threeWayPartition(array, pivot))</s>"
  },
  {
    "text": "<s>[INST] Create a data structure to store all of the prime numbers up to 1 million. [/INST] \"\"\"\nCreate a data structure to store all of the prime numbers up to 1 million.\n\"\"\"\nimport math\n\ndef sieveOfEratosthenes(n):\n    prime_numbers = [True]*(n+1) \n    prime_numbers[0] = False\n    prime_numbers[1] = False\n      \n    for i in range(2, int(math.sqrt(n)+1)): \n        if (prime_numbers[i]): \n            for j in range(i*i, n+1, i): \n                prime_numbers[j] = False\n      \n    prime_numbers_list = []\n    for k in range(n+1): \n        if prime_numbers[k]: \n            prime_numbers_list.append(k)\n      \n    return prime_numbers_list\n\nif __name__ == '__main__':\n    n = 1000000\n    prime_numbers_list = sieveOfEratosthenes(n)\n    print(prime_numbers_list)</s>"
  },
  {
    "text": "<s>[INST] Create a function to edit a given string, replacing all the vowels with a given character.\n\nString: \"Hello world\"\nCharacter: 'x' [/INST] \"\"\"\nCreate a function to edit a given string, replacing all the vowels with a given character.\n\"\"\"\ndef replace_vowels(string, replacement_character):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in string:\n        if char in vowels:\n            new_str += replacement_character\n        else:\n            new_str += char\n    return new_str\n\nif __name__ == '__main__':\n    string = \"Hello world\"\n    replacement_character = 'x' \n    print(replace_vowels(string, replacement_character))</s>"
  },
  {
    "text": "<s>[INST] Generate a loop to find the largest sub-array in a given array with contiguous elements and its sum.\n\nArray: [-2, 6, -3, 5, -2, 3, 4, -2] [/INST] \"\"\"\nGenerate a loop to find the largest sub-array in a given array with contiguous elements and its sum.\n\"\"\"\n\ndef largest_subarray_sum(array):\n    best_sum = 0\n    current_sum = 0\n    current_start_index = 0\n    best_start_index = -1\n    best_end_index = -1\n    for i in range(len(array)):\n        current_sum += array[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_start_index = current_start_index\n            best_end_index = i\n        if current_sum < 0:\n            current_sum = 0\n            current_start_index = i + 1\n    return (best_sum, best_start_index, best_end_index)\n\nif __name__ == '__main__':\n    array = [-2, 6, -3, 5, -2, 3, 4, -2]\n    print(largest_subarray_sum(array))</s>"
  },
  {
    "text": "<s>[INST] Compile the following code to JavaScript and return the compiled code.\n\nfunction myFunc(a, b) {\n    return a + b;\n} [/INST] function myFunc(a, b) {\n    return a + b;\n}\n\n//Compiled Version\nconst myFunc = (a, b) => a + b;</s>"
  },
  {
    "text": "<s>[INST] Print the Fibonacci sequence up to the 5th element. [/INST] 0, 1, 1, 2, 3</s>"
  },
  {
    "text": "<s>[INST] Clone the content of the following Github repository: https://github.com/shreya23/Coding-Challenges [/INST] git clone https://github.com/shreya23/Coding-Challenges.git</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a string and checks if the string contains any special characters.\n\nHello World [/INST] def has_special_characters(s):\n    return not all(char.isalnum() for char in s)</s>"
  },
  {
    "text": "<s>[INST] We have a list of numbers and a given sum. Write a program to determine if any two numbers from the list sum up to the given sum.\n\n[1,2,3,4], 6 [/INST] def two_sum(nums, target):\n    for i in range(len(nums) - 1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (i, j)\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in a string and returns an array of the words which are longer than 5 characters.\n\n\"Welcome to the world of programming\" [/INST] def get_long_words(s):\n    words = s.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(word)\n    return result</s>"
  },
  {
    "text": "<s>[INST] Name at least three sorting algorithms that can be implemented in PHP. [/INST] 1. Bubble Sort. \n2. Selection Sort. \n3. Insertion Sort.</s>"
  },
  {
    "text": "<s>[INST] Describe two ways to insert elements into a hashmap in Python. [/INST] 1. The simplest way is to use the Square Bracket ([]) Notation. For example, hashmap[key] = value allows you to insert key-value pair into a hashmap. \n2. The other way to insert elements into a hashmap is by using the update() method. This method takes in a dictionary object as an argument and updates the existing hashmap with values from the dictionary.</s>"
  },
  {
    "text": "<s>[INST] How would you use PostgreSQL to delete a row with a given ID from a table? [/INST] DELETE FROM table_name WHERE id = <value>;</s>"
  },
  {
    "text": "<s>[INST] Describe the features of the K Nearest Neighbors (KNN) classification algorithm. [/INST] K Nearest Neighbors (KNN) classification is a supervised machine learning algorithm used for solving classification problems. The main feature of the KNN algorithm is that it defines the class of a data sample based on the classes of its closest K neighbors, determined using a distance measure. It is a non-parametric and lazy learner algorithm, meaning it does not make any assumptions about the data distribution and is not prone to overfitting. It is also easy to implement and not computationally expensive.</s>"
  },
  {
    "text": "<s>[INST] Provide an example of an if-else statement in C++. [/INST] int x = 5;\n\nif (x > 0) {\n    std::cout << \"x is positive\"; \n}\nelse {\n    std::cout << \"x is negative or zero\"; \n}</s>"
  },
  {
    "text": "<s>[INST] How could you use Machine learning to classify the sentiment of a given text? [/INST] One way to use Machine learning to classify the sentiment of a given text is to use a supervised Machine learning algorithm such as Support Vector Machines to build a classifier. The classifier can be trained on a labeled dataset which contains texts with corresponding labels like 'positive' or 'negative'. The trained classifier can then be used to predict the sentiment of a new text.</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to format a given date according to the format \"Day-Name, Month Name, Day, Year\".\n\n\"2019-06-27\" [/INST] def format_date(date): \n    date_list = date.split('-') \n    formatted_date = date_list[2] + '-' + calendar.month_name[int(date_list[1])] + '-' + date_list[0] \n    return formatted_date</s>"
  },
  {
    "text": "<s>[INST] Write a class in Python to store the objects of student and their grades. [/INST] # Class to store student and grades\n\nclass StudentGrades:\n    def __init__(self, student_name):\n        self.student_name = student_name\n        self.grades = {}\n     \n    def add_grade(self, course_name, grade):\n        self.grades[course_name] = grade\n    \n    def get_total_grade(self):\n        total_grade = 0\n        for grade in self.grades.values():\n            total_grade += grade\n        return total_grade</s>"
  },
  {
    "text": "<s>[INST] Identify the language into which the given text is translated.\n\nText: いつもありがとう。 [/INST] The given text is translated into Japanese language.</s>"
  },
  {
    "text": "<s>[INST] Create an object in JavaScript for calculating the area of rectangular with length and width. [/INST] // Object to calculate the area of rectangular with length and width\n\nconst rectangular = {\n  length: 0,\n  width: 0,\n  area: function() {\n    return this.length * this.width;\n  }\n};</s>"
  },
  {
    "text": "<s>[INST] Classify the following words as noun, verb, adverb or adjective.\n\nWords: slowly, frog, kick [/INST] Adverb: slowly \nNoun: frog \nVerb: kick</s>"
  },
  {
    "text": "<s>[INST] Generate an array of 5 random hexadecimal numbers. [/INST] import random\n\nhex_arr = []\nfor i in range(5):\n rand_hex = random.randint(0, 255)\n hex_arr.append(hex(rand_hex))\n\nprint(hex_arr)</s>"
  },
  {
    "text": "<s>[INST] Count the number of lines of code in the following code snippet.\n\ndef add(num1, num2):\n    return num1 + num2 [/INST] 3</s>"
  },
  {
    "text": "<s>[INST] Find the sum of three numbers and add five to it.\n\na = 4, b = 7, c = 10 [/INST] sum = a + b + c\nresult = sum + 5</s>"
  },
  {
    "text": "<s>[INST] Create a 2D array with three rows and two columns and assign different value to each element. [/INST] arr = [[1,2], [3,4], [5,6]]</s>"
  },
  {
    "text": "<s>[INST] Compare the values of x and y, and print out \"x is greater than y\" if x is greater.\n\nx = 5, y = 3 [/INST] if x > y:\n    print(\"x is greater than y\")</s>"
  },
  {
    "text": "<s>[INST] Calculate the base-2 logarithm of 32. [/INST] log2(32) = 5</s>"
  },
  {
    "text": "<s>[INST] Find the count of words in the following string.\n\ntext = \"This is a sample text\" [/INST] len(text.split()) # 4</s>"
  },
  {
    "text": "<s>[INST] Check if the input string contains both number and alphabets and return true if it does.\n\nstr = \"hello123\" [/INST] if re.search('[a-zA-Z]', str) and re.search('[0-9]', str): \n    print(True) \nelse: \n    print(False)</s>"
  },
  {
    "text": "<s>[INST] Create a PostgreSQL query to fetch all the rows from the table ‘Users’ where the users’ age is greater than 24.\n\nTable name: Users \nColumns: Id, age, name [/INST] SELECT *\nFROM Users\nWHERE age > 24;</s>"
  },
  {
    "text": "<s>[INST] Write a fragment in HTML to display the values of an array in a table.\n\narray = [\"Banana\", \"Apple\", \"Pineapple\", \"Mango\"] [/INST] <table>\n   <tr>\n      <th>Fruits</th>\n   </tr>\n   <tr>\n      <td>Banana</td>\n   </tr>\n   <tr>\n      <td>Apple</td>\n   </tr>\n   <tr>\n      <td>Pineapple</td>\n   </tr>\n   <tr>\n      <td>Mango</td>\n   </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find a user with the name ‘John Smith’.\n\nTable name: Users\nColumns: Id, name [/INST] SELECT *\nFROM Users\nWHERE name = 'John Smith';</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java that assigns a value to a given variable.\n\nString variable = \"Hello world\" [/INST] public class VariableAssignment {\n  private String variable;\n  \n  public VariableAssignment(String variable) {\n    this.variable = variable;\n  }\n  \n  public String getVariable() {\n    return variable;\n  }\n  \n  public void setVariable(String variable) {\n    this.variable = variable;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a list in JavaScript containing the names of the five most populous countries in the world. [/INST] let topFiveCountries = ['China', 'India', 'United States', 'Indonesia', 'Brazil'];</s>"
  },
  {
    "text": "<s>[INST] Create an API endpoint in ExpressJS that receives a username and returns the user’s information.\n\nUser with the username \"johnsmith\" [/INST] app.get('/user/:username', async (req, res) => {\n  let username = req.params.username;\n  let userInfo = await User.findOne({ username });\n  res.json(userInfo);\n});</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select all products where the price is less than 100 dollars.\n\nTable name: Products\nColumns: Id, name, price [/INST] SELECT *\nFROM Products\nWHERE price < 100;</s>"
  },
  {
    "text": "<s>[INST] Create a fragment of HTML that displays a button which redirects the user to a given URL.\n\nURL = \"http://example.com\" [/INST] <a href=\"http://example.com\"><button>Go to example.com</button></a></s>"
  },
  {
    "text": "<s>[INST] Write a method in Java for checking if a String is a palindrome. [/INST] public static boolean isPalindrome(String str) { \n    int n = str.length(); \n    for (int i = 0; i < n/2; i++){ \n        if (str.charAt(i) != str.charAt(n-i-1)) \n            return false; \n    } \n    return true; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java that takes two numbers as arguments and prints their product.\n\n10 and 8 [/INST] public static void printProduct(int n1, int n2){\n    System.out.println(n1 * n2);\n}</s>"
  },
  {
    "text": "<s>[INST] Sort an array of integers using a heapsort algorithm.\n\n[3, 6, 2, 9, 1] [/INST] def heapsort(A):\n    # step 1: create the heap\n    heapify(A)\n\n    # step 2: sort the heap\n    for size in range(len(A), 1, -1):\n        A[0], A[size - 1] = A[size - 1], A[0]\n        sift_down(A, 0, size - 1)\n\n    # step 3: return the sorted result\n    return A</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript that takes a given array and prints its elements in reverse order.\n\n[1, 2, 3, 4] [/INST] function reverseArray(arr) {\n    let reversedArr = [];\n    let index = arr.length - 1;\n   \n    while (index >= 0) {\n        reversedArr.push(arr[index]);\n        index--;\n    }\n \n    return reversedArr;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that selects the second and third largest values in a table. [/INST] SELECT MAX(value) AS max2\nFROM mytable\nWHERE value < (SELECT MAX(value) FROM mytable);\n\nSELECT MAX(value) AS max3\nFROM mytable\nWHERE value < (SELECT MAX(value) FROM mytable\n             WHERE value < (SELECT MAX(value) FROM mytable));</s>"
  },
  {
    "text": "<s>[INST] Generate a program in Python that prints all days of the week [/INST] #list of Weekdays\nweekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \n            \"Saturday\", \"Sunday\"]\n\n#print Weekdays\nfor weekday in weekdays:\n    print(weekday)</s>"
  },
  {
    "text": "<s>[INST] Implement a function in Java that takes a character and a string as arguments and determines whether the character is present in the string or not.\n\n'c' and \"programming\" [/INST] public static boolean charInString(char c, String str) {\n    for (int i = 0; i < str.length(); i++)\n        if (str.charAt(i) == c)\n            return true;\n    return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a CSS program that formats the text in a paragraph so that it has the following characteristics: font size is 2em, font weight is bold, font color is orange. [/INST] p {\n  font-size: 2em;\n  font-weight: bold; \n  color: orange;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a program in JavaScript that reads a given string from user input and prints the characters of the string in reverse order. [/INST] function reverseString(str) {\n    return str.split('').reverse().join('');\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to delete a specific row from a table named 'Orders'.\n\nPrimary Key of the order: 1234 [/INST] def delete_row(table, order_key):\n    query = 'DELETE FROM {} WHERE order_key = ?'.format(table)\n    try:\n        cursor.execute(query, (order_key,))\n        cursor.commit()\n    except:\n        cursor.rollback()\n        print('Error occurred while deleting order')</s>"
  },
  {
    "text": "<s>[INST] Write a code to count the number of occurrences of a given word in an array of strings.\n\nwords = ['apple', 'banana', 'apple', 'kiwi', 'apple']\ntarget_word = 'apple' [/INST] def count_word(words, target_word):\n    counter = 0\n    for word in words:\n        if word == target_word:\n            counter += 1\n    return counter</s>"
  },
  {
    "text": "<s>[INST] Create a code to swap two elements in a given array.\n\narray = [1, 4, 5, 8] [/INST] def swap_elements(array, index1, index2):\n    temp = array[index1]\n    array[index1] = array[index2]\n    array[index2] = temp</s>"
  },
  {
    "text": "<s>[INST] Create a new array that is a copy of the given input array, consisting of all elements smaller than 5.\n\n[4, 8, 9, 7, 5, 1, 10] [/INST] new_array = [item for item in given_array if item < 5]  # [4, 1]</s>"
  },
  {
    "text": "<s>[INST] Create a recursive function that takes two parameters, a number and a base and returns the result as a string.\n\n14, 16 [/INST] def convert_to_base(num, base): \n    \"\"\" \n    Function to convert num to a given base \n    \"\"\"\n    converted_string = \"\" \n\n    # Base Case \n    if num < base: \n        if num < 10: \n            return str(num) \n        else: \n            return chr(num - 10 + ord('A')) \n\n    rem = num % base \n    if rem < 10: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    num = num // base \n    return convert_to_base(num, base) + converted_string</s>"
  },
  {
    "text": "<s>[INST] Design a machine learning algorithm to classify the given dataset.\n\nDataset of images of cats and dogs [/INST] \"\"\"\nDesign a machine learning algorithm to classify the given dataset\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Prepare data\ndata = pd.read_csv('path/to/dataset') \n\n#Preprocess data\nX = data.drop('label', axis=1)\ny = data['label']\n\n#Split into training and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n#Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n#Train the model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n#Evaluate the model\nfrom sklearn.metrics import accuracy_score\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)</s>"
  },
  {
    "text": "<s>[INST] Design a solution using Java to calculate the mean of all the numbers in a given array.\n\n[4, 7, 11, 15, 18, 21] [/INST] public static double mean(int[] array) { \n    double sum = 0; \n    int length = array.length; \n\n    // loop through each number and calculate the sum\n    for (int num : array) \n        sum += num; \n\n    // calculate the mean and return it\n    return sum/ length;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Rails application with a user sign up with name, email and password. [/INST] rails new AppName\n\ncd AppName\n\n# Add devise for user auth\nrails g devise:install\n\n# Generate a model for the user\nrails g devise user username email password\n\n# Create a database and migrate\nrake db:create db:migrate\n\n# Add routes for the login & signup\nRails.application.routes.draw do\n  devise_for :users\nend</s>"
  },
  {
    "text": "<s>[INST] Create a webpage using HTML and CSS that has a navigation bar with a logo, five links to different webpages, and a footer. [/INST] <!DOCTYPE html>\n<html>\n<head>\n    <title>My Webpage</title>\n    <meta charset=\"utf-8\">\n    <style>\n        body {\n            background-color: #f1f1f1;\n        }\n\n        .navbar {\n            overflow: hidden;\n            background-color: #444;\n        }\n\n        .navbar a {\n            float: left;\n            display: block;\n            color: white;\n            text-align: center;\n            padding: 14px 20px;\n            text-decoration: none;\n        }\n\n        .navbar a:hover {\n            background-color: #555;\n            color: white;\n        }\n\n        .main {\n            padding: 16px;\n            margin-top: 30px;\n            height: 1500px;\n            background-color: #f1f1f1;\n        }\n\n        .footer {\n            color: grey;\n            padding: 8px;\n            text-align: center;\n            background-color: #f1f1f1;\n        }\n\n        .logo {\n            float: left;\n            height: 50px;\n            width: 50px;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"navbar\">\n        <img class=\"logo\" src=\"logo.png\" alt=\"logo\" />\n        <a href=\"home.html\">Home</a>\n        <a href=\"contact.html\">Contact</a>\n        <a href=\"about.html\">About</a>\n        <a href=\"products.html\">Products</a>\n        <a href=\"services.html\">Services</a>\n    </div>\n\n    <div class=\"main\">\n        // Content will be here\n    </div>\n\n    <div class=\"footer\">\n        Copyright &copy; Company 2020\n    </div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a method called `combineName` that takes in two strings and combines them together into a full name.\n\nfirstName = 'John'\nlastName = 'Smith' [/INST] def combineName(firstName, lastName):\n    \"\"\"\n    A method that takes in two strings and combines them into a full name.\n    Args: \n     firstName (str): first name \n     lastName (str): last name\n    Returns:\n     fullName (str): combined full name \n    \"\"\" \n    fullName = firstName + \" \" + lastName\n    return fullName\n    \nif __name__ == '__main__':\n    firstName = 'John'\n    lastName = 'Smith'\n    print(combineName(firstName, lastName))</s>"
  },
  {
    "text": "<s>[INST] Fix the following code to prevent errors from crashing the program.\n\ndef foo(a):\n    print(a)\nfoo(\"hi\")\nfoo(1) [/INST] def foo(a):\n    \"\"\"\n    A function that prints a value.\n    Args:\n     a (any): value to print\n    Returns:\n     nothing\n    \"\"\"\n    if isinstance(a, (int, float, str)): \n        print(a)\n    else:\n        print(\"Error: must be a string, int, or float\")\n\nif __name__ == '__main__':\n    foo(\"hi\")\n    foo(1)</s>"
  },
  {
    "text": "<s>[INST] Describe what a software bug is. [/INST] A software bug is a mistake, error or an unexpected behavior or result in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. It is generally caused by errors in the source code or the semantic understanding of the code that is written. A software bug can occur at any level of the software development process, from the design stage to the compilation stage, and can be caused by incorrect specifications, poor coding, incorrect debugging or incorrect implementation.</s>"
  },
  {
    "text": "<s>[INST] Use regex to extract the domain from a URL.\n\nurl = 'https://www.example.com/blog/post/1' [/INST] import re\n\ndef extract_domain(url):\n    \"\"\"\n    A function to extract the domain from a URL using regex.\n    Args: \n     url (str): a URL.\n    Returns:\n     domain (str): the domain of the URL.\n    \"\"\"\n    regex = r\"http[s]?://(www\\.)?([^/]+)/.*\"\n    matches = re.search(regex, url)\n    return matches.group(2)\n    \nif __name__ == '__main__':\n    url = 'https://www.example.com/blog/post/1'\n    print(extract_domain(url))</s>"
  },
  {
    "text": "<s>[INST] Create a function that returns a randomly selected element from a list.\n\nlist = [1, 2, 3, 4, 5] [/INST] import random\n\ndef get_random_element(list):\n    \"\"\"\n    A function to return a randomly selected element from a list.\n    Args: \n     list (list): a list\n    Returns:\n     element (int): a randomly selected element\n    \"\"\"\n    index = random.randint(0, len(list)-1)\n    element = list[index]\n    return element\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5]\n    print(get_random_element(list))</s>"
  },
  {
    "text": "<s>[INST] Code a method in Java to print out the elements of a 2D array.\n\n[[1,2,3], [4,5,6], [7,8,9]] [/INST] public class TwoDArray{\n    public static void print2DArray(int[][] arr){\n        for (int[] row : arr){\n            for (int element : row){\n                System.out.print(element+\" \");\n            }\n            System.out.println();\n        }\n    }\n    \n    public static void main(String[] args) {\n        int[][] arr = { {1,2,3}, {4,5,6}, {7,8,9} };\n        print2DArray(arr);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Code a method in Java to sort an array.\n\n[2, 9, 4, 6, 5, 1] [/INST] public class SortExample{\n    public static void insertionSort(int[] arr){\n        int n = arr.length;\n        for (int i=1; i<n; i++){\n            int key = arr[i];\n            int j = i - 1;\n            while ( j>=0 && arr[j] > key){\n                arr[j+1] = arr[j];\n                j--;\n            }\n            arr[j+1] = key;\n        }\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {2, 9, 4, 6, 5, 1};\n        insertionSort(arr);\n        for (int x : arr){\n            System.out.print(x+\" \");\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a random string of length 10 made up of characters ‘a’ to ‘d’. [/INST] import random\n\nrand_string = ''\nfor i in range(10):\n    rand_string += random.choice(['a', 'b', 'c', 'd'])\n    \nprint(rand_string)</s>"
  },
  {
    "text": "<s>[INST] Code a function to flatten a dictionary.\n\n{\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}} [/INST] def flatten_dict(d):\n\tflattened_dict = {}\n\n\tfor key, val in d.items():\n\t\tif type(val) is dict: # if val is a dict\n\t\t\tfor k, v in val.items():\n\t\t\t\tflattened_dict[key + \"_\" + k] = v\n\t\telse:\n\t\t\tflattened_dict[key] = val\n\n\treturn flattened_dict\n\nif __name__ == '__main__':\n\td = {\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}\n\tprint(flatten_dict(d))</s>"
  },
  {
    "text": "<s>[INST] Code an algorithm to implement merge sort\n\n[5, 2, 4, 6, 1, 7, 8] [/INST] def merge_sort(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\n        merge_sort(left_half) \n        merge_sort(right_half) \n\n        i = 0\n        j = 0\n        k = 0\n  \n        while i < len(left_half) and j < len(right_half):  \n            if left_half[i] < right_half[j]:  \n                arr[k] = left_half[i]  \n                i += 1\n\n            else:  \n                arr[k] = right_half[j]  \n                j += 1\n            k += 1\n      \n        while i < len(left_half):  \n            arr[k] = left_half[i]  \n            i += 1\n            k += 1\n          \n        while j < len(right_half):  \n            arr[k] = right_half[j]  \n            j += 1\n            k += 1\n\nif __name__ == '__main__':\n\tarr = [5, 2, 4, 6, 1, 7, 8]\n\tmerge_sort(arr)\n\tprint(arr)</s>"
  },
  {
    "text": "<s>[INST] Find out the biggest number from the list\n\n[7, 9, 1, 3, 4] [/INST] my_list = [7, 9, 1, 3, 4]\nmax = max(my_list)\nprint(max)</s>"
  },
  {
    "text": "<s>[INST] Given a list of strings, write a Python function to expand each element into a set of characters.\n\n['hello', 'world'] [/INST] def expand_list(strings): \n    new_list = []\n    for string in strings: \n        for character in string: \n            new_list.append(character) \n    return new_list</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript class to represent an Employee object [/INST] class Employee {\n    constructor(name, age, salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java method to print all elements in an array in reverse order. [/INST] public static void printReverse(int[] array) {\n    for (int i = array.length - 1; i >= 0; i--) {\n        System.out.println(array[i]);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all rows in a table with a column value of 'John'. [/INST] SELECT * FROM table WHERE column = 'John';</s>"
  },
  {
    "text": "<s>[INST] Given a tree, write a function that finds the deepest node in the tree. [/INST] def findDeepestNode(root):\n    if root is None:\n        return None\n    queue = []\n    queue.append(root)\n    while len(queue) > 0:\n        res = queue[0]\n        queue.pop()\n        if res.left is not None:\n            queue.append(res.left)\n        if res.right is not None:\n            queue.append(res.right)\n    return res</s>"
  },
  {
    "text": "<s>[INST] Design a Bubble Sort algorithm for a list of numbers. [/INST] def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Design a Greedy Algorithm to solve the sum-subset problem. [/INST] def subsetsum(arr, target):\n  arr.sort() \n  n = len(arr) \n  sum = 0\n  result = [] \n  \n  for i in range(n):\n    if ( sum + arr[i] <= target):\n      result.append(arr[i])\n      sum = sum + arr[i]\n  \n  return result</s>"
  },
  {
    "text": "<s>[INST] Create a PHP form to register a user. [/INST] <!doctype html>\n<html>\n<head>\n<title>User Registration Form</title>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<style type=\"text/css\">\n    #form-div {\n        background-color: #ffffff;\n        padding: 10px 20px;\n        border: #e0dfdf 1px solid;\n    }\n    #form-div h2 {\n        padding-bottom: 10px;\n    }\n    #form-div input, #form-div select {\n        padding: 5px;\n    }\n    #form-div input[type=text] {\n        width: 300px;\n    }\n</style>\n</head>\n<body>\n<h2>User Registration Form</h2>\n<div id=\"form-div\">\n    <form action=\"\" method=\"post\">\n        <label for=\"name\">Name</label>\n        <input type=\"text\" name=\"name\" />\n        <label for=\"email\">Email Address</label>\n        <input type=\"text\" name=\"email\" />\n        <label for=\"password\">Password</label>\n        <input type=\"password\" name=\"password\" />\n        <label for=\"password_repeat\">Repeat Password</label>\n        <input type=\"password\" name=\"password_repeat\" />\n        <input type=\"submit\" value=\"Register\" /> \n    </form>\n</div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Output the result of a line of code snippet.\n\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\nlist_1 + list_2 [/INST] [1, 2, 3, 4, 5, 6]</s>"
  },
  {
    "text": "<s>[INST] Transform the given code snippet into a different programming language.\n\nlet x = 3 [/INST] x = 3</s>"
  },
  {
    "text": "<s>[INST] Remove duplicates from the given list and sort it in ascending order\n\nlst = [1, 2, 3, 1, 4, 2] [/INST] sorted(set(lst))  # Output: [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Create a function to remove all non alphabetical characters from thestring\n\nstring = \"Hello, world!\" [/INST] def clean_string(string):\n    output = \"\"\n    for char in string:\n        if char.isalpha():\n            output += char\n    return output\n    \nclean_string(string) # Output: Helloworld</s>"
  },
  {
    "text": "<s>[INST] Separate the given list into two lists for even and odd numbers\n\nlst = [1, 2, 3, 4, 5] [/INST] even_lst = []\nodd_lst = []\nfor num in lst:\n    if num % 2 == 0:\n        even_lst.append(num)\n    else:\n        odd_lst.append(num)</s>"
  },
  {
    "text": "<s>[INST] Generate all possible combinations of strings that can be formed using the given characters\n\nchars = [\"a\", \"b\", \"c\"] [/INST] import itertools\n\ncombinations = [''.join(i) for i in itertools.product(chars)]\n\n# Output: [\"a\", \"b\", \"c\", \"ab\", \"ac\", \"ba\", \"bc\", \"ca\", \"cb\", \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]</s>"
  },
  {
    "text": "<s>[INST] Replace all characters in the given string with the given character\n\nstring = \"Hello World\"\nchar = \"x\" [/INST] def replace_chars(string, char):\n    output = \"\"\n    for c in string:\n        output += char\n    return output\n\nreplace_chars(string, char)  # Output: xxxxx xxxxx</s>"
  },
  {
    "text": "<s>[INST] Modify the given program so that it can output the average of numbers a,b, and c.\n\na = 2\n b = 5\n c = 7 [/INST] def average(a, b, c):\n  return (a + b + c) / 3\n\na = 2\nb = 5\nc = 7\naverage = average(a, b, c)\nprint(\"Average of a, b and c is:\", average)</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to print out the unique characters in a given string.\n\nword = \"Hello World\" [/INST] def unique_chars(word):\n  unique_characters = set()\n  for char in word:\n    if char not in unique_characters:\n      unique_characters.add(char)\n  return unique_characters\n\nword = \"Hello World\"\nunique_characters = unique_chars(word)\nprint(\"Unique characters in \", word, \"are:\", unique_characters)</s>"
  },
  {
    "text": "<s>[INST] Create an ios app to display the content of a given RSS feed\n\nUrl: https://www.nytimes.com/svc/collections/v1/publish/https://www.nytimes.com/section/world/rss.xml [/INST] You will need to use an API like RSS API which can help you fetch the contents of the given URL. The API can be used for displaying the content of the RSS feed in a UI. Once you have setup the API, you will then need to create a UI which uses the API and display the RSS feed content on the iOS app.</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to update the salary field of the employee\n\nTable - employee\nField - salary [/INST] UPDATE employee\nSET salary = 2000\nWHERE employee_id = 1</s>"
  },
  {
    "text": "<s>[INST] Create a React component to render a pie chart [/INST] import React from 'react';\nimport {Pie} from 'react-chartjs-2';\n \nconst data = {\n\tlabels: [\n\t\t'Red',\n\t\t'Green',\n\t\t'Yellow'\n\t],\n\tdatasets: [{\n\t\tdata: [300, 50, 100],\n\t\tbackgroundColor: [\n\t\t'#FF6384',\n\t\t'#36A2EB',\n\t\t'#FFCE56'\n\t\t],\n\t\thoverBackgroundColor: [\n\t\t'#FF6384',\n\t\t'#36A2EB',\n\t\t'#FFCE56'\n\t\t]\n\t}]\n};\n \nexport const PieChartComponent = () => {\n  return (\n    <div>\n      <h2>Pie Chart</h2>\n      <Pie data={data} />\n    </div>\n  );\n}</s>"
  },
  {
    "text": "<s>[INST] Build a function to identify a duplicate element in a list\n\nlist = [2,4,8,7,2,5] [/INST] def find_duplicate(list):\n\tvisited = set()\n\tfor num in list:\n\t\tif num in visited:\n\t\t\treturn num\n\t\telse:\n\t\t\tvisited.add(num)\n\treturn None\n\nlist = [2,4,8,7,2,5]\nprint(find_duplicate(list)) # Output: 2</s>"
  },
  {
    "text": "<s>[INST] Combine the two strings into one and save it as a variable called full_name.\n\nfirst_name = 'John'\nlast_name = 'Smith' [/INST] first_name = 'John'\nlast_name = 'Smith'\n\nfull_name = first_name + ' ' + last_name</s>"
  },
  {
    "text": "<s>[INST] Calculate the number of days from January 1, 2021 to June 30, 2021. [/INST] The number of days from January 1, 2021 to June 30, 2021 is 152 days.</s>"
  },
  {
    "text": "<s>[INST] Given the function, predict the output.\n\ndef foo(a, b):\n    return a + b\n\nprint(foo(3, 5)) [/INST] The output of the function will be 8.</s>"
  },
  {
    "text": "<s>[INST] Create a for loop that prints the square of each number from 1 to 5. [/INST] for num in range(1, 6):\n    print(num**2)</s>"
  },
  {
    "text": "<s>[INST] Using regular expressions, remove any duplicate words from the following sentence.\n\nsentence = \"I I am going to the the store\" [/INST] import re\n\nsentence = \"I I am going to the the store\"\nresult = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', sentence)\nprint(result) # I am going to the store</s>"
  },
  {
    "text": "<s>[INST] Output a list with all the numbers from 0 to 100 that are divisible by 8. [/INST] result = [x for x in range(101) if x % 8 == 0]\nprint(result)# [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to find the name of all employees in department ID 7. [/INST] SELECT name\nFROM Employees\nWHERE departmentID = 7;</s>"
  },
  {
    "text": "<s>[INST] Design a Java program to find the maximum of 3 numbers.\n\n1, 2, 5 [/INST] public class Maximum {\n\n  public static int getMax(int num1, int num2, int num3) {\n    int max = num1; \n    if (num2 > max) {\n      max = num2;\n    }\n    if (num3 > max) {\n      max = num3; \n    }\n    return max; \n  }\n\n  public static void main(String[] args) {\n    int max = getMax(1,2,5);\n    System.out.println(\"Maximum is: \" + max);\n  }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a Ruby method to compare two strings and return the number of matching characters.\n\n\"cook\",\"book\" [/INST] def count_match_chars(str1, str2)\n  count = 0\n  str1.each_char.with_index do |char, index|\n    count += 1 if char == str2[index]\n  end\n  count\nend\n\nputs count_match_chars('cook', 'book') #2</s>"
  },
  {
    "text": "<s>[INST] Design a Data Structure in Javascript to store a list of tasks. [/INST] class TaskList {\n  constructor() {\n    this.tasks = []\n  }\n\n  add_task(task) {\n    this.tasks.push(task);\n  }\n\n  remove_task(task) {\n    const i = this.tasks.indexOf(task);\n    if (i !== -1) {\n      this.tasks.splice(i, 1);\n    }\n  }\n\n  count_tasks() {\n    return this.tasks.length;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a PHP program to print out the frequency of word occurrences in an array.\n\n['foo', 'bar', 'baz', 'foo', 'bar'] [/INST] <?php\n$array_input = array('foo','bar','baz','foo','bar');\n\n$result = array_count_values($array_input);\n \nforeach($result as $key=>$value){\n    echo \"$key has $value occurrence(s).\\n\";\n}\n\n// Output: foo has 2 occurrence(s). \n//         bar has 2 occurrence(s). \n//         baz has 1 occurrence(s).\n?></s>"
  },
  {
    "text": "<s>[INST] Create an R program to find the intersecting element of two lists.\n\nx = c(14,5,13)\ny = c(5,11,9) [/INST] #Function for finding common element between two lists\ncommon_element <- function(x, y){\n  intersect_list <- intersect(x, y)\n  return(intersect_list)\n}\n\nx <- c(14,5,13)\ny <- c(5,11,9)\n\n#Calling the above function\ncommon_element(x, y) #5</s>"
  },
  {
    "text": "<s>[INST] Generate an Objective-C code to check if a given string is palindrome or not.\n\n\"racecar\" [/INST] #import<Foundation/Foundation.h>\n\n@implementation CheckString\n\n-(BOOL)isStringPalindrome:(NSString*)inputString {\n    BOOL isPalindrome = true;\n    int lastIndex = [inputString length] - 1;  \n \n    for (int i = 0; i < [inputString length]/2; i++) {\n        //compare character one by one\n        if ([inputString characterAtIndex:i] != [inputString characterAtIndex:lastIndex]) {\n            isPalindrome = false;\n            break;\n        }\n        // decrement lastIndex for next iteration\n        lastIndex--;\n    }\n    return isPalindrome;\n}\n\n@end\n\nCheckString *cs = [[CheckString alloc]init];\nNSString *sampleString = @\"racecar\";\n\nif ([cs isStringPalindrome:sampleString]) {\n    NSLog(@\"String is Palindrome\");\n}else{\n    NSLog(@\"String is not a Palindrome\");\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Haskell program to calculate the sum of list elements.\n\n[2,3,7,9] [/INST] sumlist :: [Integer] -> Integer\nsumlist [] = 0\nsumlist (x:xs) = x + sumlist xs \n\n-- Driver Code\nmain = do\n  print (sumlist [2,3,7,9]) -- Output: 21</s>"
  },
  {
    "text": "<s>[INST] Write a shell script that takes input from the user, reverses the string, and prints it on the terminal. [/INST] #!/bin/bash\n\necho -n \"Enter a string: \"\nread str\n \nrev_str=\"\"\nlen=${#str}\n \n# loop\nfor (( i=$len-1; i>=0; i-- ))\n do\n  rev_str=${rev_str}${str:$i:1}\n done\n \n# display\necho \"$rev_str\"</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript that returns the maximum number from an array of numbers.\n\n[3, 6, 8, 2, 9, 4, 10] [/INST] function getMaxNum(arr){\n  return Math.max.apply(null, arr);\n}\n\nlet maxNum = getMaxNum([3, 6, 8, 2, 9, 4, 10]);\nconsole.log(maxNum); // 10</s>"
  },
  {
    "text": "<s>[INST] Write an Object-Oriented Python program to find the area of a triangle given the base and the height. [/INST] class Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n\n    def calculate_area(self):\n        area = (self.base * self.height) / 2\n        return area\n\n# Create triangle\ntriangle = Triangle(10, 5)\n\n# Find the area\narea = triangle.calculate_area()\n\n# Print the area\nprint(area)</s>"
  },
  {
    "text": "<s>[INST] Edit the code to print “Welcome to Python Programming” five times.\n\nprint(\"Hello Python\") [/INST] for i in range(5):\n  print(\"Welcome to Python Programming\")</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form that takes 3 inputs: first name, last name, and age. [/INST] <form>\n  <label>First Name:</label>\n  <input type=\"text\" name=\"firstname\" /><br>\n  <label>Last Name:</label>\n  <input type=\"text\" name=\"lastname\" /><br>\n  <label>Age:</label> \n  <input type=\"text\" name=\"age\" /><br>\n  <input type=\"submit\" value=\"Submit\" />\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the top 10 books by rating. [/INST] SELECT *\nFROM books\nORDER BY rating DESC\nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Design a function that uses a for loop to print all odd numbers from 1 to 10. [/INST] def print_odd_numbers():\n    for i in range(1, 11):\n        if i % 2 != 0:\n            print(i)\n\nprint_odd_numbers()</s>"
  },
  {
    "text": "<s>[INST] Design a program in Python that will count the words in a sentence.\n\nThis is a sample sentence. [/INST] def word_count(sentence):\n    words = sentence.split(' ')\n    return len(words)\n\nprint(word_count('This is a sample sentence.'))</s>"
  },
  {
    "text": "<s>[INST] How can you create a Pandas DataFrame using a given list of dictionaries?\n\n[{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}] [/INST] import pandas as pd\ndata = [{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]\ndf = pd.DataFrame(data)\nprint(df)</s>"
  },
  {
    "text": "<s>[INST] Edit the given code to reverse a given array in JavaScript.\n\nlet arr = [1, 2, 3, 4, 5]; [/INST] let arr = [1, 2, 3, 4, 5];\narr.reverse();\nconsole.log(arr);</s>"
  },
  {
    "text": "<s>[INST] How would you use Recursion to solve the Fibonacci Sequence in Python? [/INST] def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n    \nprint(fibonacci(10))</s>"
  },
  {
    "text": "<s>[INST] Construct a function that adds two numbers written in reverse order in JavaScript.\n\n893 342 [/INST] function reversedAddition(reverseOrder1, reverseOrder2) {\n    let firstNum = parseInt(reverseOrder1.toString().split('').reverse().join(''));\n    let secondNum = parseInt(reverseOrder2.toString().split('').reverse().join(''));\n    let answer = firstNum + secondNum;\n  \n    return answer;\n}\n\nconsole.log(reversedAddition(893, 342))</s>"
  },
  {
    "text": "<s>[INST] How can you move an element from one array to another in JavaScript?\n\nlet array1 = [1, 2, 3]; \nlet array2 = [4, 5, 6]; [/INST] let array1 = [1, 2, 3]; \nlet array2 = [4, 5, 6];\nlet el = array1.pop();\narray2.push(el);\nconsole.log(array2);</s>"
  },
  {
    "text": "<s>[INST] Design a function to get the number of elements in a JSON array in Python.\n\n[{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}] [/INST] def get_num_elements(data):\n    count = 0\n    for item in data:\n        count += 1\n    return count\n\ndata = [{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]\nprint(get_num_elements(data))</s>"
  },
  {
    "text": "<s>[INST] What is the most efficient way to count the number of characters in a string in C++? [/INST] #include <iostream> \n#include <string> \n \nusing namespace std; \n \nint main() \n{ \n    string my_string = \"Count characters in this string.\";\n    int count = 0;\n    for (char c : my_string) \n        count++; \n    cout << \"Number of characters in the string : \" << count; \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a function that will remove all special characters in a given string in JavaScript.\n\n$sample!%string!* [/INST] function removeSpecialChars(str) {\n    return str.replace(/[^\\w\\s]/gi, '');\n}\n\nconsole.log(removeSpecialChars('$sample!%string!*'));</s>"
  },
  {
    "text": "<s>[INST] Develop a program in Python to implement a Simple Linear Regression model. [/INST] import numpy as np\nimport matplotlib.pyplot as plt\n\n# generate dataset\nx = np.random.rand(100, 1)\ny = 4 + 3 * x + np.random.rand(100, 1)\n\n# linear regression\nx_b = np.c_[np.ones((100, 1)), x]\ntheta_best = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)\n\n# prediction\nx_new = np.array([[0], [1]])\nx_new_b = np.c_[np.ones((2, 1)), x_new]\ny_predict = x_new_b.dot(theta_best)\n\n# plot\nplt.plot(x, y, \"b.\")\nplt.plot(x_new, y_predict, \"r-\")\nplt.axis([0, 1, 0, 15])\nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Develop a SQL query to find all the records that have modified within a given time range. [/INST] SELECT * \nFROM Table \nWHERE ModifiedTime BETWEEN '<start-time>' AND '<end-time>';</s>"
  },
  {
    "text": "<s>[INST] Make the existing JavaScript function asynchronous.\n\nfunction handleData(data, cb) {\n    if (data.type === 'A') {\n        const filteredData = data.filter(x => x.name === 'hello')\n        const processedData = filteredData.map(x => x.value)\n        const result = processedData.length\n        cb(result)\n    } [/INST] async function handleData(data, cb) {\n    if (data.type === 'A') {\n        const filteredData = data.filter(x => x.name === 'hello')\n        const processedData = filteredData.map(x => x.value)\n        const result = processedData.length\n        cb(result)\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function to swap the entries in a list.\n\n[10, 20, 30, 40] [/INST] def swap(List): \n    temp = List[0] \n    List[0] = List[3] \n    List[3] = temp\n    return List \n  \nList = [10, 20, 30, 40]\nprint(swap(List))</s>"
  },
  {
    "text": "<s>[INST] Change the following program to use a try/except/finally block to handle errors.\n\ndef read_file(file):\n    with open(file) as f:\n        for line in f:\n            print(line) [/INST] try:\n    def read_file(file):\n        with open(file) as f:\n            for line in f:\n                print(line)\nexcept IOError:\n    print(\"Error: Could not read file\")\nfinally:\n    print(\"Closing file\")\n    f.close()</s>"
  },
  {
    "text": "<s>[INST] What data structure should be used to store a customer’s name, address, and phone number? [/INST] A dictionary or set can be used to store a customer’s name, address, and phone number. The customer's name would be used as the key and the associated customer information such as address and phone number would be stored as the value.</s>"
  },
  {
    "text": "<s>[INST] Suggest a function to find the second highest element in a list.\n\n[10, 20, 30, 40] [/INST] def second_highest(List): \n    List.sort()\n    return List[-2] \n  \nList = [10, 20, 30, 40]\nprint(second_highest(List))</s>"
  },
  {
    "text": "<s>[INST] What data structure would be suitable to represent a sparse matrix with thousands of columns and rows? [/INST] A dictionary of dictionaries or a linked list could be used to represent a sparse matrix with thousands of columns and rows. The outer dictionary would serve as an index table to refer to each row of the matrix while the inner dictionary contains key-value pairs of column index and the corresponding item or element in the specified row.</s>"
  },
  {
    "text": "<s>[INST] Suggest a sorting algorithm for an array that contains both duplicates and unique elements.\n\n[8, 4, 3, 5, 9, 8, 10] [/INST] A radix sort would be an appropriate sorting algorithm for an array that contains both duplicates and unique elements. Radix sorts start by sorting the array based on the least significant digit, and then sort based on the next digit, and so on.</s>"
  },
  {
    "text": "<s>[INST] Select all rows in a pandas dataframe where at least one value exists in the column named ‘name’. [/INST] selected_rows = df[df.name.notnull()]</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to pick distinct elements from a table named 'students'. [/INST] SELECT DISTINCT * FROM students;</s>"
  },
  {
    "text": "<s>[INST] Create a function that returns the longest substring of the string given.\n\nstring = \"Hello world!\" [/INST] def longest_substring(string):\n    curr_len = 1\n    max_len = 1\n    prev_index = 0\n    n = len(string)\n    visited = [-1] * 256\n    visited[ord(string[0])] = 0\n    for i in range(1,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = i - prev_index\n        visited[ord(string[i])] = i\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to create a copy of a given set.\n\nmy_set = {1, 2, 3, 4, 5} [/INST] def clone_set(my_set):\n    new_set = set()\n    for item in my_set:\n        new_set.add(item)\n    return new_set</s>"
  },
  {
    "text": "<s>[INST] Create a function to search the given list to find a key value and return its position.\n\narr = ['a', 'b', 'c', 'd']\nkey = 'a' [/INST] def search(arr, key): \n    for i in range(len(arr)):\n\t    if arr[i] == key:\n            return i \n    return -1</s>"
  },
  {
    "text": "<s>[INST] Given a list of integers, write a program to convert it into a list of strings.\n\nintegers = [1, 2, 3, 4] [/INST] def convert_to_string(integers):\n    string_list = []\n    for item in integers:\n        string_list.append(str(item))\n    return string_list</s>"
  },
  {
    "text": "<s>[INST] Edit the Python code snippet to remove the syntax error.\n\ndef calculate_area(length, width):\n    area = length * width\n    return “The area is” + area [/INST] def calculate_area(length, width):\n    area = length * width\n    return \"The area is \" + str(area)</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to randomly sample a list without replacement.\n\nlist = [30, 40, 50, 60, 70, 80] [/INST] import random\n\ndef sample_list(list):\n    list_copy = list.copy()\n    sampled_list = []\n    while list_copy:\n        element = random.choice(list_copy)\n        sampled_list.append(element)\n        list_copy.remove(element)\n    return sampled_list</s>"
  },
  {
    "text": "<s>[INST] You need to edit a Python code snippet to add a loop and make it print the square of the numbers from 1 to 10. [/INST] for i in range(1, 11):\n    square = i * i\n    print(square)</s>"
  },
  {
    "text": "<s>[INST] Create a data structure in Python that stores the details of a shoe product.\n\nName: \"Nike Air Max 720\"\nPrice: $219.99\nSize: 8\nColor: White [/INST] class ShoeProduct:\n    def __init__(self, name, price, size, color):\n        self.name = name\n        self.price = price\n        self.size = size\n        self.color = color</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a form that has two inputs: Name and Email. [/INST] <html>\n  <head>\n    <title>Submission Form</title>\n  </head>\n  <body>\n    <form>\n      <label for=\"name\">Name: </label>\n      <input type=\"text\" name=\"name\" id=\"name\" />\n      <label for=\"email\">Email: </label>\n      <input type=\"email\" name=\"email\" id=\"email\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that finds the TOTAL sales of each product in a given month.\n\nTable name: sales\nColumns: product_id, quantity, order_date [/INST] SELECT product_id, SUM(quantity) AS total_sales \nFROM sales\nWHERE MONTH(order_date)='<month>'\nGROUP BY product_id;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object that stores the properties of an employee.\n\nName: John Doe\nAge: 25\nPosition: Accountant [/INST] let employee = {\n  name: 'John Doe',\n  age: 25,\n  position: 'Accountant'\n };</s>"
  },
  {
    "text": "<s>[INST] Create a CSS style to display text in italics. [/INST] p {\n  font-style: italic;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a swift class that describes a flower. [/INST] class Flower {\n\tvar name: String\n\tvar petals: Int\n\tvar petalColor: String\n\tvar pollenColor: String\n    \n    init(name: String, petals: Int, petalColor: String, pollenColor: String) {\n            self.name = name\n            self.petals = petals\n            self.petalColor = petalColor\n            self.pollenColor = pollenColor\n        }\n}</s>"
  },
  {
    "text": "<s>[INST] Fill in the below code to extract specific data from the given JSON object.\n\nconst jsonObj = {\n    'name': 'John Doe',\n    'locations': ['Los Angeles', 'New York', 'Las Vegas'],\n    'qualifications': {'degree': 'Master', 'university': 'Stanford'}\n} [/INST] const name = jsonObj['name']; \nconst locations = jsonObj['locations']; \nconst degree = jsonObj['qualifications']['degree'];\nconst university = jsonObj['qualifications']['university'];</s>"
  },
  {
    "text": "<s>[INST] Write a Django code to print the name of all the users in the database. [/INST] from django.contrib.auth.models import User\n\nusers = User.objects.all()\nfor user in users:\n    print(user.username)</s>"
  },
  {
    "text": "<s>[INST] Using jQuery, design an effect to fade out an element when clicked on. [/INST] $(function() {\n    $('#myElement').on('click', function(e) {\n        $(this).fadeOut(300);\n    });\n});</s>"
  },
  {
    "text": "<s>[INST] Write a bash script to replace all occurrences of the letter 'a' with the letter 'b' in 'myfile.txt'. [/INST] #!/bin/bash\n\nwhile read line; do\n    echo $line | sed -e \"s/a/b/g\" >> myfile.txt\ndone < myfile.txt</s>"
  },
  {
    "text": "<s>[INST] Using HTML and CSS, develop a two-column layout that has two different shades of the same color. [/INST] <div style=\"height: 100%; width: 100%; display: flex; flex-direction: row; background-color: #e8e8e8;\">\n  <div style=\"flex: 1 1 auto; background-color: #d3d3d3; padding: 20px 0;\"></div>\n  <div style=\"flex: 1 1 auto; background-color: #cfcfcf; padding: 20px 0;\"></div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Using HTML/CSS and JavaScript, construct a web page that generates a random password. [/INST] <!DOCTYPE html>\n<html>\n\n<head>\n    <title>Random Password Generator</title>\n    <script src=\"generate.js\"></script>\n    <style>\n    body {\n        background-color: lightblue;\n    }\n\n    #container {\n        margin: 0 auto;\n        width: 500px;\n        background-color: white;\n        padding: 30px;\n    }\n\n    #password {\n        font-size: 20px;\n        font-weight: bold;\n    }\n    </style>\n</head>\n\n<body>\n    <div id=\"container\">\n    <h1>Random Password Generator</h1>\n        <h2>Your Password:</h2>\n        <div id=\"password\"></div>\n        <button onclick=\"generatePassword()\">Generate</button>\n    </div>\n</body>\n\n</html>\n\n// JavaScript code in a file called 'generate.js' //\n\nfunction generatePassword() {\n    let password = Math.random().toString(36).substring(2, 10);\n    document.getElementById(\"password\").innerHTML = password;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java to check if a given array contains duplicates.\n\nint[] arr = {1, 2, 3, 2, 4, 5}; [/INST] public static boolean hasDuplicates(int[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] == arr[j])\n                return true;\n        }\n    }\n    return false;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code for a form to submit data. [/INST] <form action=\"script.php\" method=\"post\">\n    <input type=\"text\" name=\"name\" placeholder=\"Name\">\n    <input type=\"email\" name=\"email\" placeholder=\"Email\">\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a jQuery code to find and display the longest word from a given string.\n\nvar str = \"This is a sample string.\" [/INST] <script type=\"text/javascript\">\n    $(document).ready(function(){\n        var str = \"This is a sample string.\";\n        var words = str.split(\" \");\n        var longestWord = words.sort(function (a, b) { return b.length - a.length; })[0];\n        alert(\"The longest word is: \"+longestWord);\n    });\n</script></s>"
  },
  {
    "text": "<s>[INST] Translate this piece of JavaScript into Python.\n\nlet val = 10;\nif (val > 5) {\n  console.log(\"val is greater than 5\");\n} [/INST] val = 10\nif val > 5:\n    print(\"val is greater than 5\")</s>"
  },
  {
    "text": "<s>[INST] Given the following array, remove all duplicates and return a new array with the remaining elements.\n\narr = [1, 2, 4, 3, 3, 2] [/INST] new_arr = list(set(arr))  # [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Find the number of triplets in this array which sum up to zero.\n\narr = [-1, 0, 1, 2, 3, 4] [/INST] The number of triplets in this array which sum up to zero is 1. The triplets are [-1, 0, 1].</s>"
  },
  {
    "text": "<s>[INST] Bring the following two variables into the same format\n\nVariable one: 12,34\nVariable Two: 21.103 [/INST] Variable one: 12.34\nVariable two: 21.103</s>"
  },
  {
    "text": "<s>[INST] Write a function in C++ to reverse a C-style String.\n\n// str is a c-style string\nchar str[] = \"Hello World!\" [/INST] void ReverseString(char *str)\n{ \n    int length = 0; \n    char temp; \n\n    // calculate the length of string \n    while (*str != 0) { \n        length++; \n        str++; \n    } \n  \n    // the end of string \n    str--; \n  \n    // swap first and last characters \n    for (int i = 0; i < length/2; i++) \n    { \n        temp = *str; \n        *str = *(str - length + 1); \n        *(str -length + 1) = temp; \n  \n        str--; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a HTML code to design a card with the heading \"Welcome!\". [/INST] <div class=\"card\">\n  <div class=\"card-header\">\n    <h3>Welcome!</h3>\n  </div>\n  <div class=\"card-body\">\n  </div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to update the value of column b in the table called a.\n\nTable name: a\nColumns: a, b\n\nCurrent state of table a:\na  |  b\n1  | 10\n2  | 11\n3  | 12 [/INST] UPDATE a\nSET b = 20\nWHERE a = 3;</s>"
  },
  {
    "text": "<s>[INST] Read the given input, and write a Python code to create a dictionary which contains unique elements as keys and their corresponding count as values.\n\nInput: ['a',\"a\",'b',1,1,1,'c'] [/INST] my_list = ['a',\"a\",'b',1,1,1,'c']\nmy_dict = {}\nfor i in my_list:\n    my_dict[i] = my_dict.get(i, 0) + 1\n\nprint(my_dict) \n# Output: {'a': 2, 'b': 1, 1: 3, 'c': 1}</s>"
  },
  {
    "text": "<s>[INST] Using variable A, write a code snippet in Java to iterate through ArrayList and delete odd values.\n\n// ArrayList A\nArrayList<Integer> A = new ArrayList<>(Arrays.asList(1,2,3,4,5,6)); [/INST] for(int i=0; i<A.size(); i++)\n{\n    if(A.get(i) %2 != 0)\n    {\n        A.remove(i);\n        i--;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a HTML code to show a table with 2 columns and 4 rows. [/INST] <table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n  </tr>\n  <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n  </tr>\n  <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n  </tr>\n  <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n  </tr>\n  <tr>\n    <td>Row 4</td>\n    <td>Row 4</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to evaluate the given numpy array and return the maximum absolute difference of any two elements.\n\n// Array A\nimport numpy as np\nA = np.array([1, 4, 5, -3]) [/INST] def max_difference(A):\n    return max(abs(np.max(A) - np.min(A)), abs(A[-1] - A[0]))</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code to show a black colored button with the text \"Greet\". [/INST] .button {\n  background-color: black;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n<button class=\"button\">Greet</button></s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to modify the given list and remove all strings with length less than three.\n\nmylist = ['Apple', 'Cat', 'Hello', 'Hi'] [/INST] def remove_short(mylist):\n    mylist = [x for x in mylist if len(x) >= 3]\n    return mylist\n    \nprint(remove_short(mylist))\n# Output: ['Apple', 'Hello']</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript that takes in a number x and returns the pythagorean triplet whose sum is x.\n\n// Number x \nint x = 12; [/INST] function getTripletsFromSum (x) { \n\tvar triplet = [];\n\tfor (var i = 1; i < x; i++) \n\t\tfor (var j = i; j < x; j++) \n\t\t\tfor (var k = j; k < x; k++) \n\t\t\t\tif (i*i + j*j === k*k && \n\t\t\t\t\t\ti + j + k === x) \n\t\t\t\t\ttriplet.push(i, j, k);\n\treturn triplet; \n} \n\nconsole.log(getTripletsFromSum(12));\n# Output: [3,4,5]</s>"
  },
  {
    "text": "<s>[INST] Given an array of strings, sort the strings alphabetically.\n\narray = [\"Banana\", \"Apple\", \"Orange\"] [/INST] def sort_strings(array):\n    return sorted(array)</s>"
  },
  {
    "text": "<s>[INST] Write a query that sorts data in a database. [/INST] SELECT * FROM table_name ORDER BY column_name ASC</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query which returns rows that have duplicate values in one or more columns. [/INST] SELECT * FROM table_name\nGROUP BY col1, col2, ...\nHAVING COUNT(*) > 1</s>"
  },
  {
    "text": "<s>[INST] Describe a way to implement quicksort. [/INST] Quicksort is an efficient sorting algorithm that works by selecting a \"pivot\" element from the array and partitioning the other elements into two sub-arrays based on whether they are less than or greater than the pivot element. Quicksort then recursively sorts the sub-arrays in the same way. The algorithm runs in O(nlog(n)) time and is one of the most widely used sorting algorithms.</s>"
  },
  {
    "text": "<s>[INST] Transform the C code into an equivalent Python program.\n\nint main()\n{\n    int i, j;\n    for (i = 0; i < 3; i++) \n        for (j = 0; j < 4; j++)\n            printf(\"%d %d\\n\", i, j);\n    return 0;\n} [/INST] for i in range(3):\n    for j in range(4):\n        print(i, j)</s>"
  },
  {
    "text": "<s>[INST] Generate a code to throttle a stream of messages that exceeds a set limit of messages within a certain time window.\n\nlimit = 100\ntime_window = 5 seconds [/INST] import time\n\ndef throttle_messages(limit, window):\n    count = 0\n    start = time.time()\n \n    while count < limit:\n        next_message = yield\n        count += 1\n         \n        end = time.time()\n        if (end - start) > window: \n            count = 0\n            start = end\n            \n    yield</s>"
  },
  {
    "text": "<s>[INST] Generate a code to find the kth smallest number in an unsorted list given three inputs (list, k and n).\n\nlist = [12, 3, 5, 7, 19] \nk = 3\nn = len(list) [/INST] def find_kth_smallest_number(list, n, k): \n  \n    list.sort()\n\n    # kth smallest element \n    return list[k-1]</s>"
  },
  {
    "text": "<s>[INST] Create a python generator that prints fibonacci numbers from n to 2*n-1.\n\nn = 10 [/INST] def fibonacci_generator(n):\n    a, b = 0, 1\n    while a < 2 * n - 1:\n        yield a\n        a, b = b, a + b</s>"
  },
  {
    "text": "<s>[INST] Generate a code to implement a binary search in an array with upto 1 million elements. [/INST] def binary_search(arr, x): \n    l = 0\n    r = len(arr) - 1\n\n    while l <= r: \n        mid = l + (r - l) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            l = mid + 1\n        else: \n            r = mid - 1\n  \n    return -1</s>"
  },
  {
    "text": "<s>[INST] Find the sum of two integers without using + or - signs.\n\na = 7\nb = 5 [/INST] def add(a, b): \n    # Iterate till there is no carry  \n    while (b != 0): \n          \n        # Carry now contains common  \n        # set bits of x and y \n        carry = a & b \n  \n        # Sum of bits of x and y where at  \n        # least one of the bits is not set \n        a = a ^ b \n  \n        # Carry is shifted by one so that  \n        # adding it to x gives the required sum \n        b = carry << 1\n          \n    return a</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, find the maximum possible sum of a subarray within the array. [/INST] def maxSubArraySum(arr):\n    maxsum = arr[0] \n    for i in range(len(arr)):\n        newSum = 0\n        for j in range(1, len(arr)):\n            newSum += arr[j]\n            if(newSum > maxsum):\n                maxsum = newSum\n    return maxsum</s>"
  },
  {
    "text": "<s>[INST] What does the 'break' keyword do in a loop structure in Python and how is it used? [/INST] The 'break' keyword is used to break out of a loop prematurely. It causes an immediate exit from the loop, bypassing any remaining code in the loop. It is generally used inside a conditional statement, such as an 'if' statement, as it can be used to stop the loop from executing when a certain condition is satisfied. For example:\n\nfor number in range(10):\n if number == 5:\n  break\n print(number)\n\nThis code will print the numbers 0 through 4 and will exit the loop once it reaches the number 5. If the 'break' statement is not used the loop will continue and print all the numbers up to 9.</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java to generate Fibonacci numbers up to n. [/INST] public class Fibonacci { \n    public static int fibonacci(int number){ \n        if(number == 1 || number == 2){ \n            return 1; \n        } \n        return fibonacci(number-1) + fibonacci(number -2); //tail recursion  \n    } \n       \n    public static void printFibonacci(int number){ \n        for(int i = 1; i <= number; i++){ \n            System.out.print(fibonacci(i) +\" \"); \n        } \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Code an algorithm to find the closest pair of elements in a given array with respect to a given target number.\n\narr = [10, 22, 28, 29, 30, 40], target = 44 [/INST] def closest_pair(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n    return min_pair</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that takes a list and returns the first two elements that adds up to 0.\n\n[1, 5, 2, -7, 3] [/INST] def zero_sum_pair(list):\n    # loop through the list \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == 0: \n                return [list[i], list[j]] \n    return None</s>"
  },
  {
    "text": "<s>[INST] Write a query in SQL to list the products from a given supplier. [/INST] SELECT * FROM Products \nWHERE SupplierId = 'SupplierId'</s>"
  },
  {
    "text": "<s>[INST] How can you optimized the following program's runtime?\n\ndef my_function(my_list):\n    output = []\n    for i in range(len(my_list)):\n        output.append(my_list[i] * 2)\n    return output [/INST] def my_function(my_list):\n    output = []\n    for i in range(0, len(my_list), 2):\n        output.append(my_list[i] * 2)\n    return output\nBy looping over the list in steps of two, the function will only have to go through half of the elements, thus optimizing the runtime.</s>"
  },
  {
    "text": "<s>[INST] Given a Dataframe, select the two columns as specified and store into a new separate Dataframe.\n\nimport pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age'] [/INST] import pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age']\n\n# Creating new Dataframe  \ndf_new = df[cols] \n\nprint(df_new)</s>"
  },
  {
    "text": "<s>[INST] Create a for loop for the list.\n\nmy_list = [1, 2, 3, 4] [/INST] my_list = [1, 2, 3, 4]\n\nfor item in my_list:\n    print(item)</s>"
  },
  {
    "text": "<s>[INST] Construct a syntax tree representing the following sentence.\n\nBob likes apples. [/INST] S\n                      ┌───┴───┐\n                      NP VP\n                    ┌─┴─┐   │\n                   Bob V  NP\n                         │  │\n                         V  N \n                         │ ┌─┴─┐ \n                         likes apples</s>"
  },
  {
    "text": "<s>[INST] Write a for loop for the following dictionary.\n\nmy_dict = {'first': 'one', 'second': 'two', 'third': 'three'} [/INST] my_dict = {'first': 'one', 'second': 'two', 'third': 'three'}\n\nfor key, value in my_dict.items():\n    print(key, value)</s>"
  },
  {
    "text": "<s>[INST] How can you combine these two lists without duplication?\n\nlist_one = ['a', 'b', 'c']\nlist_two = ['c', 'd', 'e'] [/INST] combined_list = set(list_one + list_two)\nprint(list(combined_list))  # ['a', 'b', 'c', 'd', 'e']</s>"
  },
  {
    "text": "<s>[INST] Create a new array containing the square of each element in the given array.\n\nmy_array = [2, 3, 4, 5] [/INST] new_array = [] \n  \nfor x in my_array: \n   new_array.append(x * x) \n  \nprint(new_array) # [4, 9, 16, 25]</s>"
  },
  {
    "text": "<s>[INST] Create a new object with the three properties of an employee specified in the given object.\n\nemployee = {\n    'name': 'John',\n    'salary': 6000\n} [/INST] new_object = {\n    'name': employee['name'],\n    'salary': employee['salary'],\n    'age': 0\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a web page that shows the company name, logo, and description.\n\nCompany Name: Global Inc.\nCompany Logo: https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Global_Inc_logo.svg/220px-Global_Inc_logo.svg.png\nCompany Description: Global Inc. is a leading technology provider of innovative solutions for customers around the globe. [/INST] \"\"\"\nGenerate a web page that shows the company name, logo, and description\n\"\"\"\n\n<html>\n  <head>\n    <title>Global Inc.</title>\n  </head>\n  <body>\n    <h1>Global Inc.</h1>\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Global_Inc_logo.svg/220px-Global_Inc_logo.svg.png\">\n    <p>Global Inc. is a leading technology provider of innovative solutions for customers around the globe.</p>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Print the following sentence in reverse order.\n\n\"This is a coding challenge.\" [/INST] print(\"challenge. coding a is This\")</s>"
  },
  {
    "text": "<s>[INST] Write a code that prints each word in a given string on a separate line. [/INST] \"\"\"\nWrite a code that prints each word in a given string on a separate line\n\"\"\"\n\ndef print_words(string):\n    words = string.split() \n    for word in words:\n        print(word)\n\nif __name__ == '__main__':\n    string = \"This is a coding challenge\"\n    print_words(string)</s>"
  },
  {
    "text": "<s>[INST] Complete the following code to delete the item at a given index from a list.\n\nindex = 4\nlist_items = [2, 3, 4, 5, 6, 7, 8] [/INST] \"\"\"\nComplete the following code to delete the item at a given index from a list\n\"\"\"\n\nindex = 4\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\n# remove the item at index 4\ndel list_items[index]\n\n# print the list\nprint(list_items)</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with an input box and a button. When the user clicks the button, it should print out a constant text. [/INST] \"\"\"\nCreate an HTML page with an input box and a button. When the user clicks the button, it should print out a constant text\n\"\"\"\n\n<html>\n  <head>\n    <title>Input Box</title>\n  </head>\n  <body>\n    <input type=\"text\" id=\"input\"></input>\n    <button onclick=\"printText()\">Click Here</button>\n    <script>\n    function printText(){\n    document.write(\"This is a constant text\");\n    }\n    </script>\n</html></s>"
  },
  {
    "text": "<s>[INST] Print only the odd numbers from the given list.\n\nlist_items = [2, 3, 4, 5, 6, 7, 8] [/INST] \"\"\"\nPrint only the odd numbers from the given list\n\"\"\"\n\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\nfor item in list_items:\n    if item % 2 != 0:\n        print(item)</s>"
  },
  {
    "text": "<s>[INST] Classify the following object as having either a simple, complex or a composite data type.\n\nDictionary [/INST] Complex data type.</s>"
  },
  {
    "text": "<s>[INST] Create a for loop to iterate through a given list and print the list elements.\n\nlist_items = [2, 3, 4, 5, 6, 7, 8] [/INST] \"\"\"\nCreate a for loop to iterate through a given list and print the list elements\n\"\"\"\n\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\nfor item in list_items:\n    print(item)</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a heading \"Welcome to My Site\". [/INST] <html>\n  <head>\n    <title>Welcome to My Site</title>\n  </head>\n  <body>\n    <h1>Welcome to My Site</h1>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Identify a code snippet from the following four options.\n\ndef calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result\n\nfor option in ['A', 'B', 'C', 'D']:\n    print(option) [/INST] A is not a valid code snippet.\n\nB is not a valid code snippet.\n\nC is not a valid code snippet.\n\nD is not a valid code snippet.\n\nThe correct code snippet is:\n\ndef calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result</s>"
  },
  {
    "text": "<s>[INST] Given two strings, find out if one is a permutation of the other.\n\nstring1 = \"cat\"\nstring2 = \"act\" [/INST] def check_permutation(string1, string2):\n    if len(string1) != len(string2):\n        # The strings can't be permutations if they are different lengths\n        return False\n    \n    # Convert the strings to lists\n    list1 = list(string1)\n    list2 = list(string2)\n    \n    # Sort the lists to make comparison easier\n    list1.sort()\n    list2.sort()\n    \n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n\n# Example\nprint(check_permutation(\"cat\", \"act\")) # Output: True</s>"
  },
  {
    "text": "<s>[INST] Using the following list of countries and their population, write a program that prints the name and population of the most populous country.\n\ncountries = [{'name': 'India', 'population': 1367030000}, {'name': 'China', 'population': 1406918015}, {'name': 'United States', 'population': 327000000}] [/INST] def find_most_populous_country(countries):\n    max_population = 0\n    most_populous_country = None\n    for country in countries:\n        if country['population'] > max_population:\n            max_population = country['population']\n            most_populous_country = country\n    return f'The most populous country is {most_populous_country[\"name\"]} with a population of {most_populous_country[\"population\"]}'\n\nprint(find_most_populous_country(countries)) # Output: The most populous country is China with a population of 1406918015</s>"
  },
  {
    "text": "<s>[INST] Print a pyramid of stars that has 5 levels. [/INST] for i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\" \")\n    print(\"\")</s>"
  },
  {
    "text": "<s>[INST] Use the following code to print each letter of the string \"Hello World\" on a separate line.\n\nstring = \"Hello World\" [/INST] string = \"Hello World\"\nfor letter in string:\n    print(letter)</s>"
  },
  {
    "text": "<s>[INST] Parse the following HTML text and print out all of the  elements and the content inside them.\n\n<html><div><h1>This is a test</h1><p>This is a paragraph</p></div></html> [/INST] from bs4 import BeautifulSoup\n\nhtml = '<html><div><h1>This is a test</h1><p>This is a paragraph</p></div></html>'\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Print out all the elements\nfor tag in soup.find_all():\n    print(f'Tag: {tag.name}')\n    \n# Print out the content inside the tags\nfor element in soup.find_all():\n    print(element.text)\n\n# Output:\nTag: html\nTag: div\nTag: h1\nTag: p\nThis is a test\nThis is a paragraph</s>"
  },
  {
    "text": "<s>[INST] Edit the existing Python code to convert Fahrenheit (F) degrees to Celsius (C) degrees.\n\ndef convert(F):\n return F + 32 [/INST] def convert(F):\n return (F-32)*5/9</s>"
  },
  {
    "text": "<s>[INST] Correct the syntax error in the following HTML structure.\n\n<div>\n<h1>My Web Page</h>\n<div/> [/INST] <div>\n<h1>My Web Page</h1>\n</div></s>"
  },
  {
    "text": "<s>[INST] Write an SQL statement to delete all rows from a table named 'employees'. [/INST] DELETE FROM employees;</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to sort the table 'employees' based on their age in descending order. [/INST] SELECT * FROM employees ORDER BY age DESC;</s>"
  },
  {
    "text": "<s>[INST] Write a C++ code to implement quick sort algorithm. [/INST] void quickSort(int arr[], int left, int right) \n{ \n    int i = left, j = right; \n    int tmp; \n    int pivot = arr[(left + right) / 2]; \n  \n    /* partition */\n    while (i <= j) { \n        while (arr[i] < pivot) \n            i++; \n        while (arr[j] > pivot) \n            j--; \n        if (i <= j) { \n            tmp = arr[i]; \n            arr[i] = arr[j]; \n            arr[j] = tmp; \n            i++; \n            j--; \n        } \n    }; \n  \n    /* recursion */\n    if (left < j) \n        quickSort(arr, left, j); \n    if (i < right) \n        quickSort(arr, i, right); \n}</s>"
  },
  {
    "text": "<s>[INST] Write an R code to get the names of all uncorrelated columns in a data frame. [/INST] # Get all column names\nall_columns <- names(data_frame)\n\n# Create an empty vector\nuncorrelated_columns <- c()\n# Iterate each column name in the data_frame\nfor(column_name in all_columns) {\n  # Store the correlations of each column in a vector\n  correlations <- cor(data_frame[column_name], data_frame[-column_name])\n  # If the value of a correlation it is below 0.8\n  if(any(correlations < 0.8)) {\n    # Add column name to empty vector\n    uncorrelated_columns <- c(uncorrelated_columns, column_name)\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code to style links in a page. [/INST] a {\n  text-decoration: none;\n  font-weight: bold;\n  color: #0F8CC2;\n}\n\na:visited {\n  color: #00FFDC;\n}\n\na:hover {\n  color: #FF0089;\n}\n\na:active {\n  color: #C30000;\n}</s>"
  },
  {
    "text": "<s>[INST] Train a machine learning model to predict the stock price of a company based on historical data.\n\nHistorical data for the company Apple Inc. [/INST] import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndataset = pd.read_csv('Apple_Historical_Data.csv')\n\n# Get target and predictors\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Train the Linear Regression model\nlr_model = LinearRegression()\nlr_model.fit(X, y)\n\n# Predict stock price \nprediction = lr_model.predict(X)</s>"
  },
  {
    "text": "<s>[INST] Write a C++ code to perform selection sort on a given array of numbers.\n\n[2, 6, 4, 1, 7, 9, 8] [/INST] void selectionSort(int arr[], int n) \n{ \n    int i, j, min_idx; \n  \n    // One by one move boundary of unsorted subarray \n    for (i = 0; i < n-1; i++) \n    { \n        // Find the minimum element in unsorted array \n        min_idx = i; \n        for (j = i+1; j < n; j++) \n        {\n            if (arr[j] < arr[min_idx]) \n            {\n                min_idx = j; \n            }\n        } \n  \n        // Swap the found minimum element with the first \n        // element \n        swap(&arr[min_idx], &arr[i]); \n    } \n}\n\n// Output\n// [1, 2, 4, 6, 7, 8, 9]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to accept user input and store it in a variable. [/INST] const userInput = prompt(\"Please enter some text:\");</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program to merge two arrays of different lengths. [/INST] #include <iostream>\nusing namespace std;\n \nvoid mergeArrays(int arr1[], int arr2[], int n1, int n2, int arr3[]) \n{ \n    int i = 0, j = 0, k = 0; \n  \n    while (i<n1 && j <n2) \n    { \n        if (arr1[i] < arr2[j]) \n            arr3[k++] = arr1[i++]; \n        else\n            arr3[k++] = arr2[j++]; \n    } \n   \n    while (i < n1) \n        arr3[k++] = arr1[i++]; \n  \n    while (j < n2) \n        arr3[k++] = arr2[j++]; \n} \n\n// Driver Code\nint main() \n{ \n    int arr1[] = {1, 3, 5, 7}; \n    int n1 = sizeof(arr1) / sizeof(arr1[0]); \n  \n    int arr2[] = {2, 4, 6, 8}; \n    int n2 = sizeof(arr2) / sizeof(arr2[0]); \n  \n    int arr3[n1+n2]; \n    mergeArrays(arr1, arr2, n1, n2, arr3); \n  \n    for (int i=0; i < n1+n2; i++) \n        cout << arr3[i] << \" \"; \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML form in which a user can input text and a button to submit. [/INST] <html>\n    <body>\n        <form>\n            <input type=\"text\" name=\"input\">\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a GPT-2 model to generate text given a seed phrase. [/INST] from transformers import GPT2Tokenizer, GPT2LMHeadModel\n \ntokenizer = GPT2Tokenizer.from_pretrained('gpt2')\nmodel = GPT2LMHeadModel.from_pretrained('gpt2')\n \ndef generate_text(seed_phrase):\n    input_ids = torch.tensor(tokenizer.encode(seed_phrase)).unsqueeze(0)\n    output_ids = model.generate(\n        input_ids=input_ids, \n        max_length=100, \n        do_sample=True\n    )\n    return tokenizer.decode(output_ids[0])</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a paragraph and a button to toggle the paragraph's text color between red and blue. [/INST] <html>\n    <head>\n        <title>Color Toggle</title>\n        <script>\n            let isRed = true;\n\n            let toggleButton = document.getElementById('toggle-button');\n            toggleButton.addEventListener('click', () => {\n                let paragraph = document.getElementsByTagName('p')[0]; \n                paragraph.style.color = isRed ? 'blue' : 'red';\n                isRed = !isRed;\n            });\n       </script>\n    </head>\n    <body>\n        <p>This is a paragraph.</p>\n        <button id='toggle-button'>Toggle color</button>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a class in java, that has two fields and two constructors.\n\nField1: String; Field2: int [/INST] public class MyClass { \n    String field1; \n    int field2; \n    \n    public MyClass(String field1, int field2) { \n        this.field1 = field1; \n        this.field2 = field2; \n    } \n    \n    public MyClass() { \n        this.field1 = \"\"; \n        this.field2 = 0; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] In JavaScript, how do you loop through the properties of an object? [/INST] In JavaScript, an object can be looped through by using either a for-in loop or by using the Object.keys() method. The for-in loop will iterate through the properties of the object and can be used to access the values associated with the properties. The Object.keys() method returns an array of the object's own property names and thus will loop through all the enumerable properties of the object.</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script to quickly calculate the mean for a set of numbers\n\n5 10 15 20 [/INST] #!/bin/bash\n\n#Create array from set of numbers\narr=(5 10 15 20)\n\n#Initialize sum and count\nsum=0\ncount=0\n\n#Loop through the array and sum up the values\nfor item in ${arr[@]}; do\n    let sum=sum+$item \n    let count=count+1\ndone\n\n#Calculate mean\necho $(echo $sum/$count | bc -l)</s>"
  },
  {
    "text": "<s>[INST] Implement a LRU cache in Java [/INST] import java.util.HashMap;\n \npublic class LRUCache { \n  \n    // Custom Doubly Linked List \n    static class CacheNode { \n        CacheNode prev; \n        CacheNode next; \n        int key; \n        int value; \n    } \n  \n    // Map containing the Keys \n    private HashMap<Integer, CacheNode> map \n        = new HashMap<Integer, CacheNode>(); \n  \n    // Maximum number of elements in the cache \n    private int capacity; \n  \n    // Current size \n    private int size; \n  \n    // Head of the DLL \n    private CacheNode head; \n  \n    // Tail of the DLL \n    private CacheNode tail; \n  \n    public LRUCache(int capacity) { \n        this.capacity = capacity; \n        this.size = 0; \n    } \n  \n    // Lookup a key in the cache \n    public int get(int key) { \n  \n        // Return -1 if no such key exists \n        if (!map.containsKey(key)) { \n            return -1; \n        } \n  \n        // Get the node \n        CacheNode node = map.get(key); \n  \n        // Delete the node \n        removeNode(node); \n  \n        // Put it at the head \n        addAtHead(node); \n  \n        // Return its value \n        return node.value; \n    } \n  \n    // Add a new node to the cache \n    public void put(int key, int value) { \n        CacheNode node = new CacheNode(); \n        node.key = key; \n        node.value = value; \n  \n        // Check if the node is already present \n        if (map.containsKey(key)) { \n            CacheNode oldNode = map.get(key); \n            removeNode(oldNode); \n            addAtHead(node); \n            map.put(key, node); \n        } else { \n            // Add at the front of the list \n            if (size == capacity) { \n                // Delete the last node \n                map.remove(tail.key); \n                removeNode(tail); \n            } \n            addAtHead(node); \n            map.put(key, node); \n        } \n    } \n  \n    // Remove a node from the list \n    public void removeNode(CacheNode node) { \n        if (node.prev != null) { \n            node.prev.next = node.next; \n        } else { \n            head = node.next; \n        } \n  \n        if (node.next != null) { \n            node.next.prev = node.prev; \n        } else { \n            tail = node.prev; \n        } \n  \n        size--; \n    } \n  \n    // Put a node at the front of the list \n    public void addAtHead(CacheNode node) { \n        node.next = null; \n        node.prev = null; \n  \n        if (head == null) { \n            head = node; \n            tail = node; \n        } else { \n            node.next = head; \n            head.prev = node; \n            head = node; \n        } \n  \n        size++; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes in a list and returns the second largest element\n\nlist_of_numbers = [5, 10, 15, 20] [/INST] def second_largest(list_of_numbers):\n    max_num = max(list_of_numbers)\n    sec_max_num = None\n    for num in list_of_numbers:\n        if num != max_num and (sec_max_num is None or sec_max_num < num):\n            sec_max_num = num\n    return sec_max_num</s>"
  },
  {
    "text": "<s>[INST] Encrypt the following string using a substitution cipher\n\nthisisasupersecurestring [/INST] dnklkfaxvgpsvpytjimnzt</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to calculate the maximum subarray sum\n\nlist_of_numbers = [-2, 3, 1, -4] [/INST] def max_subarray_sum(list_of_numbers): \n \n    max_so_far = 0\n    max_ending_here = 0\n \n    for i in range(0,len(list_of_numbers)): \n        max_ending_here = max_ending_here + list_of_numbers[i] \n        if (max_ending_here < 0): \n            max_ending_here = 0\n  \n        elif (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n              \n    return max_so_far</s>"
  },
  {
    "text": "<s>[INST] Write a web scraper using Python [/INST] import requests\nfrom bs4 import BeautifulSoup\n \n# Function to scrape for the specified HTML elements\ndef scrape(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Use the .find, .find_all, .select and .select_one methods to scrape website\n    titles = soup.find_all(\"title\")\n    content = soup.find_all(\"p\")\n    headings = soup.find_all(\"h1\")\n    links = soup.find_all(\"a\")\n \n    # Extract text from each element and store in variables\n    title = titles[0].text\n    content_p = [p.text for p in content]\n    headings_h1 = [h1.text for h1 in headings]\n    link_urls = [a.get(\"href\") for a in links]\n \n    # Print out each element\n    print(title)\n    print(\"\\n\")\n    print(\"Content paragraphs:\")\n    for paragraph in content_p:\n        print(paragraph)\n    print(\"\\n\")\n    print(\"Headings:\")\n    for heading in headings_h1:\n        print(heading)\n    print(\"\\n\")\n    print(\"Links and URLs:\")\n    for link in link_urls:\n        print(link)\n\n# Scrape the website below\nscrape('https://en.wikipedia.org/wiki/Python_(programming_language)')</s>"
  },
  {
    "text": "<s>[INST] Generate HTML for a button with the text \"Click Here!\". [/INST] <button>Click Here!</button></s>"
  },
  {
    "text": "<s>[INST] Given a list of phone numbers, write a code to find the one with the highest digits.\n\nphone_numbers = [\"+440123456789\", \"+45987654321\", \"+441234567890\"] [/INST] highest = 0\nhighest_phone = None\n\nfor number in phone_numbers:\n    number_digits = ''.join(filter(str.isdigit, number))\n    if int(number_digits) > highest:\n        highest_phone = number\n        highest = int(number_digits)\n\nprint(f\"The phone number with highest digits is {highest_phone}.\")</s>"
  },
  {
    "text": "<s>[INST] Formulate an SQL query to find the most expensive product in a given database. [/INST] SELECT MAX(price) FROM products;</s>"
  },
  {
    "text": "<s>[INST] Construct a code to replace all instances of 'A' with 'Z' in a given string.\n\nstring = \"This is a string A with multiple A's\" [/INST] def replace_letter_A(string):\n    string = string.replace('A', 'Z')\n    return string\n\nprint(replace_letter_A(string))</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code using List Comprehension to print the maximum number from a list of integers.\n\nnumbers = [3, 2, 5, 4, 6] [/INST] max_num = max([num for num in numbers])\nprint(max_num)</s>"
  },
  {
    "text": "<s>[INST] Write a code to detect if a string is a palindrome or not. Output true if it is a palindrome, output false if it is not.\n\n\"racecar\" [/INST] true</s>"
  },
  {
    "text": "<s>[INST] Write a code to accept a string and return the last character.\n\n\"Hello World\" [/INST] return string[string.length-1]</s>"
  },
  {
    "text": "<s>[INST] You are given the following code. Write an 'assert' statement that checks if the email address is all lowercase or not.\n\nemail = \"THIS_IS_TEST@EMAIL.COM\" [/INST] assert email.lower() == email, \"Email address should be all lowercase\"</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to check if the resulting output of the division is an integer.\n\na = 15\nb = 4\noutput = a/b [/INST] if b != 0:\n    output = a/b\n    assert output.is_integer(), \"Result of division is not an integer\"</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python that implements an algorithm for sorting a list of numbers.\n\nlist = [3, 2, 5, 1, 4] [/INST] class SortNum():\n    def selection_sort(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n        return list</s>"
  },
  {
    "text": "<s>[INST] Sum the numbers in the following array and print the result.\n\narray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] total = 0\nfor row in array:\n    for element in row:\n        total += element\nprint(total)</s>"
  },
  {
    "text": "<s>[INST] Create a list of objects of the following class and print the objects as dictionary.\n\nclass Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year [/INST] cars = []\ncars.append(Car(\"Ford\", \"Mustang\", 2019))\ncars.append(Car(\"Toyota\", \"Corolla\", 2020))\n\nfor car in cars:\n    print(car.__dict__)</s>"
  },
  {
    "text": "<s>[INST] Create a Django view to handle GET requests for displaying a list of products.\n\nappname/models.py\n\nclass Product(models.Model):\n    name = models.CharField(max_length=200)\n    description = models.TextField()\n    price = models.DecimalField(max_digits=10, decimal_places=2) [/INST] # Create a Django view to handle GET requests.\ndef product_list_view(request):\n    # Get the list of products\n    products = Product.objects.all()\n\n    # Return the list of products\n    context = {\n        'products': products\n    }\n    return render(request, 'product_list.html', context)</s>"
  },
  {
    "text": "<s>[INST] Return the index of the first occurrence of an element in the given array.\n\narr = [2, 3, 3, 1, 5, 2] [/INST] def first_occurrence(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Print the first element that occurs in the list and is divisible by 5.\n\nlist = [2, 3, 5, 10, 15, 30] [/INST] for element in list:\n    if element % 5 == 0:\n        print(element)\n        break</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to find the names and salaries of all employees who have salaries greater than 80,000. [/INST] SELECT name, salary FROM Employees WHERE salary > 80000;</s>"
  },
  {
    "text": "<s>[INST] Write a CSS class to create a link which shows on hover. [/INST] .show-on-hover {\n  display: none;\n  &:hover {\n    display: block;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select all columns in a table but exclude the contents of a specific column. [/INST] SELECT * FROM Table_Name WHERE column_name IS NULL;</s>"
  },
  {
    "text": "<s>[INST] Write a CSS selector to style all buttons with the class 'submit'. [/INST] .submit {\n  /* CSS properties here */\n}</s>"
  },
  {
    "text": "<s>[INST] Create an AWS service to host a website. [/INST] Using AWS Amazon EC2 and S3 services, you can host a website.  You can use EC2 to set up a web server, and S3 can be used to store static website content such as HTML, CSS, and images.</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to print out Armstrong numbers in a given range. [/INST] public static void armstrongInRange(int lower, int upper) \n{ \n    int num, originalNum, remainder, n = 0;\n  \n    // Calculates the number of digits a number has \n    for(originalNum = lower + 1; originalNum < upper; originalNum++) \n    { \n        num = originalNum; \n        while(num != 0) \n        { \n            num /= 10; \n            n++; \n        }  \n          \n        num = originalNum; \n        int sum = 0; \n          \n        // Calculates the sum of the nth power of the digits \n        while(num != 0) \n        { \n            remainder = num % 10; \n            sum += Math.pow(remainder, n); \n            num /= 10; \n        } \n  \n        // Checks if the sum is equal to the original number \n        if(sum == originalNum) \n            System.out.print(originalNum +  \" \"); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] You need to program a function to calculate the dot product of two arrays.\n\narray1=[1, 2, 3]\narray2=[-1, 0, 4] [/INST] 7</s>"
  },
  {
    "text": "<s>[INST] You need to write a function to remove all the elements with a given value from a given array.\n\narray1=[1, 1, 2, 3, 4, 5, 1]\nvalue=1 [/INST] [2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] You need to write a program that takes a list of words as an input and returns the longest word in the list.\n\nword_list=[\"cat\", \"dog\", \"elephant\", \"ants\"] [/INST] elephant</s>"
  },
  {
    "text": "<s>[INST] You need to write a program that takes a given string and checks if it is a valid IP address.\n\nstring1=\"255.255.0.10\" [/INST] true</s>"
  },
  {
    "text": "<s>[INST] You need to write a program to print out the prime numbers between a given range of numbers.\n\nstart=1 \nend=50 [/INST] 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47</s>"
  },
  {
    "text": "<s>[INST] You need to write a program to delete a given node from a singly linked list.\n\nhead = [1, 2, 3, 4, 5]\nnode_data = 3 [/INST] [1, 2, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Execute this line of code and tell me what is the value of `y`?\n\nint x = 5; int y = 3*x+2; [/INST] y = 17</s>"
  },
  {
    "text": "<s>[INST] What am I trying to do with this code?\n\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1 [/INST] You are trying to print the numbers 0 to 4 (inclusive) by using a while loop.</s>"
  },
  {
    "text": "<s>[INST] What is wrong with this code?\n\nstr1 = 'This is a string'\nstr2 = str1\nstr2 += ' with a suffix' [/INST] The variable str1 is not updated and remains as 'This is a string' when you add a suffix to str2. This means that the values of str1 and str2 are no longer the same.</s>"
  },
  {
    "text": "<s>[INST] What should I add in this function to generate a random number?\n\ndef generate_random():\n    # Your code here [/INST] import random\ndef generate_random():\n    return random.randint(0,100)</s>"
  },
  {
    "text": "<s>[INST] Using Python, write code to check if a list contains duplicates or not.\n\nlist = [10, 20, 30, 40, 50] [/INST] def has_duplicates(list): \n    seen = set() \n    for item in list: \n        if item in seen: \n            return True \n        seen.add(item) \n    return False</s>"
  },
  {
    "text": "<s>[INST] How can I get the last element of this list?\n\nlist = [1, 2, 3, 4, 5] [/INST] The last element of the list can be accessed using the index -1 or using the list method pop(): \n\nlast_element = list[-1] \n\nor \n\nlast_element = list.pop()</s>"
  },
  {
    "text": "<s>[INST] Construct a URL to search for a given query on Google\n\nquery = 'Python programming' [/INST] url = 'https://www.google.com/search?q=' + query.replace(' ', '+')</s>"
  },
  {
    "text": "<s>[INST] Create a JSON object that contains person data. [/INST] person = { \n    \"name\": \"John Smith\", \n    \"age\": 32, \n    \"address\": { \n        \"street\": \"123 Main Street\", \n        \"city\": \"Chicago\", \n        \"state\": \"IL\"\n    }, \n    \"hobbies\": [\"golf\", \"reading\", \"fishing\"]\n}</s>"
  },
  {
    "text": "<s>[INST] What is the time complexity for this for loop?\n\nnums = [1,2,3,4,5]\nfor num in nums:\n    print(num) [/INST] The time complexity for this loop is O(n) where n is the length of the list.</s>"
  },
  {
    "text": "<s>[INST] Describe the difference between lists and tuples [/INST] The main difference between lists and tuples is that lists are mutable, meaning they can be changed, while tuples are immutable and cannot be changed. Lists are used when the data is expected to change, while tuples are used when the data is expected to stay the same. In addition, a list can contain any type of data, while a tuple can only contain one type of data. Lastly, a list uses square brackets, while a tuple uses parentheses.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to list the names of all students registered for Maths 101. [/INST] SELECT S.name \nFROM Student S \nINNER JOIN Course C ON S.course_id = C.course_id \nWHERE C.course_name = 'Maths 101';</s>"
  },
  {
    "text": "<s>[INST] Using the following list of prime numbers, calculate their sum.\n\n[2, 3, 5, 7, 11, 13] [/INST] The sum of the numbers in the list is 51.</s>"
  },
  {
    "text": "<s>[INST] Construct a JSON object to represent the following shoes array.\n\n[\n    {\n        \"name\": \"Nike Air Zoom\",\n        \"color\": \"Black\",\n        \"size\": 10.5\n    },\n    {\n        \"name\": \"Skechers GoWalk\",\n        \"color\": \"Grey\",\n        \"size\": 11\n    }\n] [/INST] {\n  \"shoes\": [\n    {\n      \"name\": \"Nike Air Zoom\",\n      \"color\": \"Black\",\n      \"size\": 10.5\n    },\n    {\n      \"name\": \"Skechers GoWalk\",\n      \"color\": \"Grey\",\n      \"size\": 11\n    }\n  ]\n}</s>"
  },
  {
    "text": "<s>[INST] Using the given data, find the average monthly temperature in Fahrenheit.\n\nJune: 78.1, July: 87.8, August: 90 [/INST] The average monthly temperature in Fahrenheit is 84.9.</s>"
  },
  {
    "text": "<s>[INST] Construct a class in Python that can calculate the volume of a cube given its side length. [/INST] class Cube(object):\n    \n    def __init__(self, side_length):\n        self.side_length = side_length\n    \n    \n    def calculate_volume(self):\n        return self.side_length * self.side_length * self.side_length</s>"
  },
  {
    "text": "<s>[INST] Using the given array of objects, find the object with the highest age.\n\n[{name: \"John\", age: 25}, {name: \"Jack\", age: 50}, {name: \"Jill\", age: 30}] [/INST] The object with the highest age is {name: \"Jack\", age: 50}.</s>"
  },
  {
    "text": "<s>[INST] Explain the following PHP code.\n\n$string1 = \"Hello\";\n$string2 = \"World\";\necho $string1 . \" \" . $string2; [/INST] The above PHP code first initializes two string variables, $string1 and $string2, with the strings \"Hello\" and \"World\" respectively. Then, it uses the string concatenation operator (.) to combine the two strings together, separated by a space, and prints the result using the echo function. The result of the above code will be \"Hello World\".</s>"
  },
  {
    "text": "<s>[INST] Turn the statement into a valid predicate in first-order logic.\n\n\"All animals are mammals\" [/INST] ∀x(Animal(x) → Mammal(x))</s>"
  },
  {
    "text": "<s>[INST] Write an HTML tag to create a table with three columns and two rows. [/INST] <table>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Generate pseudocode to solve the Fibonacci sequence. [/INST] Function Fibonacci(n)\n  Declare f0, f1, fn\n  f0 = 0\n  f1 = 1\n\n  if n = 0\n    fn = f0\n  else if n = 1\n    fn = f1\n  else\n    for i = 2 to n\n      fn = f0 + f1\n      f0 = f1\n      f1 = fn\n    end for\n\n    return fn\nEnd Function</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to get a list of the top 5 email domains from a customer table. [/INST] SELECT TOP 5 SUBSTRING(Email, LEN(Email) - CHARINDEX('@', REVERSE(Email)) + 2, LEN(Email)) \nAS Domain\nFROM Customers \nGROUP BY SUBSTRING(Email, LEN(Email) - CHARINDEX('@', REVERSE(Email)) + 2, LEN(Email)) \nORDER BY Domain DESC</s>"
  },
  {
    "text": "<s>[INST] Create a PHP function to print the first 1000 prime numbers. [/INST] <?php \n   function printPrimes() \n   { \n       $n = 2; \n       while (1000--) \n       { \n           $isPrime = 1;  \n           for ($i = 2 ; $i <= sqrt($n); $i++) \n           {  \n               if ($n % $i == 0) \n               { \n                   $isPrime = 0;  \n                   break; \n               } \n           } \n           if ($isPrime) \n               echo \"$n \";  \n           $n++;   \n       } \n   } \n   printPrimes(); \n?></s>"
  },
  {
    "text": "<s>[INST] Create a Ruby function to generate a number between 0 and 1. [/INST] def random_number\n\trand\nend\n\nputs random_number</s>"
  },
  {
    "text": "<s>[INST] Design a key-value database with Python for storing course information.\n\nThe database should contain the following fields: Course Name, Course ID, Course Description and Course Instructor. [/INST] import sqlite3\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create table\nc.execute('CREATE TABLE Course (course_name TEXT, course_id TEXT, course_description TEXT, course_instructor TEXT)')\n\n# Save (commit) the changes\nconn.commit()\n\n# Close the connection\nconn.close()</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm in Java to count the number of ones in a binary number [/INST] public static int countOnes(int num) \n{ \n    int count = 0; \n    while (num != 0) { \n        num = num & (num - 1); \n        count++; \n    } \n    return count; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in C++ to calculate the sum of range [/INST] int sumRange(int start, int stop)\n{\n\tint sum = 0;\n\tfor (int i = start; i <= stop; i++)\n\t\tsum += i;\n\t\n\treturn sum;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the top 10 customers with highest overall spending [/INST] SELECT c.customer_id, c.name, SUM(o.price) as total_spending\nFROM customers c\nJOIN orders o \n\tON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.name\nORDER BY total_spending DESC\nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Design a MySQL query to find out the youngest employee [/INST] SELECT e.first_name, e.last_name, e.birth_date \nFROM Employees e\nORDER BY e.birth_date ASC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to break down the number into its digits [/INST] def break_down(n):\n    digit_list = [int(x) for x in str(n)]\n    return digit_list</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to display all employees who work in the R&D department. [/INST] SELECT * FROM employees\nWHERE department = 'R&D';</s>"
  },
  {
    "text": "<s>[INST] Using JavaScript, convert the following JSON object into a string.\n\nJObj = {\n  “name” : “John”,\n  “age” : 42\n} [/INST] const JString = JSON.stringify(JObj);\nconsole.log(JString); // { “name” : “John”, “age” : 42 }</s>"
  },
  {
    "text": "<s>[INST] Implement a function in PHP to display all even numbers between 2 and the given number n. [/INST] function displayEvenNumbers($n) {\n  for($i = 2; $i <= $n; $i++) {\n    if($i % 2 == 0) {\n      echo $i.\" \";\n    }   \n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a query in MySQL to display the top 3 highest salaries. [/INST] SELECT salary\nFROM employees\nORDER BY salary DESC\nLIMIT 3</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java called Student with 3 instance variables - firstName, lastName, and age. [/INST] public class Student{\n  String firstName;\n  String lastName;\n  int age;\n\n  //constructor\n  Student(String firstName, String lastName, int age){\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.age = age;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Using CSS, change the text color of all elements with class “main-heading” to red. [/INST] .main-heading {\n  color: red;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an animation using CSS that moves an element from left to right on an infinite loop. [/INST] @keyframes moveLeftToRight {\n  0% {\n    left: 0px;  \n  }\n  100% {\n    left: 100%;\n  }\n}\n\n.animation-element {\n  position: relative;\n  animation: moveLeftToRight infinite linear;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following function to allow it to accept negative numbers.\n\nfunction isPositive(num) {\n  return num >= 0;\n} [/INST] function isPositive(num) {\n  return num > 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to find all numbers from 1 to the given number n which are divisible by 6. [/INST] def findDivisibleBySix(n):\n  result = []\n  for i in range(1, n+1):\n    if i % 6 == 0:\n      result.append(i)\n  return result</s>"
  },
  {
    "text": "<s>[INST] Write a SQL statement that selects the name, age and gender of every student in the database with age greater than 18. [/INST] SELECT name, age, gender FROM students WHERE age > 18;</s>"
  },
  {
    "text": "<s>[INST] Convert a date in the format \"MM/dd/yyyy\" to a timestamp.\n\n04/23/2021 [/INST] import time\ndef convert_date_to_timestamp(d):\n    return time.mktime(time.strptime(d, \"%m/%d/%Y\"))</s>"
  },
  {
    "text": "<s>[INST] Generate a five digit random string. [/INST] import random\ndef generate_rand_str():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=5))</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript class that represents a person and ouputs their name and age to the console. [/INST] class Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    outputInfo() {\n        console.log(`Name: ${this.name}, Age: ${this.age}`);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Find all the prime numbers within a given range.\n\n2, 20 [/INST] def get_primes_in_range(a, b):\n    primes = []\n    for num in range(a, b + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    return primes</s>"
  },
  {
    "text": "<s>[INST] Create a HTML table element with 4 columns and 5 rows. [/INST] <table>\n  <tr>\n    <th>Column1</th>\n    <th>Column2</th>\n    <th>Column3</th>\n    <th>Column4</th>\n  </tr>\n  <tr>\n    <td>Row1</td>\n    <td>Row1</td>\n    <td>Row1</td>\n    <td>Row1</td>\n  </tr>\n  <tr>\n    <td>Row2</td>\n    <td>Row2</td>\n    <td>Row2</td>\n    <td>Row2</td>\n  </tr>\n  <tr>\n    <td>Row3</td>\n    <td>Row3</td>\n    <td>Row3</td>\n    <td>Row3</td>\n  </tr>\n  <tr>\n    <td>Row4</td>\n    <td>Row4</td>\n    <td>Row4</td>\n    <td>Row4</td>\n  </tr>\n  <tr>\n    <td>Row5</td>\n    <td>Row5</td>\n    <td>Row5</td>\n    <td>Row5</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Design a recursanve function in Python that prints a given string in reverse.\n\nhello [/INST] def print_string_reverse(str):\n    if not str:\n        return\n    else:\n        print_string_reverse(str[1:])\n        print(str[0], end='')</s>"
  },
  {
    "text": "<s>[INST] Find the string between two substrings.\n\nString: This is a string\nStart substring: is \nEnd substring: a [/INST] \" is \"</s>"
  },
  {
    "text": "<s>[INST] Parse the following XML data and print the value of the 'id' key as a string.\n\n<root>\n    <id>123</id>\n    <name>John Doe</name>\n</root> [/INST] String value = '123'</s>"
  },
  {
    "text": "<s>[INST] Determine the syntactic structure of the following sentence.\n\nSentence: She felt so excited that her application got approval. [/INST] Subject (she) + Verb (felt) + Adverb (so) + Adjective (excited) + Conjunction (that) + Subject (her application) + Verb (got) + Object (approval).</s>"
  },
  {
    "text": "<s>[INST] Use the regular expression to extract the words ending with 'sion'.\n\nString: fusion, explosion, elision [/INST] (fusion|explosion|elision)$</s>"
  },
  {
    "text": "<s>[INST] Construct a JSON object from the given key-value pair.\n\nKey-Value Pair: name:John Doe [/INST] {\n  \"name\": \"John Doe\"\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an array from the given set of numbers.\n\nSet of numbers: [4, 8, 12, 16, 20] [/INST] int [] arr = {4, 8, 12, 16, 20};</s>"
  },
  {
    "text": "<s>[INST] Edit the given code to add a new element to the list.\n\nlist = [1, 2, 3] [/INST] list = [1, 2, 3]\nlist.append(4) # Adding new element</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page containing two buttons. [/INST] <!DOCTYPE html>\n<html>\n    <head>\n        <title>Buttons</title>\n    </head>\n    <body>\n        <input type=\"button\" value=\"Button 1\" />\n        <input type=\"button\" value=\"Button 2\" />\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a class called \"Animal\" containing three attributes - name, type and age. [/INST] class Animal:\n    def __init__(self, name, type, age):\n        self.name = name\n        self.type = type\n        self.age = age</s>"
  },
  {
    "text": "<s>[INST] Write VBA for a search interface to pull information from one tab of an excel sheet to a different tab [/INST] Sub search_interface()\n Dim sh As Worksheet, sh2 As Worksheet\n Set sh = ThisWorkbook.Sheets(\"Sheet1\")\n Set sh2 = ThisWorkbook.Sheets(\"Sheet2\")\n\n For Each row In sh.Rows\n   If row.Cells(1, 1) = \"Search Term\" Then\n     Exit For\n   End If\n  \n   If row.Cells(1, 1) = sh2.Cells(1, 2) Then\n     For col = 1 To 4\n       sh2.Cells(2, col).Value = row.Cells(1, col).Value\n     Next col\n   End If \n Next row \nEnd Sub</s>"
  },
  {
    "text": "<s>[INST] Generate code to calculate the average age of a group of people.\n\n[[\"Person\", \"Age\"],\n[\"Jim\",26],\n[\"John\", 39],\n[\"Tracy\",19]] [/INST] def average_age(people):\n    total_age = 0\n    for p, a in people:\n        total_age += a\n    return total_age/len(people)</s>"
  },
  {
    "text": "<s>[INST] Create a Matlab program to find the sum a given series\n\nThe given series is 1 + 1/4 + 1/9 + ... [/INST] sum_series = 0;\nfor i = 1:100\n    sum_series = sum_series + 1/i^2;\nend\n\nfprintf('The sum if the series is: %f\\n',sum_series);</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to multiply two given matrices [/INST] public class MatrixMultiplication \n{\n    // Method to multiply two matrices \n    public static double[][] multiply(double[][] A,  \n                                     double[][] B) \n    { \n        int aRows = A.length; \n        int aColumns = A[0].length; \n        int bRows = B.length; \n        int bColumns = B[0].length; \n   \n        if (aColumns != bRows) {  \n            throw new IllegalArgumentException(\"A:Rows: \" + aColumns \n                      + \" did not match B:Columns \" + bRows + \".\"); \n        } \n   \n        double[][] C = new double[aRows][bColumns]; \n        for (int i = 0; i < aRows; i++) { \n            for (int j = 0; j < bColumns; j++) { \n                C[i][j] = 0.00000; \n            } \n        } \n   \n        for (int i = 0; i < aRows; i++) { \n            for (int j = 0; j < bColumns; j++) { \n                for (int k = 0; k < aColumns; k++) { \n                    C[i][j] += A[i][k] * B[k][j]; \n                } \n            } \n        } \n   \n        return C; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Define an iterator class in Python. [/INST] class myIterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n        \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        item = self.data[self.index]\n        self.index += 1\n        return item</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python that can be used as a context manager. [/INST] class myContextManager:\n    def __init__(self, name):\n        self.name = name\n        print(\"Context Manager initialized.\")\n        \n    def __enter__(self):\n        print(\"Entering context.\")\n        return self\n        \n    def __exit__(self, type, value, traceback):\n        print(f\"Exiting context: {self.name}\")</s>"
  },
  {
    "text": "<s>[INST] Write a function to check whether a linked list contains a given value. [/INST] def contains(value, head):\n    current_node = head\n    while current_node is not None:\n        if current_node.value == value:\n            return True\n        current_node = current_node.next\n    return False</s>"
  },
  {
    "text": "<s>[INST] Consolidate the following array into a dictionary\n\narr = [(\"apple\", 1), (\"banana\", 2), (\"orange\", 3)] [/INST] dict(arr)\n# Result: {'apple': 1, 'banana': 2, 'orange': 3}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to implement Find-Max algorithm.\n\narr = [10, 7, 8, 11, 15] [/INST] def FindMax(arr):\n    curr_max = arr[0]\n    curr_index = 0\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            curr_index = i\n    return curr_max, curr_index\n\nif __name__ == \"__main__\":\n    arr = [10, 7, 8, 11, 15]\n    curr_max, curr_index = FindMax(arr)\n    print(\"Max element:\", curr_max)\n    print(\"Index of max element:\", curr_index)</s>"
  },
  {
    "text": "<s>[INST] Define a function in Python that calculates the sum of the sum of the elements of a nested list. [/INST] def nestedListSum(nested_list):\n    total = 0\n    for sub_list in nested_list:\n        total += sum(sub_list)\n    return total</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to compare two dictionaries by key. [/INST] def compare_dicts_by_key(dic1, dic2):\n    if len(dic1) != len(dic2):\n        return False\n    for key in dic1:\n        if key not in dic2 or dic1[key] != dic2[key]:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Generate a list of random alphanumeric strings of length 25. [/INST] import random\nimport string\n\ndef random_strings_list(length):\n    alphanumeric_chars = string.ascii_letters + string.digits\n    strings_list = []\n    for _ in range(length):\n        random_string = ''.join(random.choices(alphanumeric_chars, k=25))\n        strings_list.append(random_string)\n    return strings_list</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to format the following list of IP addresses.\n\nip_addresses = [\"192.168.1.1\", \"255.255.255.255\",\"8.8.8.8\"] [/INST] def format_IP_addresses(ip_addresses):\n    return [str(IPAddress(ip)) for ip in ip_addresses]</s>"
  },
  {
    "text": "<s>[INST] Create a list in Python that contains the first 10 multiples of 3. [/INST] multiples_list = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]</s>"
  },
  {
    "text": "<s>[INST] Given the following array in JavaScript, write a statement that finds the largest number.\n\nconst numbers = [3, 5, 2, 10, 7, 4] [/INST] const largestNumber = Math.max(...numbers);</s>"
  },
  {
    "text": "<s>[INST] What is the difference between a string in Python and a list? [/INST] In Python, strings are immutable which means they can not be changed once created. On the other hand, a list is mutable, meaning the elements can be altered after the list is created. Additionally, strings are sequences of characters, whereas lists are sequences of any type of data.</s>"
  },
  {
    "text": "<s>[INST] Given two arrays in Java, how would you merge them into one array?\n\nint[] array1 = {1, 2, 3}; \nint[] array2 = {4, 5, 6}; [/INST] int[] mergedArray = new int[array1.length + array2.length];\n\nSystem.arraycopy(array1, 0, mergedArray, 0, array1.length);\nSystem.arraycopy(array2, 0, mergedArray, array1.length, array2.length);</s>"
  },
  {
    "text": "<s>[INST] Write a SQL statement to fetch the maximum age from the table \"employee\". [/INST] SELECT MAX(Age) FROM Employee;</s>"
  },
  {
    "text": "<s>[INST] Given a Node.js object, how can you check if a property exists in the object? [/INST] if (Object.prototype.hasOwnProperty.call(object, 'property')) { \n // property exists\n}</s>"
  },
  {
    "text": "<s>[INST] Write a React component that accepts an array of strings and renders a bulleted list.\n\nconst data = [\"dog\", \"cat\", \"bird\"] [/INST] class BulletList extends React.Component {\n  render() {\n    const {data} = this.props\n    return (\n      <ul>\n        {data.map(item => <li>{item}</li>)}\n      </ul>\n    );\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a PHP class with three protected fields \"User Name\", \"Password\", and \"Email\" [/INST] class User {\n\n protected $username;\n protected $password;\n protected $email;\n\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that returns the number of orders shipped on each day.\n\nSELECT * FROM ORDERS [/INST] SELECT ShippedDate, COUNT(*) FROM ORDERS GROUP BY ShippedDate;</s>"
  },
  {
    "text": "<s>[INST] Given a JavaScript object, how can you remove a key from the object? [/INST] delete object[\"key\"];</s>"
  },
  {
    "text": "<s>[INST] Create a React component for a Postcard element to display on a webpage.\n\nThe postcard should contain a paragraph element containing the text \"Hello from Paris!\", an image of the Eiffel Tower, and a \"Return to Homepage\" button below the image. [/INST] import React from 'react';\n\nfunction Postcard() {\n  return (\n    <div>\n      <p>Hello from Paris!</p>\n      <img src=\"eiffel-tower.jpg\" alt=\"Eiffel Tower\" />\n      <button type=\"button\">Return to Homepage</button>\n    </div>\n  )\n}\n\nexport default Postcard;</s>"
  },
  {
    "text": "<s>[INST] Write a TypeScript script to sort an array of names in alphabetical order.\n\nThe following array of names: [\"John\", \"James\", \"Karl\", \"Jane\", \"Jill\"] [/INST] let sortArrayByName = (array: string[]) => {\n  array.sort(function (x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  });\n  return array;\n};\n\nlet names = [\"John\", \"James\", \"Karl\", \"Jane\", \"Jill\"];\n\nsortArrayByName(names);\nconsole.log(names);</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query for finding the customers with orders of total price of more than $100. [/INST] SELECT customers.name \nFROM customers\nJOIN orders ON customers.id = orders.customer_id\nGROUP BY customers.id\nHAVING SUM(orders.price) > 100;</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code snippet to create an email link for \"support@example.com\" [/INST] <a href=\"mailto:support@example.com\">support@example.com</a></s>"
  },
  {
    "text": "<s>[INST] Create a list of 20 words ordered alphabetically in HTML. [/INST] <ul>\n  <li>Apples</li>\n  <li>Bananas</li>\n  <li>Cherries</li>\n  <li>Dates</li>\n  <li>Eggplants</li>\n  <li>Figs</li>\n  <li>Grapes</li>\n  <li>Honeydews</li>\n  <li>Ice cream</li>\n  <li>Jelly beans</li>\n  <li>Kiwis</li>\n  <li>Lemons</li>\n  <li>Mangoes</li>\n  <li>Nectarine</li>\n  <li>Oranges</li>\n  <li>Pears</li>\n  <li>Quinces</li>\n  <li>Raspberries</li>\n  <li>Strawberries</li>\n  <li>Tangerines</li>\n</ul></s>"
  },
  {
    "text": "<s>[INST] Create a function to generate random numbers from 0-99. [/INST] import random\n\ndef random_number():\n    return random.randint(0,99)</s>"
  },
  {
    "text": "<s>[INST] Create a function to check whether a given value is in an array.\n\narr = [1,2,3,4]\nx = 2 [/INST] def is_value_in_arr(arr, x):\n    if x in arr:\n        return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] In JavaScript, create a function that returns the length of a string. [/INST] function stringLength(str){\n    return str.length;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to generate Fibonacci numbers less than 100. [/INST] def generateFibonacci(num):\n    a = 0\n    b = 1\n    fib_sequence = []\n    while a < num:\n        fib_sequence.append(a)\n        a, b = b, a + b\n    return fib_sequence</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to create a linked list in python. [/INST] class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n\n        current = self.head\n        while current.next:\n            current = current.next\n\n        current.next = new_node</s>"
  },
  {
    "text": "<s>[INST] Create a class that prints out the following message: \"Welcome to the world of programming!\" [/INST] class WelcomeMessage:\n    def __init__(self):\n        print(\"Welcome to the world of programming!\")</s>"
  },
  {
    "text": "<s>[INST] Create a binary heap sort algorithm in Java. [/INST] public class Heapsort { \n    public void sort(int arr[]) \n    { \n        int n = arr.length; \n  \n        // Build heap (rearrange array) \n        for (int i = n / 2 - 1; i >= 0; i--) \n            heapify(arr, n, i); \n  \n        // One by one extract an element from heap \n        for (int i=n-1; i>=0; i--) \n        { \n            // Move current root to end \n            int temp = arr[0]; \n            arr[0] = arr[i]; \n            arr[i] = temp; \n  \n            // call max heapify on the reduced heap \n            heapify(arr, i, 0); \n        } \n    } \n  \n    // To heapify a subtree rooted with node i which is \n    // an index in arr[]. n is size of heap \n    void heapify(int arr[], int n, int i) \n    { \n        int largest = i; // Initialize largest as root \n        int l = 2*i + 1; // left = 2*i + 1 \n        int r = 2*i + 2; // right = 2*i + 2 \n  \n        // If left child is larger than root \n        if (l < n && arr[l] > arr[largest]) \n            largest = l; \n  \n        // If right child is larger than largest so far \n        if (r < n && arr[r] > arr[largest]) \n            largest = r; \n  \n        // If largest is not root \n        if (largest != i) \n        { \n            int swap = arr[i]; \n            arr[i] = arr[largest]; \n            arr[largest] = swap; \n  \n            // Recursively heapify the affected sub-tree \n            heapify(arr, n, largest); \n        } \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] How would you create an API endpoint that returns a list of users? [/INST] import flask\n\napp = flask.Flask(__name__)\n\n@app.route(\"/users\", methods=(\"GET\",))\ndef get_users():\n    users = [\n        {\"name\": \"John Smith\", \"age\": 45},\n        {\"name\": \"Tim Jones\", \"age\": 34},\n        {\"name\": \"Alice Jackson\", \"age\": 24}\n    ]\n    return flask.jsonify(users)</s>"
  },
  {
    "text": "<s>[INST] Write code to output the sum of the numbers 1-100. [/INST] def sum_nums(n):\n    total = 0\n    for i in range(1,n+1):\n        total += i\n    return total\n\nprint(sum_nums(100))</s>"
  },
  {
    "text": "<s>[INST] Write a script that inputs a list and converts the list of strings into a dictionary.\n\nlist = [\"ABC\", \"XYZ\", \"PQR\"] [/INST] dict = {\n     \"ABC\": \"ABC\", \n     \"XYZ\": \"XYZ\", \n     \"PQR\": \"PQR\"}</s>"
  },
  {
    "text": "<s>[INST] Generate a link of the page given below.\n\nPage URL: www.example.com/product/apple [/INST] <a href=\"www.example.com/product/apple\">www.example.com/product/apple</a></s>"
  },
  {
    "text": "<s>[INST] Extract all instances of a specific word in the given text.\n\nText: The quick brown fox jumps over the lazy dog.\nWord: j [/INST] [\"jump\", \"jumps\"]</s>"
  },
  {
    "text": "<s>[INST] Create an HTML structure that mimics the mockup given below.\n\nMockup: \n\nheader\n| ____ \n|     |\n|     |\n|     |\n|     |\n|-----| [/INST] <header>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n</header></s>"
  },
  {
    "text": "<s>[INST] Write a Python function that generates a key-value pair for the given array.\n\narr = [1, 2, 3, 4] [/INST] def generate_key_value(arr):\n    key_val_pairs = {k:v for k,v in enumerate(arr)}\n    return key_val_pairs\n\nprint(generate_key_value(arr))\n\nOutput:\n{0: 1, 1: 2, 2: 3, 3: 4}</s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query that retrieves all the documents whose 'name' field contains the given string.\n\nString: Hi [/INST] db.collection.find({name: /.*Hi.*/})</s>"
  },
  {
    "text": "<s>[INST] Create a C program that prints all distinct combinations of characters from two given strings.\n\nStrings: ab and cd [/INST] #include <stdio.h>\n#include <string.h>\n\nint main(){\n  char str1[] = \"ab\";\n  char str2[] = \"cd\";\n  int i, j;\n  for(i=0; i<strlen(str1); i++){\n    for(j=0; j<strlen(str2); j++){\n      printf(\"%c%c \", str1[i], str2[j]);\n    }\n  }\n  printf(\"\\n\");\n  return 0;\n}\n\nOutput:\nac ad bc bd</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that updates the 'price' field for all documents in the collection to 200. [/INST] UPDATE collection SET price = 200;</s>"
  },
  {
    "text": "<s>[INST] You are given a text and the task is to output each individual word in the text along with its character count.\n\nText: How are you doing? [/INST] How: 3\nare: 3\nyou: 3\ndoing: 6\n? :1</s>"
  },
  {
    "text": "<s>[INST] Develop an Angular application that displays the current date and time. [/INST] import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n  <h1>{{ dateTime | date:'dd/MM/yyyy HH:mm:ss' }}</h1>\n  `\n})\nexport class AppComponent {\n  dateTime = new Date();\n}</s>"
  },
  {
    "text": "<s>[INST] Using HTML and CSS, create a web page that lists all of the fruits in the given array.\n\nfruits = [\"apple\", \"orange\", \"banana\", \"pear\", \"mango\"] [/INST] <html>\n<head>\n  <title>Fruit List</title>\n</head>\n<body> \n  <ul>\n    <li>Apple</li>\n    <li>Orange</li>\n    <li>Banana</li>\n    <li>Pear</li>\n    <li>Mango</li>\n  </ul>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Compute the sum of a given array using a Python function.\n\narr = [1, 2, 3, 4] [/INST] def compute_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nprint(compute_sum(arr))\n\nOutput:\n10</s>"
  },
  {
    "text": "<s>[INST] Write a code to print the largest element of an array if the array contains all negative numbers.\n\narr = [-10, -20, -50, -30] [/INST] def largest_negative_number(arr): \n    largest = float('-inf')\n    for i in range(len(arr)): \n        if arr[i] > largest: \n            largest = arr[i] \n    return largest \n  \n# Driver Code \narr = [-10, -20, -50, -30] \n  \nprint(largest_negative_number(arr))</s>"
  },
  {
    "text": "<s>[INST] Write a function to merge two sorted lists into one sorted list.\n\nlist1 = [3, 5, 7]\nlist2 = [1, 4, 6] [/INST] def merge_lists(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        final_list.append(list2[j])\n        j += 1\n    \n    return final_list\n\nprint(merge_lists(list1, list2))</s>"
  },
  {
    "text": "<s>[INST] Given an input of numbers, sort the numbers in descending order.\n\narr = [6, 2, 5, 3, 9] [/INST] def sort_numbers_desc(arr): \n    for i in range(len(arr)): \n  \n        max_element = arr[i] \n        max_index = i \n  \n        for j in range(i+1, len(arr)): \n            if arr[j] > max_element: \n                max_element = arr[j] \n                max_index = j  \n  \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    return arr\n\nprint(sort_numbers_desc(arr))</s>"
  },
  {
    "text": "<s>[INST] Create a function that prints the binary representation of a number.\n\nnumber = 5 [/INST] def print_binary(number): \n    binary_string = \"\"\n    while number != 0: \n        remainder = number % 2\n        binary_string = str(remainder) + binary_string\n        number = number // 2\n    return binary_string \n\nprint(print_binary(number))</s>"
  },
  {
    "text": "<s>[INST] Write code to remove duplicates and maintain the order of elements in a given list.\n\nlist = [3, 1, 7, 5, 3, 8, 7] [/INST] def remove_duplicates(list): \n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list\n\nprint(remove_duplicates(list))</s>"
  },
  {
    "text": "<s>[INST] Explain how to calculate the mean value of a function defined from 0 to infinity. [/INST] The mean value of a function can be calculated by integrating the function from 0 to infinity and dividing the integral by infinity. Mathematically, this is expressed as:\n\nmean = ∫∞0f(x)dx/∞</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression to extract the city names from the following string.\n\naddress: #38 number street, new york city, san jose, CA [/INST] import re\n\naddress_string = \"#38 number street, new york city, san jose, CA\"\n\npattern = r'(?:,|^)([\\s\\w]*)(?:,|$)'\n\nresult = re.findall(pattern, address_string)\nprint(result) // ['new york city', 'san jose']</s>"
  },
  {
    "text": "<s>[INST] Suggest a better algorithm than Bubble sort for sorting a large array. [/INST] Merge sort is an efficient sorting algorithm that uses divide and conquer approach. It divides the array into two halves, recursively sorts them and then merges them. Merge sort has a time complexity of O(nlog(n)) and is efficient for large arrays.</s>"
  },
  {
    "text": "<s>[INST] Explain the use of *args and **kwargs in Python. [/INST] *args and **kwargs are special syntax in Python used to pass a variable number of arguments to a function. *args denotes positional arguments, while **kwargs represents keyword arguments. The syntax allows functions to take arbitrary number of arguments and provide flexibility for functions to handle different arguments.</s>"
  },
  {
    "text": "<s>[INST] Identify the error in the code given below.\n\n# Sum of elements in a list\n\nmy_list = [1, 2, 3]\n\nsum = 0\n\nfor i in range(my_list):\n    sum += i\n\nprint(sum) [/INST] The error is in line 6 while using the range function. The range function expects the start and end parameters to be int type, but in this case the parameter passed to the range function is a list. This should be changed to range(len(my_list)) so that the code will iterate over the elements of the list instead.</s>"
  },
  {
    "text": "<s>[INST] Write a code to shuffle a list randomly in Python [/INST] import random\n\nmy_list = [1, 2, 3, 4, 5]\n\nrandom.shuffle(my_list)\n\nprint(my_list)</s>"
  },
  {
    "text": "<s>[INST] Given two string, how would you find the longest common substring? [/INST] The longest common substring can be found by traversing the two strings simultaneously and comparing the characters. If the characters match, we will increase the substring length by 1 and check for the next characters. In the case of a mismatch, the substring length is set back to 0. We will find the largest value of the substring length at the end of traversal and that value gives us the longest common substring.</s>"
  },
  {
    "text": "<s>[INST] Suggest a data structure for storing a collection of countries and their corresponding population. [/INST] A dictionary would be a suitable data structure to store a collection of countries and their corresponding population. The country name could be used as the key and the population could be used as the value. For example:\n\ncountries_population = {\n    'United States': 329_467_000,\n    'Canada': 36_323_167,\n    'China': 1_393_783_836,\n    'India': 1_380_004_385\n    }</s>"
  },
  {
    "text": "<s>[INST] Write a JSON parser to read the following data and output it in a 3-column table.\n\n{\"name\": \"John Doe\", \"age\": 29, \"address\": \"123 Main Street\"} [/INST] name | age | address\n-----|-----|---------\nJohn Doe|29|123 Main Street</s>"
  },
  {
    "text": "<s>[INST] Create a shell script to list all available printer models. [/INST] #!/bin/bash\nlpr -P</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to count how many students are in each grade. [/INST] SELECT grade, COUNT(*) FROM students GROUP BY grade;</s>"
  },
  {
    "text": "<s>[INST] Ask the assistant to print a multiplication table for the number 5. [/INST] 1 x 5 = 5\n2 x 5 = 10\n3 x 5 = 15\n4 x 5 = 20\n5 x 5 = 25\n6 x 5 = 30\n7 x 5 = 35\n8 x 5 = 40\n9 x 5 = 45\n10 x 5 = 50</s>"
  },
  {
    "text": "<s>[INST] Use JavaScript and HTML to create a form with 3 input fields and a submit button. [/INST] <html>\n<head>\n  <script>\n    // JavaScript code\n  </script>\n</head>\n\n<body>\n  <form>\n    <input type=\"text\" name=\"field1\" />\n    <input type=\"text\" name=\"field2\" />\n    <input type=\"text\" name=\"field3\" />\n    <input type=\"submit\" name=\"submit\" value=\"Submit\" />\n  </form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a CSS selector to select the horizontal navigation bar with ID \"nav-bar\". [/INST] #navbar {\n  ...\n}</s>"
  },
  {
    "text": "<s>[INST] Classify whether the following statement is an input or an output.\n\nPrint the sum of the two numbers. [/INST] Input</s>"
  },
  {
    "text": "<s>[INST] Design a JavaScript function to filter out the prime numbers from an array.\n\n[1, 2, 3, 4, 5, 6] [/INST] function isPrime(n) {\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\nfunction primeFilter(array) {\n    let result = [];\n    for (let i = 0; i < array.length; i++) {\n        if (isPrime(array[i])) {\n            result.push(array[i]);\n        }\n    }\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python script that calculates the surface area of a cylinder. [/INST] def surface_area_cylinder(radius, height):\n    pi = 3.14\n    return 2*pi*radius*(radius + height)</s>"
  },
  {
    "text": "<s>[INST] Suggest improvements to the following code to optimize its performance.\n\nrequests = []\nfor i in range(100000000):\n    requests.append(i) [/INST] requests = []\nfor i in range(100000000):\n    requests.append(i)\n\n# use list comprehension to generate the list in one line\nrequests = [i for i in range(100000000)]</s>"
  },
  {
    "text": "<s>[INST] Suggest a better data structure that can be used to store a large amount of data in a way that querying data is fast. [/INST] A better data structure to store a large amount of data in a way that querying is fast would be a Hash Table. Hash Tables store data in an associative array, allowing for fast searches and retrieval of data.</s>"
  },
  {
    "text": "<s>[INST] Write a code to delete the 4th element from the list.\n\nmylist = [1, 2, 3, 4, 5] [/INST] mylist = [1, 2, 3, 4, 5]\ndel mylist[3]\nprint(mylist)</s>"
  },
  {
    "text": "<s>[INST] Write a code to append a character at the start and end of a given string.\n\nword = \"hello\" [/INST] word = \"hello\"\nword = '$' + word + '$'\nprint(word)</s>"
  },
  {
    "text": "<s>[INST] Determine the maximum number of nodes in a height-balanced binary tree of height h.\n\nh = 4 [/INST] The maximum number of nodes in a height-balanced binary tree of height 4 is 15. This can be determined by using the formula 2^(h+1) - 1.</s>"
  },
  {
    "text": "<s>[INST] What is the time complexity of inserting a value into a singly linked list? [/INST] The time complexity of inserting a value into a singly linked list is O(1), as it is a constant time operation.</s>"
  },
  {
    "text": "<s>[INST] Suggest a method to convert a given array into a min-heap. [/INST] Heapify is one of the methods to convert a given array into a min-heap. This process involves repeatedly swapping the root element with its smallest child (if it exists) to satisfy the min-heap property.</s>"
  },
  {
    "text": "<s>[INST] How would you parse a URL into its individual components? [/INST] A URL can be parsed into its individual components by using string manipulation and built-in methods such as ``split()`` and ``replace()``. The components generally include the protocol, host name, path, query string and fragment.</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to return the product of all numbers in a given list.\n\ndef product_list(numbers):\n    # Initialize the result\n    result = 1\n    # Iterate over the input numbers\n    for x in numbers:\n        result = result * x\n    # Return the result\n    return result [/INST] def product_list(numbers):\n    # Initialize the result\n    result = 1\n    # Iterate over the input numbers\n    for x in numbers:\n        result *= x\n    # Return the result\n    return result</s>"
  },
  {
    "text": "<s>[INST] Change the following code to make it easier to read\n\na=3;b='aa';b*=a;print(b) [/INST] a = 3\nb = 'aa'\nb = b * a\nprint(b)</s>"
  },
  {
    "text": "<s>[INST] Understand the parameters used in the following code and explain their purpose.\n\ndef doSomething(x, y, z): \n    pass [/INST] The parameters x, y and z are used in this function to represent arbitrary values. They can represent integers, floats, strings, lists, dictionaries, objects, etc. Depending on the specific implementation of this function, the parameters can take any meaning, representing any value. For example, it could be a function that performs an arithmetic operation, in which case x, y and z will represent the three numbers in the operation, or a function that processes a list, in which case x, y and z will represent the start index, end index and the list respectively.</s>"
  },
  {
    "text": "<s>[INST] Change the following code to reduce its running time\n\nfor i in range(0, len(nums)):\n    if nums[i] == target:\n        return i [/INST] def find_target(nums, target): \n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    nums = [2, 3, 5, 7]\n    target = 5\n    index = -1\n    for i in range(0, len(nums)):\n        if nums[i] == target:\n            index = i\n            break\n    if (index == -1):\n        print(\"Target not found!\")\n    else:\n        print(\"Target found at index:\", index)</s>"
  },
  {
    "text": "<s>[INST] Can you modify the program so that it prints out all words in the sentence along with their count?\n\n\"The quick brown fox jumped over the lazy dog.\" [/INST] def print_words_with_count(sentence):\n  word_count = {}\n  words = sentence.split()\n  \n  for word in words:\n    if word not in word_count:\n      word_count[word] = 1\n    else:\n      word_count[word] += 1\n  \n  for word, count in word_count.items():\n    print(\"Word: %s  Count: %d\" % (word, count))</s>"
  },
  {
    "text": "<s>[INST] Modify the program to support calculating Fibonacci numbers up to the nth number. [/INST] def FibonacciSeries(n):\n    if n <= 0:\n        return [0]\n    elif n == 1:\n        return [0,1]\n    else:\n        series = [0,1]\n        for i in range(2, n):\n            curr_num = series[i-1] + series[i-2]\n            series.append(curr_num)\n        return series</s>"
  },
  {
    "text": "<s>[INST] Generate a program to reverse a string and remove all the white spaces from the string.\n\n\"  The  quick  brown  fox  jumped  over  the  lazy  dog.  \" [/INST] def reverse_and_trim(s): \n    s = s.strip() \n    s = s.replace(\" \", \"\") \n    return s[::-1]</s>"
  },
  {
    "text": "<s>[INST] Generate a SQL query for finding the names of all employees in the company. [/INST] SELECT name FROM Employee;</s>"
  },
  {
    "text": "<s>[INST] Edit this HTML code to highlight odd rows of this table.\n\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td>Anna</td>\n    <td>20</td>\n  </tr>\n  <tr>\n    <td>Mark</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Amy</td>\n    <td>28</td>\n  </tr>\n</table> [/INST] <table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr style=\"background-color: lightgrey;\">\n    <td>John</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td>Anna</td>\n    <td>20</td>\n  </tr>\n  <tr style=\"background-color: lightgrey;\">\n    <td>Mark</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Amy</td>\n    <td>28</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Generate a code to capitalize the first letter of each word of a given sentence.\n\ntext = \"This is a sample sentence.\" [/INST] def capitalize_first_letter(text):\n    words = text.split(' ')\n    capitalized_words = [word[0].upper() + word[1:] for word in words]\n    return ' '.join(capitalized_words)\n\ntext = \"This is a sample sentence.\"\ncapitalized_text = capitalize_first_letter(text)\nprint(capitalized_text) # Output: This Is A Sample Sentence.</s>"
  },
  {
    "text": "<s>[INST] Create a Tableau script to retrieve data from an Amazon RDS instance. [/INST] import pyodbc \nconn = pyodbc.connect(\n    DRIVER='Amazon Redshift ODBC Driver',\n    SERVER=<your instance URL>,\n    PORT=<port number>,\n    DATABASE=<database name>,\n    UID=<username>,\n    PWD=<password>)\ncursor = conn.cursor()\nquery = <your SQL query>\ncursor.execute(query) \ndata = cursor.fetchall() \nprint(data)</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to sort an array in ascending and descending order.\n\nint arr[] = {2, 3, 1, 5, 4} [/INST] #include<iostream>\nusing namespace std;\n\n// Function to sort an array in ascending order\nvoid asc_sort(int arr[], int n)\n{\n    int temp;\n    for (int i = 0; i < n; i++) {\n      for (int j = i + 1; j < n; j++) {\n        if (arr[i] > arr[j]) {\n          temp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = temp;\n        }\n      }\n    }\n}\n\n// Function to sort an array in descending order\nvoid desc_sort(int arr[], int n)\n{\n    int temp;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n          if (arr[i] < arr[j]) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n          }\n        }\n      }\n}\n\nint main()\n{\n    int arr[] = {2, 3, 1, 5, 4};\n    int n = 5;\n    asc_sort(arr, n);\n    cout << \"Array in Ascending Order: \";\n    for (int i=0; i<n; i++)\n        cout << arr[i] << \" \";\n    cout << endl;\n    desc_sort(arr, n);\n    cout << \"Array in Descending Order: \";\n    for (int i=0; i<n; i++)\n        cout << arr[i] << \" \";  \n    return 0;\n}\n\n# Output: \nArray in Ascending Order: 1 2 3 4 5 \nArray in Descending Order: 5 4 3 2 1</s>"
  },
  {
    "text": "<s>[INST] Implement a function to insert an element into a binary search tree.\n\ntree = \n    5\n   / \\\n  2   8 [/INST] def insert(self,val): \n\tif not self.root: \n\t\tself.root = Node(val) \n\telse: \n\t\tcurrent = self.root\n\t\twhile True: \n\t\t\tif val < current.val: \n\t\t\t\tif current.left: \n\t\t\t\t\tcurrent = current.left \n\t\t\t\telse: \n\t\t\t\t\tcurrent.left = Node(val) \n\t\t\t\t\tbreak\n\t\t\telif val > current.val: \n\t\t\t\tif current.right: \n\t\t\t\t\tcurrent = current.right \n\t\t\t\telse: \n\t\t\t\t\tcurrent.right = Node(val) \n\t\t\t\t\tbreak\n\t\t\telse: \n\t\t\t\tbreak</s>"
  },
  {
    "text": "<s>[INST] Write code to count the number of times a given pattern has occured in a given string.\n\nText: “This is a test string to practice coding. This string contains the pattern “is” [/INST] def countOccurrence(txt, pattern):\n  count = 0\n  for i in range(len(txt)):\n    if txt[i:i+len(pattern)] == pattern:\n      count += 1\n  return count</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby script that converts a given number in degree Celsius to Fahrenheit.\n\n52 [/INST] celsius = 52\nfahrenheit = (celsius * 9/5) + 32\nputs \"The temperature in fahrenheit is #{fahrenheit} degrees\"</s>"
  },
  {
    "text": "<s>[INST] You need to read a text and detect if the sentence contains any curse words or not. Output true if there is a curse word, output false if there is not.\n\nWhen I saw the movie, I was so angry that I wanted to scream. [/INST] false</s>"
  },
  {
    "text": "<s>[INST] Create a function in Java that takes in an array of numbers and calculates the sum of the elements.\n\n[1, 2, 3, 4, 5] [/INST] public class Sum {\n \n  public static int getSum(int[] arr) {\n  \n    int sum = 0;\n    for(int i=0; i < arr.length; i++)\n        sum += arr[i];\n    return sum;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] You have to read a set of numbers and report the number of positive numbers.\n\n[-1, -43, 2, 6, 0, 18] [/INST] int count_positive(int arr[], int size) \n{ \n  \n    int count = 0; \n    for (int i = 0; i < size; i++) \n        if (arr[i] > 0) \n            count++; \n  \n    return count; \n} \n\nint arr[] = {-1,-43,2,6,0,18}; \nint n = sizeof(arr)/sizeof(arr[0]); \ncount_positive(arr, n);</s>"
  },
  {
    "text": "<s>[INST] Generate random numbers 0 to 1000. [/INST] import random\n\nfor i in range(10):\n    print(random.randint(0, 1000))</s>"
  },
  {
    "text": "<s>[INST] Match the strings \"string1\" and \"string2\" using regex.\n\nstring1=\"Hello World\"\nstring2=\"Hello*World\" [/INST] import re\n\nstring1 = \"Hello World\"\nstring2 = \"Hello*World\"\n\npattern = re.compile(string2.replace('*', '.'))\nmatch = pattern.search(string1)\n\nif match:\n    print('Matched!')</s>"
  },
  {
    "text": "<s>[INST] Create a linked list with the following elements: 5, 6, 7, 8. [/INST] class Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\nclass LinkedList:\n\n    def __init__(self):  \n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n\n        if self.head == None:\n            self.head = new_node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = new_node\n\nlist = LinkedList() \nlist.append(5) \nlist.append(6) \nlist.append(7) \nlist.append(8)</s>"
  },
  {
    "text": "<s>[INST] Given two strings str1 and str2, write a function in JavaScript to check if str1 is a substring of str2. [/INST] function isSubstring(str1, str2){\n    if(str2.indexOf(str1) !== -1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following PHP code to return the modular exponentiation of two numbers.\n\nfunction mod_exp(base, exponent, modulus){\n    return base^exponent % modulus;\n} [/INST] function mod_exp(base, exponent, modulus){\n    var result = 1;\n    for (var i = 0; i < exponent; i++){\n        result = (result * base) % modulus;\n    }\n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a HTML page for a registration form. [/INST] <html>\n    <head>\n        <title>Registration Form</title>\n    </head>\n    <body>\n        <h1>Registration Form</h1>\n        <form action=\"register.php\" method=\"POST\">\n          <div class=\"form-row\">\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\" required>\n          </div>\n          <div class=\"form-row\">\n            <label>Email:</label>\n            <input type=\"email\" name=\"email\" required>\n          </div>\n          <div class=\"form-row\">\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" required>\n          </div> \n          <div class=\"form-row\">\n            <input type=\"submit\" value=\"Register\">\n          </div>\n        </form>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Implement a search() function that uses binary search to find a given element in an array. [/INST] def search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to the generate a random number between 0 and 1 in JavaScript. [/INST] function getRandom() {\n    return Math.random();\n}</s>"
  },
  {
    "text": "<s>[INST] Using C++, unroll the following loop and vectorize the code.\n\nfor (int i = 0; i < 10; ++i)\n    x[i] = y[i] + z[i]; [/INST] __m256 x_vec = _mm256_loadu_ps(x + 0);\n__m256 y_vec = _mm256_loadu_ps(y + 0);\n__m256 z_vec =_mm256_loadu_ps(z + 0);\n\nx_vec = _mm256_add_ps(y_vec, z_vec);\n\n_mm256_storeu_ps(x + 0, x_vec);</s>"
  },
  {
    "text": "<s>[INST] Generate a random sample with size n from a given pandas DataFrame. [/INST] import pandas as pd\n\ndef sample_df(df,n):\n    return df.sample(n)</s>"
  },
  {
    "text": "<s>[INST] Create a function to retrieve a random element from a given list in Java. [/INST] public static Object getRandomElement(List<?> list) {\n    Random rand = new Random();\n    int randIndex = rand.nextInt(list.size());\n    return list.get(randIndex);\n}</s>"
  },
  {
    "text": "<s>[INST] Build a SQL query to calculate the biggest salary in the table “Employees”. [/INST] SELECT MAX(salary) FROM Employees;</s>"
  },
  {
    "text": "<s>[INST] Create a bash shell script that will print “I love programming in Bash!”. [/INST] #!/bin/bash\necho \"I love programming in Bash!\"</s>"
  },
  {
    "text": "<s>[INST] Generate a HTML code that will create an alert message with the text “You pressed the button!” [/INST] <html>\n    <head>\n        <script>\n            function alert_button(){\n                alert(\"You pressed the button!\");\n            }\n        </script>\n    </head>\n    <body>\n        <button onclick=\"alert_button()\">Click Here</button>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Generate a CSS code for creating a flex container with columns of equal width. [/INST] .flex-container {\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: space-between;\n}\n.flex-item {\n    flex: 1 0 auto;\n    padding: 5px;\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a completion for the following JavaScript code to determine if a number is an odd number.\n\nfunction isOddNumber( [/INST] function isOddNumber(num) {\n    return num % 2 !== 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a program in Scala to calculate the average price of all products in the table “Products”. [/INST] import scala.io.Source\n\nval products = Source.fromFile(\"products.txt\").getLines.toList\nval avgPrice = products.map(p => p.split(\",\")(4).toDouble).sum/products.length\nprintln(s\"The average price is: $avgPrice\")</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form to submit a text entry and view it after submission. [/INST] <html>\n  <head>\n    <script>\n      function submitForm(){\n        var formData = document.getElementById(\"textEntry\").value;\n        alert(\"You said: \"+ formData);\n      }\n    </script>\n  </head>\n  <body>\n    <form>\n      <input type=\"text\" id=\"textEntry\">\n      <input type=\"button\" value=\"Submit\" onclick=\"submitForm()\">\n    </form>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Node.js module that accepts two strings and checks if the first string contains the second string.\n\n\"Hello World\", \"ello\" [/INST] const containsSubstring = (string, substr) => {\n    return string.indexOf(substr) !== -1;\n}\n\nmodule.exports = containsSubstring;</s>"
  },
  {
    "text": "<s>[INST] Create a Flask application to redirect the user to a given URL when the user input is valid. [/INST] from flask import Flask, redirect, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        if request.form['userInput']:\n            url = 'https://www.example.com'\n            return redirect(url)\n    return '''\n    <form method=\"POST\">\n        <input type=\"text\" name=\"userInput\" placeholder=\"Type something..\" />\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n    '''\n\nif __name__ == \"__main__\":\n    app.run()</s>"
  },
  {
    "text": "<s>[INST] Generate a JavaScript code that prints all the numbers from 1 to 30. [/INST] for(let i=1; i<=30; i++){\n  console.log(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Reformat a given JSON string between quotes to a properly indented and formatted output.\n\n\"{\\\"menu\\\":{\\\"id\\\":\\\"file\\\",\\\"value\\\":\\\"File\\\",\\\"popup\\\":{\\\"menuitem\\\":[{\\\"value\\\":\\\"New\\\", \\\"onclick\\\":\\\"CreateNewDoc()\\\"},{\\\"value\\\":\\\"Open\\\", \\\"onclick\\\":\\\"OpenDoc()\\\"},{\\\"value\\\":\\\"Close\\\", \\\"onclick\\\":\\\"CloseDoc()\\\"}]}}}\" [/INST] {\n  \"menu\": {\n    \"id\": \"file\",\n    \"value\": \"File\",\n    \"popup\": {\n      \"menuitem\": [\n        {\n          \"value\": \"New\",\n          \"onclick\": \"CreateNewDoc()\"\n        },\n        {\n          \"value\": \"Open\",\n          \"onclick\": \"OpenDoc()\"\n        },\n        {\n          \"value\": \"Close\",\n          \"onclick\": \"CloseDoc()\"\n        }\n      ]\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML <span> element with a given CSS class name.\n\nclass=\"important\" [/INST] <span class=\"important\"></span></s>"
  },
  {
    "text": "<s>[INST] Write a Python program to add the items of two given lists and create a new list.\n\n[1, 2, 3], [4, 5, 6] [/INST] newList = [x + y for x, y in zip([1, 2, 3], [4, 5, 6])]</s>"
  },
  {
    "text": "<s>[INST] Set an environment variable in Bash that holds the value of the given string.\n\nMyPassword [/INST] export MY_PASSWORD='MyPassword'</s>"
  },
  {
    "text": "<s>[INST] Write a regex expression to match the given input.\n\nabbccd [/INST] ^(a|b|c){2}d$</s>"
  },
  {
    "text": "<s>[INST] Create a Javascript function that calculates the median value of an array of numbers.\n\n[2, 7, 12, 15] [/INST] function calculateMedian(arr) {\n  arr.sort(function(a, b){return a-b});\n  if (arr.length % 2 !== 0) {\n    return arr[Math.floor(arr.length / 2)];\n  }\n  else {\n    return (arr[arr.length / 2 - 1] + arr[arr.length / 2]) / 2;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to display the area of a given circle.\n\nradius = 7 [/INST] public class Circle {\n\n    public static void main(String[] args) {\n        double radius = 7.0;\n        double circArea  = Math.PI * (radius * radius);\n\n        System.out.println(\"The area of the circle with radius\" + radius + \" is: \" + circArea);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Use jQuery to hide all the elements with the given CSS class.\n\nhidden [/INST] $('.hidden').hide();</s>"
  },
  {
    "text": "<s>[INST] Create an array with 3 strings, \"John\", \"Sam\" and \"Anna\". [/INST] string names[] = {\"John\", \"Sam\", \"Anna\"};</s>"
  },
  {
    "text": "<s>[INST] Design a JavaScript function that will accept two numbers and return their sum. [/INST] function add(a, b) {\n return a + b;\n}</s>"
  },
  {
    "text": "<s>[INST] Adjust the following SQL query so that it will return the results sorted in an ascending order.\n\nSELECT name, age FROM users; [/INST] SELECT name, age \nFROM users \nORDER BY age ASC;</s>"
  },
  {
    "text": "<s>[INST] Create a PHP class called \"Car\" with public member variables. [/INST] class Car {\n public $make;\n public $model;\n public $color;\n public $year;\n\n public function __construct($make, $model, $color, $year)\n {\n  $this->make = $make;\n  $this->model = $model;\n  $this->color = $color;\n  $this->year = $year;\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a loop in JavaScript to iterate through all names in an array and print them in a sentence.\n\nnames = [\"John\", \"Jack\", \"Jane\", \"Jill\"] [/INST] for(let i = 0; i < names.length; i++) {\n console.log(\"Hello, my name is \" + names[i] + \".\")\n}</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm in Python to find the average of four numbers.\n\n[2, 4, 8, 5] [/INST] def avg(numbers):\n sum = 0\n for num in numbers:\n  sum += num\n return sum/len(numbers)\n\naverage = avg([2, 4, 8, 5])\nprint(average)</s>"
  },
  {
    "text": "<s>[INST] Convert the following HTML table into a valid JSON format.\n\n<table>\n <tr>\n  <th>Name</th>\n  <th>Age</th>\n  <th>Country</th>\n </tr>\n <tr>\n  <td>John</td>\n  <td>23</td>\n  <td>USA</td>\n </tr>\n <tr>\n  <td>Jack</td>\n  <td>25</td>\n  <td>Canada</td>\n </tr>\n <tr>\n  <td>Jane</td>\n  <td>20</td>\n  <td>Australia</td>\n </tr>\n</table> [/INST] [\n  {\n   \"Name\": \"John\",\n   \"Age\": 23,\n   \"Country\": \"USA\"\n  },\n  {\n   \"Name\": \"Jack\",\n   \"Age\": 25,\n   \"Country\": \"Canada\"\n  },\n  {\n   \"Name\": \"Jane\",\n   \"Age\": 20,\n   \"Country\": \"Australia\"\n  }\n]</s>"
  },
  {
    "text": "<s>[INST] Write a basic JavaScript program to request a user's name and display a greeting message with the user's name. [/INST] let name = prompt(\"What is your name?\");\nconsole.log(`Hello ${name}, how are you doing today?`);</s>"
  },
  {
    "text": "<s>[INST] Modify the code to convert any temperature from Celsius to Fahrenheit\n\ndef CtoF(x):\n    #TODO [/INST] def CtoF(x):\n    F = (9/5 * x) + 32\n    return F</s>"
  },
  {
    "text": "<s>[INST] Write a function that switches the odd elements and the even elements in a list\n\ndef switch_list(mylist):\n    #TODO [/INST] def switch_list(mylist):\n    for i in range(0, len(mylist), 2):\n        temp = mylist[i]\n        mylist[i] = mylist[i + 1]\n        mylist[i + 1] = temp\n    return mylist</s>"
  },
  {
    "text": "<s>[INST] Create a function that join two strings into one [/INST] def join_strings(string1, string2):\n    return string1 + string2</s>"
  },
  {
    "text": "<s>[INST] Given a list of strings, remove all strings in the list\n\nmyList = [\"item1\", \"item2\", \"item3\"] [/INST] def remove_all_strings(myList):\n    myList.clear()\n    return myList</s>"
  },
  {
    "text": "<s>[INST] Update the code to return a different string depending on the value of the variable test\n\nvar test = 3\ndef change(test):\n  #TODO [/INST] def change(test):\n    if test==1:\n        return \"One\"\n    elif test==2:\n        return \"Two\"\n    elif test==3:\n        return \"Three\"\n    else:\n        return \"Not Found\"</s>"
  },
  {
    "text": "<s>[INST] Edit the code to add an if statement that returns the string \"even\" if the value of the variable is even, or the string \"odd\" if the value of the variable is odd.\n\nvar number = 5\ndef even_odd(number):\n  #TODO [/INST] def even_odd(number):\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"</s>"
  },
  {
    "text": "<s>[INST] What type of complexity will the following two sorting algorithms have?\n\nselection sort: O(n^2) \nbubble sort: O(n^2) [/INST] The selection sort algorithm will have a complexity of O(n^2). The bubble sort algorithm will also have a complexity of O(n^2).</s>"
  },
  {
    "text": "<s>[INST] Design and implement a function that takes two lists of integers as parameters and returns the minimum difference between two elements of the two lists.\n\nlist1 = [2, 4, 7, 13] \nlist2 = [3, 8, 9, 14] [/INST] def min_difference(list1, list2):\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    for a in list1:\n        for b in list2:\n            # Update min_diff only if the difference \n            # between a and b is smaller than min_diff \n            min_diff = min(min_diff, abs(a - b))\n    \n    return min_diff</s>"
  },
  {
    "text": "<s>[INST] Find the longest substring with non-repeating characters [/INST] def longest_substring(string):\n    # Initialize the max length and the substring\n    max_length = 0\n    substring = ''\n\n    # Create an empty set to store previously seen characters\n    char_set = set()\n\n    # Iterate over the string\n    for char in string:\n        # If the character hasn't already been seen,\n        if char not in char_set:\n            # add it to the set\n            char_set.add(char)\n            # and extend the substring\n            substring += char\n        else:\n            # if the character has already been seen\n            # check whether the current substring is longer than the current max length\n            if len(substring) > max_length:\n                max_length = len(substring)\n            # Clear the set and the substring\n            char_set.clear()\n            substring = ''\n\n    # Check the last substring\n    if len(substring) > max_length:\n        max_length = len(substring)\n    \n    return max_length</s>"
  },
  {
    "text": "<s>[INST] Create a for loop in Python to iterate over all items in a list.\n\nmy_list = [1, 2, 3, 4, 5] [/INST] for item in my_list:\n    print(item)</s>"
  },
  {
    "text": "<s>[INST] Describe in code what is supervised learning. [/INST] Supervised learning is a type of machine learning that uses labeled data to train algorithms to predict outcomes. It involves using labeled data points as input and output to teach the machine how to predict outcomes. The algorithm is “supervised” because it has a pre-defined set of examples to learn from, making it easier to predict future outcomes.</s>"
  },
  {
    "text": "<s>[INST] Construct a C# program to display Fibonacci series. [/INST] using System;\n\nclass Fibonacci\n{\n    static void Main()\n    {\n        int n1 = 0, n2 = 1, n3, i, number;\n \n        Console.Write(\"Enter the number of elements: \");\n        number = int.Parse(Console.ReadLine());\n \n        Console.Write(n1 + \" \" + n2 + \" \"); \n \n        for (i = 2; i < number; ++i) \n        {\n            n3 = n1 + n2;\n            Console.Write(n3 + \" \");\n            n1 = n2;\n            n2 = n3;\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite this SQL query to select the top three records from a table named 'sales'.\n\nSELECT * FROM sales [/INST] SELECT * FROM sales ORDER BY id DESC LIMIT 3</s>"
  },
  {
    "text": "<s>[INST] Construct a function convert a given number to binary format.\n\nInput Number: 15 [/INST] def convert_to_binary(num):\n    binary = \"{0:b}\".format(num)\n    return binary\n \n# Convert 15 to binary\nbinary_value = convert_to_binary(15)\nprint(binary_value) # prints \"1111\"</s>"
  },
  {
    "text": "<s>[INST] Design a program to partition an array into two subarrays such that the difference between the sum of the two subarrays is minimum.\n\nInput Array: [1, 6, 5, 11, 3] [/INST] def min_partition_array(arr):\n    total = 0\n    for i in arr:\n        total += i\n    sum1, sum2 = 0, total\n    n = len(arr)\n    flag = [[False for i in range(total + 1)] for j in range(n + 1)]\n    flag[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(total + 1):\n            if arr[i - 1] <= j:\n                flag[i][j] = flag[i - 1][j] or flag[i - 1][j - arr[i - 1]]\n            else:\n                flag[i][j] = flag[i - 1][j]\n    for j in range(0, int(total / 2) + 1):\n        if flag[n][j]:\n            sum1 = j\n            sum2 = total - j\n            break\n    return sum1, sum2\n \n# Partition [1, 6, 5, 11, 3]\nsubarr1, subarr2 = min_partition_array([1, 6, 5, 11, 3])\nprint ((subarr1, subarr2)) # prints (8, 9)</s>"
  },
  {
    "text": "<s>[INST] Edit the program such that it prints the elements in a deck of cards in a specific format. [/INST] # Symbols for the different ranks\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\", \"Ace\"]\n# Symbols for the different suits\nsuits = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\n\n# Create a deck of cards as a 2D array\ndeck = []\nfor i in range(len(ranks)):\n    for j in range(len(suits)):\n        deck.append([ranks[i], suits[j]])\n\n# Print the elements in the deck array\nfor i in range(len(deck)):\n    rank = deck[i][0]\n    suit = deck[i][1]\n    print(\"Card %d: %s of %s\" % (i+1, rank, suit))</s>"
  },
  {
    "text": "<s>[INST] Suggest a method to remove the pair of parentheses ( ) and the words inside them from the following python string.\n\nmy_string = 'This is (a sample) string with (parentheses)' [/INST] import re\n\nmy_string = 'This is (a sample) string with (parentheses)'\nop = re.sub(r'\\([^)]*\\)', '', my_string)\nprint(op)</s>"
  },
  {
    "text": "<s>[INST] Create a Python class for a car with two methods. [/INST] class Car:\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n    \n    def start(self):\n        print(\"Starting car\")\n\n    def stop(self):\n        print(\"Stopping car\")</s>"
  },
  {
    "text": "<s>[INST] Given the following HTML code, write a CSS rule to change the font size to 12px.\n\n<p class=”text”>Test</p> [/INST] .text {\n  font-size: 12px;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that combines two tables ``A`` and ``B``.\n\nTable A\nid   name\n1    car\n2    bike\n\nTable B\nid  owner\n1    Sam\n2    John [/INST] SELECT A.id, A.name,B.owner \nFROM A JOIN B\nON A.id = B.id;</s>"
  },
  {
    "text": "<s>[INST] Write a loop in Python to find all numbers below 100 that are divisible by 7. [/INST] for i in range(1,100):\n    if i % 7 == 0:\n        print(i, end=\" \")</s>"
  },
  {
    "text": "<s>[INST] Suggest a suitable type of machine learning algorithm for the following task.\n\nIdentifying the sentiment of a movie review. [/INST] A suitable machine learning algorithm for this task is a supervised learning algorithm, such as a Naive Bayes classifier.</s>"
  },
  {
    "text": "<s>[INST] Create a function to divide two numbers and return an integer result. [/INST] def div(x, y):\n    if y == 0:\n        raise ValueError('Cannot divide by zero')\n    else:\n        return x // y</s>"
  },
  {
    "text": "<s>[INST] Create a function that will take a string as an input and returns the number of upper case letters in it. [/INST] def countUpperCase(string):\n    # Initialize counter variable\n    count = 0\n\n    # Loop through characters in string\n    for c in string:\n        # If character is upper case increment counter\n        if c.isupper():\n            count += 1\n\n    return count</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to count the number of records with a field of \"user_id\" in the table called \"users\". [/INST] SELECT COUNT(*) as count_user_id FROM users;</s>"
  },
  {
    "text": "<s>[INST] Use the reduce() method to sum the values of an array of numbers in JavaScript.\n\nconst numbers = [1, 2, 3, 4, 5]; [/INST] let sum = numbers.reduce((total, num) => total + num);\n\nconsole.log(sum); // 15</s>"
  },
  {
    "text": "<s>[INST] Compile the example program that prints \"Hello, World!\" in C++. [/INST] g++ -o example example.cpp</s>"
  },
  {
    "text": "<s>[INST] List all the table names in a PostgreSQL database. [/INST] SELECT table_name FROM information_schema.tables\nWHERE table_schema NOT IN ('pg_catalog', 'information_schema');</s>"
  },
  {
    "text": "<s>[INST] Select the email addresses the start with the letter \"p\" from the table \"users\". [/INST] SELECT email FROM users\nWHERE email LIKE 'p%';</s>"
  },
  {
    "text": "<s>[INST] Write a function to parse a query string into its components in JavaScript.\n\nquery = \"name=John&age=30\" [/INST] function parseQueryString(query) {\n let components = query.split(\"&\");\n let data = {};\n for (let c of components) {\n let pair = c.split(\"=\");\n data[pair[0]] = pair[1];\n }\n return data;\n}\n\nconsole.log(parseQueryString(query)); // {name: 'John', age: '30'}</s>"
  },
  {
    "text": "<s>[INST] Create a variable and assign a value to it in Java. [/INST] String name = \"John\";</s>"
  },
  {
    "text": "<s>[INST] Create a list containing the even numbers from #1 to #10. [/INST] [2, 4, 6, 8, 10]</s>"
  },
  {
    "text": "<s>[INST] Edit the error in this code.\n\ndef my_function(x, y, z):\n    a = x + 5y - z [/INST] def my_function(x, y, z):\n    a = x + 5*y - z</s>"
  },
  {
    "text": "<s>[INST] Create a web page with HTML/CSS that consists of three circles of different colors and different sizes. [/INST] <html>\n  <head>\n  <style>\n    div {\n        width: 100px;\n        height: 100px;\n        border-radius: 50%;\n    }\n    #circle1 {\n        background-color: red;  \n    }\n    #circle2 {\n        background-color: green;\n        width: 80px;\n        height: 80px;\n    }\n    #circle3 {\n        background-color: blue;\n        width: 60px;\n        height: 60px;\n    }\n    </style>\n  </head>\n  <body>\n    <div id=\"circle1\"></div>\n    <div id=\"circle2\"></div>\n    <div id=\"circle3\"></div>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a script that prints the duplicate elements from a given list of numbers.\n\nmy_list = [1, 2, 3, 2, 3, 4, 5] [/INST] my_list = [1, 2, 3, 2, 3, 4, 5]\n\nduplicated_nums = []\nfor i in my_list:\n    if my_list.count(i) > 1:\n        duplicated_nums.append(i)\n\nprint(list(set(duplicated_nums))) # The output will be [2, 3]</s>"
  },
  {
    "text": "<s>[INST] Change this list of words into a list of strings.\n\nmy_list = [\"apple\", \"banana\", \"orange\"] [/INST] my_list = [\"apple\", \"banana\", \"orange\"]\n\nmy_list = list(map(str, my_list)) # The output will be['apple', 'banana', 'orange']</s>"
  },
  {
    "text": "<s>[INST] What is the sum of all the even numbers in the range 1-100 inclusive? [/INST] 2550 # The output will be 2550</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program that asks the user to enter a number and then prints the sum of the cube of the digits of the number. [/INST] let number = Number(prompt(\"Enter a number:\"));\nlet sum = 0;\n\nwhile (number > 0) {\n    let last_digit = number % 10;\n    sum = sum + last_digit**3;\n    number = (number - last_digit)/10;\n}\n\nconsole.log(sum); # The output will be the sum of the cube of the digits</s>"
  },
  {
    "text": "<s>[INST] Generate an HTML page on the browser with the text \"Hello world.\" [/INST] <html>\n    <head>\n    </head>\n    <body>\n        Hello world.\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] What is the Big O notation for a linear search? [/INST] The Big O notation for a linear search is O(n), where n is the number of elements in the given list.</s>"
  },
  {
    "text": "<s>[INST] Given a binary tree, write a function to serialize and deserialize the tree. [/INST] def serialize(root):\n    if not root:\n        return \"None\"\n \n    serializedTree = root.val\n \n    serializedTree += \",\" + serialize(root.left)\n    serializedTree += \",\" + serialize(root.right)\n    return serializedTree\n \ndef deserialize(serializedTree):\n    q = deque(serializedTree.split(','))\n \n    def recur(q): \n        val = q.popleft()\n        if val == 'None':\n            return None\n        count = TreeNode(val)\n        count.left = recur(q)\n        count.right = recur(q)\n        return count\n \n    return recur(q)</s>"
  },
  {
    "text": "<s>[INST] What are the prerequisites for learning Python? [/INST] The prerequisites for learning Python are basic knowledge of Computer Science concepts, knowledge of some programming language like C/C++, understanding of Object-Oriented Programming, and familiarity with some text editors like Notepad++, Visual Studio Code, etc.</s>"
  },
  {
    "text": "<s>[INST] Create a function which takes in a string and returns a dictionary that counts its character frequency. [/INST] def char_frequency(string): \n    counts = {}\n    for char in string:\n        if counts.get(char) == None: \n            counts[char] = 1\n        else: \n            counts[char] += 1\n    return counts</s>"
  },
  {
    "text": "<s>[INST] How would you flatten a two dimensional list? [/INST] One way to flatten a two dimensional list is to use the itertools.chain() method. This method takes an iterable of iterables and returns a single iterable that contains all the elements of the original iterables.</s>"
  },
  {
    "text": "<s>[INST] Explain why function scope is important in Python. [/INST] Function scope is important in Python because it allows for the scoping of data to the specific environment in which the function was invoked. This is critical for ensuring that code runs correctly and that variables are isolated to the environment in which the associated function was called. Scoping also helps promote the common programming practice of modularity and encapsulation, as it allows you to create \"black-boxes\" that separate the internal implementation of a function from the external environment. Scoping also helps to ensure that only the variables and data which are intended to be used within a function are actually used within it, as any variables which are out of scope will be inaccessible.</s>"
  },
  {
    "text": "<s>[INST] What is the most efficient way to search for an element in a list? [/INST] The most efficient way to search for an element in a list is by using a binary search, which is a divide and conquer search algorithm that halves the search space after each iteration. Binary search is generally more efficient than linear search, as it has a time complexity of O(log n).</s>"
  },
  {
    "text": "<s>[INST] What do you need to do to print the element at the index 5 in an array? [/INST] To print the element at the index 5 in an array, you need to use the index accessor brackets, passing the index of the element that needs to be printed as an argument. For example, if the array is named `arr`, you can print the element at index 5 by writing `cout << arr[5]`;.</s>"
  },
  {
    "text": "<s>[INST] Name a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end. [/INST] A doubly-linked list is a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end. It consists of nodes, which contain data and two references (or links) each pointing to the previous and/or next node in the linked list. By traversing the list via these links it is possible to insert and delete elements anywhere in the list in constant time.</s>"
  },
  {
    "text": "<s>[INST] How can a mathematical function be represented in programming? [/INST] A mathematical function can be represented in programming by defining a function that takes in relevant inputs and returns the output of the mathematical function. For example, the Pythagorean theorem can be represented by a function that takes two parameters, the length of the two sides of a right triangle, and returns the length of the hypotenuse of the triangle.</s>"
  },
  {
    "text": "<s>[INST] Explain the effect of calling the following JavaScript function on the list provided.\n\nlist = [4,8,2,7];\nfunction sort_ascending(list) {\n    list.sort(function(a, b){return a-b});\n} [/INST] The effect of calling the given JavaScript function on the list provided is that the list is re-arranged in ascending order. The sort() function sorts the elements in the list in ascending order according to each element's position relative to other elements in the list. The function has been provided a custom sorting function compares the two elements a and b in the list and return a negative, 0, or positive value, depending on whether a is less than, equal to, or greater than b. This is used to determine the order in which the elements are sorted.</s>"
  },
  {
    "text": "<s>[INST] How can you find the maximum element in an array using the reduce() method? [/INST] The reduce() method can be used to find the maximum element in an array by applying a function to each element of the array that checks if the current element is greater than the previously seen maximum. This function can be used as the argument to the reduce() method and it will return the maximum value seen in the array.</s>"
  },
  {
    "text": "<s>[INST] Name a function in Python which can be used to convert a list to a dictionary. [/INST] The function in Python which can be used to convert a list to a dictionary is the dict() function. This function takes in an iterable such as a list as an argument and returns a dictionary with the elements of the iterable as the keys and their index as the values.</s>"
  },
  {
    "text": "<s>[INST] Create a Java class that defines a circle with two double data fields, radius and area. [/INST] public class Circle {\n private double radius;\n private double area;\n\n public Circle(double radius) {\n  this.radius = radius;\n  this.area = Math.PI * Math.pow(this.radius, 2);\n }\n\n public double getRadius() {\n  return this.radius;\n }\n\n public double getArea() {\n  return this.area;\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an API using Django Rest Framework to retrieve data from a PostgreSQL database table. [/INST] import django\nfrom django.contrib.auth.models import User, Group\nfrom django.contrib import admin\nfrom rest_framework import viewsets, routers\nfrom myapp.models import MyModel\n\nclass MyModelViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all().filter(is_active=True)\n    serializer_class = MyModelSerializer\n\nrouter = routers.DefaultRouter()\nrouter.register(r'mymodel', MyModelViewSet)</s>"
  },
  {
    "text": "<s>[INST] Create a web page that prints out the return value of the following function call in the browser.\n\nfunction addTwoNumbers(a,b){\n  return a+b;\n} [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>My Page</title>\n</head>\n<body>\n\n<p>The result of addTwoNumbers(1,2) is <span id=\"result\"></span></p>\n\n<script>\n function addTwoNumbers(a,b){\n  return a+b;\n }\n\n var result = addTwoNumbers(1,2);\n document.getElementById(\"result\").innerHTML = result;\n</script>\n\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Implement a function in Python that makes a copy of a list.\n\nmy_list = [1, 2, 3, 4] [/INST] def copy_list(lst):\n    new_lst = lst[:]\n    return new_lst\n\nmy_list = [1, 2, 3, 4]\nprint(copy_list(my_list))</s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to set the background color to blue for all elements inside the page's body. [/INST] body {\n    background-color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a function in Python that sorts a list in ascending order using Bubble Sort algorithm.\n\nmy_list = [4, 6, 3, 9, 1] [/INST] def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nmy_list = [4, 6, 3, 9, 1]\nprint(bubble_sort(my_list))</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code to add a link to a web page.\n\nLink text: Visit our site\nLink URL: https://www.example.com/ [/INST] <a href=\"https://www.example.com/\">Visit our site</a></s>"
  },
  {
    "text": "<s>[INST] Update a MySQL table to increase the salary of all employees by 10%.\n\nEmployess table contains the following columns:\n- id: Integer\n- name: Text\n- salary: Number [/INST] UPDATE Employees \nSET salary = salary * 1.1;</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in two numbers, a numerator and a denominator, and returns the result of the division expressed as a float.\n\nNumerator = 10, Denominator = 20 [/INST] def float_division(num, denom):\n    return float(num)/denom\n\nprint float_division(Numerator, Denominator)\n\nOutput: 0.5</s>"
  },
  {
    "text": "<s>[INST] Clean up the following function so that there are no redundant parentheses:\n\ndef foo ( ( a ) ,  (b) ):\nreturn a + b [/INST] def foo(a,b):\n    return a + b</s>"
  },
  {
    "text": "<s>[INST] Analyze the following code and tell us what it does.\n\ndef my_function(x):\n     while x > 10:\n        x += 1\n    return x [/INST] The function takes an integer argument and checks if it is greater than 10. If the argument is greater than 10, the function increments the argument by 1. Finally, the function returns the modified argument.</s>"
  },
  {
    "text": "<s>[INST] You need to design a calculator class with methods to perform basic calculations (add, subtract, multiply, divide, etc.). [/INST] class Calculator:\n    def __init__(self):\n        # initializing the calculator\n        pass\n\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b</s>"
  },
  {
    "text": "<s>[INST] Given an array, arrange the elements in order.\n\narr = [3, 7, 2, 1, 5] [/INST] arr.sort()\n\nOutput: arr = [1, 2, 3, 5, 7]</s>"
  },
  {
    "text": "<s>[INST] Create a program to print out all prime numbers below 100. [/INST] # Function to print prime numbers \ndef prime_numbers_below_100(): \n    for num in range(2, 100): \n        prime = True\n        for i in range(2, num//2 + 1): \n            if num % i == 0: \n                prime = False\n                break\n        if prime: \n            print(num, end=\" \") \n  \nprint(\"Prime numbers below 100 are:\") \nprime_numbers_below_100()</s>"
  },
  {
    "text": "<s>[INST] Design a data structure to store an undo history of size k. [/INST] class HistoryDataStruct:\n    def __init__(self, k):\n        self.history_size = k\n        self.history = [] # list of (undo command, state of only that undo command) of size k\n        self.current_state = None # Current state of the data structure\n\n    def save_states(self, state):\n        self.history.append((state, self.current_state))\n\n        if len(self.history) > self.history_size:\n            self.history.pop(0)\n\n        self.current_state = state\n\n    def undo(self):\n        command, prev_state = self.history[-1]\n        self.history.pop(-1)\n        self.current_state = prev_state\n        return command</s>"
  },
  {
    "text": "<s>[INST] Construct a for-loop for calculating the factorial of a given number.\n\nNumber: 5 [/INST] def factorial(x): \n    fact = 1\n\n    for i in range(1,x+1):\n        fact = fact*i\n        \n    return fact\n\nprint(factorial(5))</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to select the names of all people aged 21 years or older.\n\nTable Schema: \ntable_person(p_id int, p_name varchar, p_age int) [/INST] SELECT p_name \nFROM table_person \nWHERE p_age >= 21</s>"
  },
  {
    "text": "<s>[INST] Construct a regular expression for validating that a string only contains the letters a-z and A-Z. [/INST] ^[a-zA-Z]+$</s>"
  },
  {
    "text": "<s>[INST] In JavaScript construct a function to obtain the number of digits in an integer [/INST] function getNumOfDigits(num) {\n    return num.toString().length;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Fibonacci sequence of 5 numbers using Python. [/INST] fib_sequence = [0, 1, 1, 2, 3]</s>"
  },
  {
    "text": "<s>[INST] Create a linear regression model in R from the given datasets.\n\nDatasets: Advertising.csv [/INST] model = lm(sales ~ ., data = Advertising)</s>"
  },
  {
    "text": "<s>[INST] Define a function in Python to print a pattern of right-angled triangles of different sizes [/INST] def rightangle_triangles_pattern(n): \n    pattern = \"\" \n    \n    \n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            pattern = pattern + \" * \"\n        pattern = pattern + \"\\n\"\n  \n   \n    print(pattern) \n    \n    \nrightangle_triangles_pattern(5)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to return the names of workers whose salary is within the top 25% among all workers.\n\nTable Schema: \ntable_workers(id int, name varchar, salary int) [/INST] SELECT name \nFROM table_workers\nWHERE salary >= (SELECT PERCENTILE_DISC(0.25)\n                 WITHIN GROUP (ORDER BY salary) \n                 FROM table_workers)</s>"
  },
  {
    "text": "<s>[INST] Extract the common key words from the given two strings using a Python script.\n\nString 1: This programming language is easy to learn\nString 2: Comparing to other languages, this language is simpler [/INST] common_key_words = [\"language\", \"easy\", \"learn\", \"comparing\", \"other\", \"simpler\"]</s>"
  },
  {
    "text": "<s>[INST] Design a UI layout in HTML and CSS for an About Us page. [/INST] <!DOCTYPE html>\n<html>\n  <head>\n    <title> About Us </title>\n    <style>\n      body {\n        font-family: Arial;\n      }\n\n      .container {\n        width: 90%;\n        margin: auto;\n        padding: 10px;\n      }\n\n      .about-us-header {\n        font-size: 20px;\n      }\n\n      .about-us-content {\n        font-size: 16px;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div class=\"container\">\n      <div class=\"about-us-header\">\n        <h1>About Us</h1>\n      </div>\n  \n      <div class=\"about-us-content\">\n        <p> We are a team of experienced web developers and designers dedicated to providing you with high-quality web services. \n        </p>\n      </div>\n    </div>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Construct a for-loop for finding all prime numbers between 1 and 50 in Python. [/INST] for num in range(1, 51):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)</s>"
  },
  {
    "text": "<s>[INST] Create a switch statement for printing out the day for a given number [/INST] switch (day) { \n    case 1: \n        console.log(\"Monday\"); \n        break; \n    case 2: \n        console.log(\"Tuesday\"); \n        break; \n    case 3:\n        console.log(\"Wednesday\"); \n        break; \n   .....  \n    case 7:\n        console.log(\"Sunday\"); \n        break; \n\n    default: \n        console.log(\"Invalid input\"); \n        break; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to rearrange the characters of each word in a given string.\n\nstring = \"Welcome to the world of Python\" [/INST] def rearrangeWord(string): \n     temp_string = string.split(\" \") \n     rearranged_string = [word[::-1] for word in temp_string] \n     return \" \".join(rearranged_string) \nprint(rearrangeWord(string))</s>"
  },
  {
    "text": "<s>[INST] You need to develop a Java function to get the count of a given character in a given string.\n\nstring = \"Hello World\"\ncharacter = 'l' [/INST] public static int CountChar(String string, char character) \n{ \n    int count = 0; \n    for (int i=0; i<string.length(); i++) \n    { \n        if (string.charAt(i) == character) \n            count++; \n    } \n    return count; \n}</s>"
  },
  {
    "text": "<s>[INST] Develop a script in Perl to sort an array.\n\narr = (11, 12, 4, 15, 6) [/INST] @sorted_arr = sort {$b <=> $a} @arr; \nprint \"@sorted_arr\\n\";</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to insert a new record with values 'name': 'Jack', 'age': 25, 'address': 'New York' into a table named 'Employees'. [/INST] INSERT INTO Employees (name, age, address) VALUES ('Jack', 25, 'NewYork');</s>"
  },
  {
    "text": "<s>[INST] Correct the indentation in the code below.\n\ndef my_function(num):\n    res=num*2\n  print(res) [/INST] def my_function(num):\n    res = num * 2\n    print(res)</s>"
  },
  {
    "text": "<s>[INST] Given a string, remove all consecutive duplicates in the string.\n\nstring = \"aabbccddeeff\" [/INST] # Function to remove all consecutive duplicates in the string\ndef remove_duplicates(string):\n    # Empty string to store the result\n    result = ''\n    \n    # Iterate over the string and keep track of the previous character seen\n    prev = ''\n    for char in string:\n        # If the current character is not the same as the previous, then add it to the result\n        if char != prev:\n            result += char\n        # Change the previous character seen to the current character\n        prev = char\n        \n    # Return the result string\n    return result\n\n# Test the function by printing the string without consecutive duplicates\nprint(remove_duplicates(string))</s>"
  },
  {
    "text": "<s>[INST] Reverse the order of the given array without using inbuilt functions.\n\nnums = [12, 23, 34, 45] [/INST] # Function to reverse the order of the given array \ndef reverse_array(nums):\n    # Variable to store the result \n    result = []\n    \n    # Iterate over the provided array starting from the last element\n    for i in range(len(nums) -1, -1, -1):\n        # Append each number to the result array\n        result.append(nums[i]) \n        \n    # Return the result array\n    return result\n\n# Test the function by printing the array in reverse order\nprint(reverse_array(nums))</s>"
  },
  {
    "text": "<s>[INST] Randomly rearrange the elements of the given array.\n\nnums = [12, 23, 34, 45] [/INST] # Function to randomly rearrange the elements of the given array\nimport random \ndef shuffle_array(nums):\n    # Initialize a result array\n    result = nums.copy()\n    \n    # Iterate over the array\n    for i in range(len(nums)): \n        # Generate a random index between 0 and the current index\n        j = random.randrange(0, i + 1)\n        \n        # Swap elements at the current and random indices\n        result[i], result[j] = result[j], result[i] \n        \n    # Return the result array\n    return result\n\n# Test the function by printing the shuffled array\nprint(shuffle_array(nums))</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the longest substring of given string with length greater than or equal to 2 without repeating letters.\n\nstring = \"abcdexyeffgghh\" [/INST] # Function to find the longest substring of given string with length greater than or equal to 2 without repeating letters\ndef find_longest_substring(string):\n    # Variable to store the starting index of the substring\n    start_index = 0\n    \n    # Hashset to store characters in string\n    visited = set()\n    \n    # Variables to store the length and the result substring\n    length = 0\n    result = \"\"\n    \n    # Iterate over the string\n    for i in range(len(string)):\n        # If the character is already in the hashset, then remove characters until this character from the hashset \n        if string[i] in visited:\n            visited.remove(string[start_index])\n            start_index += 1\n            \n        # Add the current character to the hashset\n        visited.add(string[i])\n        \n        # Update length and result if length is greater than before\n        if length < i - start_index + 1:\n            length = i - start_index + 1\n            result = string[start_index:i+1]\n        \n    # Return the result substring\n    return result\n\n# Test the function\nprint(find_longest_substring(string))</s>"
  },
  {
    "text": "<s>[INST] Generate a random user agent string. [/INST] import random\n\nuser_agents = [\n    'Mozilla/5.0 (Linux; Android 7.0; SM-G935P Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.83 Mobile Safari/537.36',\n    'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2',\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0 Safari/605.1.15',\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'\n]\n\ndef generate_user_agent():\n    return random.choice(user_agents)\n\nif __name__ == '__main__':\n    print(generate_user_agent())</s>"
  },
  {
    "text": "<s>[INST] Convert the Python list below to a nested dictionary of countries and their populations.\n\nList = [[\"United_Kingdom\", 66_000_000],[\"United_States\", 323_000_000]] [/INST] countries = {\n    \"United_Kingdom\": 66_000_000,\n    \"United_States\": 323_000_000\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to replace all the \"A\"s in the string with a \"#\".\n\nsentence = \"Hello WAAorld\" [/INST] def replace_A(sentence):\n     return sentence.replace('A','#')\n\nif __name__ == '__main__':\n print(replace_A(sentence))</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to query the Intenet Movie Database for the release date of the movie \"The Dark Knight\". [/INST] import requests\nimport json\n\nAPI_KEY = 'INSERT_YOUR_API_KEY_HERE'\n\nheaders = {\n 'Accept': 'application/json'\n}\n\ndef query_movie_databse(movie_title):\n    url = 'http://www.omdbapi.com/?t=\"{}\"&apikey={}'.format(movie_title, API_KEY)\n\n    response = requests.get(url, headers=headers)\n    data = json.loads(response.text)\n    return data['Year']\n\nif __name__ == '__main__':\n    print(query_movie_databse('The Dark Knight'))</s>"
  },
  {
    "text": "<s>[INST] Write a code to update the content on the web page with current time and date. [/INST] import datetime\n\ndef update_web_page_time_date():\n    # Get the current time and date\n    current_time = datetime.datetime.now().strftime(\"%H:%M:%S %d-%m-%Y\")\n\n    # Update the content of the web page\n    with open(\"index.html\", \"w\") as fh:\n        fh.write(\"<p>The current time and date is: {}<p>\".format(current_time))\n\nif __name__ == '__main__':\n    update_web_page_time_date()</s>"
  },
  {
    "text": "<s>[INST] Write a code to add two numbers given as input.\n\na = 1\nb = 5 [/INST] def add(a,b):\n    return a + b\n\nif __name__ == '__main__':\n    print(add(a,b))</s>"
  },
  {
    "text": "<s>[INST] Explain the difference between a parameter and an argument in Python. [/INST] A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters. Parameters are specified after the method name, inside the parentheses. They are used to pass values to a method. An argument is the actual value of this variable that gets passed to the method. Arguments are the data you pass into the method's parameters when you call the method. Parameters are like empty vessels that are waiting to be filled as a result of calling the method. Arguments are like the values that are placed inside the vessels. In a nutshell, Parameters are variable in the declaration of function. Arguments are the actual values of these variables that get passed to function.</s>"
  },
  {
    "text": "<s>[INST] Find the first 5 numbers in the Fibonacci sequence. [/INST] The first 5 numbers in the Fibonacci sequence are 0, 1, 1, 2, 3.</s>"
  },
  {
    "text": "<s>[INST] Given a pandas dataframe, identify the columns and rows of the table.\n\nimport pandas as pd \n\ndata = {'fruit': ['apple', 'banana', 'mango'], \n        'price': [2.99, 4.99, 5.99], \n        'quantity': [3, 5, 7]}\n\ndf = pd.DataFrame(data) [/INST] The columns of the table are: fruit, price, and quantity. \nThe rows of the table are: apple, banana, and mango.</s>"
  },
  {
    "text": "<s>[INST] Explain the following Python statement.\n\nsorted_list = sorted(input_list) [/INST] This statement uses the sorted() function to sort the elements in the list 'input_list' in ascending order. The elements in the list will be compared using their default ordering and then sorted accordingly. The sorted list is returned and stored in a new list called 'sorted_list'.</s>"
  },
  {
    "text": "<s>[INST] Given a string of characters, write a function in Python that returns only the uppercase characters.\n\n\"Hello, World!\" [/INST] def get_upper(string):\n  \"\"\"Return only uppercase characters from given string.\"\"\"\n  return ''.join([c for c in string if c.isupper()])</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a sentence and removes all spaces.\n\n\"Hello, World!\" [/INST] def remove_spaces(sentence):\n  \"\"\"Remove all spaces from a given sentence.\"\"\"\n  return sentence.replace(\" \", \"\")</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a string and splits it into a list of words.\n\n\"Hello, World!\" [/INST] def split_string(text):\n  \"\"\"Split a given string into a list of words.\"\"\"\n  return text.split()</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a 2D array and returns the product of all elements in it.\n\n[[1, 2],[3, 4]] [/INST] def product_of_elements(arr):\n  \"\"\"Return product of all elements in a given 2D array.\"\"\"\n  product = 1\n  for row in arr:\n    for ele in row:\n      product *= ele\n  return product</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes two strings and returns a single string with the characters in alternating order.\n\n\"Hello\", \"World!\" [/INST] def alternate_string(str1, str2):\n  \"\"\"Return a string with characters in alternating order from two given strings.\"\"\"\n  result = \"\"\n  for i in range(min(len(str1), len(str2))):\n      result += str1[i] + str2[i]\n  result += str1[i + 1:] + str2[i + 1:]\n  return result</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes an integer and returns a boolean value specifying whether the number is a prime number or not.\n\n9 [/INST] def is_prime(num):\n  \"\"\"Check if a number is a prime number.\"\"\"\n  if num <= 1:\n    return False\n  for i in range(2,num):\n    if num % i == 0:\n      return False\n  return True</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a list of strings and checks whether the list is empty or not.\n\n[\"Hello\", \"World\"] [/INST] def is_list_empty(list_str):\n  \"\"\"Check if a list is empty or not.\"\"\"\n  return len(list_str) == 0</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes a list of strings and checks if they are all the same length.\n\n[\"Hello\", \"World\"] [/INST] def is_all_same_length(list_str):\n  \"\"\"Check if all strings in a list are of same length.\"\"\"\n  return len(set(map(len, list_str))) == 1</s>"
  },
  {
    "text": "<s>[INST] Write a Python class to implement a linked list. [/INST] class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n \n def push(self, data):\n node = Node(data)\n node.next = self.head\n self.head = node\n \n def pop(self):\n data = self.head.data\n self.head = self.head.next\n return data</s>"
  },
  {
    "text": "<s>[INST] Write a function that determines if a given substring is present in a string or not. [/INST] def is_substring_present(string, sub_string):\n for i in range(len(string)):\n if string[i : (i + len(sub_string))] == sub_string:\n return True\n return False</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to return the elements in the reversed order.\n\ndef reverse_list(lst):\n    for i in range(0, len(lst)):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst [/INST] def reverse_list(lst):\n    for i in range(0, len(lst)//2):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst</s>"
  },
  {
    "text": "<s>[INST] What data structure can be used to convert the following list into a dictionary?\n\n[\"apple\", \"pear\", \"mango\", 100, 0.25, False] [/INST] The data structure that can be used to convert the given list into a dictionary is a list of tuples. The tuples will comprise of the key and the value in the dictionary, e.g. (\"apple\", \"pear\"), (100, 0.25), (False, True). This can then be converted into a dictionary by using the dict() constructor.</s>"
  },
  {
    "text": "<s>[INST] Generate a random password with at least 8 characters that contain both upper and lowercase letters and numbers. [/INST] import string\nimport random\n\ndef generate_password():\n    char_set = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.sample(char_set, 8))</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two arguments, a number and a list, and returns the indices in the list that add up the number. [/INST] def two_sum(num, lst):\n    indices = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == num:\n                indices.append([i,j])\n    return indices</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, create a program that finds the longest subarray with a sum of 0. [/INST] def longest_sum_zero(arr):\n    left = 0\n    max_len = 0\n    sum = 0\n    hash_map = dict()\n    for right in range(len(arr)):\n        sum += arr[right]\n        if sum == 0:\n            max_len = max(max_len, right - left + 1)\n        if sum in hash_map:\n            left = max(left, hash_map[sum] + 1)\n            max_len = max(max_len, right - left + 1)\n        hash_map[sum] = right\n\n    return max_len</s>"
  },
  {
    "text": "<s>[INST] Return the index of the value if it is present in the list or -1 if it is not present. [/INST] def search(lst, val):\n    for i in range(len(lst)):\n        if lst[i] == val:\n            return i\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Count the number of characters in a sentence that begin with a consonant. [/INST] def count_consonants(sentence):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for ch in sentence:\n        if ch.lower() in consonants:\n            count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Classify the following word as a noun, verb, adjective or adverb.\n\nQuickly [/INST] Adverb.</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, write a program which partitions the list into two parts, such that the sum of the elements in the first part exceeds the sum of the elements in the second part. [/INST] def partition(lst):\n    left_sum, right_sum = 0, sum(lst)\n    for i in range(len(lst)-1):\n        left_sum += lst[i]\n        right_sum -= lst[i]\n        if left_sum > right_sum:\n            return lst[:i+1], lst[i+1:]\n    return None</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of all numbers in the given array that are multiples of the given number.\n\nnumbers=[2, 4, 6, 8, 10, 12]\nnum=3 [/INST] def sum_multiples(lst, n):\n    return sum([i for i in lst if i % n == 0])</s>"
  },
  {
    "text": "<s>[INST] Design a function which takes a parameter and returns the sum of its cube of its digits [/INST] def sum_of_cube_of_digits(num):\n    sum = 0\n    while (num > 0):\n        digit = num % 10\n        sum += digit**3\n        num //= 10\n    return sum</s>"
  },
  {
    "text": "<s>[INST] How can you sort a list of dictionaries by values of the dictionary in Python? [/INST] def sort_dict_by_values(dict_list):\n    return sorted(dict_list, key=lambda k: k['value'])</s>"
  },
  {
    "text": "<s>[INST] Write code to implement a priority queue in Python. [/INST] class PriorityQueue:\n    def __init__(self):\n        self.queue = []\n \n    # Create the enqueue(data) method to add data inside the queue\n    def enqueue(self, data):\n        self.queue.append(data)\n \n    # Create the dequeue() method to remove data from the queue\n    def dequeue(self):\n        if self.queue:\n            min_item = min(self.queue)\n            self.queue.remove(min_item)\n            return min_item\n        else:\n            return None</s>"
  },
  {
    "text": "<s>[INST] How can you print a string character by character in Python? [/INST] def char_by_char(string):\n    for char in string:\n        print(char)</s>"
  },
  {
    "text": "<s>[INST] Suggest a completion for the following code which will print the sum of all digits in the given number.\n\nnum = 10121\ntotal = 0\nwhile num > 0: [/INST] num = 10121\ntotal = 0\nwhile num > 0:\n    digit = num%10\n    total += digit\n    num //= 10\nprint(total)</s>"
  },
  {
    "text": "<s>[INST] How can you generate a random array of 10 integers between 1 and 100? [/INST] import random\n\ndef generate_random_array():\n    array = []\n    for i in range(10):\n        array.append(random.randint(1,100))\n    return array</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snipplet that append the contents of one array to another array.\n\nlet arr1 = [1,2,3];\nlet arr2 = [4,5,6]; [/INST] let arr1 = [1,2,3];\nlet arr2 = [4,5,6];\narr2.push(...arr1);\n// arr2 is [4,5,6,1,2,3]</s>"
  },
  {
    "text": "<s>[INST] Write a code snipplet that computes the sum of numbers between 1 and 100. [/INST] let sum = 0;\nfor(let i = 1; i <= 100; i++) {\n  sum += i;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to group the results of a SELECT statement according to the value of a specific column.\n\nSELECT name, age FROM employees; [/INST] SELECT name, age\nFROM employees\nGROUP BY age;</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to convert a dictionary into a list of tuples.\n\ndictionary = {\n  \"name\": \"John\",\n  \"age\": 36\n} [/INST] def dict_to_tuple(dictionary): \n  return [(key, value) for key, value in dictionary.items()]</s>"
  },
  {
    "text": "<s>[INST] Explain what an object-oriented programming language is. [/INST] Object-oriented programming (OOP) is a programming language model in which programs are organized around objects rather than actions and data rather than logic. OOP languages allows the programmer to think in terms of classes and objects which makes it easier to maintain and modify existing code. In an OOP language, objects are collections of related variables and methods, and classes are templates of objects. Classes allow objects of the same type to be created with the same properties, while still allowing flexibility as new objects can be created with different properties.</s>"
  },
  {
    "text": "<s>[INST] Write an R script that performs linear regression to predict a response variable. [/INST] # load the data\ndata <- read.csv(\"data.csv\")\n\n# fit the model\nmodel <- lm(formula = response ~ predictor, data = data)\n\n# view the results\nsummary(model)</s>"
  },
  {
    "text": "<s>[INST] Identify and explain the purpose of a Turing Test. [/INST] A Turing Test is a measurement of a machine's ability to exhibit intelligent behaviour equivalent to, or indistinguishable from, that of a human. The test was proposed by Alan Turing in 1950 as a way of determining whether a machine is capable of intelligent thought. The Turing Test consists of a human evaluator interacting with both a human subject and a machine by asking questions and judging the responses. If the evaluator cannot determine the difference between the machine and the human subject, then the machine has passed the test. The purpose of the Turing Test is to provide a reliable method for determining if a machine is able to think and act intelligently.</s>"
  },
  {
    "text": "<s>[INST] Convert the following English sentence into a Python function definition: \"Prints a string on the screen\". [/INST] def printString(string):\n  print(string)</s>"
  },
  {
    "text": "<s>[INST] Describe how the for loop works in Python? [/INST] A for loop in Python is a type of looping construct that is used to iterate over a sequence of objects including strings, lists, tuples, dictionaries, and sets. A for loop has three components, the iterator (variable), sequence, and statements. With each iteration, the iterator is assigned the value of the next element in the sequence and the statements are executed. When all the elements in the sequence have been exhausted, the loop terminates.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to generate a random strong password with length 8-10. [/INST] function generatePassword(){\n  var charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#%^&*()_+-=\";\n  var passwordLength = Math.floor(Math.random() * (10 - 8 + 1)) + 8;\n  var password = '';\n  \n  for(let i = 0; i < passwordLength; i++){\n    var randomChar = charSet[Math.floor(Math.random() * charSet.length)];\n    password += randomChar;\n  }\n  \n  return password;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C program to implement a simple calculator that adds two numbers. [/INST] #include <stdio.h>\n \nint main()\n{\n    double x, y, sum;\n    printf(\"Enter two numbers: \");\n    scanf(\"%lf%lf\", &x, &y);\n \n    sum = x + y;\n \n    printf(\"Sum of the entered numbers: %lf\", sum);\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Explain how Python List Comprehensions work? [/INST] Python List Comprehensions allow users to quickly build a list from another list or an iterable. List Comprehensions use a syntax that consists of an expression followed by a ‘for’ statement and then zero or more ‘for’ or ‘if’ clauses. The expression is evaluated once for each item in the list. List Comprehensions can be used to perform filtering and mapping operations over the lists, or any other iterable. The output is a new list that can be formed from items in the original list, or any of its combinations.</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to display the name and total salary of employees who earn more than the average salary of department 10.\n\nTable \"Employees\":\n\nName   | Department | Salary \n------ | ---------- | ------ \nJohn   | 10         | 20000  \nDavid  | 10         | 32000  \nAnne   | 10         | 15000  \nJane   | 11         | 26000 [/INST] SELECT Name, SUM(Salary) AS Total_Salary\nFROM Employees\nWHERE Department = 10 AND Salary > ( SELECT AVG(Salary)\n  FROM Employees\n  WHERE Department = 10\n)\nGROUP BY Name;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the mean and median of all salaries of employees.\n\nTable \"Employees\": \n\nName | Salary \n---- | ------ \nJohn | 20000  \nDavid| 32000  \nAnne | 15000  \nJane | 26000 [/INST] SELECT AVG(Salary) as Mean,\nPERCENTILE_DISC(0.5) WITHIN GROUP(ORDER BY Salary) OVER() as Median\nFROM Employees</s>"
  },
  {
    "text": "<s>[INST] Write a script to delete elements that appear twice or more from a list.\n\n[3,6,3,7,2,6] [/INST] def delete_duplicate(lst):\n    new_lst = [] \n    \n    for i in lst: \n        if i not in new_lst: \n            new_lst.append(i) \n  \n    return new_lst\n\nlst = [3,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nprint(new_lst)</s>"
  },
  {
    "text": "<s>[INST] Name a data structure to store a large set of strings efficiently. [/INST] The best data structure to store a large set of strings efficiently is a hash table. A hash table uses a hash function to map a set of strings to unique indices in an array, which allows for constant time lookups and operations.</s>"
  },
  {
    "text": "<s>[INST] How can a string be encoded in base64? [/INST] A string can be encoded in base64 by using the string's bytes as input to the base64 encoding algorithm. The base64 encoding algorithm works by taking 3 bytes of input data and converting them into 4 bytes of output data. Each of these 4 bytes represent 6 bits of the original string, which is represented by 4 characters in the base64 string.</s>"
  },
  {
    "text": "<s>[INST] Generate the following string from a list.\n\n[1, 2, 3, 4] [/INST] def generate_string(lst):\n    s = \"\"\n    for i in lst:\n        s+=str(i)\n    return s\n\nlst = [1, 2, 3, 4]\ns = generate_string(lst)\nprint(s)</s>"
  },
  {
    "text": "<s>[INST] Construct a loop to display each character in a string one at a time.\n\nHello World! [/INST] def display_char(s):\n    for char in s:\n        print(char)\n\ns = \"Hello World!\"\ndisplay_char(s)</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to check for missing numbers in an array of size n. [/INST] def find_missing(nums):\n    count = 1\n    for num in nums:\n        if not count in nums:\n            return count\n        count += 1\n    return None</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to find the longest substring of a given string with distinct characters.\n\nGiven string = \"abcabcabc\" [/INST] def find_longest_substring(string):\n    max_length = 0\n    for i in range(len(string)):\n        seen_chars = set()\n        length = 0\n        for j in range(i, len(string)):\n            if string[j] not in seen_chars:\n                seen_chars.add(string[j])\n                length += 1\n            else:\n                break\n        max_length = max(max_length, length)\n    return max_length</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program that finds the most common element in the given input array.\n\nGiven array = [2, 4, 8, 3, 4, 4, 6, 2, 4, 9] [/INST] #include <bits/stdc++.h>\n \nusing namespace std;\n \nint most_common(int arr[], int n) \n{ \n   unordered_map<int, int> hash; \n \n   // store the counts of all elements \n   for (int i = 0; i < n; i++) \n     hash[arr[i]]++; \n \n   // traverse through the map and \n   // find out the maximum frequency \n   int max = 0, res = -1; \n   for (auto i : hash) { \n     if (max < i.second) { \n       res = i.first; \n       max = i.second; \n     } \n   } \n \n   return res; \n}  \n \nint main() \n{ \n   int arr[] = { 2, 4, 8, 3, 4, 4, 6, 2, 4, 9 }; \n   int n = sizeof(arr) / sizeof(arr[0]); \n   cout << most_common(arr, n) << endl; \n   return 0;   \n}</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression to match a valid phone number (ex. 123-456-7890). [/INST] \\d{3}-\\d{3}-\\d{4}</s>"
  },
  {
    "text": "<s>[INST] Design a function for creating an array with n elements and each element with the value of 0. [/INST] def createArray(n): \n    return [0] * n</s>"
  },
  {
    "text": "<s>[INST] What is the maximum depth of a binary tree of size n? [/INST] The maximum depth of a binary tree of size n is log2(n).</s>"
  },
  {
    "text": "<s>[INST] Convert a given array of numbers into a square matrix.\n\nGiven array = [1, 2, 3, 4] [/INST] def arrayToMatrix(array):\n    n = int(len(array)**0.5)\n    matrix = []\n \n    for i in range(n):\n        matrix.append(array[i*n:(i+1)*n])\n \n    return matrix</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet that prints out the number of times each character appears in a given string.\n\nGiven string = \"welcome\" [/INST] def char_frequency(string):\n    freq = {}\n    for c in string:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for c, count in freq.items():\n        print('{0} : {1}'.format(c, count))</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm that prints all the permutations of a given string. [/INST] def generate_permutations(string):\n    if len(string) == 1:\n        return [string]\n \n    all_perms = []\n    for i, c in enumerate(string):\n        other_chars = string[:i] + string[i+1:]\n        other_perms = generate_permutations(other_chars)\n        for perm in other_perms:\n            all_perms.append(c + perm)\n    return all_perms</s>"
  },
  {
    "text": "<s>[INST] Write a Java program for binary search. [/INST] public static int binarySearch(int[] arr, int target) { \n    int left = 0; \n    int right = arr.length - 1; \n    while (left <= right) { \n        int mid = left + (right - left)/2; \n        if (arr[mid] == target) { \n            return mid; \n        } else if (arr[mid] < target) { \n            left = mid + 1; \n        } else { \n            right = mid - 1; \n        } \n    } \n    return -1; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a web page with the headline \"Welcome to Python programming\". [/INST] <!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome to Python Programming</title>\n</head>\n<body>\n    <h1>Welcome to Python Programming</h1>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a list as a parameter and returns only the unique elements in the given list.\n\n[2, 4, 5, 2, 4, 8] [/INST] def get_unique_elements(lst):\n    return list(set(lst))\n\nunique_list = get_unique_elements([2, 4, 5, 2, 4, 8])\nprint(unique_list)   # output the list with only unique elements</s>"
  },
  {
    "text": "<s>[INST] Create a variable that contains a tuple of integers. [/INST] my_tuple = (1, 2, 3, 4, 5)</s>"
  },
  {
    "text": "<s>[INST] Create a matrix of zeros with shape 4x3 using the NumPy library. [/INST] import numpy as np\n\nmatrix = np.zeros((4,3))\nprint(matrix)   # Output the matrix of zeros</s>"
  },
  {
    "text": "<s>[INST] Write a code to send a message \"Hello World!\" using the Twilio API. [/INST] from twilio.rest import Client\n\n# Your Account SID from twilio.com/console\naccount_sid = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n# Your Auth Token from twilio.com/console\nauth_token  = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n\nclient = Client(account_sid, auth_token)\n\nmessage = client.messages.create(\n    to=\"+123456789\", \n    from_=\"+0987654321\",\n    body=\"Hello World!\")\n\nprint(message.sid)   # Output the message id</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop that prints out every third element of a given array.\n\nArray: [1, 2, 3, 4, 5, 6, 7] [/INST] for i in range(0, len(array), 3):\n   print(array[i])</s>"
  },
  {
    "text": "<s>[INST] Develop a function to calculate the total amount of the order for an online store.\n\nProductA: 15\nProductB: 10\nPriceForProductA: 5\nPriceForProductB: 10 [/INST] def calculate_total_amount(products, prices):\n total_amount = 0 \n for i in range(len(products)):\n total_amount = total_amount + (products[i] * prices[i])\n return total_amount</s>"
  },
  {
    "text": "<s>[INST] Calculate the roots of a quadratic equation given its coefficients.\n\nCoefficients:  4, 3, 1 [/INST] # Calculate the roots of the given equation\ndef quadratic_roots(a, b, c):\n   # Calculate the discriminant\n   discriminant = b**2 - 4*a*c\n \n   # Calculate root1 and root2\n   root1 = (-b + discriminant**0.5)/(2*a)\n   root2 = (-b - discriminant**0.5)/(2*a)\n   \n   return root1, root2</s>"
  },
  {
    "text": "<s>[INST] Convert the following floating-point number to its binary representation.\n\nNumber: 12.25 [/INST] 1100.01</s>"
  },
  {
    "text": "<s>[INST] Create a Python dictionary to store employee details.\n\nName: John Doe\nAge: 25\nRole: Sales Manager [/INST] employee = {\n 'name': 'John Doe',\n 'age': 25,\n 'role': 'Sales Manager',\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page to display the employee details.\n\nEmployee Name: Oliver Smith\nAge: 35\nRole: Marketing Executive [/INST] <html> \n<head> \n<title>Employee Details</title> \n</head> \n<body> \n<h1>Employee Details</h1> \n<p>Name: Oliver Smith</p> \n<p>Age: 35</p> \n<p>Role: Marketing Executive</p> \n</body> \n</html></s>"
  },
  {
    "text": "<s>[INST] Create a Hashtable in Java to store a list of key-value pair. [/INST] import java.util.Hashtable;\n\npublic class HashtableExample {\n     public static void main(String args[]) {\n         Hashtable<Integer, String> ht = new Hashtable<Integer, String>();\n \n         ht.put(1, \"Code\");\n         ht.put(2, \"Learn\");\n         ht.put(3, \"Project\");\n         ht.put(4, \"University\");\n \n         System.out.println(\"Hashtable: \" + ht); \n     }\n}</s>"
  },
  {
    "text": "<s>[INST] Using JavaScript, create an algorithm to check if an array of numbers is sorted in ascending order. [/INST] function isSortedAscending(arr) {\n    for (let i = 0; i < (arr.length - 1); i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a PHP program to convert a string to a URL safe string. [/INST] <?php\n   \nfunction toUrlSafeString($str) {\n    $str = strtolower($str);\n    $str = preg_replace('/\\s/', '-', $str);\n    $str = preg_replace('/\\W/', '', $str);\n    \n    return $str;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to print all numbers between a given range in the format shown below\n\nStart = 1; End = 8; [/INST] for i in range(1, 9):\n    print(i, end=' ')</s>"
  },
  {
    "text": "<s>[INST] Create a function to perform insertion sorting\n\nlist = [5, 3, 8, 7, 1] [/INST] def insertion_sort(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n    return list</s>"
  },
  {
    "text": "<s>[INST] Write a code to compute the XOR of two bits\n\nA = 1; B = 0; [/INST] def xor(A, B):\n    if (A == B): \n        return 0  \n    else: \n        return 1</s>"
  },
  {
    "text": "<s>[INST] Write a function to implement the sequential search algorithm\n\narr = [8, 2, 5, 6, 9] [/INST] def sequential_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Rewrite this program to use an embedded loop instead of recursion:\n\ndef fibonacci(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return fibonacci(num-1) + fibonacci(num-2) [/INST] def fibonacci(num):\n    first = 0\n    second = 1\n    for i in range(num):\n        temp = first\n        first = second\n        second = temp + second\n    return first</s>"
  },
  {
    "text": "<s>[INST] You are given a string and you want to sort all characters in the string alphabetically. [/INST] sorted_string = ''.join(sorted(string))</s>"
  },
  {
    "text": "<s>[INST] Create a SQL table with the following schema: id (integer), name (string), city (string). [/INST] CREATE TABLE myTable (\n  id INTEGER, \n  name VARCHAR(255), \n  city VARCHAR(255)\n);</s>"
  },
  {
    "text": "<s>[INST] You are given a string and you want to count the number of words in it. [/INST] def word_count(str): \n    return len(str.split(' '))</s>"
  },
  {
    "text": "<s>[INST] Given a matrix of size NxM, make a code that prints the transpose of the matrix.\n\n[[12,7],[4,5],[3,8]] [/INST] [[12,4,3],[7,5,8]]</s>"
  },
  {
    "text": "<s>[INST] Construct a code to detect if a character is an uppercase letter or not. [/INST] def is_uppercase(char): \n   if (char >= 'A' and char <= 'Z'): \n     return True\n   else: \n     return False</s>"
  },
  {
    "text": "<s>[INST] Use regular expression to match two strings. [/INST] import re \n  \ndef match_strings(string1, string2): \n   \n    if re.search(string1, string2): \n        print(\"Match Found\") \n    else: \n        print('No Match Found')</s>"
  },
  {
    "text": "<s>[INST] Generate a code to create a Pyramid of stars with the given height. [/INST] def print_pyramid(height):\n    for row in range(1, height + 1):\n        for col in range(1, row + 1):\n            print('*', end=\" \")\n        print('\\n')</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm with the input that calculates the greatest common factor of two numbers.\n\n8, 32 [/INST] def greatestCommonFactor(num1, num2):\n    while num2 != 0:\n        temp = num2\n        num2 = num1 % num2\n        num1 = temp\n \n    return num1\n \ngcf = greatestCommonFactor(8, 32) \nprint(gcf) \n \n# Output: 8</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL command that selects a row from a table by its ID.\n\ntable name: Employee [/INST] SELECT * FROM Employee WHERE id = '5';</s>"
  },
  {
    "text": "<s>[INST] Override the equals method for a Java class named Point.\n\nclass Point {\n    int x;\n    int y;\n} [/INST] public class Point {\n    int x;\n    int y;\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Point) {\n            Point other = (Point) obj;\n            return x == other.x && y == other.y;\n        }\n        return false;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Provide the big-O complexity for a binary search Algorithm. [/INST] The big-O complexity of a binary search Algorithm is O(log n). This is because the algorithm halves the input size with every iteration, so it only takes log n iterations to finish.</s>"
  },
  {
    "text": "<s>[INST] Write a function to print the value at a given index in a given Array.\n\ntestArray = [1, 2, 3, 4, 5]\nindex = 2 [/INST] def printIndex(testArray, index):\n    print(testArray[index])\n\ntestArray = [1, 2, 3, 4, 5]\nindex = 2\n\nprintIndex(testArray, index)\n# Output: 3</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to get the sum of all the purchased item from a given table.\n\ntable name: Purchases [/INST] SELECT SUM(amount) FROM Purchases;</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes two numbers and swaps the values of the two numbers. [/INST] def swap(x, y): \n    temp = x \n    x = y \n    y = temp \n  \nx = 10\ny = 5\n\nswap(x, y) \n\nprint(\"x =\", x, \"y =\", y)\n\n# Output: x = 5 y = 10</s>"
  },
  {
    "text": "<s>[INST] Write a MIPS code that adds two numbers and stores the result in a given memory address.\n\nnum1 = 10\nnum2 = 15\nmemory address = $t0 [/INST] addi $t1, $zero, 10 #store num1 in $t1\naddi $t2, $zero, 15 #store num2 in $t2\n\nadd $t0, $t1, $t2 #add num1 and num2 and store result in $t0\nsw $t0, ($memory address) #store result in specified memory address</s>"
  },
  {
    "text": "<s>[INST] Write an SQL Query to print a list of all employees who have a higher salary than their managers. [/INST] SELECT e1.name AS Employee, e2.name AS Manager, e1.salary AS Employee_Salary, e2.salary AS Manager_Salary\nFROM employee e1\nJOIN employee e2 ON e1.managerid = e2.employeeid\nWHERE e1.salary > e2.salary;</s>"
  },
  {
    "text": "<s>[INST] Write a PHP function to delete a record from a database table.\n\nTable Name: details \nKey: user_id \nvalue : 10 [/INST] // Delete user with user_id 10 from table details\nfunction deleteRecord($table, $key, $value) {\n    $query = \"DELETE FROM $table WHERE $key = ?\";\n    $conn = connectToDatabase();\n    if($conn->prepare($query)->execute([$value])) {\n        return true;\n    } else {\n        return false;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a CSS style to give a border of 3 pixels to the HTML element. [/INST] html {\n    border: 3px solid black;\n}</s>"
  },
  {
    "text": "<s>[INST] Write Swift code to get the sum of all the numbers from 1 to 1000. [/INST] func sumUpToNumber(number: Int) -> Int {\n  var sum = 0\n\n  for i in 1...number {\n    sum += i\n  }\n\n  return sum\n}\n\nlet sum = sumUpToNumber(number: 1000)\nprint(sum)</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby script to delete duplicates from an array.\n\n[1,2,2,3,3,4,5] [/INST] def delete_duplicates(arr)\n  arr.uniq\nend\n \narr = [1,2,2,3,3,4,5]\nnew_arr = delete_duplicates(arr)\np new_arr # => [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Build a web scraper that stores the main titles and content of article links from a given website.\n\nWebsite: https://www.techvoice.org/ [/INST] \"\"\"\nBuild a web scraper to store titles and content of article links from a given website\n\"\"\"\n\nimport requests \nfrom bs4 import BeautifulSoup \n\ndef scrape_website(url):\n    response = requests.get(url)\n    data = response.text\n    soup = BeautifulSoup(data)\n\n    titles = []\n    contents = []\n    for article in soup.find_all(\"article\"):\n        title = article.find(\"h2\").text\n        titles.append(title)\n        content = article.find(\"p\").text\n        contents.append(content)\n\n    return {'titles': titles, 'contents': contents}\n    \nif __name__ == '__main__':\n    result = scrape_website(\"https://www.techvoice.org/\")\n    print(result)</s>"
  },
  {
    "text": "<s>[INST] Create the following function that parses a valid IP address from a string and returns the address string without delimiters and periods.\n\nString = ‘192.168.137.8’ [/INST] def parse_ip_address(ip_string):\n    ip_list = ip_string.split(\".\")\n    ip_str = \"\".join(ip_list)\n    return ip_str\n\nif __name__ == '__main__':\n    ip_str = parse_ip_address(\"192.168.137.8\")\n    print(ip_str)</s>"
  },
  {
    "text": "<s>[INST] Create a function to format a given phone number “(123) 456-7890” and output a string with canonical format of “+11234567890”.\n\nPhone number: (123) 456-7890 [/INST] def format_phone_number(number):\n    parts = number.split('-')\n    digits = []\n    for part in parts:\n        for char in part:\n            if char.isdigit():\n                digits.append(char)\n    return '+1' + ''.join(digits)\n\nif __name__ == '__main__':\n    number = '(123) 456-7890'\n    canon_number = format_phone_number(number)\n    print(canon_number)</s>"
  },
  {
    "text": "<s>[INST] Produce a SQL command that retrieves the maximum and minimum values of an attribute from a table.\n\nTable name = 'mytable'\nAttribute name = 'myattribute' [/INST] SELECT MAX(myattribute), MIN(myattribute) FROM mytable</s>"
  },
  {
    "text": "<s>[INST] Create two sets and find the intersection between them.\n\nSet A: [1, 2, 3, 4]\nSet B: [2, 4, 6, 8] [/INST] set_a = set([1, 2, 3, 4])\nset_b = set([2, 4, 6, 8])\n\nintersection = set_a.intersection(set_b)\n# intersection is the set {2, 4}</s>"
  },
  {
    "text": "<s>[INST] Given a single linked list, reverse it in place.\n\nHead -> 1 -> 2 -> 3 -> 4 -> 5 -> None [/INST] Node* reverse(Node* head) \n{ \n    Node* current = head; \n    Node* prev = NULL; \n    Node* next = NULL; \n    if (current == NULL) \n        return NULL; \n    while (current != NULL) { \n        next = current->next; \n        current->next = prev; \n        prev = current; \n        current = next; \n    } \n    head = prev; \n    return head; \n}</s>"
  },
  {
    "text": "<s>[INST] Using Pandas, count how many rows have a value of \"United States\" in the \"Country\" column.\n\nData: \n\nCountry\tState\nUnited States\tNew York\nCanada\tOntario\nUnited Kingdom\tLondon\nUnited States\tCalifornia [/INST] import pandas as pd\n\ndf = pd.DataFrame({'Country':['United States', 'Canada', 'United Kingdom', 'United States'],\n                   'State':['New York', 'Ontario', 'London', 'California']})\n\ncount = df[df['Country'] == 'United States'].shape[0]\nprint(count)\n# Output: 2</s>"
  },
  {
    "text": "<s>[INST] Extract a list of all the keys from a given dictionary.\n\ndict = {'Name': 'John', 'Age': 10, 'Gender': 'Male'} [/INST] key_list = list(dict.keys())\n# Output: ['Name', 'Age', 'Gender']</s>"
  },
  {
    "text": "<s>[INST] Using the requests library, post a JSON object to a specified URL.\n\nURL: http://example.com\nJSON object: {\"Name\": \"John\", \"Gender\": \"Male\", \"Age\": 10} [/INST] import requests\n\nurl = 'http://example.com'\ndata = {\"Name\": \"John\", \"Gender\": \"Male\", \"Age\": 10}\n\nrequests.post(url, data=data)</s>"
  },
  {
    "text": "<s>[INST] Use the requests library to make an API call and return the response as JSON\n\nurl = http://example.com [/INST] import requests\n\nurl = 'http://example.com'\nresponse = requests.get(url)\ndata = response.json()</s>"
  },
  {
    "text": "<s>[INST] Transform the following function definition so it can be used for all type of data\n\ndef calculate(int a, int b): [/INST] def calculate(a, b):\n    \"\"\"This function can be used to calculate the result of two parameters\n    regardless of their type (int, float, etc)\"\"\"\n    return a + b</s>"
  },
  {
    "text": "<s>[INST] Capitalize all the words in a string\n\nhello world [/INST] Hello World</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function which will return the longest palindrome string from a given strinb\n\n\"abacdaaadccb\" [/INST] function longestPalindrome(str) {\n  let longest = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let temp = helper(str, i, i);\n    if (temp.length > longest.length) {\n      longest = temp;\n    }\n    temp = helper(str, i, i + 1);\n    if (temp.length > longest.length) {\n      longest = temp;\n    }\n  }\n  return longest;\n}\n\nfunction helper(str, left, right) {\n  while (left >= 0 && right < str.length && str[left] === str[right]) {\n    left--;\n    right++;\n  }\n  return str.substring(left + 1, right);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a new dictionary using the values of two given dictionaries\n\nd1 = {1:10, 2:20}\nd2 = {3:30, 4:40} [/INST] d3 = {**d1, **d2}</s>"
  },
  {
    "text": "<s>[INST] Convert the given Python code to Java\n\ndef foo(a, b):\n    return a*b [/INST] public int foo(int a, int b) {\n    return a * b;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a data set using RandomSample() [/INST] from random import Random\n\ndef RandomSample(number_of_samples):\n    sample = []\n    random_generator = Random()\n    for i in range(number_of_samples):\n        sample.append(random_generator.random())\n    return sample</s>"
  },
  {
    "text": "<s>[INST] Rearrange the code to print the hierarchy of students in a Python class\n\nstudents = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n] [/INST] students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]\n\nteachers = []\nstudents_list = []\n\nfor student in students:\n  if student[\"role\"] == \"teacher\":\n    teachers.append(student)\n  else:\n    students_list.append(student)\n\nprint(\"Teachers:\")\nfor teacher in teachers:\n  print(teacher[\"name\"])\n\nprint(\"Students:\")\nfor student in students_list:\n  print(student[\"name\"])</s>"
  },
  {
    "text": "<s>[INST] Reverse the order of the following list: [\"Apple\", \"Banana\", \"Cherry\"]\n\n[\"Apple\", \"Banana\", \"Cherry\"] [/INST] [\"Cherry\", \"Banana\", \"Apple\"]</s>"
  },
  {
    "text": "<s>[INST] Find the sum of all the prime numbers between 45 and 65. [/INST] The sum of all the prime numbers between 45 and 65 is 458.</s>"
  },
  {
    "text": "<s>[INST] Generate an array of all the multiples of 5 that are less than 40. [/INST] [5, 10, 15, 20, 25, 30, 35]</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression to search for the pattern \"carrot\" in a given string. [/INST] The regular expression to search for \"carrot\" in a given string is /carrot/.</s>"
  },
  {
    "text": "<s>[INST] Create a program that takes two strings as arguments and returns true if the two strings contain the same characters. [/INST] def same_characters(str1, str2):\n    return sorted(str1) == sorted(str2)</s>"
  },
  {
    "text": "<s>[INST] Using regex, search for all occurrences of the substring \"cat\" in the following string:\n\nThe dog ran away, but the cat stayed [/INST] The regular expression to search for all occurrences of the substring \"cat\" in the string is /\\bcat\\b/g.</s>"
  },
  {
    "text": "<s>[INST] Which basic data type is represented by the following JSON?\n\n{\"name\": \"John\", \"age\": 30} [/INST] The JSON given represents a basic object data type.</s>"
  },
  {
    "text": "<s>[INST] Create a script that takes an input variable k, and prints out \"k is true\" if k is true, and \"k is false\" if k is false.\n\nk = 2 < 5 [/INST] if [ $k = true ]; then\n  echo \"k is true\"\nelse\n  echo \"k is false\"\nfi</s>"
  },
  {
    "text": "<s>[INST] Write a method to return the sum of two integers a and b.\n\na = 2, b = 8. [/INST] int add(int a, int b) {\n    return a + b;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of integers in Swift with length 5​. [/INST] var array = [Int](repeatElement(0, count: 5))</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that prints the names of all the people with a salary greater than $60000.\n\nSELECT name FROM people WHERE salary > 60000 [/INST] SELECT name FROM People WHERE salary > 60000;</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to print out \"The result is 30\".\n\nint a = 10\nint b = 20\nConsole.WriteLine(\"The result is \" + a + b) [/INST] int a = 10;\nint b = 20;\nConsole.WriteLine(\"The result is \" + (a + b).ToString());</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query that returns the names of all the people born in the year 1990.\n\nSELECT name FROM People WHERE yearOfBirth = 1990 [/INST] SELECT name FROM People WHERE yearOfBirth = 1990;</s>"
  },
  {
    "text": "<s>[INST] Calculate the value of 3^4 using Java code. [/INST] int result = (int)Math.pow(3, 4);</s>"
  },
  {
    "text": "<s>[INST] Create a class to store the number, its square and its cube. [/INST] class Number:\n  def __init__(self, number):\n    self.number = number\n    self.square = number * number\n    self.cube = number * number * number</s>"
  },
  {
    "text": "<s>[INST] Make a program that takes in a non-empty string and finds its longest palindrome. [/INST] def longest_palindrome(text):\n  longest_palindrome = \"\"\n  for i in range(len(text)):\n    for j in range(len(text), i, -1):\n      substring = text[i:j]\n      if substring == substring[::-1] and len(substring) > len(longest_palindrome):\n        longest_palindrome = substring\n  return longest_palindrome</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to produce a Fibonacci number. [/INST] def fibonacci(n):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)</s>"
  },
  {
    "text": "<s>[INST] Create a method to solve a linear equation ax + b = 0.\n\na = 2, b = 4 [/INST] def solve_linear_equation(a, b):\n  return -b/a</s>"
  },
  {
    "text": "<s>[INST] Parse a given string to create a tree data structure.\n\nexpr = \"a + b * c\" [/INST] def parse_string(expr):\n  root = Node(expr[0])\n  current_node = root\n  \n  for i in range(1, len(expr), 2):\n    node = Node(expr[i])\n    current_node.right = node\n    node.left = current_node\n    current_node = node\n  \n  return root\n\nclass Node:\n  def __init__(self, data):\n    self.data = data\n    self.left = None\n    self.right = None</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to sort of given list of strings in alphabetical order.\n\nlist_of_strings = [\"apple\", \"banana\", \"cherry\", \"dog\"] [/INST] def sort_words(words):\n    return sorted(words)\n\nlist_of_strings_sorted = sort_words(list_of_strings)\nprint(list_of_strings_sorted)</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to create a new list which contains all even numbers from the given list.\n\nlist_of_numbers = [1, 2, 3, 4, 5, 6] [/INST] def get_even_numbers(numbers):\n    even_numbers = []\n    for n in numbers:\n        if n % 2 == 0:\n            even_numbers.append(n)\n    return even_numbers\n\neven_numbers = get_even_numbers(list_of_numbers)\nprint(even_numbers) # prints [2, 4, 6]</s>"
  },
  {
    "text": "<s>[INST] Create a Python function to remove all elements of the given list that are equal to the given value.\n\nlist_of_numbers = [1, 2, 3, 4, 2, 3] \nvalue = 2 [/INST] def remove_val(numbers, val):\n    result = []\n    for n in numbers:\n        if n != val:\n            result.append(n)\n    return result\n\nlist_without_2 = remove_val(list_of_numbers, value)\nprint(list_without_2) # prints [1, 3, 4, 3]</s>"
  },
  {
    "text": "<s>[INST] Make a Python program to generate all permutations of a given list. [/INST] def permutations(nums):\n    if len(nums) == 0:\n        return []\n\n    if len(nums) == 1:\n        return [[nums[0]]]\n    \n    perms = []\n\n    for i, n in enumerate(nums):\n        sub_perms = permutations(nums[:i] + nums[i+1:])\n\n        for perm in sub_perms:\n            perms.append([n] + perm)\n\n    return perms</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to remove all whitespace from the given string.\n\ntext = \"   This is a    sentence    with some whitespace!   \" [/INST] def remove_whitespace(text):\n    return text.replace(\" \", \"\")\n\ntext_without_whitespace = remove_whitespace(text)\nprint(text_without_whitespace) # prints \"Thisisasentencewithsomewhitespace!\"</s>"
  },
  {
    "text": "<s>[INST] Make a Python program to delete elements from a given list at particular indices.\n\nlist_of_numbers = [0, 1, 2, 3, 4, 5]\nindices = [2, 3, 5] [/INST] def remove_elements_at_indices(numbers, indices):\n    for index in sorted(indices, reverse=True):\n        del numbers[index]\n    return numbers\n\nmodified_list = remove_elements_at_indices(list_of_numbers, indices)\nprint(modified_list) # prints [0, 1, 4]</s>"
  },
  {
    "text": "<s>[INST] Sort an array of numbers in descending order using the bubble sort algorithm.\n\n`array = [10, 5, 2, 7, 6]` [/INST] def bubble_sort(arr): \n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] < arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n  \narray = [10, 5, 2, 7, 6]\nbubble_sort(array)\nprint(array) # Output: [10, 7, 6, 5, 2]</s>"
  },
  {
    "text": "<s>[INST] How do we define a class in C++? [/INST] In C++, a class is defined by using the keyword \"class\" followed by the class name followed by the body of the class, which is enclosed within a pair of curly braces. Within the body of the class are the class members, including the data members and member functions.\n\nFor example, the following is how we might define a class named \"Student\":\n\nclass Student {\n    int id;\n    string name;\npublic:\n    Student(int i, string n);\n    void printInfo();\n};</s>"
  },
  {
    "text": "<s>[INST] Create a GraphQL query to get a list of all the posts in a blog. [/INST] query {\n  posts {\n    id\n    title\n    body\n    author {\n      name\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] What is an exception handling code in Python? [/INST] Exception handling in Python is a process in which errors or exceptions in a program are handled using certain programming construct such as try-except or try-finally blocks so that the program can recover from such exceptions and continue running. Exception handling helps prevent critical errors in the program from crashing the entire program and allows developers to write more robust codes.</s>"
  },
  {
    "text": "<s>[INST] Generate a code that creates a dictionary from two different lists with equal length.\n\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3] [/INST] def create_dictionary(list1, list2):\n    if len(list1) != len(list2):\n        return \"lists have different lengths\"\n    else:\n        my_dict = dict(zip(list1, list2))\n        return my_dict\n\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\nprint(create_dictionary(list1, list2)) #output: {'a': 1, 'b': 2, 'c': 3}</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to print true if the condition is met, false if not.\n\na = 5\nb = 3\n\nif (a > b):\n    print(\"true\") [/INST] a = 5\nb = 3\n\nif (a > b):\n    print(True)\nelse:\n    print(False)</s>"
  },
  {
    "text": "<s>[INST] Update the code to get 2 extra lines of output to print the first and last value of the list.\n\nlist1 = [1, 2, 3, 4, 5] [/INST] list1 = [1, 2, 3, 4, 5]\n\nprint(\"First element:\", list1[0])\nprint(\"Last element:\", list1[-1])\n\nfor item in list1:\n    print(item) #output: \n    First element: 1\n    Last element: 5\n    1\n    2\n    3\n    4\n    5</s>"
  },
  {
    "text": "<s>[INST] Add a loop to the following program so that it prints out each item in a list.\n\nlist1 = [1, 2, 3, 4, 5] [/INST] list1 = [1, 2, 3, 4, 5]\n\nfor item in list1:\n    print(item) #output: \n    1\n    2\n    3\n    4\n    5</s>"
  },
  {
    "text": "<s>[INST] Declare a C++ structure that stores data about employees including their name and employee id. [/INST] struct employee {\n string name;\n int id;\n};</s>"
  },
  {
    "text": "<s>[INST] Fill in the missing characters in the given HTML code\n\n<htm__>\n<head>\n<tit__>Example</title> \n</he__> [/INST] <html>\n<head>\n<title>Example</title> \n</head></s>"
  },
  {
    "text": "<s>[INST] Generate the syntax to declare a variable called 'result' as an integer in Javascript. [/INST] let result = 0;</s>"
  },
  {
    "text": "<s>[INST] Generate the necessary SQL query to delete records from the table 'students' where the student's major is 'Computer Science'. [/INST] DELETE FROM students WHERE major = 'Computer Science';</s>"
  },
  {
    "text": "<s>[INST] How would you write a Swift program to swap the values of two variables? [/INST] var a = 10\nvar b = 20\n\n(a, b) = (b, a)\n\nprint(a)  // Outputs 20\nprint(b)  // Outputs 10</s>"
  },
  {
    "text": "<s>[INST] Create a CSS page for styling a header. [/INST] h1 {\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 28px;\n    font-style: normal;\n    font-weight: bold;\n    line-height: 32px;\n    letter-spacing: 0.5px;\n    color: #000000;\n    text-align: center;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    margin-bottom: 0px;\n}</s>"
  },
  {
    "text": "<s>[INST] You need to delete an item from a list. Output the modified list.\n\n['apple', 'orange', 'banana'] [/INST] ['apple', 'orange']</s>"
  },
  {
    "text": "<s>[INST] Parse the following HTML page and extract the data from each table.\n\n<html>\n  <body>\n    <table>\n      <tr>\n        <td>Name</td>\n        <td>Age</td>\n      </tr>\n      <tr>\n        <td>John Doe</td>\n        <td>30</td>\n      </tr>\n      <tr>\n        <td> Jane Smith</td>\n        <td>25</td>\n      </tr>\n    </table>\n  </body>\n</html> [/INST] import bs4\n\nhtml = \"\"\"<html>\n  <body>\n    <table>\n      <tr>\n        <td>Name</td>\n        <td>Age</td>\n      </tr>\n      <tr>\n        <td>John Doe</td>\n        <td>30</td>\n      </tr>\n      <tr>\n        <td> Jane Smith</td>\n        <td>25</td>\n      </tr>\n    </table>\n  </body>\n</html>\"\"\"\ndata = bs4.BeautifulSoup(html, features=\"html.parser\")\ntable = data.find('table')\n\nitems = table.find_all('tr')\n\nfor item in items:\n    name, age = item.find_all('td')\n    print(\"Name: {}, age: {}\".format(name.text, age.text))</s>"
  },
  {
    "text": "<s>[INST] Given a set of numbers, you need to output them in descending order.\n\n[30, 50, 10, 40] [/INST] [50, 40, 30, 10]</s>"
  },
  {
    "text": "<s>[INST] Modify the following code so that it takes a user input for the numbers for which to calculate the sum. [/INST] def sum_numbers():\n    number_list = []\n    input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    while input_numbers != \"q\":\n        number_list.append(int(input_numbers))\n        input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    return sum(number_list)</s>"
  },
  {
    "text": "<s>[INST] Consider a list ``a = [1,3,2,2,3,4]``. What would be the output of the following code?\n\na = [1,3,2,2,3,4]\n\nfor i in range(len(a)):\n    a[i] = a[i -1] [/INST] a = [1,3,2,2,3,4]\n\noutput = []\nfor i in range(len(a)):\n    output.append(a[i - 1])\n\nprint(output) # [3, 2, 2, 3, 4, 1]</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two strings as input and returns a join of both strings as a single string, with the second string in the middle.\n\nstring1 = \"Hello\"\nstring2 = \"World\" [/INST] def join_string_in_middle(string1 , string2):\n    return string1 + string2 + string1\n\n# Usage\nresult = join_string_in_middle(\"Hello\", \"World\")\nprint(result) # HelloWorldHello</s>"
  },
  {
    "text": "<s>[INST] What type of data structure would you use to store key-value pairs in a Python program? [/INST] The data structure to use for key-value pairs in Python is a dictionary. A dictionary is a data type that consists of key-value pairs, and is denoted by {} in Python. Each key has a unique value associated with it that can be accessed using the key. For example, a dictionary called \"person\" could look like this: \n\nperson = {'name':'John', 'age': 32} \n\nThe value of the key \"name\" can be accessed using person['name'] which returns \"John\".</s>"
  },
  {
    "text": "<s>[INST] Generate a recursive function for calculating the factorial of a number. [/INST] def factorial(num):\n    # base case\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\n# Usage\nprint(factorial(3)) # 6</s>"
  },
  {
    "text": "<s>[INST] Find all substrings of a string that are palindromes in Python. [/INST] def get_all_palindromes(input_string):\n    palindromes = []\n    for substring_length in range(len(input_string)):\n        for i in range(len(input_string) - substring_length + 1):\n            sub_string = input_string[i: i + substring_length]\n            if sub_string == sub_string[::-1]:\n                palindromes.append(sub_string)\n    return palindromes\n\n# Usage\npalindromes = get_all_palindromes(\"banana\")\nprint(palindromes) # ['a', 'ana', 'anana', 'b', 'na', 'nana']</s>"
  },
  {
    "text": "<s>[INST] Create a NumPy array containing three zeros and three ones. [/INST] np.array([0, 0, 0, 1, 1, 1])</s>"
  },
  {
    "text": "<s>[INST] Given a dataframe, remove any rows containing missing values.\n\nDataFrame:\ncol1    col2    col3\n1       a       3\n2       b       4\n3       NaN     5\n4       c       NaN [/INST] DataFrame:\ncol1    col2    col3\n1       a       3\n2       b       4</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary of colors containing the values red, blue and green. [/INST] {\"red\": \"red\", \"blue\": \"blue\", \"green\": \"green\"}</s>"
  },
  {
    "text": "<s>[INST] Given a list, remove the duplicates from it.\n\n[1, 2, 3, 1, 4, 2] [/INST] [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Sort a dictionary by its values.\n\n{\"a\": 4, \"b\": 2, \"c\": 3, \"d\": 1} [/INST] {\"d\": 1, \"b\": 2, \"c\": 3, \"a\": 4}</s>"
  },
  {
    "text": "<s>[INST] Output a SQL query that returns the sum of all values in the ‘price’ column of the ‘Products’ table. [/INST] SELECT SUM(price)\nFROM Products;</s>"
  },
  {
    "text": "<s>[INST] Create a CSS class to raise the font size of the text from the default size. [/INST] .largerFont {\n  font-size: 120%;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an application to hide certain words in a text.\n\nText: \"The quick brown fox jumped over the lazy dog.\"\nWords to hide: [\"fox\", \"dog\"] [/INST] const censoredText = (text, wordsToHide) => {\n  const wordsArr = text.split(' ');\n  wordsArr.forEach((word, index) => {\n    if (wordsToHide.includes(word)) {\n        wordsArr[index] = '*'.repeat(word.length)\n    }\n  });\n  return wordsArr.join(' ');\n}\n\ncensoredText(\"The quick brown fox jumped over the lazy dog.\", [\"fox\", \"dog\"]);\n// The quick brown *** jumped over the lazy ***.</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in Java to check if a number is a prime number. A prime number is an integer greater than 1 that is only divisible by 1 and itself. [/INST] public static boolean isPrime(int n) \n{ \n    // Corner cases \n    if (n <= 1) \n        return false; \n    if (n <= 3) \n        return true; \n  \n    // This is checked so that we can skip \n    // middle five numbers in below loop \n    if (n % 2 == 0 || n % 3 == 0) \n        return false; \n  \n    for (int i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n % (i + 2) == 0) \n            return false; \n  \n    return true; \n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in JavaScript to return the length of the longest word in a string.\n\nlet str = \"The quick brown fox jumped over the lazy dog.\" [/INST] const findLongestWord = (str) => {\n  let longestWord = \"\";\n  let wordsArr = str.split(\" \");\n\n  for(let i = 0; i < wordsArr.length; i++){\n    if (wordsArr[i].length > longestWord.length) {\n      longestWord = wordsArr[i];\n    }\n  }\n\n  return longestWord.length;\n}\n\nfindLongestWord(str); //6</s>"
  },
  {
    "text": "<s>[INST] Write an Angular directive to validate input fields. [/INST] @Directive({ selector: '[validateInput]' })\nexport class InputValidationDirective {\n  @Input() validateInput: string;\n  \n  constructor(private el: ElementRef) {\n  }\n\n  @HostListener('keyup') onKeyup() {\n    let value = this.el.nativeElement.value\n    if(!this.validateInput || this.validateInput === 'creditcard'){\n       //creditcard validation logic\n    }\n    if(this.validateInput ==='number'){\n       //number validation logic\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm in Python to calculate the compound interest [/INST] def compound_interest(principal, rate, time): \n  \n    # Calculates compound interest\n    CI = principal * (pow((1 + rate / 100), time))  \n    return CI \n  \n# Driver Code \nprincipal=8000\nrate=3\ntime=5\n  \nprint(\"Compound interest is\", compound_interest(principal, rate, time))</s>"
  },
  {
    "text": "<s>[INST] Create a loop in Python that counts down from 10 to 0. [/INST] for i in range(10, 0, -1):\n  print(i)</s>"
  },
  {
    "text": "<s>[INST] Add a function to the existing code that takes an integer value as input and prints a square of '*' characters.\n\ndef print_square(length): [/INST] def print_square(length):\n  for i in range(0, length):\n    for j in range(0, length):\n      print(\"*\", end=\"\")\n    print(\"\")</s>"
  },
  {
    "text": "<s>[INST] Use a for loop to compute the sum of the list [1, 3, 5, 7, 9].\n\n[1, 3, 5, 7, 9] [/INST] total = 0\nfor num in [1, 3, 5, 7, 9]:\n  total += num\nprint(total)</s>"
  },
  {
    "text": "<s>[INST] Use a for loop to print the characters of the string \"Hello World!\". [/INST] for char in “Hello World!”:\n  print(char)</s>"
  },
  {
    "text": "<s>[INST] Write a Java code that adds two numbers, a and b, and returns their sum.\n\nint a = 2\nint b = 3 [/INST] public int sum(int a, int b) {\n  return (a + b);\n}</s>"
  },
  {
    "text": "<s>[INST] Print the type of the data stored in the variable 'a'.\n\nint a = 15 [/INST] Integer</s>"
  },
  {
    "text": "<s>[INST] Find the index of the string \"the\" in the sentence \"I saw the cat\". [/INST] 3</s>"
  },
  {
    "text": "<s>[INST] Create a set containing the numbers from 1-10 that are divisible by 3. [/INST] my_set = {3, 6, 9}</s>"
  },
  {
    "text": "<s>[INST] Calculate the product of the numbers 87 and 36. [/INST] 3132</s>"
  },
  {
    "text": "<s>[INST] Create a function in python that takes a string and returns a new string with the same letter count but in ascending order\n\nword = “tweet” [/INST] def ascending_order(word):\n    list = []\n    for letter in word:\n        list.append(letter)\n    sorted_list = sorted(list)\n    return \"\".join(sorted_list)</s>"
  },
  {
    "text": "<s>[INST] Create a basic JavaScript code to input three numbers and store the largest one in a variable.\n\nnum1 = 10\nnum2 = 20\nnum3 = 30 [/INST] let max;\nif (num1 > num2) {\n max = num1;\n} else {\n max = num2;\n}\nif (max < num3) {\n max = num3;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a shorthand method in Python to replace all 0s with 1.\n\ninput_list = [1, 0, 1, 0, 0] [/INST] def replace_zeros(input_list): \n    output_list = [x if x != 0 else 1 for x in input_list] \n    return output_list</s>"
  },
  {
    "text": "<s>[INST] Generate a method in Python to sort a given list of dictionaries.\n\nlist_dict = [{'name': 'a', 'age': 23}, {'name': 'b', 'age': 19}, {'name': 'c','age': 36}] [/INST] def dict_sort(list_dict): \n    sorted_dict = sorted(list_dict, key = lambda x: x['age']) \n    return sorted_dict</s>"
  },
  {
    "text": "<s>[INST] Write a simple script in JavaScript to reverse a string.\n\ntext = “hello world” [/INST] function reverseString(text) {\n return text.split(\"\").reverse().join(\"\");\n}\n\nconsole.log(reverseString(text));</s>"
  },
  {
    "text": "<s>[INST] Modify the given Python code to calculate the sum of the given list and print the output.\n\nlist = [1,2,3,4,5] [/INST] def sumList(list): \n    sum = 0\n    for i in list:\n        sum = sum + i\n    return sum\n\nprint(sumList(list))</s>"
  },
  {
    "text": "<s>[INST] Compose a script in JavaScript for finding the greatest common divisor of two numbers.\n\nx = 36;\ny = 60; [/INST] function findGCD(x, y) {\n  if (x === 0)\n    return y;\n  if (y === 0)\n    return x;\n  if (x === y)\n    return x;\n  if (x > y)\n    return findGCD(x - y, y);\n  return findGCD(x, y - x);\n}\nconsole.log(findGCD(x, y));</s>"
  },
  {
    "text": "<s>[INST] Write a SQL statement that finds all customers who have placed orders [/INST] SELECT c.customer_id, c.name\nFROM customers AS c\nINNER JOIN orders AS o\nON c.customer_id = o.customer_id;</s>"
  },
  {
    "text": "<s>[INST] What is the value of the math expression 100(log_10 10) [/INST] 100</s>"
  },
  {
    "text": "<s>[INST] Create a neural network with 5 inputs and 2 outputs [/INST] model = tf.keras.Sequential([\n  tf.keras.layers.Dense(10, activation='relu', input_shape=(5,)),\n  tf.keras.layers.Dense(2, activation='softmax'),\n])</s>"
  },
  {
    "text": "<s>[INST] Sum up the elements of this array\n\n[2,7,1,3] [/INST] 13</s>"
  },
  {
    "text": "<s>[INST] Add a comment to this code\n\nfor(int i = 0; i < n; i++) [/INST] // loop through all n elements in the array \nfor (int i = 0; i < n; i++) \n{\n    // code \n}</s>"
  },
  {
    "text": "<s>[INST] Write a simple Java class [/INST] public class MyClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Output the largest number in this array\n\n[20, 6, 36, 41, 12, 3] [/INST] 41</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two String as parameters and return true if one String is substring of the other [/INST] public static boolean isSubstring(String s1, String s2){\n        int len1 = s1.length();\n        int len2 = s2.length();\n        if(len1 < len2){\n            if(s2.contains(s1)){\n                return true;\n            }\n        }else{\n            if(s1.contains(s2)){\n                return true;\n            }\n        }\n        return false;\n    }</s>"
  },
  {
    "text": "<s>[INST] Edit this code to show a message after 2 seconds\n\n<script>\n    alert(\"Hello World!\");\n</script> [/INST] <script>\n    setTimeout(function(){ \n        alert(\"Hello World!\"); \n    }, 2000);\n</script></s>"
  },
  {
    "text": "<s>[INST] Write a function to find all distinct permutations of a given list\n\n[1,2,3] [/INST] def permute(nums):\n    # base case when only one element in the list\n    if len(nums) == 1:\n        return [nums] \n  \n    permutations = []\n    for i in range(len(nums)): \n        m = nums[i] \n \n        # extract remaining list \n        remain = nums[:i] + nums[i+1:] \n  \n        # Iterate over remaining list and \n        # generate all permutations \n        for p in permute(remain): \n            permutations.append([m] + p) \n  \n    return permutations</s>"
  },
  {
    "text": "<s>[INST] Construct an algorithm to delete duplicate characters from a string [/INST] def delete_duplicates(string):\n    letters = set()\n    newstring = \"\"\n    for char in string:\n        if char in letters:\n            continue\n        else:\n            letters.add(char)\n            newstring += char\n    return newstring</s>"
  },
  {
    "text": "<s>[INST] Create a variable called myName and assign your name to it. [/INST] myName = \"John Doe\"</s>"
  },
  {
    "text": "<s>[INST] What is the standard indentation size for Python code? [/INST] The standard indentation size for Python code is 4 spaces.</s>"
  },
  {
    "text": "<s>[INST] Write a code to print out all the even numbers in the range 0 to 10. [/INST] for i in range(0, 11):\n    if i%2 == 0:\n        print(i)</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary and assign four key-value pairs. [/INST] my_dict = {'apple': 'fruit', 'carrot': 'vegetable', 'house': 'structure', 'dog': 'animal'}</s>"
  },
  {
    "text": "<s>[INST] Create an array and assign four elements to it. [/INST] my_array = [\"John\", \"Paul\", \"George\", \"Ringo\"]</s>"
  },
  {
    "text": "<s>[INST] Construct an if-else statement to handle a conditional execution.\n\nif x is greater than 0 [/INST] if x > 0:\n    # execute one block of code\nelse:\n    # execute another block of code</s>"
  },
  {
    "text": "<s>[INST] Create a while loop that prints the numbers 1-10 [/INST] i = 1\nwhile i <= 10:\n    print(i)\n    i += 1</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop to print a user-defined pattern.\n\n*\n**\n***\n**** [/INST] for i in range(1, 5):\n    for j in range(0, i):\n        print(\"*\", end=\"\")\n    print() # add a new line</s>"
  },
  {
    "text": "<s>[INST] Convert this list into a numpy array and sort it.\n\n[3, 5, 1, 9, 6] [/INST] import numpy as np\n\n# Convert to numpy array\narr = np.array([3, 5, 1, 9, 6])\n\n# Sort the array\narr.sort()\n\n# Print the sorted array\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] Build a machine learning model using scikit-learn to predict the house prices in Boston.\n\n- Number of rooms: 3 \n- Average number of rooms per dwelling: 6 \n- Proportion of residential land zoned for lots over 25,000 sq.ft: 0.4\n- Index of accessibility to radial highways: 4\n- Full-valuation property-tax rate per $10,000: 300 [/INST] import sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Create feature and label\nX = [[3,6,0.4,4,300]]\ny = [[BostonHousePrice]]\n\n# Create and fit the linear regression model\nreg = LinearRegression().fit(X, y)\n\n# Predict the output\nprediction = reg.predict([[3,6,0.4,4,300]])[0][0]</s>"
  },
  {
    "text": "<s>[INST] Why is overflow an issue in computer science? [/INST] In computer science, overflow occurs when the result of a computation exceeds the capacity of its data type, resulting in Loss of accuracy or erroneous answers from a computation. Certain programming errors lead to overflow, such as incrementing a counter past the capacity of its assigned data type, or calculating a value far greater than the data type is designed to handle. Overflow can result in critical errors like stepping off the end of an array or incorrect mathematical expressions. It is important to be aware of overflow and anticipate it in order to be able to prevent it with proper error checking.</s>"
  },
  {
    "text": "<s>[INST] Create a function my_func in Python that accepts three integers x, y and z as parameters and returns the maximum. [/INST] def my_func(x, y, z):\n  max_num = max(x, y, z)\n  return max_num</s>"
  },
  {
    "text": "<s>[INST] How can we detect outliers in a dataset? [/INST] Outliers can be detected by computing simple summary statistics and plotting the data. Common methods for detecting outliers include the use of box plots, scatter plots, and statistical tests such as the Interquartile Range (IQR) test and the Z-score test. The IQR test uses the difference between the 75th and 25th percentiles, and any value further than 1.5 times the IQR is considered an outlier. The Z-score test detects outliers by calculating the z-scores of each data point, and values more than 3 standard deviations away are considered outliers.</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to display the total number of sales in each year.\n\nTable Name: \"Sales\"\nTable Columns: \"year\", \"total_sales\" [/INST] SELECT year, SUM(total_sales) \nFROM Sales \nGROUP BY year;</s>"
  },
  {
    "text": "<s>[INST] What is aHeap data structure? [/INST] A heap is a specialized tree-based data structure in which the root-node key is compared with the keys of its children and arranged accordingly. It is typically used to implement priority queues where the key for each item is based on its priority. Heaps are also used for sorting, representing graphs, and as a data structure for the heapsort sorting algorithm.</s>"
  },
  {
    "text": "<s>[INST] Create a function 'double_up()' in JavaScript that takes an array of integers as input and returns an array with each of the elements doubled.\n\n[2, 4, 6] [/INST] function double_up(arr) {\n    // Declare a new array\n    let result = [];\n\n    // Loop through input array\n    for (let i=0; i < arr.length; i++) {\n        result.push(arr[i] * 2);\n    }\n\n    //Return the new array \n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement Quicksort in Python to sort this list of integers.\n\n[8, 5, 3, 9, 1] [/INST] def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_arr = quicksort([8, 5, 3, 9, 1])\n \nprint(sorted_arr)</s>"
  },
  {
    "text": "<s>[INST] Write an event handler for a button in JavaScript that prints 'Hello World!' [/INST] // Declare a function `printHelloWorld` \nfunction printHelloWorld () {\n  console.log(\"Hello World!\");\n}\n\n// Add the event handler to the button \ndocument.getElementById(\"myButton\").addEventListener(\"click\", printHelloWorld);</s>"
  },
  {
    "text": "<s>[INST] Create a CSS rule to apply the 'medium-blue' class the the <body> tag. [/INST] body {\n  background-color: medium-blue;\n}</s>"
  },
  {
    "text": "<s>[INST] What is computational complexity and how can it affect the performance of a program? [/INST] Computational complexity is a measure of the amount of resources (time and memory) needed to execute a given algorithm. It is expressed as a function of the size of the input data. A program that has a high computational complexity will take longer to execute and require more memory as the size of the data increases. Improving the complexity of algorithms can dramatically improve the performance of a program.</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to sort an array of integers by implementing the Selection Sort technique. [/INST] public static void selectionSort(int[] arr) { \n    int n = arr.length; \n  \n    for (int i = 0; i < n-1; i++) \n    { \n        int min_idx = i; \n        for (int j = i+1; j < n; j++) \n            if (arr[j] < arr[min_idx]) \n                min_idx = j; \n  \n        int temp = arr[min_idx]; \n        arr[min_idx] = arr[i]; \n        arr[i] = temp; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a C program that uses the bitwise operator to set, clear and toggle the Nth bit of an integer. [/INST] #define SET_BIT(number, n) ((number) |= (1 << (n)))\n#define CLEAR_BIT(number, n) ((number) &= ~(1 << (n))) \n#define TOGGLE_BIT(number, n) ((number) ^= (1 << (n)))</s>"
  },
  {
    "text": "<s>[INST] Generate a parse tree for the following sentence\n\nAlice likes to swim [/INST] likes\n        /     \\\n    Alice      to\n               /\n             swim</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select the productname and the total price of orders with more than 10 items [/INST] SELECT productname, SUM(price) AS total_price \nFROM Orders \nJOIN OrderItems \nUSING (orderId) \nJOIN Products \nUSING (productId)\nWHERE quantity > 10\nGROUP BY orderId</s>"
  },
  {
    "text": "<s>[INST] Create a database query to count the number of customers who have placed orders in the last month [/INST] SELECT COUNT(*) \nFROM customers \nWHERE EXISTS (SELECT * \n              FROM orders \n              WHERE orders.customerId = customers.id \n              AND Date_sub(now(), interval 1 month) \n              <= orders.orderDate);</s>"
  },
  {
    "text": "<s>[INST] Take the following array of numbers and write a JavaScript program that sorts the array\n\n[3, 4, 8, 9, 5, 6, 2] [/INST] function sortArray(arr) {\n    let len = arr.length;\n    for(let i = len-1; i>=0; i--){\n        for(let j = 1; j<=i; j++){\n            if(arr[j-1] > arr[j]){\n                let temp = arr[j-1];\n                arr[j-1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n}</s>"
  },
  {
    "text": "<s>[INST] What is the best time complexity of QuickSort? [/INST] The best time complexity of QuickSort is O(nlog(n)).</s>"
  },
  {
    "text": "<s>[INST] Create a class to create a naive bayes model. [/INST] class NaiveBayesModel: \n    def __init__(self): \n        pass \n      \n    def train(self, data, labels): \n        self.prior_probability = self.calculatePriorProbabilities(labels)\n        self.likelihoods = self.calculateLikelihoods(data, labels)\n    \n    def calculatePriorProbabilities(self, labels): \n        labels_counts = {} \n        for label in labels: \n            if label not in labels_counts: \n                labels_counts[label] = 0 \n            labels_counts[label] += 1 \n              \n        return {label: count/len(labels)\n                for label, count in labels_counts.items()} \n\n    def calculateLikelihoods(self, data, labels): \n        likelihoods = {} \n        for feature, values in data.items(): \n            likelihoods[feature] = {} \n            for label in labels: \n                for value in values: \n                    pass # complete the calculation\n                    \n        return likelihoods</s>"
  },
  {
    "text": "<s>[INST] What is the main idea behind Naive Bayes Model? [/INST] The main idea behind Naive Bayes Model is to use the probability of each data point to make a prediction by calculating the probability of a certain outcome given some prior knowledge. It assumes all the features are independent of each other and uses the Bayes theorem to calculate the probability of a given class based on the evidence.</s>"
  },
  {
    "text": "<s>[INST] What is the time complexity of the most_common() function? [/INST] The time complexity of the most_common() function is O(n).</s>"
  },
  {
    "text": "<s>[INST] What is the time complexity of checking if a given string is a palindrome or not? [/INST] The time complexity of checking if a given string is a palindrome or not is O(n).</s>"
  },
  {
    "text": "<s>[INST] What is the time complexity of the function you wrote to output the nth Fibonacci number? [/INST] The time complexity of the function to output the nth Fibonacci number is O(2^n).</s>"
  },
  {
    "text": "<s>[INST] What is the time complexity of the program you wrote to generate random passwords? [/INST] The time complexity of the program to generate random passwords is O(n), where n is the length of the password.</s>"
  },
  {
    "text": "<s>[INST] Create a generator to produce \"hello world\" ten times [/INST] def hello_world_generator():\n    for _ in range(10):\n        yield \"Hello World\"</s>"
  },
  {
    "text": "<s>[INST] Create a variable named \"my_name\" with a value of your name. [/INST] let my_name = \"John\";</s>"
  },
  {
    "text": "<s>[INST] What is the data type for the following value \"true\"? [/INST] The data type for the value \"true\" is boolean.</s>"
  },
  {
    "text": "<s>[INST] Given an array of strings, write a JavaScript function to filter out all elements that are not palindromes.\n\n[\"a\", \" racecar\", \" abba \", \"civic\", \" pot op \"] [/INST] function filterPalindromes(arr) {\nreturn arr.filter(element => {\n  let strippedString = element.replace(/\\s+/g, \"\");\n  let reversedString = strippedString.split('').reverse().join('');\n  return strippedString == reversedString;\n});\n}\n\nconsole.log(filterPalindromes([\"a\", \" racecar\", \" abba \", \"civic\", \" pot op \"])); // Output: [\" racecar\", \"abba\", \"civic\", \"pot op\"]</s>"
  },
  {
    "text": "<s>[INST] Write a permutation function which takes a given string and returns all the possible permutations.\n\n\"abc\" [/INST] function permutate(str){\n  if (str.length <= 1) {\n    return str;\n  } \n  let permutations = []; \n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    // excluding the character from the string\n    let remainingString = str.slice(0, i) + str.slice(i + 1, str.length);\n    // recursively call the function\n    for (let subPermutation of permutate(remainingString)) {\n      permutations.push(char + subPermutation);\n    }\n  }\n  return permutations;\n}\n\nconst possiblePermutations = permutate(\"abc\");\n\n// Output: [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]</s>"
  },
  {
    "text": "<s>[INST] Build a regular expression to match only strings that start with one specific character and end with another specific character. [/INST] /^X.*Y$/</s>"
  },
  {
    "text": "<s>[INST] Edit the existing code to accept more than two arguments\n\ndef get_sum(a, b):\n    return a + b [/INST] def get_sum(*args):\n    sum = 0\n    for number in args:\n        sum += number\n\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to select all the records from the \"user_table\" table that were created in the last 3 days. [/INST] SELECT * FROM `user_table` WHERE date_created > date_sub(curdate(), interval 3 day)</s>"
  },
  {
    "text": "<s>[INST] How can you access a requested item from an URL in JavaScript? [/INST] In order to access a requested item from an URL in JavaScript you can use the URL API such as the URL.searchParams API. The API allows you to parse the query string and retrieve specific items, such as variables and their values, from the URL. For example, if the URL was \"http://example.com/?key1=value1&key2=value2\" you can use the following code to get the value of \"key1\":\n\nvar url = new URL(\"http://example.com/?key1=value1&key2=value2\");\nvar value1 = url.searchParams.get(\"key1\");\n// value1 will contain 'value1'</s>"
  },
  {
    "text": "<s>[INST] What are the advantages of using a while loop over a for loop in Python? [/INST] The main advantages of using a while loop over a for loop in Python are that it is more concise and allows the user to have better control over the iteration process. For example, the while loop allows the user to specify an exit condition if a certain condition is met, mid-way through the loop. Furthermore, while loop allows the user to dynamically change the number of times the loop is executed based on a condition or an expression. This is not possible in for loops as the user needs to specify the exact number of iterations beforehand.</s>"
  },
  {
    "text": "<s>[INST] Write a code to convert HTML to Markdown using Python. [/INST] import markdown\nimport re\n\ndef convert_html_to_markdown(html):\n  lines = html.split('\\n')\n  for line in lines:\n    line = markdown.markdown(line)\n    # remove HTML tags\n    line = re.sub(r'<[^>]*>', '', line)\n    # strip whitespace\n    line = line.strip()\n    print line\n\nhtml = '<p>This is an example of HTML text.</p>'\nconvert_html_to_markdown(html)\n\n# Output\nThis is an example of HTML text.</s>"
  },
  {
    "text": "<s>[INST] How can you access an element in an array using JavaScript? [/INST] In order to access an element in an array using JavaScript, you can use the index of the element. The index is the position of the element in the array. For example, if the array is [4, 8, 15], then you can use the following code to access the element at index 1 (i.e. 8):\n\nvar array = [4, 8, 15];\nvar element = array[1];\n// The variable `element` now contains the value 8</s>"
  },
  {
    "text": "<s>[INST] What is the maximum length of a string in Python? [/INST] The maximum length of a string in Python is sys.maxsize, which is typically 2^63 - 1 on a 64-bit machine. This means that the maximum length of a string is 18,446,744,073,709,551,615 characters.</s>"
  },
  {
    "text": "<s>[INST] Write a query in SQL to find all customers with email addresses starting with 'Simon'. [/INST] SELECT * FROM Customers WHERE Email LIKE 'Simon%';</s>"
  },
  {
    "text": "<s>[INST] Implement a sorting algorithm in C# that sorts the numbers in increasing order.\n\nnumbers = [3, 7, 5, 2, 4, 1] [/INST] public static void Sort(int[] numbers) \n{ \n    int n = numbers.Length; \n    for (int i = 0; i < n - 1; i++) \n        for (int j = 0; j < n - i - 1; j++) \n            if (numbers[j] > numbers[j + 1]) \n            { \n                int temp = numbers[j]; \n                numbers[j] = numbers[j + 1]; \n                numbers[j + 1] = temp; \n            }\n}</s>"
  },
  {
    "text": "<s>[INST] Write an API call in Node.js to get JSON data from the given URL.\n\nURL = http://www.example.com [/INST] const request = require('request');\nconst url = \"http://www.example.com\";\n\nrequest.get(url, (error, response, body) => { \n    var data = JSON.parse(body); \n    console.log(data); \n});</s>"
  },
  {
    "text": "<s>[INST] Write a function in Ruby which takes two parameters and prints the greater one. [/INST] def greater_num(a,b)\n  if a > b\n    puts a\n  else\n    puts b\n  end\nend</s>"
  },
  {
    "text": "<s>[INST] Edit the given HTML code to center all the elements.\n\n<div>\n    <h1>Hello World!</h1>\n    <p>This is a paragraph</p>\n</div> [/INST] <div style=\"text-align: center;\">\n    <h1>Hello World!</h1>\n    <p>This is a paragraph</p>\n</div></s>"
  },
  {
    "text": "<s>[INST] Write a conditional statement in PHP to check if a variable is even or odd. [/INST] if ($num % 2 == 0) {\n    // even\n}\nelse {\n    // odd\n}</s>"
  },
  {
    "text": "<s>[INST] Create a web page with all the elements aligned on the right, using only CSS. [/INST] <style> \n  * { \n      text-align: right; \n    } \n</style></s>"
  },
  {
    "text": "<s>[INST] Compute the area of the circle where the radius is 5 inches in Python. [/INST] import math \n  \nradius = 5 \narea = math.pi * (radius**2) \n\nprint(\"The area of the circle is\", area)</s>"
  },
  {
    "text": "<s>[INST] Generate a random hexadecimal value in C#. [/INST] Random random = new Random(); \nstring randomHex = string.Format(\"{0:X}\", random.Next());</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to display a pyramid with the given height.\n\nheight = 3 [/INST] public class Pyramid \n{ \n\n    public static void printPyramid(int height) \n    { \n        int i, j; \n        for (i=0; i<height; i++) \n        { \n            for (j=0; j<=i; j++) \n            { \n                System.out.print(\"* \"); \n            } \n            System.out.println(); \n        } \n    } \n    public static void main(String args[]) \n    { \n        int height = 3; \n        printPyramid(height); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to sort records in a table alphabetically by a column 'name'. [/INST] SELECT * FROM table_name ORDER BY name ASC;</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script to generate a valid checksum of a given string. [/INST] <?php\n    function getChecksum($string) {\n        // Get the seed used \n        $seed = (string) md5($string);\n        $checkSum = 0;\n    \n        // Calculate the checksum\n        foreach(str_split($string) as $char){\n            $checkSum += ord($char)*$seed[$checkSum % 32]; \n        }\n    \n        // Return the checksum\n        return $checkSum;\n    }\n?></s>"
  },
  {
    "text": "<s>[INST] Use the provided knowledgebase to answer the following question: What is the capital of Costa Rica?\n\nhttps://en.wikipedia.org/wiki/Costa_Rica [/INST] The capital of Costa Rica is San José.</s>"
  },
  {
    "text": "<s>[INST] Use the provided dataset to create a Corpus of English words in Python.\n\nhttps://storage.googleapis.com/download.tensorflow.org/data/grammar_corpus.txt [/INST] f = open('grammar_corpus.txt', 'r')\n\n# Create an empty list to store the corpus\ncorpus = []\n\n# Loop through the file line by line \nfor line in f: \n    # Split the line into words \n    words = line.lower().strip().split()\n    \n    # Check if the word is an english word \n    if words[1].isalpha(): \n        corpus.append(words[1]) \n \nf.close()\nprint(corpus)</s>"
  },
  {
    "text": "<s>[INST] Write a Python method to extract only the numeric values from a string. [/INST] def extract_num(string): \n    return [word for word in string.split() if word.isdigit()]</s>"
  },
  {
    "text": "<s>[INST] Write a PHP code to get the root directory of the server. [/INST] <?php\n    $root_dir = $_SERVER['DOCUMENT_ROOT'];\n    echo $root_dir;\n?></s>"
  },
  {
    "text": "<s>[INST] Generate SQL query to find the average score for each student.\n\nTable: student_scores\n\n| id  | student_id | score |\n|-----|------------|-------|\n|  1  |   111      |   5   |\n|  2  |   111      |   7   |\n|  3  |   223      |   6   |\n|  4  |   223      |   8   | [/INST] SELECT student_id, AVG(score) AS average_score\nFROM student_scores\nGROUP BY student_id;</s>"
  },
  {
    "text": "<s>[INST] Design a function using Python to remove all vowels from a string. [/INST] def remove_vowels(string):\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char not in vowels:\n            new_string += char\n            \n    return new_string</s>"
  },
  {
    "text": "<s>[INST] JAVA code to calculate the Fibonacci number at a given position. [/INST] public class Fibonacci {\n    public static long Fibonacci(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return Fibonacci(n - 1) + Fibonacci(n - 2);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page to show user data from a REST API.\n\n{\n \"name\": \"John\",\n \"age\" : 25,\n \"address\" : \"123 Main Street\"\n} [/INST] <html>\n  <head>\n     <title>User Data</title>\n  </head>\n  <body>\n    <h1>User Data</h1>\n    <p>Name: John</p>\n    <p>Age: 25</p>\n    <p>Address: 123 Main Street</p>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a Kotlin program which prints out all the numbers between 1 and 10. [/INST] fun main() {\n    for(i in 1..10) {\n        println(i)\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a suitable algorithm for solving this problem.\n\nAn array of integers is given. Find the highest sum that can be obtained by including different members from the array, such that no two members have the same index. [/INST] We can use the dynamic programming approach to solve this problem. At each step, we calculate the maximum possible sum that can be obtained if we include the current element. We keep track of the maximum sum found so far, and then continue with the next element. At the end, we have the highest sum of elements with no two elements having the same index.</s>"
  },
  {
    "text": "<s>[INST] Code a function in Python to generate random numbers within a given range. [/INST] import random\n\ndef random_num_gen(start, end):\n    return random.randint(start, end)</s>"
  },
  {
    "text": "<s>[INST] Write a web crawler in Python to extract only the text content from a given website. [/INST] # import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# define the web crawler\ndef web_crawler(url):\n    # make the request to the specified url\n    page = requests.get(url)\n    page_content = page.content\n    # parse the received content\n    soup = BeautifulSoup(page_content, 'lxml')\n    text_content = soup.find_all(text=True)\n    # return only the text content\n    return [s.strip() for s in text_content if s.strip()]</s>"
  },
  {
    "text": "<s>[INST] Explain how to find the sum of all elements in an array using recursive approach. [/INST] The recursive approach to finding the sum of all elements in an array is to consider the array as a combination of two subarrays. We first calculate the sum of the first subarray and then for the second subarray. The total sum of elements in the array can be found by adding the sum of the two subarrays. This process is repeated until the size of the array is 0, at which point the final sum is returned. This approach is known as the divide and conquer algorithm.</s>"
  },
  {
    "text": "<s>[INST] Suggest a suitable algorithm for clustering data points. [/INST] The k-means clustering algorithm is a suitable algorithm for clustering data points. It is an iterative algorithm that works by assigning data points to clusters and then computing the centroids of the clusters. The algorithm is repeated until a desired outcome is reached. This algorithm works well for grouping similar data points in a dataset.</s>"
  },
  {
    "text": "<s>[INST] Find the length of the longest substring in the given string without repetition.\n\nstring = \"abcabcbb\" [/INST] 3</s>"
  },
  {
    "text": "<s>[INST] Transform the given array into a object, with the key being the index and the value being the value at the index in the array.\n\narr = [1,2,3,4] [/INST] {\n  0: 1,\n  1: 2,\n  2: 3,\n  3: 4\n}</s>"
  },
  {
    "text": "<s>[INST] Read the given CSV and output the data as a HTML table.\n\nname, age\njoe, 23\nbilly, 24 [/INST] <table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Joe</td>\n    <td>23</td>\n  </tr>\n  <tr>\n    <td>Billy</td>\n    <td>24</td>\n  </tr>\n</table></s>"
  },
  {
    "text": "<s>[INST] Prompt the user to enter a year and output whether it is a leap year or not. [/INST] year = int(input(\"Please enter a year: \"))\n\nif (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n    print(\"It is a leap year.\")\nelse:\n    print(\"It is not a leap year.\")</s>"
  },
  {
    "text": "<s>[INST] Given an array of words, replace each character with the corresponding number from the English alphabet (e.g. a=1, b=2 ...z=26), and find the computed sum.\n\n[\"cat\", \"dog\"] [/INST] def find_sum(words):\n    total_sum = 0 \n    for word in words: \n        for c in word:\n            total_sum += ord(c) - 96\n    return total_sum</s>"
  },
  {
    "text": "<s>[INST] Given a linked list, reverse its order of nodes. [/INST] def reverse_linked_list(head):\n    if head is None or head.next is None:\n        return head\n    prev = None\n    curr = head\n    while curr is not None:\n        prev, curr.next, curr = curr, prev, curr.next\n    return prev</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, write a program to find the number of triplets that satisfy the triangle inequality. [/INST] def find_num_triplets(arr):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] > arr[k]:\n                    count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Given a matrix, write a program to fill it with zeroes in constant time and space complexity. [/INST] def fill_matrix_zeros(matrix):\n    n, m = len(matrix), len(matrix[0])\n    col0_zero = False\n    for i in range(n):\n        if matrix[i][0] == 0:\n            col0_zero = True\n        for j in range(1, m):\n            if matrix[i][j] == 0:\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n\n    if matrix[0][0] == 0:\n        for j in range(m):\n            matrix[0][j] = 0\n\n    if col0_zero:\n        for i in range(n):\n            matrix[i][0] = 0</s>"
  },
  {
    "text": "<s>[INST] Identify which language the following code snippet is written in.\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() \n{ \n    cout << \"Hello, World\";\n    return 0; \n} [/INST] C++</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query that returns a list of states in the United States with populations greater than 10 million. [/INST] SELECT state\nFROM population_data \nWHERE population > 10000000;</s>"
  },
  {
    "text": "<s>[INST] Write Java code to create a class called Card with two string fields, rank and suit. [/INST] public class Card {\n \n    private String rank;\n    private String suit;\n \n    // constructor\n    public Card(String rank, String suit) {\n        this.rank = rank;\n        this.suit = suit;\n    }\n \n    // getters\n    public String getRank() {\n        return rank;\n    }\n \n    public String getSuit() {\n        return suit;\n    }\n \n}</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query that finds the most expensive products in a given product table. [/INST] SELECT *\nFROM product \nORDER BY price DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Write a Javascript program to convert a given string into all uppercase characters.\n\nString: \"Welcome to the World !\" [/INST] let str = \"Welcome to the World !\";\nlet upperCaseStr = str.toUpperCase();\nconsole.log(upperCaseStr);\n\n# Output: \"WELCOME TO THE WORLD !\"</s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule that changes the text color for all headings on a page. [/INST] h1, h2, h3, h4, h5, h6 {\n   color: red;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query that returns the names and phone numbers of customers from the state of Virginia. [/INST] SELECT name, phone\nFROM customers\nWHERE state= 'Virginia';</s>"
  },
  {
    "text": "<s>[INST] Explain the basic logic for a linear search algorithm. [/INST] A linear search algorithm is a basic searching algorithm for finding an item in an array of items. It operates by comparing each item in the array sequentially with the target value until the target value is found or the end of the array is reached. To perform a linear search, the algorithm begins by considering the first element of the array and then moving on to every subsequent element in order until the target value is found. If the target value is not found, a linear search terminates when the end of the elements is reached.</s>"
  },
  {
    "text": "<s>[INST] Create a stand-alone Python script to print the sum of all the divisors of a number. [/INST] def printDivisorSum(num): \n   \n    sum = 0\n    i = 1\n  \n    while i <= num / 2: \n  \n        if num % i == 0: \n            sum = sum + i \n        i = i + 1\n  \n    print(\"Sum of divisors of \" + str(num) + \" is \" + str(sum)) \n\nnum = 16\nprintDivisorSum(num)</s>"
  },
  {
    "text": "<s>[INST] Generate a new voice sample using a given text and speech synthesis model.\n\ntext = \"Hello, world!\" [/INST] <nooutput>\nSince this task requires speech synthesis software and a model, it cannot be completed by the GPT model.</s>"
  },
  {
    "text": "<s>[INST] Categorize the following sentence into parts-of-speech?\n\nThe cat jumped quickly onto the table [/INST] Determiner (The), Noun (cat), Verb (jumped), Adverb (quickly), Preposition (onto), Determiner (the), Noun (table).</s>"
  },
  {
    "text": "<s>[INST] Find the variable type for the following statement:\n\nname = \"John\" [/INST] The variable type for the above statement is string.</s>"
  },
  {
    "text": "<s>[INST] Identify the endpoint of a given API request.\n\nRequest: GET https://www.example.com/1 [/INST] The endpoint of this API request is https://www.example.com/1.</s>"
  },
  {
    "text": "<s>[INST] Use the Java language to print out ‘Hello World’. [/INST] public class HelloWorld {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }    \n}</s>"
  },
  {
    "text": "<s>[INST] Build a C++ program that calculates using the below formula [/INST] #include <iostream>\n\nint main() {\n    int a=5, b=7;\n    double result = a*a+b*b;\n    std::cout << result << std::endl;\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Using a MySQL query, select the top 5 dog breeds based on the number of owners. [/INST] SELECT breed, COUNT(*) AS owners \nFROM dogs \nGROUP BY breed\nORDER BY owners DESC \nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Construct a Python program to print the numbers from 1 to 10 on a single line. [/INST] for i in range(1,11):\n  print(i, end=\" \")</s>"
  },
  {
    "text": "<s>[INST] Develop a PHP script that creates and populates a database table called “customers”. [/INST] <?php\n$host = \"localhost\";\n$username = \"root\";\n$password = \"\";\n$database = \"mydb\";\n\n$connection = new mysqli($host, $username, $password, $database);\n\nif ($connection->connect_error) {\n    die(\"Connection failed: \" . $connection->connect_error);\n}\n\n$query = \"CREATE TABLE customers ( \n  id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n  firstname VARCHAR(30) NOT NULL,\n  lastname VARCHAR(30) NOT NULL,\n  address VARCHAR(100),\n  city VARCHAR(50),\n  postalcode VARCHAR(10)\n)\";\n\nif ($connection->query($query) === TRUE) {\n    echo \"Table customers created successfully\";\n} else {\n    echo \"Error creating table: \" . $connection->error;\n}\n\n$connection->close();\n?></s>"
  },
  {
    "text": "<s>[INST] Using MATLAB, calculate the roots of the equation x*x + 5*x - 6. [/INST] syms x;\nsolve(x*x + 5*x - 6);</s>"
  },
  {
    "text": "<s>[INST] Generate a Ruby script to find the GCD of two given numbers. [/INST] def gcd(a, b)\n  if b == 0\n    return a\n  else\n    return gcd(b, a % b) \n  end\nend\n\na = 10\nb = 20\nputs gcd(a,b)</s>"
  },
  {
    "text": "<s>[INST] Create an assembly language program to sum 30 odd integers. [/INST] .model small\n.data\n        number dw 2,4,6,8,10,12,14,16,18,20\n\t\t        ,22,24,26,28,30,32,34,36,38,40\n\t\t\t\t        ,42,44,46,48,50,52,54,56,58,60\nsum dw 0\n.code\nmain proc\n                mov ax,@data\n                mov ds,ax\n \n     lea si,number\n\t\t mov cx,30\n\t loop1: mov ax,[si]\n\t mov bx,2\n\t mul bx\n\t add ax,sum\n\t mov sum,ax\n\t add si,2\n\t loop loop1\n\t \n\t mov ax,sum\n\t mov ah,09h\n\t int 21h\n \n\t mov ax,4c00h\n\t int 21h\nmain endp\nend main</s>"
  },
  {
    "text": "<s>[INST] Create a Swift program to print out the following: “Hello, World!” [/INST] print(\"Hello, World!\")</s>"
  },
  {
    "text": "<s>[INST] Design a function that takes a number, n, and returns the n’th Fibonacci number. Remember that the Fibonacci sequence begins with 0, 1, and each subsequent number is the sum of the previous two numbers. [/INST] def Fibonacci_number(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_number(n-1)+Fibonacci_number(n-2)</s>"
  },
  {
    "text": "<s>[INST] Find the number of times the substring “ab” appears in the given string.\n\ntext = \"abraacadabrabracabracabracabra\" [/INST] def count_substring(string, sub_string): \n    count = 0\n  \n    #Loop over the length of string \n    for i in range(0, len(string)): \n        # If a part of string matches with sub_string \n        #increment count  \n        if (string[i:i+ len(sub_string)] ==sub_string): \n            count += 1\n  \n    return count \n\ncount = count_substring(text, 'ab') \nprint(\"Number of substring occurrences: \", count)</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two strings and returns a boolean representing whether or not the strings are anagrams of one another. [/INST] def is_anagram(string1, string2):\n\n    # remove whitespaces\n    string1 = string1.replace(\" \",\"\")\n    string2 = string2.replace(\" \",\"\")\n\n    # check length\n    if len(string1) != len(string2):\n        return False\n\n    # create counters\n    counter = {}\n    for letter in string1:\n        if letter in counter :\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n            \n    for letter in string2:\n        if letter in counter:\n            counter[letter] -= 1\n        else:\n            return False\n        \n    # Check all values are 0\n    for key in counter:\n        if counter[key] != 0:\n            return False\n    \n    return True</s>"
  },
  {
    "text": "<s>[INST] Generate the HTML output for a page that has a title of \"Welcome\" and a body with a single header of \"Hello World!\". [/INST] <html>\n    <head>\n        <title>Welcome</title>\n    </head>\n    <body>\n        <h1>Hello World!</h1>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to find the maximum subarray of an array of numbers. [/INST] def max_subarray(arr): \n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)): \n        max_ending_here = max_ending_here + arr[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n    return max_so_far</s>"
  },
  {
    "text": "<s>[INST] Solve the following problem\n\nGiven two strings s and t, find the minimum window in s which will contain all the characters in t. [/INST] def minWindow(s, t): \n    # Initialize with None \n    minWindowLength = None\n    leftIndex = 0 \n          \n    # Balance will act as alphabet to store the occurrence of each character in t \n    balance = {}\n    for char in t:\n        if char not in balance:\n            balance[char] = 1\n        else:\n            balance[char] += 1\n              \n    # leftIndex and rightIndex act as two poiners to traverse the list\n    leftIndex = 0\n    rightIndex = 0\n    charactersFound = 0\n    # Start traversal from left \n    for i in range(len(s)): \n          \n        # If character present in t \n        if s[i] in balance: \n              \n            # Decrease its counter by 1 \n            balance[s[i]] -= 1  \n              \n            # if the character is found first time \n            if balance[s[i]] == 0: \n                charactersFound += 1\n                  \n        # If all characters present \n        if charactersFound == len(balance): \n            # Check the right side window \n            while(rightIndex <= i and charactersFound == len(balance)): \n                  \n                # remove the left side character \n                if s[leftIndex] in balance: \n                    if balance[s[leftIndex]] == 0: \n                        charactersFound -= 1\n  \n                    # Increase the counter of that character \n                    balance[s[leftIndex]] += 1\n                      \n                # Calculate the minimum window\n                if minWindowLength == None or (i-leftIndex+1) < minWindowLength: \n                    minWindowLength = i-leftIndex+1\n                      \n                leftIndex += 1\n                  \n    return minWindowLength</s>"
  },
  {
    "text": "<s>[INST] Create a sorting algorithm [/INST] def sort(arr):\n    n = len(arr)\n    \n    # Various loops to sort the array \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr</s>"
  },
  {
    "text": "<s>[INST] Generate an appropriate CSS code to fulfill the following purpose\n\nDefine a 500px x 500px div with rounded corners, a white background, a 0.2px red border, and text aligned to the center. [/INST] div {\n\twidth:500px;\n\theight:500px;\n\tbackground-color:white;\n\tborder-radius: 10px;\n\tborder: 0.2px solid red;\n\ttext-align:center;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an sql query to find the following\n\nFind the customer who has placed the highest number of orders. [/INST] SELECT customer_name, COUNT(order_id) \nFROM orders \nGROUP BY customer_name \nORDER BY COUNT(order_id) DESC \nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Construct an algorithm to fulfill the following purpose\n\nFind the two numbers that add up to a given number N. [/INST] def twoSum(N, arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == N:\n                return (arr[i], arr[j])</s>"
  },
  {
    "text": "<s>[INST] How would you print a big \"Hello World\" on the console output? [/INST] print('</s>"
  },
  {
    "text": "<s>[INST] Design a SQL query to retrieve the names of movies released in the last 10 years. [/INST] SELECT Name FROM Movies WHERE Release_Year > YEAR(CURDATE()) - 10;</s>"
  },
  {
    "text": "<s>[INST] Create a UI component in ReactJs to render a list of items from an array of objects.\n\nconst items = [\n    { name: \"Apple\", price: 12.99 },\n    { name: \"Orange\", price: 5.99 },\n    { name: \"Banana\", price: 3.99 },\n]; [/INST] const ItemList = ({ items }) => (\n  <ul>\n    {items.map(item => (\n      <li>{`${item.name}: ${item.price}`}</li>\n    ))}\n  </ul>\n);</s>"
  },
  {
    "text": "<s>[INST] Design a class in Java to represent a bank account that has a balance, a name, and an account number. [/INST] public class BankAccount {\n    private String name;\n    private String accountNumber;\n    private double balance;\n\n    public BankAccount(String name, String accountNumber, double balance) {\n        this.name = name;\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        balance -= amount;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    public String getName() {\n        return name;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a permutation of a given list of numbers. [/INST] import itertools \n  \ndef perms(lst): \n  perm = itertools.permutations(lst) \n  for i in list(perm): \n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Design a Node.js class to create a RESTful API. [/INST] const express = require('express');\n\n/*\nClass for generating a RESTful API with Node.js\n*/\nclass Api {\n    constructor() {\n        this.app = express();\n    }\n\n    //Method for creating a route\n    route(url, handler) {\n        this.app.get(url, handler);\n    }\n\n    //Method for running the app\n    start(port) {\n        this.app.listen(port);\n        console.log(`API is running on port ${port}`);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a CSS style sheet to apply the following styles to a div element. [/INST] div {\n    width: 50%;\n    padding: 30px;\n    font-size: 20px;\n    background-color: #EEE;\n    border: 1px solid black;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a unique URL for an online store. [/INST] https://online-store.example.com</s>"
  },
  {
    "text": "<s>[INST] Find the output of the following .NET Core code snippet.\n\nint[] numbers = {2, 3, 5, 7};\n\nvar result = numbers.Where(x => x % 2 == 0).Sum(); [/INST] The output of the code snippet is 10, as 2 and 6 (the two even numbers in the array) are added together to give 10.</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following Node.js code using promises\n\nfs.readFile('data.json', 'utf8', (err, data)) => {\nif (err) throw err;\n\n// do something with data\n} [/INST] const readFileAsync =  function (file) {\n return new Promise((resolve, reject) => {\n  fs.readFile(file, 'utf8', (err, data) => {\n   if (err) reject(err);\n   else resolve(data);\n  });\n });\n}\n\nconst dataPromise = readFileAsync('data.json');\n\ndataPromise.then(data => {\n    // do something with data\n})\n.catch(err) => {\n    throw err;\n};</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of assembly language. [/INST] Assembly language is a low-level programming language that provides a symbolic representation of the machine instructions for a specific processor or family of processors. It is typically used when writing code for embedded systems, or when the target processor and/or instruction set of the program is not well-known. Assembly language is generally used when more control over the memory management and data layout of a program is desired. It also allows for generating more efficient code since the code can be tailored for the target processor and instruction set.</s>"
  },
  {
    "text": "<s>[INST] Use conditionals and a for loop to return the sum of all odd numbers up to a given number. [/INST] def sum_odd_nums(n):\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            total += i\n    return total</s>"
  },
  {
    "text": "<s>[INST] Write a function to generate a random permutation of a given array.\n\n[1, 2, 3, 4, 5] [/INST] import random \n  \ndef random_permutation(input_list): \n    n = len(input_list) \n    for i in range( n - 1 ):\n        j = random.randint(i, n-1)\n        input_list[i], input_list[j] = input_list[j], input_list[i] \n    return input_list</s>"
  },
  {
    "text": "<s>[INST] Find the logarithm (base 10) of a number.\n\n1000 [/INST] 3.0</s>"
  },
  {
    "text": "<s>[INST] Store a list of elements in a dictionary, making each element the key and itself the value.\n\nlist = [4, 8, 12, 16] [/INST] dictionary = {4:4, 8:8, 12:12, 16:16}</s>"
  },
  {
    "text": "<s>[INST] Multiply two matrices and return the resulting matrix.\n\nMatrix A = [[1, 2], [3, 4]]\nMatrix B = [[5, 6], [7, 8]] [/INST] result = [[19, 22], [43, 50]]</s>"
  },
  {
    "text": "<s>[INST] How would you display the below list in descending order?\n\n[2, 5, 8, 9, 1] [/INST] [9, 8, 5, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Parse the below XML into a JSON object.\n\n<Root>\n <item>A</item>\n <item>B</item>\n <item>C</item>\n</Root> [/INST] {\n \"Root\": {\n  \"item\": [\"A\",\"B\",\"C\"]\n  } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to fetch data from two tables using an inner join.\n\nTableOne:\nID, Name, Age\nTableTwo:\nID, School [/INST] SELECT TableOne.ID, TableOne.Name, TableOne.Age, TableTwo.School\nFROM TableOne\nINNER JOIN TableTwo\nON TableOne.ID = TableTwo.ID;</s>"
  },
  {
    "text": "<s>[INST] How would you collect data from websites using Scrapy? [/INST] Scrapy is a Python framework used for web scraping. It can be used to extract data from websites using a variety of techniques. The first step is to create a Scrapy project and define the items you want to scrape. After that, create a Spider class which is responsible for crawling and extracting the data. Finally, you can use a range of methods like XPath and CSS selectors to collect the data.</s>"
  },
  {
    "text": "<s>[INST] Create a Node.js program for converting a temperature from Celsius to Fahrenheit. [/INST] const celsiusToFahrenheit = celsius => {\n  let fahrenheit = (celsius * 9/5) + 32;\n  return fahrenheit;\n};\n\nconst tempCelsius = 20;\nconst tempFahrenheit = celsiusToFahrenheit(tempCelsius);\n\nconsole.log(`${tempCelsius}°C is equal to ${tempFahrenheit}°F.`);</s>"
  },
  {
    "text": "<s>[INST] Create a query in MongoDB to search a record by its ID. [/INST] db.collection.find({\"_id\": ObjectId(\"<id>\")});</s>"
  },
  {
    "text": "<s>[INST] Convert the following JSON array to an XML document.\n\n[\n    {\n        \"name\":\"Alice\",\n        \"age\":25\n    },\n    {\n        \"name\":\"Bob\",\n        \"age\":30\n    }\n] [/INST] <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<data>\n    <person>\n        <name>Alice</name>\n        <age>25</age>\n    </person>\n    <person>\n        <name>Bob</name>\n        <age>30</age>\n    </person>\n</data></s>"
  },
  {
    "text": "<s>[INST] Design a database schema for a table which stores customer information? [/INST] CREATE TABLE customers ( \n id INT NOT NULL UNIQUE AUTO_INCREMENT,\n first_name VARCHAR(50) NOT NULL,\n last_name VARCHAR(50) NOT NULL,\n email VARCHAR(50) NOT NULL,\n phone_number VARCHAR(20) NOT NULL,\n address VARCHAR(200) NOT NULL,\n PRIMARY KEY (id)\n);</s>"
  },
  {
    "text": "<s>[INST] Build an online form for collecting customer feedback using HTML elements. [/INST] <form action=\"\">\n <label for=\"name\">Name</label><br />\n <input type=\"text\" id=\"name\" name=\"name\" /><br /> \n \n <label for=\"email\">E-Mail</label><br />\n <input type=\"email\" id=\"email\" name=\"email\" /><br />\n \n <label for=\"feedback\">Feedback</label><br />\n <textarea id=\"feedback\" name=\"feedback\"></textarea> <br />\n \n <input type=\"submit\" value=\"Submit\" />\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to retrieve the name of the manager and the department they manage. [/INST] SELECT \n  manager.name AS manager_name, \n  department.name AS department_name \nFROM manager\n  JOIN department\n  ON manager.department_id = department.id;</s>"
  },
  {
    "text": "<s>[INST] Implement a search algorithm in Java. [/INST] public class SearchAlgorithm {\n  public int search(int[] array, int target) {\n    int left = 0;\n    int right = array.length - 1;\n    \n    while (left <= right) {\n      int mid = (left + right) / 2;\n      \n      if (target == array[mid]) {\n        return mid;\n      }\n      if (target < array[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n    return -1;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a hash of a given string using the SHA-256 algorithm in Python.\n\nstring = \"Hello World\" [/INST] import hashlib\n\nstring = \"Hello World\"\nresult = hashlib.sha256(string.encode()).hexdigest()\nprint(result)  # output: \"a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\"</s>"
  },
  {
    "text": "<s>[INST] Create an object of type Car in Java. [/INST] public class Car {\n    private String make;\n    private String model;\n    private String color;\n\n    //getters and setters\n\n    public Car(String make, String model, String color) {\n        this.make = make;\n        this.model = model;\n        this.color = color;\n    }\n\n    public String getMake() {\n        return make;\n    }\n\n    public void setMake(String make) {\n        this.make = make;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    public String getColor() {\n        return color;\n    }\n\n    public void setColor(String color) {\n        this.color = color;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Design a RESTful API that returns customer information. [/INST] GET /customers\nReturns a list of customer objects\n\nGET /customers/{id}\nReturns customer info with the customer id\n\nPOST /customers\nAdd a new customer\n\nPUT /customers/{id}\nUpdate existing customer info with given customer id\n\nDELETE /customers/{id}\nDelete customer with given customer id</s>"
  },
  {
    "text": "<s>[INST] Create a cURL command that retrieves the contents of a webpage. [/INST] curl -X GET http://example.com</s>"
  },
  {
    "text": "<s>[INST] Convert the following for loop to a recursive solution.\n\nfor i in range(0, 10):\n    print('i: ', i) [/INST] def loopRecursion(num): \n  if(num<10): \n    print(\"i:\",num) \n    loopRecursion(num+1) \n\nloopRecursion(0)</s>"
  },
  {
    "text": "<s>[INST] Given two arrays of integers, find a pair of values (one from each array) that you can swap to give the two arrays the same sum.\n\n[1, 2, 3, 4], [3, 2, 1, 4] [/INST] def find_pair(arr1, arr2):\n    sum_arr1 = sum(arr1)\n    sum_arr2 = sum(arr2)\n    diff = abs(sum_arr1 - sum_arr2)\n\n    for x in arr1:\n        for y in arr2:\n            if x + y == diff:\n                return (x, y)\n\n    return -1</s>"
  },
  {
    "text": "<s>[INST] Write a code that computes the given equation for x.\n\nx2 + 3x - 7 = 0 [/INST] def compute_equation(x):\n  return x**2 + 3*x - 7</s>"
  },
  {
    "text": "<s>[INST] Create a Python program that accepts input from the user and prints out the result for Fibonacci sequence [/INST] def print_fibonacci(n):\n  a = 0\n  b = 1\n  print('Fibonacci sequence:')\n  while a < n:\n    print(a, end=' ')\n    tmp_var = a\n    a = b\n    b = tmp_var + b\n\nnum = int(input(\"Enter positive number: \"))\nprint_fibonacci(num)</s>"
  },
  {
    "text": "<s>[INST] Create a RUST program that prints out the highest number from an array of integers.\n\n[6, 1, 4, 22, 7, 9] [/INST] fn main() {\n    let arr = [6, 1, 4, 22, 7, 9];\n    let max_num: i32 = arr[0];\n\n    for x in 0..arr.len() {\n        if arr[x] > max_num {\n            max_num = arr[x];\n        }\n    }\n\n    println!(\"Max number: {}\",max_num);\n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to check if a number is even or not without using modulus (%) operator [/INST] def is_even(num):\n\tif num & 1 == 0:\n\t\treturn True\n\telse:\n\t\treturn False</s>"
  },
  {
    "text": "<s>[INST] Create a program in C# to find the nth Fibonacci number in the sequence. [/INST] public static int FindNthFibonacci(int n)\n{\n    int firstNumber = 0, secondNumber = 1, result = 0;\n \n    if (n == 0 || n == 1)\n        return n;\n    else\n    {\n        for (int i = 2; i <= n; i++)\n        {\n            result = firstNumber + secondNumber;\n            firstNumber = secondNumber;\n            secondNumber = result;\n        }\n        return result;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a shell script to list out the folders and its size in the current directory [/INST] #!/bin/bash\n\necho \"Folders and Sizes: \"\nfor item in `ls -l`\ndo\n   if [ -d $item ]\n   then\n        dirSize=`du -s $item | awk '{print $1}'`\n        echo \"$item : $dirSize\"\nfi\ndone</s>"
  },
  {
    "text": "<s>[INST] Derive the formula for calculating the circumference of a circle. [/INST] The formula for calculating the circumference of a circle is C = 2*π*r, where r is the radius of the circle.</s>"
  },
  {
    "text": "<s>[INST] Output the maximum element of a list\n\nlist = [1, 23, 12, 38, 56, 9] [/INST] max_element = 56</s>"
  },
  {
    "text": "<s>[INST] Debug the following code by finding the syntax error.\n\ndef calculate_value(nums):\n    result = 0\n    for num in nums\n        result += num\n    return result [/INST] def calculate_value(nums):\n    result = 0\n    for num in nums: # missing colon\n        result += num\n    return result</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in an array and displays all of the elements in the array in reverse order.\n\nlist_elements = [15,19,20] [/INST] def reverse_list_elements(list_elements):\n    list_elements.reverse()\n    for element in list_elements:\n        print(element)</s>"
  },
  {
    "text": "<s>[INST] Output the items in a list with the length less than or equal to the given number.\n\nlist_items = [1, 2, 3, 4, 5]\ngiven_number = 3 [/INST] output_items = [item for item in list_items if len(str(item)) <= given_number]\nprint(output_items)\n\n# Output\n[1, 2, 3]</s>"
  },
  {
    "text": "<s>[INST] Validate the email address using a regular expression.\n\nemail = \"example@gmail.com\" [/INST] import re\n\n# Validate the email address using the regex\nemail_pattern = re.compile(r'\\S+@\\S+\\.\\S+')\nemail_valid = re.match(email_pattern, email)\n\nif email_valid:\n    print(\"Valid Email Address\")\nelse:\n    print(\"Invalid Email Address\")\n\n# Output\nValid Email Address</s>"
  },
  {
    "text": "<s>[INST] What number is missing in the following sequence?\n\n2, 4, 8, 16, __ [/INST] 32</s>"
  },
  {
    "text": "<s>[INST] What is the index of the item which is given below?\n\nmy_list = [1, 2, 3, 4, 5]\nitem_to_find = 3 [/INST] index_of_item = my_list.index(item_to_find)\n\n# Output\n2</s>"
  },
  {
    "text": "<s>[INST] Design a program that automatically refactors a python code to improve readability and reduce complexity.\n\ndef myfunc():\nx = 1\ny = 5\nreturn x + y [/INST] def myfunc():\n    x = 1\n    y = 5\n    return x + y</s>"
  },
  {
    "text": "<s>[INST] Beatify the following code by formatting it properly with adequate indentation and formatting.\n\ndef func1(): print(\"this is function 1\") print(\"this is function 2\") [/INST] def func1():\n    print(\"this is function 1\") \n    print(\"this is function 2\")</s>"
  },
  {
    "text": "<s>[INST] Design a die roll program in Java. [/INST] import java.util.Random; \n  \npublic class RollDie \n{ \n    public static void main(String[] args) \n    { \n        // creating instance of Random class \n        Random rand = new Random(); \n  \n        // Generate random integers in range 0 to 6 \n        int rand_int = rand.nextInt(6); \n  \n        // Print random integers \n        System.out.println(\"The die shows : \"+ (rand_int + 1)); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program for finding the sum of two numbers.\n\nnumbers: 10, 15 [/INST] var first = 10; \nvar second = 15; \n\n// finding sum of two numbers \nvar sum = first + second; \n  \n// printing the result \nconsole.log(\"Sum of two numbers is \" + sum);</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code snippet to make the text bold. [/INST] <strong>Bold Text</strong></s>"
  },
  {
    "text": "<s>[INST] Create a HTML page that contains an unordered list with given items in a given order.\n\nlist items: \" Apple  \", \" Orange  \", \" Pineapple\" [/INST] <html>\n    <head>\n        <title>Fruits List</title>\n    </head>\n    <body>\n        <ul>\n            <li>Apple</li>\n            <li>Orange</li>\n            <li>Pineapple</li>\n        </ul>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to find the greatest of three given numbers. [/INST] let a = 10;\nlet b = 20;\nlet c = 23;\n\n// greatest of three numbers\nlet greatest = 0;\n\nif(a >= b && a >= c) {\n    greatest = a;\n} else if(b >= a && b >= c) {\n    greatest = b;\n} else {\n    greatest = c;\n}\n\nconsole.log('The greatest number among the given numbers is ' + greatest);</s>"
  },
  {
    "text": "<s>[INST] Design a program in C# to print the following patterns. [/INST] class Pattern\n{\n    static void Main(string[] args)\n    {\n        for (int i = 1; i <= 5; i++)\n        {\n            for (int j = 1; j <= i; j++)\n            {\n                Console.Write(\"*\");\n            }\n            Console.WriteLine();\n        }\n        for (int i = 4; i >= 0; i--)\n        {\n            for (int j = 1; j <= i; j++)\n            {\n                Console.Write(\"*\");\n            }\n            Console.WriteLine();\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a function in python to check if a given word can be formed with the given set of letters.\n\nSet of letters: 'abeos'\nWord: 'seabed' [/INST] def can_form_word(set_letters, word):\n    flag = True\n    for letter in word:\n        if letter not in set_letters:\n            flag = False\n            break\n    return flag</s>"
  },
  {
    "text": "<s>[INST] Extract the first name of the user from the below format.\n\nFull Name- Abraham Lincoln [/INST] Abraham</s>"
  },
  {
    "text": "<s>[INST] Develop a code in python to list the elements present in a given dictionary.\n\ndictionary = {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"location\": \"London\"\n} [/INST] def list_elements(dict):\n    for item in dict:\n        print(item, \":\", dict[item])\n\nlist_elements(dictionary)\n\n# Output:\n# name : John\n# age : 20\n# location : London</s>"
  },
  {
    "text": "<s>[INST] Replace every occurrence of 'a' with 'b' in the given string.\n\ncave [/INST] cbve</s>"
  },
  {
    "text": "<s>[INST] Modify the previous code so that it is now optimized for time complexity?\n\ndef quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater) [/INST] def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 1\n        for j in range(1, len(arr)):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n        arr[0], arr[i-1] = arr[i-1], arr[0]\n        left = quick_sort(arr[:i-1])\n        right = quick_sort(arr[i:])\n        return left + [arr[i-1]] + right</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program to loop the following array\n\narray = [2, 4, 6, 8, 10]; [/INST] let array = [2, 4, 6, 8, 10];\n\nfor (let i=0; i<array.length; i++) {\n  console.log(array[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Print the even numbers in a given array?\n\narray = [2, 3, 4, 5, 6, 7, 8, 9]; [/INST] let array = [2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (let i=0; i<array.length; i++) {\n  if (array[i] % 2 === 0) {\n    console.log(array[i]);\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a list of square numbers between 0 and 9 [/INST] square_numbers = []\n\nfor i in range(10):\n    square_numbers.append(i * i)\n\nprint(square_numbers) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript Program to sort an unsorted array\n\narray = [2, 4, 1, 6, 8, 9, 5]; [/INST] let array = [2, 4, 1, 6, 8, 9, 5];\n\nlet sorted_array = array.sort((a, b) => a-b);\n\nconsole.log(sorted_array); // [1, 2, 4, 5, 6, 8, 9]</s>"
  },
  {
    "text": "<s>[INST] Write a script to normalize each word in a given sentence by converting it into lowercase.\n\nThe Quick Brown Fox Jumps Over The Lazy Dog. [/INST] sentence = \"The Quick Brown Fox Jumps Over The Lazy Dog\"\nsentence = sentence.lower().split()\nsentence = ' '.join(sentence)\nprint(sentence)</s>"
  },
  {
    "text": "<s>[INST] Write a Tensorflow model to classify a given X and Y as either positive or negative.\n\nX = [1, 1, 2, 4]\nY = [3, 1, 0, 4] [/INST] import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Dense(8, input_dim=2, activation=\"relu\"), \n  tf.keras.layers.Dense(1, activation=\"sigmoid\")\n])\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=tf.keras.optimizers.Adam(0.01),\n              metrics=['accuracy'])\n\nX_list = [X, Y] \ny = [1, 0]\n\nmodel.fit(X_list, y, batch_size=4, epochs=4)</s>"
  },
  {
    "text": "<s>[INST] Read this JSON structure, parse it and print the value of \"name\".\n\n{ \n  \"person\": { \n    \"name\":\"John\", \n    \"age\": 30, \n    \"location\": \"USA\"\n  }\n} [/INST] import json \n  \n# input JSON \njson_data = '{ \"person\": { \"name\":\"John\", \"age\":30, \"location\":\"USA\" } }'\n\n# parse json\ndata = json.loads(json_data) \n\n# get the name\nname = data[\"person\"][\"name\"] \n\n# print the name\nprint(name)</s>"
  },
  {
    "text": "<s>[INST] Write code to create a bar chart comparing the performance of two different algorithms.\n\nAlgorithm 1: [90, 91, 95, 94, 99]\nAlgorithm 2: [83, 89, 95, 91, 99] [/INST] import matplotlib.pyplot as plt \n  \n# Data to plot \nalgorithm1 = [90, 91, 95, 94, 99]\nalgorithm2 = [83, 89, 95, 91, 99]\n  \n# plotting a bar chart \nplt.bar([1, 2, 3, 4, 5], algorithm1, label = \"Algorithm1\", width = 0.25, color = 'b') \nplt.bar([1.25, 2.25, 3.25, 4.25, 5.25], algorithm2, \n        label = \"Algorithm2\", width = 0.25, color = 'r') \n  \n# Naming X-axes \nplt.title('Performance Comparison') \nplt.xlabel('Runs') \nplt.ylabel('Accuracy %') \nplt.xticks([1.125, 2.125, 3.125, 4.125, 5.125], ['1', '2', '3', '4', '5']) \n  \n# Show the legend \nplt.legend() \n  \n# Function to show the plot \nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form to allow users to enter an email address and a message. [/INST] <!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n  <form action=\"submit.php\" method=\"post\">\n    Email: <input type=\"text\" name=\"email\">\n    Message: <input type=\"text\" name=\"message\">\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a CSS class 'blue-background' which will set background color of any div to blue. [/INST] .blue-background {\n    background-color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an Objective-C statement to create an empty array to hold names. [/INST] NSMutableArray *names = [NSMutableArray array];</s>"
  },
  {
    "text": "<s>[INST] How will you debug an unresponsive Flask web application? [/INST] To debug an unresponsive Flask web application, you should first check the server logs. If there are any errors, they should be debugged first. Other steps might include disabling caching, checking for memory leaks, checking for database locking, and checking for any long-running requests. You could also use a profiler to run performance analysis on the code and identify any bottlenecks in the code. Lastly, you could use logging or debugging libraries (like pdb) to step-through the code and identify the source of any problems.</s>"
  },
  {
    "text": "<s>[INST] Design an efficient algorithm to search for an item in an array. [/INST] One efficient algorithm to search for an item in an array is the binary search algorithm. The binary search algorithm works by dividing the array into two parts and then searching through the divided parts in logarithmic time. The algorithm starts by comparing the item to be searched with the middle element of the array. If the item is smaller than the middle element, then the algorithm searches the first part of the array. If the item is larger than the middle element, then the algorithm searches the second part of the array. The process is then repeated until the item is found or the algorithm reaches the end of the array.</s>"
  },
  {
    "text": "<s>[INST] Explain why recursion is a powerful technique for solving problems. [/INST] Recursion is a powerful technique for solving problems because it allows for decomposing complex problems into simpler subproblems. By breaking down a problem into smaller components, it becomes easier to solve. This process can be repeated until a base case is reached, providing a way to reach a solution for the original problem. Additionally, recursive solutions tend to be shorter and easier to comprehend than iterative solutions.</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python which takes a string and an integer n as input and returns a string with the first n characters of the given string. [/INST] def get_first_n_chars(string, n):\n    return string[:n]</s>"
  },
  {
    "text": "<s>[INST] Identify the most efficient algorithm to find the maximum element in an array. [/INST] The most efficient algorithm to find the maximum element in an array is the Linear Search algorithm. This algorithm works by looping through the array and comparing each element to find the maximum element. This algorithm takes O(n) time and requires no additional space.</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to reverse each word of a given sentence.\n\nThis is a test [/INST] def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\nprint(reverse_words(\"This is a test\")) # Output: sihT si a tset</s>"
  },
  {
    "text": "<s>[INST] How would you verify that a given string is a valid email address? [/INST] To verify that a given string is a valid email address, you should use a regular expression. A regular expression is a sequence of characters which can be used to check if the string matches a predefined pattern. The pattern for a valid email address should ensure that it contains the symbol \"@\" and at least one period (.) in the domain name.</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python which takes an integer n and an unsorted list of numbers as input and returns the nth smallest number in the list.\n\n[5, 8, 1, 9, 4], 3 [/INST] def nth_smallest(nums, n):\n    sorted_nums = sorted(nums)\n    return sorted_nums[n-1]\n\nprint(nth_smallest([5, 8, 1, 9, 4], 3)) # Output: 5</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program that computes the average of the given array elements.\n\narr = {1, 2, 3, 4, 5} [/INST] #include <iostream>\n\nint main() {\n   int arr[] = {1, 2, 3, 4, 5};\n   int sum = 0;\n   int n = 5;\n \n   for (int i = 0; i < n; i++) {\n      sum = sum +arr[i];\n   }\n   int avg = sum/n;\n   std::cout << \"Average = \" << avg; \n   return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Sort the following list of strings.\n\nlist = [\"apple\", \"mango\", \"banana\", \"pear\"] [/INST] list = [\"apple\", \"banana\", \"mango\", \"pear\"]</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript that takes two arguments and adds them. [/INST] function add(a, b) {\n   return a + b;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a program that accepts two strings as input, and then check to see if the two strings are an anagram of each other.\n\nword1 = ‘earth’\nword2 = ‘heart’ [/INST] def check_anagrams(word1, word2):\n    return sorted(word1) == sorted(word2)\n  \nword1 = 'earth'\nword2 = 'heart'\nprint(check_anagrams(word1, word2))</s>"
  },
  {
    "text": "<s>[INST] Generate a correct for loop that prints every other number between 0 and 10. [/INST] for num in range(0, 11, 2):\n    print(num)</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a dictionary and an integer as parameters, and returns the value of the dictionary corresponding to the given integer.\n\ndictionary = {1: \"Monday\", 2: \"Tuesday\", 3: \"Wednesday\"}\ninteger = 2 [/INST] def get_value(dictionary, integer):\n    return dictionary[integer]\n\ndictionary = {1: \"Monday\", 2: \"Tuesday\", 3: \"Wednesday\"}\ninteger = 2\nprint(get_value(dictionary, integer))</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript for reversing the order of the characters in a given string.\n\nvar str = \"TestString\"; [/INST] function reverseString(str) {\n var reversedStr = '';\n for (var i = str.length - 1; i >= 0; i--){\n reversedStr += str[i];\n }\n return reversedStr;\n}\nconsole.log(reverseString(str)); // gnirtSEtsT</s>"
  },
  {
    "text": "<s>[INST] Create an HTML document to display \"Hello, World!\" in bold. [/INST] <!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <b>Hello, World!</b>    \n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Rewrite the following C# program to use a for loop instead of a while loop.\n\nint i = 0;\nwhile (i < 10)\n{\n Console.WriteLine(i);\n i++;\n} [/INST] for (int i = 0; i < 10; i++) \n{ \n Console.WriteLine(i); \n}</s>"
  },
  {
    "text": "<s>[INST] Use HTML to create a button for opening a new browser window when clicked. [/INST] <input type=\"button\" value=\"Open New Window\" onclick=\"window.open('https://example.com/');\" /></s>"
  },
  {
    "text": "<s>[INST] Use CSS to center a div inside a parent div. [/INST] .parent {\n position: relative;\n}\n.child {\n position: absolute;\n top: 50%;\n left: 50%;\n transform: translate(-50%, -50%);\n}</s>"
  },
  {
    "text": "<s>[INST] Compute the area and perimeter of a triangle\n\nBase: 5 cm\nHeight: 10 cm [/INST] Area = 25 cm^2\nPerimeter = 15.59 cm</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to group salary data by job type\n\nTable Employee:\n+----+----------+-----------+-----------+\n| ID | Name     | Job       | Salary    |\n+----+----------+-----------+-----------+\n| 1  | John     | Manager   | 150000    |\n| 2  | Tom      | Engineer  | 80000     |\n| 3  | Nick     | Manager   | 120000    |\n| 4  | Alice    | Engineer  | 87500     |\n| 5  | Steve    | Designer  | 50000     |\n| 6  | Mary     | Designer  | 62500     |\n+----+----------+-----------+-----------+ [/INST] SELECT Job, AVG(Salary)\nFROM Employee\nGROUP BY Job</s>"
  },
  {
    "text": "<s>[INST] Using regex, convert a string of dates from the format 'dd/mm/yyyy' to 'mm/dd/yyyy'\n\nString \"05/06/2019, 10/08/2020\" [/INST] String \"06/05/2019, 08/10/2020\"</s>"
  },
  {
    "text": "<s>[INST] Using HTML and CSS, create a simple two-columns landing page. [/INST] <!DOCTYPE html>\n<html>\n  <head>\n    <title>Two-Column Layout</title>\n    <style>\n       /* define a fixed width for the entire content */\n       .wrapper{\n         width: 1000px;\n         margin: 0 auto;\n       }\n\n       /* define the size and margin of the two columns */\n       .main-column{\n         float: left;\n         width: 650px;\n         margin-right: 20px;\n       }\n\n       .side-column{\n         float: left;\n         width: 300px;\n       }\n    </style>\n  </head>\n\n  <body>\n    <div class=\"wrapper\">\n      <div class=\"main-column\">\n        <!-- content in main column -->\n      </div>\n\n      <div class=\"side-column\">\n        <!-- content in side column -->\n      </div>\n    </div>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create the following table using the Python language: [/INST] table = [[\"Name\", \"Age\", \"Gender\"],[\"John\", 20, \"Male\"], [\"Anna\", 18, \"Female\"],[\"Adam\", 22, \"Male\"], [\"Sophie\", 19, \"Female\"]]</s>"
  },
  {
    "text": "<s>[INST] Come up with a python code to find the mean of a list of numbers.\n\nnums = [78, 79, 79, 79, 79, 80] [/INST] total = 0\nfor num in nums:\n    total += num\nmean = total/len(nums)\nprint(mean)</s>"
  },
  {
    "text": "<s>[INST] Create HTML code for a two-column page layout with two paragraphs in each column. [/INST] <style>\n    .container {\n        display: flex;\n        justify-content: space-around;\n    }\n\n    .text {\n        width: 45%;\n    }\n</style>\n\n<div class=\"container\">\n    <div class=\"text\">\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam vel tempus velit, vel auctor erat. Nam maximus varius urna quis ornare.</p>\n        <p>Vestibulum iaculis augue et dui maximus, eu auctor dui aliquet. Interdum et malesuada fames ac ante ipsum primis in faucibus.</p>\n    </div>\n    <div class=\"text\">\n        <p>Sed et metus pulvinar, ultricies sapien sed, dignissim leo. Integer ex est, consequat non mi eget, convallis egestas mauris.</p>\n        <p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Morbi cursus, magna at bibendum semper, erat lacus commodo nisi.</p>\n    </div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Write a query to find all entries in a table called customers with postal code 32412. [/INST] SELECT * FROM customers WHERE postal_code = '32412';</s>"
  },
  {
    "text": "<s>[INST] Generate an SQL statement to add a row in the customers table where the columns are name, address, and city.\n\nname = 'John';\naddress = '123 Main Street';\ncity = 'Winter Park'; [/INST] INSERT INTO customers (name, address, city) VALUES ('John', '123 Main Street', 'Winter Park');</s>"
  },
  {
    "text": "<s>[INST] Devlop a SQL query to update the address for a user with id 10.\n\nuser_id = 10\nnew_address = '321 Market Street' [/INST] UPDATE customers SET address = '321 Market Street' WHERE user_id = 10;</s>"
  },
  {
    "text": "<s>[INST] Edit the following piece of code to form a valid sentence.\n\nThis poet is one of America's most loved poets. [/INST] This poet is one of America's most beloved poets.</s>"
  },
  {
    "text": "<s>[INST] Train a linear regression model on a dataset containing m columns and n rows. [/INST] model = LinearRegression()\nmodel.fit(X, y)</s>"
  },
  {
    "text": "<s>[INST] For a given network layer, compute the total number of weights.\n\nNumber of input neurons: 4, Number of output neurons: 3 [/INST] The total number of weights in the network layer is 4 * 3 = 12.</s>"
  },
  {
    "text": "<s>[INST] Classify the following statement as true or false.\n\nThe square root of 4 is 2. [/INST] True. The square root of 4 is 2.</s>"
  },
  {
    "text": "<s>[INST] Implement a function which takes an array and returns the maximum number.\n\n[2, 4, 8, 6] [/INST] def max_num(arr):\n    n = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > n:\n            n = arr[i]\n    return n\n\nmax_num([2, 4, 8, 6]) # Output: 8</s>"
  },
  {
    "text": "<s>[INST] Determine the output of the following code.\n\nfor i in range(2, 8):\n    print(i * i) [/INST] 4\n9\n16\n25\n36\n49</s>"
  },
  {
    "text": "<s>[INST] Convert the following SQL query to its equivalent Python expression.\n\nSELECT name FROM students WHERE age > 18 [/INST] [student['name'] for student in students if student['age'] > 18]</s>"
  },
  {
    "text": "<s>[INST] How many times will the following loop be executed?\n\nfor i in range(5):\n    print('Hello') [/INST] The loop will be executed 5 times. The range function will generate numbers from 0 to 4 (inclusive). Therefore, the loop will be executed 5 times with 'Hello' being printed each time.</s>"
  },
  {
    "text": "<s>[INST] What's the average value of the following list of numbers?\n\n[2, 3, 6, 4] [/INST] The average value of [2, 3, 6, 4] is 3.75. This can be calculated by summing up all of the numbers, i.e. 2 + 3 + 6 + 4 = 15, and then dividing by the number of elements in the list, i.e. 4. Therefore, the average value is 15 / 4 = 3.75.</s>"
  },
  {
    "text": "<s>[INST] Develop a Python function to append a number with zeros to a given string up to a maximum number of characters.\n\nstring = \"some_string\", max_len = 10 [/INST] def append_num_with_zeros(string, max_len):\n    \"\"\"Append a number with zeros to a given string up to a maximum number of characters.\"\"\"\n    # Convert string to list\n    ls = list(string)\n    # Calculate number of zeros required to append\n    num_zeros = max_len - len(string)\n    # Append zeros\n    for i in range(num_zeros):\n        ls.append('0')\n    # Convert list back to string\n    return ''.join(ls)</s>"
  },
  {
    "text": "<s>[INST] Improve the following code snippet to make it more efficient and organized.\n\ndef printElements(list):\n  for element in list:\n    print(element) [/INST] def printElements(list):\n    \"\"\"Print all elements of a given list.\"\"\"\n    # Check if list is empty\n    if not list:\n        print(\"List is empty\")\n    # Loop through the list\n    else:\n        for element in list:\n            print(element)</s>"
  },
  {
    "text": "<s>[INST] Write an AJAX query to get the data from the given URL.\n\nurl = https://www.arecipe.com/data [/INST] $.ajax({\n    url: url,\n    type: 'GET',\n    success: function(data) {\n        console.log(data);\n    }\n});</s>"
  },
  {
    "text": "<s>[INST] Remove all duplicate words from the given sentence.\n\nsentence = \"All all are are we we here here to to help help.\" [/INST] sentence = 'All are we here to help.'</s>"
  },
  {
    "text": "<s>[INST] Name the commonly used data structure for implementing stacks. [/INST] The commonly used data structure for implementing stacks is a linked list.</s>"
  },
  {
    "text": "<s>[INST] Create a class to represent a complex number with two private fields (x, y) and two public member functions (getMagnitude, increment) in Java. [/INST] public class ComplexNumber {\n  private double x;\n  private double y;\n \n  public ComplexNumber(double x, double y) {\n    this.x = x;\n    this.y = y;\n  }\n  \n  public double getMagnitude() {\n    return Math.sqrt(x * x + y * y);\n  }\n  \n  public void increment() {\n    this.x++;\n    this.y++;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate the sum of numbers from a given list in Python. [/INST] def sum_list(list):\n    \"\"\"Calculate the sum of numbers from a given list\"\"\"\n    # Initialize sum\n    s = 0\n    # Sum the list\n    for number in list:\n        s += number\n    # Return the result\n    return s</s>"
  },
  {
    "text": "<s>[INST] Create a code snippet to print the star pattern below in Python. [/INST] # Print the pattern \nrows = 5\nfor i in range(0, rows): \n    for j in range(0, i + 1): \n        print(\"*\", end=' ') \n    print(\"\\r\")</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to count the number of records with age greater than 25 from a given table. [/INST] SELECT COUNT(*) FROM table WHERE age > 25;</s>"
  },
  {
    "text": "<s>[INST] Add exception handling for user-defined errors to the following code snippet in Java.\n\npublic class MyClass {\n    public static void main(String[] args) {\n        int x = 4;\n        int y = 2;\n        int z = x/y;\n        System.out.println(z);\n    }\n} [/INST] public class MyClass {\n    public static void main(String[] args) {\n        try {\n            int x = 4;\n            int y = 2;\n            int z = x/y;\n            System.out.println(z);\n        } catch (ArithmeticException ex) {\n            System.out.println(\"Division by zero not allowed.\");\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to get the remainder when 34 is divided by 5 in JavaScript. [/INST] let num = 34;\nlet divisor = 5;\nlet remainder = num % divisor;\nconsole.log(remainder); // prints 4</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query that selects the employee name, job title, and salary for employees with a salary greater than $50,000.\n\nTable Name: employee\nColumns: Name, JobTitle, Salary [/INST] SELECT Name, JobTitle, Salary\nFROM employee\nWHERE Salary > 50000;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet that creates a pop-up window with the text \"Welcome!\". [/INST] window.alert('Welcome!');</s>"
  },
  {
    "text": "<s>[INST] Request the age of a user using HTML and store the user's answer in a variable called \"Age\". [/INST] <label for=\"age\">Please enter your age: </label>\n<input type=\"number\" name=\"age\" id=\"age\">\n\n// Store the user's answer in a variable\nvar Age = document.getElementById(\"age\").value;</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that searches the database for users with names beginning with the letter 'A'.\n\nTable Name: Users [/INST] SELECT * FROM Users \nWHERE name LIKE 'A%';</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query that returns records for users with a name starting with the letter 'S' or 'T'.\n\nTable Name: users [/INST] SELECT * \nFROM users \nWHERE name LIKE 'S%' OR name LIKE 'T%';</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query that averages the grades of students belonging to the Physics department.\n\nTable Name: Grades [/INST] SELECT AVG(grade) \nFROM Grades \nWHERE department = 'Physics';</s>"
  },
  {
    "text": "<s>[INST] Create a Python function that prints all the values in a dictionary.\n\nDictionary:  { \"a\": 1, \"b\": 2, \"c\": 3 } [/INST] def printDictValues(dict):\n    for key, value in dict.items():\n        print(value)\n\nprintDictValues({\"a\": 1, \"b\": 2, \"c\": 3})</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to search the database for the user with the highest score.\n\nTable Name:  users [/INST] SELECT * \nFROM users\nORDER BY score DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] What data type in JavaScript corresponds to a finite set of distinct values? [/INST] In JavaScript the data type that corresponds to a finite set of distinct values is an Enum. An Enum is a collection of related values that can be represented as a set of named constants. These constants can be used to represent a single value in many different forms. Each Enum value can be represented numerically or by a String literal value.</s>"
  },
  {
    "text": "<s>[INST] Write a macro in C++ that prints half of the cube of a number [/INST] #include <iostream> \n\n#define CUBE(x) ((x)*(x)*(x)) \n#define HALF_CUBE(x) ( (CUBE(x) )/2 ) \n  \nint main() \n { \n    int x = 3; \n    std::cout << HALF_CUBE(x) << std::endl; \n    return 0; \n }</s>"
  },
  {
    "text": "<s>[INST] What data structure would be best to store an employee roster containing their name, age, and gender? [/INST] The best data structure for storing an employee roster containing their name, age, and gender would be a hash table. A hash table is a data structure that allows for fast lookups and inserts by mapping values to keys. Each employee can be stored as a key-value pair, with their name, age, and gender as the respective values.</s>"
  },
  {
    "text": "<s>[INST] Create a for-loop structure in Java that prints out each index in the array A from 0 to the length of A minus 1.\n\nint[] A = {1, 2, 3, 4, 5} [/INST] for(int i = 0; i < A.length; i++) {\n    System.out.println(\"A[\" + i + \"] = \" + A[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] What is the JavaScript syntax for declaring a variable with the value of \"hello\"? [/INST] The JavaScript syntax for declaring a variable with the value of \"hello\" is  \"var myVariable= 'hello';\".</s>"
  },
  {
    "text": "<s>[INST] Suggest a name for a new string variable. [/INST] The name for the new string variable could be \"nameString\".</s>"
  },
  {
    "text": "<s>[INST] Reverse the following linked list in Java.\n\n// single linked list \nNode { \n    int data; \n    Node next; \n}\n    \nhead\n|\nV\n1 -> 2 -> 3 -> 4 -> NULL [/INST] // single linked list \nNode { \n    int data; \n    Node next; \n}\n    \nhead\n|\nV\n4 -> 3 -> 2 -> 1 -> NULL</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript that takes the two given arrays, A and B, and merges them into a single array.\n\nlet A = [1, 2, 3];\nlet B = [4, 5, 6]; [/INST] function mergeArrays(A, B) {\n  let merged = [];\n  let indexA = 0;\n  let indexB = 0;\n  while (indexA < A.length && indexB < B.length) {\n    merged.push(A[indexA], B[indexB]);\n    indexA++;\n    indexB++;\n  }\n  if (indexA < A.length) {\n    for (let i=indexA; i < A.length; i++) {\n      merged.push(A[i]);\n    }\n  }\n  if (indexB < B.length) {\n    for (let i=indexB; i < B.length; i++) {\n      merged.push(B[i]);\n    }\n  }\n  return merged;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with 4 divs, one of them should have text aligned in the center. [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>4 Divs</title>\n</head>\n<body>\n  <div>\n    This div does not contain any special styling\n  </div>\n  <div>\n    This div is colored red\n    <style>div { background-color: red; }\n</style>\n  </div>\n  <div>\n    This div is colored blue\n  <style>div { background-color: blue; }</style>\n  </div>  \n  <div style=\"text-align: center;\">\n    This div has the text aligned in the center \n  </div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] What is the command to run a Python script from the command line? [/INST] The command to run a Python script from the command line is `python filename.py`.</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a textbox, button and a message “Hello World!” [/INST] <html>\n    <head></head>\n    <body>\n        <input type=\"text\" id=\"textbox\">\n        <button onclick=\"sayHello()\">Say Hello</button>\n        <p id=\"message\">Hello World!</p>\n        \n        <script>\n            function sayHello() {\n                var text = document.getElementById('textbox').value;\n                document.getElementById('message').innerHTML = \"Hello \" + text + \"!\";\n            }\n        </script>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to center align a div element with id=\"content\" [/INST] #content {\n    margin: 0 auto;\n    width: 70%;\n    text-align: center;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a PowerShell script to list all the installed applications on a Windows machine [/INST] Get-ItemPropertyHKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | select-Object DisplayName, Publisher</s>"
  },
  {
    "text": "<s>[INST] What is the MySQL command to drop a database named 'test' [/INST] The MySQL command to drop a database named 'test' is `DROP DATABASE test;`.</s>"
  },
  {
    "text": "<s>[INST] Create a Node.js program to print the first 5 prime numbers [/INST] const prime_nums = () => {\n    let count = 0;\n    let num = 2;\n    while(count < 5) {\n        if(isPrime(num)) {\n            console.log(num);\n            count++;\n        }\n        num++;\n    }\n}\n\nfunction isPrime(n) {\n    for(let i = 2; i < n; i++)\n        if(n % i === 0) return false;\n    return true;\n}\n\nprime_nums();</s>"
  },
  {
    "text": "<s>[INST] Write a line of code to input 10 numbers from the user. [/INST] a = list(map(int, input(\"Enter 10 numbers: \").split()))</s>"
  },
  {
    "text": "<s>[INST] Create a function to compare two strings and output their similarity score.\n\nstring_1 = \"python\"\nstring_2 = \"coding\" [/INST] def compare_strings(string_1, string_2):\n    similarity_score = 0\n    n = min(len(string_1), len(string_2))\n    for i in range(n): \n        if string_1[i] == string_2[i]: \n            similarity_score += 1\n    return similarity_score</s>"
  },
  {
    "text": "<s>[INST] Output the total number of elements in a given list.\n\nlist_numbers = [1, 2, 3, 4, 5] [/INST] def count_list_elements(list_numbers):\n    count = 0\n    for element in list_numbers:\n        count += 1\n    return count</s>"
  },
  {
    "text": "<s>[INST] Create a function to search for a given element in a list and output its index.\n\nlist_numbers = [1, 2, 3, 4, 5] [/INST] def search_list(list_numbers, element):\n    for i in range(len(list_numbers)):\n        if list_numbers[i] == element:\n            return i</s>"
  },
  {
    "text": "<s>[INST] Write a command to install a package in Node.js from the Node Package Manager.\n\nPackage name: ejs [/INST] npm install ejs</s>"
  },
  {
    "text": "<s>[INST] Create an HTML element for a paragraph and add five sentences to it. [/INST] <p>\n  This is the first sentence. This is the second sentence. This is the third sentence. This is the fourth sentence. This is the fifth sentence.\n</p></s>"
  },
  {
    "text": "<s>[INST] Write a function in C# to round a given number to the next closest integer.\n\nNumber: 27.7 [/INST] public static int RoundToNearestInteger(double number)\n{\n        return (int)Math.Round(number, 0);\n}\n\nRoundToNearestInteger(27.7); //output: 28</s>"
  },
  {
    "text": "<s>[INST] Write an if-else statement in Java to check if a given number is greater than or equal to 15.\n\nNumber: 9 [/INST] int number = 9;\n\nif (number >= 15) {\n    System.out.println(\"Number is greater than or equal to 15\");\n} else {\n    System.out.println(\"Number is less than 15\");\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a regular expression pattern in Python that matches all emails. [/INST] pattern = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,63}$\"</s>"
  },
  {
    "text": "<s>[INST] Create a React component that displays an alert when a button is clicked. [/INST] import React from 'react';\n\nclass AlertButton extends React.Component {\n\n    onClick() {\n        alert('Button clicked!');\n    }\n\n    render() {\n        return (\n            <button onClick={this.onClick}>Click me</button>\n        );\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Bash command that outputs the system's date as \"DD-MM-YYYY\". [/INST] date +\"%d-%m-%Y\"</s>"
  },
  {
    "text": "<s>[INST] Create a Swift class called \"Vehicle\" that includes two properties: a model name (String) and a year (Int). [/INST] class Vehicle {\n  let modelName: String\n  let year: Int\n\n  init(modelName: String, year: Int) {\n    self.modelName = modelName\n    self.year = year\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Go language that will return the number of elements in a slice. [/INST] func len(s []int) int {\n\treturn len(s)\n}</s>"
  },
  {
    "text": "<s>[INST] Create a thread-safe Java method that increments a given counter. [/INST] public static synchronized void incrementCounter(int counter) {\n  counter += 1;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class in TypeScript that contains a method that takes two numbers, adds them, and returns the result. [/INST] class Math {\n  add(n1: number, n2: number): number {\n    return n1 + n2;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Construct\nan HTML form that includes two input fields, one for a name and one for an email address. [/INST] <form action=\"\">\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\">\n  <label>Email Address:</label>\n  <input type=\"email\" name=\"email\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Design an algorithm in JavaScript that finds the most frequent element in an array. [/INST] function mostFrequentElem(arr) {\n  let countMap = new Map();\n\n  for (let i = 0; i < arr.length; i++) {\n    if (!countMap.has(arr[i])) {\n      countMap.set(arr[i], 1);\n    } else {\n      let val = countMap.get(arr[i]);\n      countMap.set(arr[i], val + 1);\n    }\n  }\n  let maxCount = 1;\n  let maxElem;\n  for (let [key, val] of countMap.entries()) {\n    if (val > maxCount) {\n      maxCount = val;\n      maxElem = key;\n    }\n  }\n  return maxElem;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve the last four entries of a table called \"students\". [/INST] SELECT * FROM students ORDER BY id DESC LIMIT 4;</s>"
  },
  {
    "text": "<s>[INST] Create a rake task in Ruby that updates the system time. [/INST] task :update_time do\n  system(\"date +%T -s '#{Time.now.strftime(\"%H:%M:%S\")}'\")\nend</s>"
  },
  {
    "text": "<s>[INST] Write a command to retrieve the first n items from a list.\n\n[10, 20, 30, 40, 50], n = 3 [/INST] [10, 20, 30]</s>"
  },
  {
    "text": "<s>[INST] Create a JSON object with the following elements: firstname, lastname, age [/INST] {\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"age\": 25\n}</s>"
  },
  {
    "text": "<s>[INST] Edit this code to sort a list of strings alphabetically\n\nmylist = [\"Eggs\", \"Cheese\", \"Milk\"] [/INST] mylist.sort()</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page that prints the following message\n\n\"Welcome to my website!\" [/INST] <html>\n    <head>\n        <title>Welcome to my website!</title>\n    </head>\n    <body>\n        <h1>Welcome to my website!</h1>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select all the customers who are from the US. [/INST] SELECT * FROM customers WHERE country = 'US';</s>"
  },
  {
    "text": "<s>[INST] Explain in detail what is the significance of a local variable in Python [/INST] A local variable in Python is a variable that is declared within a function or a class. It is a variable that only exists in the context of that function or class, and cannot be accessed outside the function or class in which it is declared. Local variables are also referred to as \"lexical\" or \"automatic\" variables because they are automatically scoped to the function or class in which they are declared. They are different from global variables, which are available to the entire program. Local variables are helpful in limiting the scope of a variable, which means that the variable is only accessible in the function or class in which it is declared. This can help make code more efficient, clear, and secure.</s>"
  },
  {
    "text": "<s>[INST] How would you create a table in a database using SQL commands? [/INST] To create a table in a database using SQL commands, you would use the following SQL statement: CREATE TABLE <table_name>(column_name datatype);</s>"
  },
  {
    "text": "<s>[INST] Write a code snippets in Python to print the contents of a dictionary.\n\n{\"key1\": \"value1\", \"key2\": \"value2\"} [/INST] for key, value in dict.items():\n   print(\"Key: {}, Value: {}\".format(key, value))</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to insert new data into a table.\n\nTable Name: users\nColumns: id, name, email\nData: 1, John Doe, john@example.com [/INST] INSERT INTO users (id, name, email) VALUES (1, 'John Doe', 'john@example.com');</s>"
  },
  {
    "text": "<s>[INST] Construct an object literal in JavaScript to describe a person's name and age. [/INST] let person = {\n  name: \"John\",\n  age: 20\n};</s>"
  },
  {
    "text": "<s>[INST] Implement a linked list structure with an insert method using Java. [/INST] class Node {\n  int data;\n  Node next;\n  Node (int data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  Node head;\n\n  public void insert(int data) {\n    Node newNode = new Node(data);\n    if (head == null) {\n      head = newNode;\n    } \n    else {\n      Node current = head;\n      while (current.next != null) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Find the indices of the two numbers in an array that have the sum of a given number using JavaScript.\n\nlet arr = [2, 5, 11, 15],\n    targetSum = 16; [/INST] function twoNumSum(arr, targetSum) {\n  let hash = {};\n\n  for(let i = 0; i < arr.length; i++){\n    let current = arr[i];\n    \n    if(hash[current] !== undefined) return [hash.current, i];\n    else hash[targetSum - current] = i;\n  }\n\n  return [];\n}</s>"
  },
  {
    "text": "<s>[INST] Build an HTML table with 3 columns and 5 rows using JavaScript. [/INST] var htmlTable = '<table border=\"1\">';\n\n// Create the table rows \nfor (var i = 0; i < 5; i++){\n  htmlTable += '<tr>';\n\n  // Create the table columns\n  for (var j = 0; j < 3; j++){\n    htmlTable += \"<td></td>\";\n  }\n \n  htmlTable += \"</tr>\";\n}\n \nhtmlTable += \"</table>\";</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all orders greater than a given value. [/INST] SELECT * FROM orders WHERE value > [INPUT VALUE];</s>"
  },
  {
    "text": "<s>[INST] Construct an array of objects in JavaScript to represent a list of users. [/INST] let users = [\n  {\n    username: 'John',\n    age: 20\n  },\n  {\n    username: 'Jane',\n    age: 22\n  },\n  {\n    username: 'Jacob',\n    age: 25\n  }\n];</s>"
  },
  {
    "text": "<s>[INST] Write a code to generate n terms of the Fibonacci sequence. [/INST] def get_fibonacci(n):\n    \"\"\" Generates n terms of the Fibonacci sequence\n    \n    Args:\n        n (int): The number of Fibonacci terms to generate\n        \n    Returns:\n        list: A list of the first n Fibonacci numbers\n    \"\"\"\n    # Initialize first two Fibonacci numbers\n    a = 0\n    b = 1\n\n    # Initialize the Fibonacci Sequence list\n    fibonacci_sequence = []\n    fibonacci_sequence.append(a)\n    fibonacci_sequence.append(b)\n\n    # Generate the Fibonacci Sequence\n    while len(fibonacci_sequence) < n:\n        c = a + b\n        fibonacci_sequence.append(c)\n        a = b\n        b = c\n\n    return fibonacci_sequence</s>"
  },
  {
    "text": "<s>[INST] Print the nth element from a spin lock sequence using only O(1) space. [/INST] def get_spinlock_element(n):\n    \"\"\" Prints the nth element from a spin lock sequence using only O(1) space\n    \n    Args:\n        n (int): The number of the element to be retrieved\n        \n    Returns:\n        int: The nth element\n    \"\"\"\n    # Initialize the step size\n    step_size = 343\n    \n    # Find the previous two elements in the iteration\n    first = 0\n    second = 0\n    \n    # Initialize the index of the element to be retrieved\n    index = 0\n    \n    # Iterate over the elements until we reach the desired element\n    while index < n:\n        # Generate the next element in the sequence\n        element = first + second + 1\n        \n        # Update the previous two elements\n        first, second = second, element\n        \n        # Move the index\n        index += step_size\n    \n    # Return the element at the nth position\n    return element</s>"
  },
  {
    "text": "<s>[INST] Merge two sorted linked lists and return it as a new list. [/INST] def merge_sorted_lists(list1, list2):\n    \"\"\" Merges two sorted linked lists and returns it as a new list\n    \n    Args:\n        list1 (list): The first sorted linked list \n        list2 (list): The second sorted linked list\n        \n    Returns:\n        list: The merged sorted linked list\n    \"\"\"\n    # Initialize the merged list\n    merged_list = []\n    \n    # Initialize the pointers\n    i = 0\n    j = 0\n\n    # Iterate over the two lists\n    while i < len(list1) and j < len(list2):\n        # Add the element with the smaller value to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    # Add the remaining elements to the merged list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    \n    return merged_list</s>"
  },
  {
    "text": "<s>[INST] Construct a query to retrieve the names and ages of all customers [/INST] SELECT name, age FROM customers;</s>"
  },
  {
    "text": "<s>[INST] Construct a DB search query to find a customer by name\n\nName of the customer: John [/INST] SELECT * FROM customers WHERE name=\"John\";</s>"
  },
  {
    "text": "<s>[INST] Construct a regex pattern to match a valid IP address [/INST] ^(((25[0–5]|2[0-4][0–9]|[01]?[0-9][0–9]?)\\.){3}(25[0–5]|2[0-4][0–9]|[01]?[0–9][0–9]?))$</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to find the area of a triangle [/INST] Algorithm:\n\n1. Take the input for the sides of the triangle.\n2. Calculate the semiperimeter of the triangle using the formula (a+b+c)/2\n3. Calculate the area of the triangle using the formula:\n    area = √(s(s-a)(s-b)(s-c))</s>"
  },
  {
    "text": "<s>[INST] Create a neural network to classify types of dogs [/INST] import keras\nimport numpy as np\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# Building a Sequential model\nmodel = Sequential()\n# Input layer with 2 neurons\nmodel.add(Dense(2, input_dim=64, activation='relu'))\n# Hidden layer with 3 neurons\nmodel.add(Dense(3, activation='relu'))\n# Output layer with 15 neurons (15 classes)\nmodel.add(Dense(15, activation='softmax'))\n\n# Compiling and training the model\nmodel.compile(loss='mean_squared_error',\n              optimizer='adam',\n              metrics=['accuracy'])\nmodel.fit(training_samples, labels, epochs=100)</s>"
  },
  {
    "text": "<s>[INST] Develop a program to encrypt a text [/INST] #include <stdio.h>\n#include <string.h>\n\n// Encode a string using Ceasar cipher\nstring ceasar_encode(string s, int k)\n{\n    // Declare a variable to store the encoded string\n    string encoded_str = \"\";\n\n    // Loop through the string and encode each character\n    for (int i=0; i<strlen(s); i++)\n    {\n        // Shift each character with the given key\n        char enc = ((s[i]-'a' + k) % 26) + 'a';\n        encoded_str += enc;\n    }\n    return encoded_str;\n}\n\nint main()\n{\n before = \"abcdefghijklmnopqrstuvwxyz\";\n after = ceasar_encode(before, 5);\n printf(\"%s\\n\", after);\n\n return 0;\n}\n\n// Output: fghijklmnopqrstuvwxyzabcde</s>"
  },
  {
    "text": "<s>[INST] Develop a web page which takes user inputs and validates them [/INST] <!DOCTYPE html>\n<html>\n<head>\n<title>Validate user input</title>\n<script>\nfunction validateInput() {\n  var name = document.getElementById(\"name\").value;\n  var email = document.getElementById(\"email\").value;\n\n  if (name.length == 0 || email.length == 0) {\n    alert(\"Please enter your name and email.\");\n    return false;\n  }\n\n  if (!email.includes(\"@\")){\n    alert(\"Please enter a valid email address.\");\n    return false;\n  }\n\n  return true;\n}\n</script>\n</head>\n<body>\n<h3>Validate user input</h3>\n<form onsubmit=\"return validateInput()\">\nName: <input type=\"text\" id=\"name\" name=\"name\" /> <br/>\nEmail: <input type=\"text\" id=\"email\" name=\"email\" /> <br/>\n<input type=\"submit\" value=\"Submit\" />\n</form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] How do you compare two numbers, num1 and num2, in python? [/INST] We can compare two numbers, num1 and num2, in Python using the comparison operators. These are the equality operators (== and !=), the relational operators (> and <) and the logical operators (and, or, not). For example, ``num1 == num2`` checks if two numbers are equal, ``num1 > num2`` checks if num1 is greater than num2, and ``num1 < num2`` checks if num1 is less than num2. We can also use logical operators like ``num1 > num2 and num2 < num3``, which checks if num1 is greater than num2 and num2 is less than num3.</s>"
  },
  {
    "text": "<s>[INST] Read the input and print the output in the specified format.\n\nName: John\nAge: 23 [/INST] Hello, my name is John and I am 23 years old.</s>"
  },
  {
    "text": "<s>[INST] Suggest a code to execute when a condition is met.\n\nif volume > 10: [/INST] if volume > 10:\n    # Do something\n    print(\"Volume is greater than 10\")</s>"
  },
  {
    "text": "<s>[INST] Convert the following python code to an equivalent JavaScript code.\n\nfor item in items:\n    print(item) [/INST] items.forEach(item => {\n    console.log(item);\n});</s>"
  },
  {
    "text": "<s>[INST] Suggest a code to get the smallest and largest number in an unsorted list. [/INST] def get_smallest_largest(arr):\n    \"\"\"\n    Function to return the smallest and largest numbers in a list\n    Parameters:\n        arr: An unsorted list of numbers\n    Returns:\n        A tuple containing the smallest and largest numbers in the list\n    \"\"\"\n    smallest = arr[0]\n    largest = arr[0]\n\n    for elem in arr:\n        if elem < smallest:\n            smallest = elem\n        if elem > largest:\n            largest = elem\n    \n    return (smallest, largest)</s>"
  },
  {
    "text": "<s>[INST] Read the input and output the reverse of each word.\n\nList of words: Apple Banana Car [/INST] elppA ananab raC</s>"
  },
  {
    "text": "<s>[INST] For the following function, suggest a test case that can be used to check the correctness of the function.\n\ndef find_mode(arr):\n    \"\"\"\n    Function to find the mode of a list\n    Parameters:\n        arr: The list of values\n    Returns:\n        The mode of the list\n    \"\"\" [/INST] A test case that can be used to check the correctness of the function is to pass the list [1, 1, 2, 3, 3, 3] to the function. The function should return 3 as the mode, which is the element that appears most frequently in the list.</s>"
  },
  {
    "text": "<s>[INST] Suggest a code to create an empty list. [/INST] mylist = []  # Create an empty list</s>"
  },
  {
    "text": "<s>[INST] What is the meaning of the modulo operator in python? [/INST] In Python, the modulo operator (also known as the “remainder” or “modulus” operator) is the percentage sign (%). It is used to calculate the remainder after division of one number by another. For example, the expression “7 % 3” will evaluate to 1. This means that the remainder after 7 is divided by 3 is 1. Generally, the syntax for this operation is “a % b”, where a and b are numbers. The result of this operation is the remainder after a is divided by b.</s>"
  },
  {
    "text": "<s>[INST] Suggest a code to add the values of all odd numbers in an array.\n\narr = [1, 2, 3, 4, 5, 6] [/INST] total = 0\nfor num in arr:\n    if num % 2 == 1:  # Check if num is odd\n        total += num</s>"
  },
  {
    "text": "<s>[INST] Create a bash script that prints out the days in a month. [/INST] #!/bin/bash\n\nfor day in {1..31}; do\n   echo \"$day\"\ndone</s>"
  },
  {
    "text": "<s>[INST] Construct an HTML table that contains the following headers: \"Year\", \"Make\", \"Model\". [/INST] <html>\n  <table>\n    <thead>\n      <tr>\n        <th>Year</th>\n        <th>Make</th>\n        <th>Model</th>\n      </tr>\n    </thead>\n  </table>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create an object with the following properties, `name` of type `string`, `age` of type `number`, and `pet` of type `boolean`. [/INST] let exampleObject = {\n    name: 'Bob',\n    age: 26,\n    pet: true\n};</s>"
  },
  {
    "text": "<s>[INST] Print the symmetric difference of two sets.\n\nset1 = {1, 2, 3, 4, 5}, set2 = {1, 3, 5, 7, 9} [/INST] {2, 4, 7, 9}</s>"
  },
  {
    "text": "<s>[INST] Replace NaN values in the given dataframe with a string.\n\nStored in the form of a Pandas dataframe.\n0    1    2    3\na    NaN  b    NaN\n4    NaN  5    6 [/INST] Stored in the form of a Pandas dataframe.\n0    1    2    3\na    'NA'  b   'NA'\n4    'NA'  5    6</s>"
  },
  {
    "text": "<s>[INST] Compute the mean of all the values in a column of a given dataframe.\n\nStored in the form of a Pandas dataframe.\n0    1    2   \na    1    b   \n4    4    5 [/INST] 3.0</s>"
  },
  {
    "text": "<s>[INST] Construct a boolean check to detect if a given string contains the word \"hello\". [/INST] def contains_hello(input_string):\n    return \"hello\" in input_string</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm that checks for balanced parentheses in a given string. [/INST] def is_balanced(input_string):\n    stack = []\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0</s>"
  },
  {
    "text": "<s>[INST] Estimate how many words are present in the given text.\n\nThe world of technology is rapidly evolving each day. [/INST] 10</s>"
  },
  {
    "text": "<s>[INST] Construct a program to filter the list of names based on the given condition.\n\nnames = [\"Ada\", \"Bob\", \"Chris\", \"David\", \"Elsa\", \"Frank\"]\ncondition: length greater than 4 [/INST] [\"Ada\", \"Chris\", \"David\", \"Elsa\", \"Frank\"]</s>"
  },
  {
    "text": "<s>[INST] Estimate the area of a shape using data from the given Pandas dataframe.\n\nStored in the form of a Pandas dataframe.\n0    1    2   \na    5    b   \n4    4    5 [/INST] </s>"
  },
  {
    "text": "<s>[INST] Design a machine learning model to classify an article as either a sports article or a food article. [/INST] The machine learning model can be designed as a sequence of layers built with Keras, followed by a dense layer with two units – one for sports and one for food, and a softmax activation function to achieve the final output. We can feed the model with a dataset consisting of article texts labeled as 'sports' or 'food'. Then, the model can be trained using gradient descent. After training is complete, the model can be used to classify new articles as either 'sports' or 'food' articles.</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that counts the number of times a given character appears in a string. [/INST] const countCharacter = (str, char) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === char) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// example call\nlet str = \"hello world\";\nlet char = \"l\";\nlet count = countCharacter(str, char);\nconsole.log(count); // 3</s>"
  },
  {
    "text": "<s>[INST] Design a web scraper in Python to extract the text content from Wikipedia articles. [/INST] The web scraper can be designed using the Python library BeautifulSoup. The scraper can take a url of a wiki article as an argument and extract the text content using the method find_all('p'). The text content of the article can then be extracted using the get_text() method.</s>"
  },
  {
    "text": "<s>[INST] Implement a Vue component that displays a table layout. [/INST] The component can be implemented in the following way: \n\n<template> \n  <div> \n    <table> \n      <tr v-for=\"row in rows\"> \n        <td v-for=\"item in row\">{{item}}</td> \n      </tr> \n    </table>\n  </div>\n</template> \n\n<script> \nexport default { \n  name: 'TableComponent', \n  props: { \n    rows: { \n      type: Array \n    } \n  } \n} \n</script></s>"
  },
  {
    "text": "<s>[INST] Design a neural network model to detect the sentiment of a given sentence. [/INST] The designed neural network model can be implemented with an embedding layer followed by a convolutional layer and then a global max-pooling layer. The output of the pooling layer can be passed through a fully connected layer with a sigmoid activation function to achieve the final output of the model. We can feed the model with a dataset of sentences labeled as either 'positive' or 'negative'. The model can then be trained using gradient descent. After training is complete, the model can be used to detect the sentiment of new sentences as either 'positive' or 'negative'.</s>"
  },
  {
    "text": "<s>[INST] Design a data structure to store a list of courses with their corresponding details. [/INST] The data structure to store a list of courses with their corresponding details can be a Python dictionary. The keys can be the course codes and the corresponding value can be a dictionary with the details of the course such as the name, number of credits, and description.\nExample: \n\ncourse_list = { \n    'MATH101': { \n        'name': 'Calculus', \n        'credits': 4, \n        'description': 'A study of calculus.' \n    }, \n    'PHYS101': { \n        'name': 'Physics', \n        'credits': 5, \n        'description': 'An introduction to physics.' \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Debug the following C++ program.\n\n#include<iostream> \nusing namespace std;\n  \nint main() \n{ \n    int a, b \n    cin>>a,b;\n  \n    cout<<\"The product is \"<<a*b;\n    return 0;\n} [/INST] #include<iostream> \nusing namespace std;\n  \nint main() \n{ \n    int a, b;\n    cin>>a>>b; // change \",\" to \">>\"\n  \n    cout<<\"The product is \"<<a*b;\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java function that takes an integer array as a parameter and prints out the maximum element of the array.\n\n[1, 5, 9, 10, 12] [/INST] public static void printMax(int[] arr) {\n    int max = arr[0];\n    for (int i = 1; i < arr.length;i++) {\n        max = (arr[i] > max) ? arr[i] : max;\n    }\n    System.out.println(max);\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the names of the people who are enrolled in both Physics and Math classes. [/INST] SELECT name\nFROM students \nWHERE enrolled_in = 'Physics'\nAND enrolled_in = 'Math';</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to compute the average of a set of integers.\n\n[3, 7, 11, 15] [/INST] def avg(arr): \n    sum = 0 \n    for num in arr:\n        sum += num \n    return sum/len(arr)  \n  \nnumbers = [3, 7, 11, 15]\naverage = avg(numbers) \nprint(\"Average of the numbers:\",average)  // Output: 9.5</s>"
  },
  {
    "text": "<s>[INST] Read the given Python code and generate the output for the following input.\n\nmy_list = range(1, 11) [/INST] my_list = range(1, 11)\noutput = 0\nfor i in my_list:\n output += i\nprint(output) #55</s>"
  },
  {
    "text": "<s>[INST] Edit the given JavaScript code to convert the input string’s first letter to uppercase.\n\nlet str = \"hello world\"; [/INST] let str = \"hello world\";\nstr = str[0].toUpperCase() + str.slice(1);</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to count how many times a given element appears in the list.\n\nmy_list = [1, 2, 5, 4, 2, 1, 5] [/INST] my_list = [1, 2, 5, 4, 2, 1, 5]\ncount = 0\nfor i in my_list:\n  if i == 5:\n    count += 1\nprint(count) #2</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script to iterate through a list of numbers and determine if any of the numbers are divisible by 5.\n\nmy_list = [18, 22, 10, 27] [/INST] <?php\n$my_list = [18, 22, 10, 27];\n$divisible = False;\nforeach ($my_list as $num){\n    if($num % 5 == 0){\n        $divisible = True;\n        break;\n    }\n}\necho $divisible;</s>"
  },
  {
    "text": "<s>[INST] Edit the following program to add 1 to each element of the list and print the result.\n\nmy_list = [2, 5, 7, 9] [/INST] my_list = [2, 5, 7, 9]\nfor (let i = 0; i < my_list.length; i++) {\n    my_list[i] = my_list[i] + 1;\n}\nconsole.log(my_list); // [3, 6, 8, 10]</s>"
  },
  {
    "text": "<s>[INST] Read the following JavaScript code and add an appropriate input field for the function. [/INST] function reverse_string(string){\n   let reversed = '';\n   for(let i = string.length - 1; i >= 0; i--){\n      reversed += string[i];\n   }\n   return reversed;\n}\nlet input = \"hello world\";\nconsole.log(reverse_string(input)); // dlrow olleh</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to take in 3 strings and combine them into one.\n\nstring1 = \"hello\"\nstring2 = \"world\"\nstring3 = \"!\" [/INST] public class CombineStrings {\n    public static void main(String[] args) {\n        String string1 = \"hello\";\n        String string2 = \"world\";\n        String string3 = \"!\";\n        String output = string1 + string2 + string3 ;\n        System.out.println(output); //hello world!\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to take in a list of numbers and output the sum of all numbers in the list.\n\nmy_list = [5, 10, 15, 20] [/INST] my_list = [5, 10, 15, 20]\ntotal = 0\nfor num in my_list:\n    total += num\nprint(total) #50</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to determine whether a given string is a palindrome. A palindrome is a string which reads the same forwards and backwards. [/INST] public class Palindrome {\n    public static boolean isPalindrome(String s) {\n        int i = 0, j = s.length()-1; \n        while (i < j) { \n            if (s.charAt(i) != s.charAt(j)) \n                return false; \n            i++; \n            j--; \n        } \n  \n        return true; \n    } \n \n    public static void main(String[] args) {\n        String s = \"madam\";\n        if (isPalindrome(s)) \n            System.out.println(\"The string is a palindrome.\"); \n        else\n            System.out.println(\"The string is not a palindrome.\"); \n    }\n \n}</s>"
  },
  {
    "text": "<s>[INST] You are given a list of names. Create a list whose elements are the length of each name in the original list.\n\nnames = [\"Max\", \"John\", \"Cindy\", \"Sarah\"] [/INST] lens = []\nfor name in names:\n    lens.append(len(name))</s>"
  },
  {
    "text": "<s>[INST] Read a sentence from the user, and then reverse its words in place. [/INST] sentence = input(\"Please enter a sentence: \")\nwords = sentence.split()\nwords.reverse()\nsentence = \" \".join(words)\nprint(sentence)</s>"
  },
  {
    "text": "<s>[INST] Create two functions to check if a given list contains a specific element.\n\nlist = [4, 1, 6, 9, 8]\nitem = 8 [/INST] def check_list(lst, item):\n    return item in lst\n\ndef check_list_version2(lst, item):\n    for x in lst:\n        if x == item: \n            return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, sort them from smallest to largest.\n\nlst = [3, 5, 2, 6, 8, 1] [/INST] lst.sort()</s>"
  },
  {
    "text": "<s>[INST] Unpack the elements in the given list of tuples and assign them to individual variables.\n\nlst = [(\"Max\", \"Smith\"), (\"John\", \"Doe\"), (\"Cindy\", \"Wilson\")] [/INST] for (name1, name2) in lst:\n    first_name = name1\n    last_name = name2</s>"
  },
  {
    "text": "<s>[INST] Given two strings, concatenate them together and assign the result to a variable.\n\nstr1 = \"Hello\"\nstr2 = \"World\" [/INST] res = str1 + str2</s>"
  },
  {
    "text": "<s>[INST] Convert the following list of strings to integers and calculate their total.\n\nlst = [\"4\", \"5\", \"2\", \"6\", \"8\", \"1\"] [/INST] total = 0\nfor s in lst:\n    total += int(s)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to generate a random string of 8 characters using lowercase alphabets and digits. [/INST] function getRandomString(){\n    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let str = '';\n    for (let i=0; i<8; i++)\n        str += chars.charAt(Math.floor(Math.random() * chars.length));\n    return str;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit this HTML structure to add a footer at the bottom.\n\n<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n\n</body>\n</html> [/INST] <html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n \n<footer>\n   <p>Copyright © 20</s>"
  },
  {
    "text": "<s>[INST] Generate an HTML page with the following data fields: title, author, and content.\n\ntitle: Generating HTML page\nauthor: GPT\ncontent: This is an example of how you can generate an HTML page. [/INST] <html>\n<head>\n    <title>Generating HTML Page</title>\n    <meta name=\"author\" content=\"GPT\" />\n</head>\n<body>\n<p>This is an example of how you can generate an HTML page.</p>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Modify the following code to print the keys of a dictionary.\n\nd = {'a':1, 'b':2, 'c':3} [/INST] d = {'a':1, 'b':2, 'c':3}\n\nfor key in d:\n    print(key)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query which will select column names from a certain table. [/INST] SELECT column_name \nFROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm for finding the least common multiple of two numbers. [/INST] One algorithm to find the least common multiple of two numbers is as follows:\n\nStep 1: Find the greatest common divisor (GCD) of the two numbers.\nStep 2: Divide the product of the two numbers by the GCD to find the least common multiple (LCM).\n\nThe GCD of two numbers can be found using the Euclidean algorithm, which works by continually dividing the larger number by the smaller number until they are equal. The GCD is then the smaller number.</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop in Java for iterating through an array. [/INST] for (int i = 0; i < array.length; i++) {\n    System.out.println(array[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Replace the content of the variable ``x`` with a list of numbers.\n\nx = <noinput> [/INST] x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</s>"
  },
  {
    "text": "<s>[INST] Create a for loop to output the square roots of the numbers between 0 and 10 using the math library. [/INST] import math\n\nfor i in range(0,11):\n    print(math.sqrt(i))</s>"
  },
  {
    "text": "<s>[INST] Construct a helper function that prints the provided string twice. [/INST] def print_twice(string):\n    print(string)\n    print(string)</s>"
  },
  {
    "text": "<s>[INST] Form an if-else condition that prints “This is an even number” if a number is even and “This is an odd number” if the number is odd\n\nnumber = 5 [/INST] if (number % 2 == 0): \n    print(\"This is an even number\") \nelse: \n    print(\"This is an odd number\")</s>"
  },
  {
    "text": "<s>[INST] Construct a loop that prints the characters of the given string in reverse order.\n\nstring = 'Hello World' [/INST] for i in range(len(string)-1, -1, -1):  \n    print(string[i], end=\"\")</s>"
  },
  {
    "text": "<s>[INST] Make a dictionary that contains the number of characters in each word from this list.\n\nlist = ['apple', 'banana', 'cherry'] [/INST] list_dict = { 'apple': 5, 'banana': 6, 'cherry': 6 }</s>"
  },
  {
    "text": "<s>[INST] Suggest two ways to loop through a python dictionary [/INST] 1. Using for loop: \n\nfor key, value in dict.items(): \n    # Do something with key and value\n\n2. Using while loop:\n\nkeys = list(dict.keys()) \ni = 0\nwhile i < len(keys):\n    key = keys[i] \n    value = dict[key]\n    # Do something with key and value\n    i += 1</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to extract the top 5 occurrences of the city names from the following table.\n\nTable: person\n\n╔════╦═══════╦═════════╗\n║ id ║ name  ║   city   ║\n╠════╬═══════╬═════════╣\n║  1 ║ Ann   ║  Paris   ║\n║  2 ║ Jack  ║  Tokyo   ║\n║  3 ║ Tom   ║  Tokyo   ║\n║  4 ║ Daisy ║  Paris   ║\n║  5 ║ John  ║  London  ║\n║  6 ║ Paul  ║  London  ║\n╚════╩═══════╩═════════╝ [/INST] SELECT CITY, COUNT(*) as Occurrences\nFROM person\nGROUP BY City\nORDER BY Count(*) DESC\nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Edit this line of code to make it work according to our requirements.\n\nprint(\"Hello\",[1,2,3],sep='|') [/INST] print(\"Hello\",\"|\".join([str(x) for x in [1,2,3]]))</s>"
  },
  {
    "text": "<s>[INST] Write an assembly code to perform the task of incrementing a memory block by 8. [/INST] MOV AL, 8\nMOV CX, Size\nCLD\n\nLOOP: LODSW\nADD AL, 8\nSTOSW\nLOOP LOOP</s>"
  },
  {
    "text": "<s>[INST] Insert this HTML element at the appropriate place.\n\n<h1>Important Text</h1> [/INST] <body>\n    <p>Some other text here</p>\n    <h1>Important Text</h1>\n</body></s>"
  },
  {
    "text": "<s>[INST] Write some Java code to fill in an array of size n with all consecutive numbers from 1 to n. [/INST] public void fill(int[] array, int n) { \n    for (int i = 0; i < n; i++) { \n        array[i] = i + 1; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Identify the mistakes in the below code.\n\ndef add_two_numbers(x, y):\n  a = x + y\n  return a [/INST] The given code does not have any mistakes. All the syntax is correct and the code will perform its intended operation. The indentation of the code is also correct. However, it could be improved by adding descriptive variable and function names, adding comments to explain the code's purpose and by making sure that the code follows the established coding standards.</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following Java code into SQL to select all the distinct elements from a table.\n\nString sql = \"SELECT DISTINCT * FROM table_name\"; [/INST] SELECT DISTINCT * FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Generate a Python Fibonacci sequence of length n\n\nn = 7 [/INST] def fibonacci_sequence(n): \n    nums = []\n    a, b = 0,1\n    for i in range(n): \n        nums.append(a)\n        a, b = b, a + b \n    return nums\n\nprint(fibonacci_sequence(7))</s>"
  },
  {
    "text": "<s>[INST] Spin up a container for an application with Docker-Compose\n\nWeb App Image: my_web_app:v1 [/INST] version: '3'\n\nservices:\n  web_app:\n    image: my_web_app:v1\n    deploy:\n      replicas: 1\n      restart_policy:\n        condition: on-failure</s>"
  },
  {
    "text": "<s>[INST] Create a Go program to print out the cube of a given integer.\n\nNumber: 5 [/INST] package main  \nimport \"fmt\"  \n  \nfunc main() {  \n    num := 5 \n    fmt.Println(\"Cube of a given number is: \", num*num*num)  \n}</s>"
  },
  {
    "text": "<s>[INST] Using the JavaScript language, write a code snippet to display the current date. [/INST] var today = new Date() \nvar date = today.getDate() + \"/\" + (today.getMonth()+1) + \"/\" + today.getFullYear() \nconsole.log(date)</s>"
  },
  {
    "text": "<s>[INST] Using CSS, style a page width 800px and a page height of 600px. [/INST] body {\n  width: 800px;\n  height: 600px;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that prints a 10x10 multiplication table. [/INST] class MultiplicationTable {\n  public static void main(String[] args) {\n    System.out.print(\"  \");\n    for(int i=1; i<=10; i++)\n      System.out.printf(\"%4d\", i);\n    System.out.println();\n\n    for(int i=1; i<=10; i++) {\n      System.out.print(i + \" \");\n      for(int j=1; j<=10; j++)\n        System.out.printf(\"%4d\", i * j);\n      System.out.println();\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Summarize the features of the Python pandas library. [/INST] Pandas is a Python library used for data manipulation and analysis. It provides an efficient and flexible data structure for labeled and relational data called DataFrame, and operations for groupby aggregation, merging, joining, reshaping, and other manipulations. It also offers statistical functions for descriptive statistics, optimization, plotting, and visualization. Finally, pandas is designed to be fast and efficient, with powerful options for indexing, handling missing data, time-series, and automatic conversion of data.</s>"
  },
  {
    "text": "<s>[INST] Write a python program to create a class called cube. [/INST] class Cube:\n    def __init__(self, length, width, height):\n        self.length = length\n        self.width = width\n        self.height = height\n\n    def calculate_volume(self):\n        return self.length * self.width * self.height</s>"
  },
  {
    "text": "<s>[INST] Create a javascript class that takes in two arguments and prints them out when called. [/INST] class PrintNumber{\n    constructor(num1, num2){\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n    printNumber(){\n        console.log(`${this.num1}, ${this.num2}`);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the main differences between Java and Python. [/INST] The main differences between Java and Python include speed of development, execution speed, type safety, readability and syntax ease, standard libraries, and code scalability. Java is more popular in enterprise applications and is generally faster to develop than Python because of its statically typed language. Java has a JVM (Java Virtual Machine) making it faster to compile and execute than Python, which is dynamically typed. Java is more type-safe and easier to debug, while Python is more readable and easier to learn. Python also has wider range of standard libraries than Java, making development faster. Python is more scalable than Java, making it applicable for larger projects.</s>"
  },
  {
    "text": "<s>[INST] Provide a syntactically correct C++ function that takes a number and returns a string representation of the number. [/INST] std::string intToString(int number){\n    std::stringstream ss; \n    ss << number; \n    return ss.str();\n}</s>"
  },
  {
    "text": "<s>[INST] Concatenate the following two strings using C#.\n\nstring str1 = \"hello\";\nstring str2 = \"world\"; [/INST] string str1 = \"hello\";\nstring str2 = \"world\";\nstring result = str1 + str2;</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that uses the CSS box model to style a text. [/INST] <!DOCTYPE html>\n<html>\n<head>\n    <title>Text Styling</title>\n    <style>\n        #text {\n            border: solid 1px black;\n            padding: 10px;\n            width: 300px;\n            margin: 10px auto;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"text\">\n        This is some sample text to demonstrate the CSS box model.\n    </div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Print a multiplication table for the number 4 in C. [/INST] #include <stdio.h>\n\nint main()\n{\n    int i,j;\n \n    for(i=1;i<=9;i++)\n    {\n        j=4*i;\n        printf(\"%d * %d = %d\\n\",4,i,j);\n    }\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the maximum value in a numeric array using recursion.\n\narray = [1, -2, 3, -4, 5] [/INST] def find_max(arr): \n  #base case \n  if len(arr) == 1: \n      return arr[0] \n  else: \n      max_n = find_max(arr[1:]) \n      #compare the maximum element with the first element of the array \n      if arr[0] > max_n: \n          return arr[0] \n      else: \n          return max_n \n  \n# Print maximum value in the array \nprint(find_max(array)) \n\n#output \n5</s>"
  },
  {
    "text": "<s>[INST] Create a simple calculator program in Python. [/INST] def add(num1, num2): \n  return num1 + num2 \n\ndef subtract(num1, num2): \n  return num1 - num2 \n\ndef multiply(num1, num2): \n  return num1 * num2 \n\ndef divide(num1, num2): \n  return num1 / num2 \n\n# Infinite loop until user chooses to exit \nwhile True: \n    print(\"Select operation:\") \n    print(\"1. Add\") \n    print(\"2. Subtract\") \n    print(\"3. Multiply\") \n    print(\"4. Divide\")\n    print(\"5. Exit\") \n    choice = input(\"Enter choice (1/2/3/4):\") \n  \n    # Check if choice is one of the four options \n    if choice in ('1', '2', '3', '4', '5'): \n        num1 = float(input(\"Enter first number: \")) \n        num2 = float(input(\"Enter second number: \")) \n  \n        if choice == '1': \n            print(num1, \"+\", num2, \"=\", add(num1, num2)) \n\n        elif choice == '2': \n            print(num1, \"-\", num2, \"=\", subtract(num1, num2)) \n  \n        elif choice == '3': \n            print(num1, \"*\", num2, \"=\", multiply(num1, num2)) \n\n        elif choice == '4': \n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        elif choice == '5':\n            break\n        else: \n            print(\"Invalid Input\") \n    else: \n        print(\"Invalid Input\")</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression to match all numbers of the form 1xx-xxx-xxxx. [/INST] Regex pattern to match numbers in the given form: \npattern = r'1\\d{2}-\\d{3}-\\d{4}'</s>"
  },
  {
    "text": "<s>[INST] Write an XPATH expression to find the text \"Welcome\" in an HTML document.\n\n<div>\n  <h1>Welcome</h1>\n  <p>Hello World!</p>\n</div> [/INST] //h1[contains(text(), \"Welcome\")]</s>"
  },
  {
    "text": "<s>[INST] Write a Java statement that takes a string as an argument and prints it out.\n\nString s = \"Hello World!\"; [/INST] System.out.println(s);</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select the most recent 5 posts from a table ordered by the post date. [/INST] SELECT * FROM Posts\nORDER BY PostDate DESC\nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code snippet to check for an empty array.\n\nlet array = []; [/INST] if (array.length === 0) {\n   console.log('Array is empty');\n}</s>"
  },
  {
    "text": "<s>[INST] Write a loop that iterates over the characters in a string, and if the character is an 'o', print the character.\n\n\"Hello World\" [/INST] for char in \"Hello World\":\n    if char == 'o':\n        print(char)</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to output the first ten numbers of the Fibonacci sequence. [/INST] class Fibonacci {  \n    public void printFibonacciNumbers(int n) { \n    int first = 0;\n    int second = 1; \n    System.out.print(first + \" \" + second);  \n    for (int i = 2; i < n; i++) { \n        int third = first + second; \n        System.out.print(\" \"+third); \n        first = second; \n        second = third; \n    }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Design a Node.js program to send a push notification to users when the deadline of a task is reached. [/INST] const { Notifications } = require('node-notifier');\n\nfunction sendPushNotification() {\n  const message = \"This is a reminder that your deadline is approaching\"; \n  const notification = new Notifications({message})\n  notification.send();\n};\n\n// Function to monitor the deadline\nfunction deadlineMonitor() {\n  setInterval(function(){\n    // Call function to check if the deadline has been reached\n    deadlineReached();\n  }, 5000);\n}\n\n// Function to check if the deadline has been reached\nfunction deadlineReached() {\n  // Set deadline\n  let deadline = new Date();\n  deadline.setMinutes(deadline.getMinutes() + 15);\n  \n  // Current date\n  const date = new Date();\n  \n  // If the current date is equal to the deadline, call the push notification\n  if (date === deadline) {\n    sendPushNotification();\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Add a function to implement a basic calculator in C++. [/INST] #include <iostream>\n\nusing namespace std;\n\nint addition(int a, int b){\n   return (a+b);\n}\n\n// Subtraction function\nint subtraction(int a, int b){\n   return (a-b);\n}\n\n// Multiplication function\nint multiplication(int a, int b){\n   return (a*b);\n}\n\n// Division function\nint division(int a, int b){\n   return (a/b);\n}\n\n// Function to perform basic calculator operations\nint calculate(int a, int b, char c){\n    int result;\n    switch (c){\n       case '+':\n           result = addition(a, b);\n           break;\n       case '-':\n           result = subtraction(a, b);\n           break;\n       case '*':\n           result = multiplication(a, b);\n           break;\n       case '/':\n           result = division(a, b);\n           break;\n       default:\n           break;\n    }\n    return result;\n}\n\nint main(){\n    int x, y;\n    char a;\n    \n    cout << \"Please enter two numbers: \";\n    cin >> x >> y;\n    \n    cout << \"Please enter an operator: \";\n    cin >> a;\n    \n    int result = calculate(x, y, a);\n    cout << \"The result is: \" << result;\n    \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the differences between a multi-threaded application and a multi-process application. [/INST] A multi-threaded application is an application that uses multiple threads of execution to execute different tasks simultaneously. All threads share the same address space, so multiple threads can access the same data in memory. This provides a more optimized use of resources, as one thread does not need to wait for another thread to finish before accessing the same data.\n\nA multi-process application is an application that uses multiple processes to execute different tasks simultaneously. Each process has its own separate address space, meaning the processes do not share the same data in memory. This means that the processes can’t directly access data from each other, and communication between processes must be established through inter-process communication mechanisms like pipes, sockets, and message queues.</s>"
  },
  {
    "text": "<s>[INST] Construct a decision tree to classify a fruit as mango or apple based on its color and texture. [/INST] Decision Tree:\n\nRoot Node:  Is it a mango?\n\nYes: Output = Mango \nNo:\n  Left Node: Is it yellow?\n     Yes: Output = Mango\n     No:\n        Left Node: Is it green?\n           Yes: Output = Apple\n           No: Output = Unknown \n  Right Node: Is it smooth?\n     Yes: Output = Apple\n     No: Output = Unknown</s>"
  },
  {
    "text": "<s>[INST] Write regular expression for the following string: abc123 [/INST] ^[a-zA-Z]+[0-9]{3}$</s>"
  },
  {
    "text": "<s>[INST] List the various sorting algorithms used in computer programming. [/INST] The various sorting algorithms used in computer programming include: bubble sort, insertion sort, selection sort, merge sort, quick sort, heap sort, shell sort, radix sort, and counting sort.</s>"
  },
  {
    "text": "<s>[INST] Create a simple website using HTML/CSS. [/INST] <html>\n<head>\n  <title> My Website </title>\n  <style>\n    body {\n      font-family: Arial, Helvetica, sans-serif;\n    }\n    h1 {\n      font-size: 40px;\n      color: blue;\n    }\n    p {\n      font-size: 20px;\n      line-height: 1.6;\n    }\n  </style>\n</head>\n<body>\n  <h1> Welcome to my website! </h1>\n  <p> This is a simple website created using HTML and CSS. </p>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Construct a switch statement to check if a month name is valid. [/INST] // switch statement to check if a month name is valid \nswitch (month) { \n   case \"January\": \n   case \"February\": \n   case \"March\": \n   case \"April\": \n   case \"May\": \n   case \"June\": \n   case \"July\": \n   case \"August\": \n   case \"September\": \n   case \"October\": \n   case \"November\": \n   case \"December\":  \n      System.out.println(\"Valid Month\"); \n      break; \n   default: \n      System.out.println(\"Invalid Month\"); \n      break; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a React class conmponent to render a greeting. [/INST] class Greeting extends React.Component {\n    render() {\n        return (\n            <div> \n                <h1>Hello World!</h1> \n            </div>\n        );\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Spring boot program to find the area of a triangle. [/INST] import org.springframework.boot.autoconfigure.SpringBootApplication; \n\n@SpringBootApplication \npublic class App \n{ \n    // Function to calculate the area of triangle \n    public static double calculateArea(int a, int b, int c) \n    { \n        double s = (a + b + c) / 2; \n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c)); \n        return area; \n    } \n  \n    public static void main( String[] args ) \n    { \n        int a = 3; \n        int b = 4; \n        int c = 5; \n        System.out.println(\"The area of the triangle is: \" + calculateArea(a, b, c)); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] You need to generate an HTML table and style it with CSS.\n\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n} [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Title of the document</title>\n</head>\n\n<body>\n\n  <table>\n    <tr>\n      <th>Firstname</th>\n      <th>Lastname</th>\n      <th>Age</th>\n    </tr>\n    <tr>\n      <td>Jill</td>\n      <td>Smith</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <td>Eve</td>\n      <td>Jackson</td>\n      <td>94</td>\n    </tr>\n  </table>\n\n</body>\n\n</html></s>"
  },
  {
    "text": "<s>[INST] for the given array, output true if the array does not contain duplicates,output false if it contains any.\n\narr = [1, 3, 5, 6, 1] [/INST] false</s>"
  },
  {
    "text": "<s>[INST] Create a function to decrypt an encrypted string. [/INST] def decrypt(enc_string):\n    s = 0\n    decrypted = ''\n \n    for i in range(len(enc_string)):\n        s += ord(enc_string[i])\n        decrypted += chr(s)\n \n    return decrypted</s>"
  },
  {
    "text": "<s>[INST] Given two sorted arrays, find elements that exist in both arrays.\n\narr1 = [1, 2, 5, 8, 9, 10] \narr2 = [2, 5, 6, 9] [/INST] common_elements = [2, 5, 9]</s>"
  },
  {
    "text": "<s>[INST] Use a random number generator to generate random numbers between 1 and 10. [/INST] import random\n\ndef random_numbers():\n    for _ in range(10):\n        num = random.randint(1, 10)\n        print(num)\n\nrandom_numbers()</s>"
  },
  {
    "text": "<s>[INST] Modify this string in such a way that it should start with \"Hello \" and must end with \" World\".\n\nstr = \"World, say hello\" [/INST] str = \"Hello World\"</s>"
  },
  {
    "text": "<s>[INST] Recalculate this code block with the new input given and provide the new output.\n\na = '1'\nb = 2\nanswer = int(a) + int(b)\n\nNew input:\na = 5\nb = 3 [/INST] answer = 8</s>"
  },
  {
    "text": "<s>[INST] Write SQL query to get the records with age>25 and address in Mumbai. [/INST] SELECT * FROM records WHERE age>25 and address like 'Mumbai%';</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to check if a number is divisible by 4. [/INST] const divisibleBy4 = (num) => {\n    if (num % 4 === 0) \n        return true;\n    else\n        return false;\n};</s>"
  },
  {
    "text": "<s>[INST] Write CSS code to position a block at the top centre of the page. [/INST] block {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n}</s>"
  },
  {
    "text": "<s>[INST] Write code to create an object with the key which will be incremented on every call of the code. [/INST] let count = 0;\nconst keyObject = () => {\n    let newObj = {[`key_${count}`]: count};\n    count++;\n    return newObj;\n}</s>"
  },
  {
    "text": "<s>[INST] Name a popular library used to break down text into basic meaningful parts. [/INST] NLTK (Natural Language Toolkit) is a popular library used for text processing and breaking it down into basic meaningful parts. It is a platform for building Python programs to work with human language data.</s>"
  },
  {
    "text": "<s>[INST] Re-write this algorithm in pseudo-code.\n\ndef checkEven(number): \n\tif(number % 2 == 0): \n\t\treturn True\n\telse: \n\t\treturn False [/INST] function checkEven(number)\n\tif number modulo 2 = 0\n\t\treturn true\n\telse\n\t\treturn false\nend function</s>"
  },
  {
    "text": "<s>[INST] Create a CSS property to remove the vertical scrollbar. [/INST] overflow-y: hidden;</s>"
  },
  {
    "text": "<s>[INST] Print out the length of each string in the list.\n\nlist_of_strings = ['hello', 'world', 'foobar'] [/INST] list_of_strings = ['hello', 'world', 'foobar']\n\nfor string in list_of_strings:\n    print(len(string))</s>"
  },
  {
    "text": "<s>[INST] Create a new list of elements, multiplied by 10.\n\nnums = [1, 2, 3, 4] [/INST] nums = [1, 2, 3, 4]\n\nnew_nums = [num*10 for num in nums]\nprint(new_nums)</s>"
  },
  {
    "text": "<s>[INST] Generate a new array and store only elements that are greater than 5.\n\narr = [3, 9, 8, 1, 6, 4] [/INST] arr = [3, 9, 8, 1, 6, 4]\n\nnew_arr = [num for num in arr if num > 5]\nprint(new_arr)</s>"
  },
  {
    "text": "<s>[INST] Swap the elements at index 2 and 4.\n\narr = [1, 3, 5, 6, 8] [/INST] arr = [1, 3, 5, 6, 8]\n\narr[2], arr[4] = arr[4], arr[2]\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] Concatenate the elements of the list into a string.\n\nlist_of_strings = ['I', 'am', 'a', 'string'] [/INST] list_of_strings = ['I', 'am', 'a', 'string']\n\nconcat = ' '.join(list_of_strings)\nprint(concat)</s>"
  },
  {
    "text": "<s>[INST] Extract all the words that begin with 's' from the given list.\n\nlist_of_strings = ['stack', 'super', 'stone', 'sit'] [/INST] list_of_strings = ['stack', 'super', 'stone', 'sit']\n\nwords_start_s = [word for word in list_of_strings if word.startswith('s')]\nprint(words_start_s)</s>"
  },
  {
    "text": "<s>[INST] Reverse a given array's elements and print the resulting array.\n\narr = [1, 2, 3, 4, 5] [/INST] arr = [1, 2, 3, 4, 5]\n\narr.reverse()\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] Create a new array from the given array by replacing all the odd numbers with 0.\n\narr = [3, 5, 7, 9, 1] [/INST] arr = [3, 5, 7, 9, 1]\n\nnew_arr = [num if num % 2 == 0 else 0 for num in arr]\nprint(new_arr)</s>"
  },
  {
    "text": "<s>[INST] Determine the time complexity of the code given below as a function of n.\n\ndef foo(A, n): \n    if n == 1: \n        return A[0] \n    else: \n        return foo(A, n - 1) + A[n - 1] [/INST] O(n)</s>"
  },
  {
    "text": "<s>[INST] Create a function to add three numbers together [/INST] def add_three(n1, n2, n3): \n  return n1 + n2 + n3</s>"
  },
  {
    "text": "<s>[INST] Create a function that prints a provided message 3 times\n\nmessage = \"Hello World!\" [/INST] def print_message(message): \n for i in range(3): \n  print(message)</s>"
  },
  {
    "text": "<s>[INST] What data structure is most appropriate for fast searches? [/INST] A hash table is the most appropriate data structure for fast searches.</s>"
  },
  {
    "text": "<s>[INST] Fix this indentation error in the following Python code\n\ndef double(number):\n return number * 2 [/INST] def double(number):\n    return number * 2</s>"
  },
  {
    "text": "<s>[INST] Create code that given two linked lists, determine if they intersect\n\nTwo linked lists: list1 = [3, 7, 8, 10] and list2 = [99, 1, 8, 10] [/INST] def are_lists_intersect(list1, list2): \n  \n    # Set pointer to head node \n    temp1 = list1 \n    temp2 = list2 \n  \n    # Get lengths \n    list1_length = 0\n    list2_length = 0\n  \n    # Count length for each list \n    while (temp1): \n        list1_length += 1\n        temp1 = temp1.next\n  \n    while (temp2): \n        list2_length += 1\n        temp2 = temp2.next\n  \n    # Store longer list in tem1 \n    if list1_length > list2_length: \n        temp1 = list1 \n        temp2 = list2 \n    else: \n        temp1 = list2 \n        temp2 = list1 \n  \n    # Take difference to get number of nodes to \n    # traverse for longer list \n    diff = abs(list1_length - list2_length) \n  \n    # Move pointer for longer list to  \n    # difference node to get same position \n    # node in both list \n    for i in range(diff): \n        temp1 = temp1.next\n  \n    # Move all pointer together till they meet \n    while(temp1 and temp2): \n        if (temp1 == temp2): \n            return True\n  \n        temp1 = temp1.next\n        temp2 = temp2.next\n  \n    # Return false if no common node found \n    return False</s>"
  },
  {
    "text": "<s>[INST] Edit this code so that it can marshall a json object\n\nimport json\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n} [/INST] import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}\n\nmarshalled_data = json.dumps(data)</s>"
  },
  {
    "text": "<s>[INST] Create code that will reverse the order of elements in this list.\n\nlist = [1, 2, 3, 4] [/INST] def reverse_list(list): \n    start = 0\n    end = len(list) - 1\n    while start < end: \n        list[start], list[end] = list[end], list[start] \n        start += 1\n        end -= 1\n    return list</s>"
  },
  {
    "text": "<s>[INST] Create a function that will find the maximum length of increasing subarray in a list\n\nlist = [2, 3, 3, 1, 4, 5, 8, 4] [/INST] def longest_increasing_subarray(arr):\n    max_length = 1\n    curr_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            curr_length += 1\n        else:\n            if curr_length > max_length:\n                max_length = curr_length\n            curr_length = 1\n    \n    if curr_length > max_length:\n        max_length = curr_length\n    \n    return max_length</s>"
  },
  {
    "text": "<s>[INST] Create code that, given a string, returns the longest permutation of the same character\n\nstr = \"abcccdef\" [/INST] def longest_consecutive_character(str):\n\t# Store character, length of longest permutation, and current length\n    max_char = str[0]\n    max_length = 1\n    cur_length = 1\n    \n    # Iterate over the string\n    for i in range(1, len(str)):\n        # If the characters are the same\n        if str[i] == str[i-1]:\n            cur_length += 1\n            \n            # Check if the current permutation is longest\n            if cur_length > max_length:\n                max_char = str[i]\n                max_length = cur_length\n        # Reset count if character changes\n        else: \n            cur_length = 1\n    \n    return max_char, max_length</s>"
  },
  {
    "text": "<s>[INST] Create code to find the longest subarray with equal number of 0's and 1's\n\nlist = [0, 0, 1, 0, 1, 0, 0, 1] [/INST] def longest_subarray(arr): \n    # Stores index of previos zero \n    prev_zero = -1 \n  \n    # Stores index and length of longest subarray with equal 0 and 1 \n    max_len = 0\n    start_index = 0\n  \n    # Traverse the given array \n    for i in range(len(arr)): \n        # Update previous zero \n        if arr[i] == 0: \n            prev_zero = i \n  \n        # Calculate difference b/w current and previous zero \n        diff = i - prev_zero \n  \n        # Update max_len if required \n        if (diff > max_len): \n            max_len = diff \n            start_index = prev_zero + 1\n  \n    # Return longest sub-array \n    return arr[start_index:start_index + max_len]</s>"
  },
  {
    "text": "<s>[INST] Create code that given two binary search trees, determine if they are identical\n\nTwo Binary Search Trees: Tree1 and Tree2 [/INST] def are_identical(Tree1, Tree2): \n    # Both trees are empty \n    if Tree1==None and Tree2==None: \n        return True\n  \n    # If only one of them is empty \n    if (Tree1==None or Tree2==None): \n        return False\n  \n    # Both non-empty, compare the data and \n    # recur for left and right sub-tree \n    if (Tree1.data==Tree2.data and \n        are_identical(Tree1.left, Tree2.left)and\n        are_identical(Tree1.right, Tree2.right)): \n        return True \n    else: \n        return False</s>"
  },
  {
    "text": "<s>[INST] Create a function that will add two numbers (represented as linked lists)\n\nLinked lists: list1 = [2, 4, 3] and list2 = [5, 6, 4] [/INST] def add_numbers(list1, list2): \n    start = result = ListNode(0)\n    carry = 0\n\n    # Iterate both Lists until the end \n    while list1 or list2 or carry: \n        val1 = 0\n        val2 = 0\n\n        # If l1 is not None, add data\n        if list1: \n            val1 = list1.data \n            list1 = list1.next \n\n        # If l2 is not None, add data\n        if list2: \n            val2 = list2.data \n            list2 = list2.next \n\n        # Calculate sum\n        total = val1 + val2 + carry \n\n        # Update result list present node\n        result.next = ListNode(total % 10) \n        result = result.next \n        carry = total // 10\n  \n    # Return head node of the result list \n    return start.next</s>"
  },
  {
    "text": "<s>[INST] Create code that given a stack (i.e., a sequence of objects), returns the reversed stack\n\nstack = [1, 2, 3, 4] [/INST] def reverse_stack(stack): \n\tif len(stack) == 0: \n\t\treturn \n\t\n\t# Pop the first element from the stack \n\ttemp = stack.pop()\n\n\t# Call the reverse_stack method on the remaining elements \n\treverse_stack(stack) \n\n\t# Push the poped element to the bottom of the stack \n\tinsert_at_bottom(stack, temp) \n\n\treturn stack\n\ndef insert_at_bottom(stack, item): \n\tif len(stack) == 0: \n\t\tstack.append(item) \n\t\n\telse: \n\t\ttemp = stack.pop() \n\t\tinsert_at_bottom(stack, item) \n\t\tstack.append(temp)</s>"
  },
  {
    "text": "<s>[INST] Create a function to build a queue (i.e., a sequence of objects) [/INST] class Queue: \n      \n    def __init__(self): \n        self.items = [] \n  \n    def enqueue(self, item): \n        self.items.insert(0, item) \n  \n    def dequeue(self): \n        if not self.is_empty(): \n            return self.items.pop() \n  \n    def is_empty(self): \n        return len(self.items) == 0 \n  \n    def peek(self): \n        if not self.is_empty(): \n            return self.items[-1].value \n  \n    def __len__(self): \n        return self.size() \n  \n    def size(self): \n        return len(self.items)</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to store the output of an API call into a variable.\n\nurl = 'http://example.com/api/v1/data' [/INST] import requests\n\nurl = 'http://example.com/api/v1/data'\nresponse = requests.get(url)\ndata = response.json()</s>"
  },
  {
    "text": "<s>[INST] Create a user interface for a customer order system. [/INST] import tkinter\n\n# create the main window \nroot = Tk() \n  \n# create the user interface \nroot.title(\"Order System\") \nroot.geometry(\"400x200\") \n  \n# create widgets \nLabel(root, text = 'Name:').grid(row = 0, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 0, column = 1, columnspan = 2, padx = 10, pady = 10) \nLabel(root, text = 'Email address:').grid(row = 1, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 1, column = 1, columnspan = 2, padx = 10, pady = 10) \nButton(root, text = 'Submit').grid(row = 2, column = 1, padx = 10, pady = 10) \nButton(root, text = 'Cancel').grid(row = 2, column = 2, padx = 10, pady = 10) \n\n# enter main event loop \nroot.mainloop()</s>"
  },
  {
    "text": "<s>[INST] Create a virtual machine using Terraform. [/INST] resource \"azurerm_resource_group\" \"example\" {\n  name     = \"example-resources\"\n  location = \"westus2\"\n}\n\nresource \"azurerm_virtual_machine\" \"example\" {\n  name                  = \"example-vm\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  vm_size               = \"Standard_DS2_v2\"\n  storage_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"16.04-LTS\"\n    version   = \"latest\"\n  }\n  storage_os_disk {\n    name              = \"myosdisk1\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    disk_size_gb      = \"30\"\n  }\n  os_profile {\n    computer_name  = \"hostname\"\n    admin_username = \"username\"\n    admin_password = \"secure_password\"\n  }\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n  tags = {\n    environment = \"Production\"\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Make a REST API call to get the latest version of Python. [/INST] import requests\n\ndef get_latest_python_version():\n    url = 'https://www.python.org/ftp/python/'\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        html = response.text\n        start_index = html.find('<a href=\"')\n        \n        if start_index != -1:\n            end_index = html.find('/\">', start_index + 1)\n\n            if end_index != -1:\n                version = html[start_index + 9:end_index]\n                return version\n\n    return None</s>"
  },
  {
    "text": "<s>[INST] Create a web page with a simple \"Hello World\" message. [/INST] <html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Get the top ten most used words within a string. [/INST] import collections\n\ndef get_most_used_words(string):\n    # Tokenize the string\n    words = string.split()\n\n    # Calculate frequency of each word\n    freq = {}\n    for word in words:\n       if word in freq:\n           freq[word] += 1\n       else:\n           freq[word] = 1\n\n    # Sort the words in descending order of frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Get the top ten most used words\n    most_used_words = [word for word, count in sorted_freq[:10]]\n\n    return most_used_words</s>"
  },
  {
    "text": "<s>[INST] Edit the following code snippet to add if/else logic for printing a success message.\n\nnum1 = 5\nnum2 = 6\nif num1 > num2:\n  print(\"The number is greater than 5.\") [/INST] num1 = 5\nnum2 = 6\nif num1 > num2:\n  print(\"The number is greater than 5.\")\nelse:\n  print(\"Success! The number is less than or equal to 5.\")</s>"
  },
  {
    "text": "<s>[INST] Generate a regex expression to find all words starting with \"ha\" [/INST] ^ha\\w+</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to find all clients with a given email address.\n\nThe email address is \"test@example.com\" [/INST] SELECT * FROM clients WHERE email = 'test@example.com';</s>"
  },
  {
    "text": "<s>[INST] Construct an expression in javascript to reverse a string. [/INST] let reverseString = (str) => str.split('').reverse().join('');</s>"
  },
  {
    "text": "<s>[INST] Make a HTML5 webpage with a simple form. [/INST] <!DOCTYPE html> \n<html> \n    <head> \n        <title>Simple Form</title> \n    </head> \n    <body> \n        <form> \n            Name: <input type=\"text\" name=\"name\"/><br><br> \n            Email:  <input type=\"email\" name=\"email\"/><br><br> \n            <input type=\"submit\" value=\"Submit\"/> \n        </form> \n    </body> \n</html></s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a form that takes in two numbers as input and adds them together when the form is submitted. [/INST] <!DOCTYPE html>\n<html>\n <head>\n  <title>Adding Form</title>\n </head>\n <body>\n  <form action=\"\" method=\"post\">\n   <input type=\"number\" name=\"a\">\n   <input type=\"number\" name=\"b\">\n   <input type=\"submit\" value=\"Submit\" />\n  </form>\n  <script>\n   document.querySelector('form').onsubmit = function(event) {\n    event.preventDefault();\n    const a = Number(document.querySelector('input[name=\"a\"]').value);\n    const b = Number(document.querySelector('input[name=\"b\"]').value);\n    const result = a + b;\n    alert(`The result of adding ${a} with ${b} is ${result}`);\n   }\n  </script>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create an API endpoint in NodeJS that returns a JSON object containing the current time. [/INST] const express = require('express');\nconst app = express();\n\napp.get('/time', (req, res) => {\n const date = new Date();\n const time = {\n  hour: date.getHours(),\n  minutes: date.getMinutes(),\n  seconds: date.getSeconds()\n }\n res.json(time)\n});\n\napp.listen(6000);</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to fetch the top 5 products with the highest sale prices from a table named 'products'. [/INST] SELECT * FROM products ORDER BY sale_price desc LIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Construct a valid and optimized MySQL query to get the user details of all users who are younger than 24 and have subscribed more than 10 times. [/INST] SELECT user_id, username, age, subscriptions \nFROM users \nWHERE age < 24 \nAND subscriptions >= 10</s>"
  },
  {
    "text": "<s>[INST] Generate a gradient descent algorithm to optimize a cost function. [/INST] def gradient_descent(cost_function, theta, eta, tolerance):\n    cost = cost_function(theta)\n    diff = tolerance + 1\n    while diff > tolerance:\n        theta_updated = theta\n        for i in range(len(theta)):\n            theta[i] = theta[i] - eta * cost_function.gradient_wrt_theta(theta, i)\n            diff = sum((theta_updated[i] - theta[i])**2 for i in range(len(theta)))\n    return theta</s>"
  },
  {
    "text": "<s>[INST] Construct a pre-order traversal code to traverse a binary tree. [/INST] def preOrder(root):\n  if root:\n    print(root.data)\n    preOrder(root.left)\n    preOrder(root.right)</s>"
  },
  {
    "text": "<s>[INST] Create an array of length 10 from a given list of values.\n\ngiven_list = [1, 2, 3, 4, 5] [/INST] final_list = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Implement the merge sort algorithm to sort a given array ascending.\n\ngiven_array = [7,9,3,8,1] [/INST] def merge_sort(arr):\n    if len(arr) > 1: \n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        #calling merge sort function on left and right arrays\n        merge_sort(L) \n        merge_sort(R) \n\n        i = j = k = 0\n        # Copying data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n  \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nar =[7,9,3,8,1]\nmerge_sort(ar)\n\n# printing sorted array \nprint (ar)</s>"
  },
  {
    "text": "<s>[INST] Write a code to create a web server for a given web page. [/INST] # importing the modules\nimport http.server\nimport socketserver\n\n# defining the port number\nport = 8080\n\n# the web page\nindex_html = \"\"\"<!DOCTYPE html>\n<html>\n<head>\n<title>My Website</title>\n</head>\n<body>\n<h1> Welcome to my website!</h1>\n<p>Here you will find useful information about me and my work.</p>\n</body>\n</html>\n\"\"\"\n\n# define a handler\nclass RequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        # setting the response status code\n        self.send_response(200)\n        # setting the content type and other headers\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        # writing the index.html page\n        self.wfile.write(bytes(index_html, \"utf8\"))\n\n# define http server\nwith socketserver.TCPServer((\"\", port), RequestHandler) as httpd:\n    print(\"serving at port\", port)\n    # infinite loop\n    httpd.serve_forever()</s>"
  },
  {
    "text": "<s>[INST] Compact a given list into a dictionary with unique items as keys.\n\ngiven_list = [1,1,1,2,2,3] [/INST] uniques = {}\nfor item in given_list:\n     if item not in uniques:\n        uniques[item] = 1\n     else:\n        uniques[item] += 1\n\n# result: {1: 3, 2: 2, 3: 1}</s>"
  },
  {
    "text": "<s>[INST] Edit the code to make sure the program prints the correct output.\n\ndef my_function(x):\n    y = x * 2\n    return x + y\n\nresult = my_function(2)\nprint(result) [/INST] def my_function(x):\n    y = x * 2\n    return x + y\n\nresult = my_function(2)\nprint(\"The result is:\", result)</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to kill a thread after 10 seconds.\n\nimport threading \nfrom time import sleep\n  \ndef worker(): \n    try: \n        while True: \n            print(\"Thread\") \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start() [/INST] import threading \nimport signal \nfrom time import sleep \n\ndef exitThread(signum, frame): \n    raise SystemExit \n\ndef worker(): \n    try: \n        signal.signal(signal.SIGALRM, exitThread) \n        signal.alarm(10) \n        while True: \n            print(\"Thread\")  \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()</s>"
  },
  {
    "text": "<s>[INST] Create an array of 5 unique numbers between 1 and 15. [/INST] [1, 7, 10, 11, 15]</s>"
  },
  {
    "text": "<s>[INST] Change the following code to implement the Observer Design Pattern in Python.\n\nclass Publisher: \n    def __init__(self): \n        self.observers = [] \n  \n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            observer.notify(self, *args, **kwargs) [/INST] class Publisher: \n\n    def __init__(self): \n        self.observers = [] \n        self.state = None\n    \n    def getState(self): \n        return self.state \n\n    def setState(self, state): \n        self.state = state \n        self.notifyAll() \n\n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            if args and kwargs: \n                observer.notify(self, *args, **kwargs) \n            else: \n                observer.notify(self)</s>"
  },
  {
    "text": "<s>[INST] Create an array of 20 unique values from 1 to 50. [/INST] [1, 5, 6, 8, 13, 16, 18, 20, 21, 24, 25, 29, 31, 32, 36, 39, 40, 43, 44, 50]</s>"
  },
  {
    "text": "<s>[INST] Declare a variable named 'items' and assign it a list containing the elements ‘pen’, ‘paper’ and ‘pencil’ in Python. [/INST] items = ['pen', 'paper', 'pencil']</s>"
  },
  {
    "text": "<s>[INST] Create a vector in R to store the elements ‘apple’, ‘mango’, ‘banana’ and ‘orange’. [/INST] fruits <- c(\"apple\", \"mango\", \"banana\", \"orange\")</s>"
  },
  {
    "text": "<s>[INST] Create an array from a given string and sort it in ascending order.\n\nstring = \"cbaefd\" [/INST] string = \"cbaefd\"\narray = list(string)\narray.sort()\nprint(array)</s>"
  },
  {
    "text": "<s>[INST] Generate a random password of 16 characters that includes a mix of alphanumeric characters and punctuation. [/INST] import string\nimport random\n\ndef random_password(str_len):\n    alphanumeric = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(alphanumeric) for i in range(str_len))\n\nrandom_password(16)</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two arguments, an array arr and a value x, and returns the number of times x appears in the array arr.\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 5]\nx = 5 [/INST] def count_val(arr, x):\n    count = 0 \n    for i in arr:\n        if i == x:\n            count += 1\n    return count\n\ncount_val(arr, x)</s>"
  },
  {
    "text": "<s>[INST] Write a code in Python for comparing two strings without using a built-in function.\n\nstring1 = \"apple\"\nstring2 = \"orange\" [/INST] string1 = \"apple\" \nstring2 = \"orange\" \nlength = min(len(string1), len(string2))\n\nfor i in range(length):\n  if string1[i] != string2[i]:\n    result = string1[i] < string2[i]\n    break\n\nif result == True:\n  print(string1 + \" follows \" + string2 + \" alphabetically.\")\nelse:\n  print(string2 + \" follows \" + string1 + \" alphabetically.\")</s>"
  },
  {
    "text": "<s>[INST] Generate a two-dimensional array of 3 rows and 3 columns with all elements equal to 1. [/INST] import numpy as np\n\narr = np.ones((3,3))\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] How can we use a list comprehension to make a copy of a given list? [/INST] list_copy = [x for x in given_list]</s>"
  },
  {
    "text": "<s>[INST] Generate the SQL command to insert a new item in an existing table.\n\nTable Name: users  \nValues: ('Adam', 34, 'Male') [/INST] INSERT INTO users (name, age, gender) VALUES ('Adam', 34, 'Male');</s>"
  },
  {
    "text": "<s>[INST] Convert a list of numbers to a 5x5 matrix.\n\ngiven_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] [/INST] matrix = [[1, 2, 3, 4, 5], \n          [6, 7, 8, 9, 10], \n          [11, 12, 13, 14, 15], \n          [16, 17, 18, 19, 20]]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to compare two strings without using any built-in functions. [/INST] function compareStrings(str1, str2) {\n    if (str1.length !== str2.length) {\n        return false;\n    }\n\n    for (let i === 0; i < str1.length; i++) {\n        if (str1[i] !== str2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Describe a method to reverse the order of elements in a given array. [/INST] A simple approach to reverse an array is to use two index variables, one at the start and one at the end of the array. Swap the elements present at these two indexes and increment the first index and decrement the second index, until the indexes meet.\n\nExample:\n\ndef reverseArray(arr, start, end): \n \n    while (start < end): \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end = end-1\n\narr = [1, 2, 3, 4, 5, 6] \nreverseArray(arr, 0, 5)</s>"
  },
  {
    "text": "<s>[INST] Explain how to find the minimum value of a list. [/INST] We can use the built-in min() function to find the minimum value in a list. This function takes an iterable such as a list, tuple or set as an argument and returns the smallest item in the iterable. For example, if given a list of numbers, the min() function would return the number with the lowest value.\n\nExample: \n\nmy_list = [3, 6, 2, 8, 4]\nmin_val = min(my_list)\nprint(min_val)  # 2</s>"
  },
  {
    "text": "<s>[INST] Generate an HTML form with a text input box. [/INST] <form> \n  <input type=\"text\" name=\"name\" /> \n</form></s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to center-align the text of all <h1> elements on a web page. [/INST] h1 {\n  text-align: center;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find all the records in a given table that have a price greater than $1000.\n\nTable name: Orders\nFields: price (decimal), item_name (string) [/INST] SELECT *\nFROM Orders\nWHERE price > 1000;</s>"
  },
  {
    "text": "<s>[INST] Create a program which finds patterns in a stream of numbers and prints out the start of the pattern.\n\n87, 88, 89, 87, 88, 89, 87, 88, 89 [/INST] Pattern detected: 87, 88, 89.  Starting at index 0.</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop in Python to find the sum of all the the numbers between 15 and 30 (inclusive). [/INST] total_sum = 0 \nfor num in range(15, 31): \n    total_sum += num \nprint(total_sum)</s>"
  },
  {
    "text": "<s>[INST] Construct a JSON Object of a person with their name, age, and occupation. [/INST] {\n    \"name\": \"John Doe\",\n    \"age\": 35,\n    \"occupation\": \"Software Engineer\"\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an if-else if condition to grade the user input (1 to 5) between A, B, C, D, or F. [/INST] if user_input == 1:\n    print('A')\nelif user_input == 2:\n    print('B')\nelif user_input == 3:\n    print('C')\nelif user_input == 4:\n    print('D')\nelse:\n    print('F')</s>"
  },
  {
    "text": "<s>[INST] Construct a switch-case statement to output \"Monthly\" if the user enters \"M\" to output \"Yearly\" if the user enters \"Y\", and \"Invalid\" if the user enters neither \"M\" nor \"Y\". [/INST] def printOption(option):\nswitch(option):\n    case \"M\":\n        print(\"Monthly\")\n        break\n    case \"Y\":\n        print(\"Yearly\")\n        break\n    default:\n        print(\"Invalid\")</s>"
  },
  {
    "text": "<s>[INST] Design a regex pattern to check if a given string is a valid URL or not. [/INST] pattern = r'^(https?:\\/\\/)[\\da-z\\.-]+\\.[a-z\\.]{2,}\\/?[\\/\\w \\.-]*'</s>"
  },
  {
    "text": "<s>[INST] Construct a class in Python that contains three variables and two methods. [/INST] class myClass():\n    def __init__(self):\n        self.var1 = \"Hello\"\n        self.var2 = \"World!\"\n        self.var3 = 5\n    def method1(self):\n        print(self.var1)\n    def method2(self):\n        print(self.var2)</s>"
  },
  {
    "text": "<s>[INST] Write a function to sort a string containing several words alphabetically. [/INST] def sortString(string): \n    words = string.split() \n    words.sort()\n    return (' '.join(words))</s>"
  },
  {
    "text": "<s>[INST] Convert the following SQL statement into a Python def() and write the code.\n\nSELECT order_id, order_time, subtotal FROM orders WHERE order_time > NOW() [/INST] def get_order_info(order_time):\n    query = \"SELECT order_id, order_time, subtotal FROM orders WHERE order_time > %s\"\n    cursor.execute(query, (order_time, ))\n    rows = cursor.fetchall()\n    return rows</s>"
  },
  {
    "text": "<s>[INST] Sort a string in alphabetical order.\n\nstring = \"edcba\" [/INST] def sort_string(string):\n    str_list = list(string)\n    str_list.sort()\n    return \"\".join(str_list)\n\nsorted_str = sort_string(string)</s>"
  },
  {
    "text": "<s>[INST] Write a script that prints the first N numbers in a Fibonacci series.\n\nN = 10 [/INST] def fibonacci_series(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \nfibonacci_series(N)</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that removes duplicate elements from an array.\n\nint arr[] = {12, 11, 12, 11, 13, 11}; [/INST] import java.util.HashSet;\n\npublic class RemoveDuplicates {\n public static int[] removeDuplicates(int arr[]) \n    { \n        // HashSet for removing duplicates\n        HashSet<Integer> set = new HashSet<>();\n  \n        // adding elements to HashSet \n        for(int i=0; i<arr.length; i++) \n            set.add(arr[i]); \n  \n        // Converting HashSet to array\n        int i=0;\n        int new_arr[] = new int[set.size()];\n        for (Integer val : set)  \n            new_arr[i++] = val; \n        return new_arr; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Implement a k-nearest neighbors algorithm to predict point labels. [/INST] # k-nearest neighbor algorithm\ndef knn(k, data, targets, query):\n    # find k nearest neighbors of the query\n\tindices = get_neighbors(k, data, query)\n\t\n\t# find most common label among the neighbors\n\tcounts = {}\n\tfor index in indices:\n\t\tlabel = targets[index]\n\t\tcounts[label] = counts.get(label, 0) + 1\n\t\n\t# from the most to the least occurring \n\tlabels = sorted(counts, key=counts.get, reverse=True)\n\treturn labels[0]</s>"
  },
  {
    "text": "<s>[INST] Create a function which takes two parameters and returns true if the second parameter is a power of the first parameter.\n\nx = 16\ny = 4 [/INST] def is_a_power_of(x, y):\n    if x == y:\n        return True\n\n    if x > y and y != 0:\n        return is_a_power_of(x/y, y) \n    else:\n        return False\n\npower_of = is_a_power_of(x, y)</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in Python to find the number of distinct words in a given sentence.\n\n\"This is a test sentence.\" [/INST] def count_distinct_words(sentence):\n    distinct_words = set([word.lower() for word in sentence.split()])\n    return len(distinct_words)\n    \nprint(count_distinct_words(\"This is a test sentence.\")) # Outputs: 4</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script for downloading a web page from the internet. [/INST] #!/bin/bash\n\nif [ -z $1 ]; then\n  echo \"Please provide a URL as an argument\"\nelse\n  curl -O $1\nfi</s>"
  },
  {
    "text": "<s>[INST] Convert the following JS code from a callback to a promise.\n\nfunction downloadData(url, callback) {\n  // Code to download data\n  if (/* success */) {\n    callback(null, data)\n  } else {\n    callback(err, null)\n  }\n} [/INST] function downloadData(url) {\n  return new Promise((resolve, reject) => {\n    // Code to download data\n    if (/* success */) {\n      resolve(data)\n    } else {\n      reject(err)\n    }\n  })\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following JS code to include a check to avoid creating duplicate requests.\n\nsendRequest(url) {\n  // Code to send request\n}\n\nmakeRequest(url) {\n  sendRequest(url);\n} [/INST] sendRequest(url) {\n  // Code to send request\n}\n\nrequests = []; // Array to keep track of requests\n\nmakeRequest(url) {\n  if (!requests.includes(url)) { // Check if request doesn't already exist\n    sendRequest(url);\n    requests.push(url); // Add request to list\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write an HTML page to display facts about a specific animal.\n\nAnimal: Cat \nName: Fluffy \nAge: 8 \nWeight: 10 lbs\nFur Color: Orange [/INST] <html>\n<head>\n    <title>Facts about Fluffy</title>\n</head>\n<body>\n    <h1>Fluffy the Cat</h1>\n  \n    <ul>\n        <li>Age: 8</li>\n        <li>Weight: 10 lbs</li>\n        <li>Fur Color: Orange</li>\n    </ul>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query that returns all the names of the students with a grade greater than or equal to 7.\n\nTable: Students\nColumns: student_id, name, grade [/INST] SELECT name \nFROM Students \nWHERE grade >= 7;</s>"
  },
  {
    "text": "<s>[INST] Edit the following JavaScript code to make the function asynchronous.\n\nfunction getData() {\n  // Code to fetch data\n} [/INST] function getData() {\n  // Code to fetch data\n  return new Promise((resolve, reject) => {\n    // Fetch data\n    if (/* success */) {\n      resolve(data)\n    } else {\n      reject(err)\n    }\n  })\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a function in C++ to print a pyramid of stars [/INST] #include <iostream> \n  \nusing namespace std; \n  \n// Function to demonstrate printing pattern \nvoid pyramid(int n) \n{ \n    // outer loop to handle number of rows \n    //  n in this case \n    for (int i=0; i<n; i++) \n    { \n        //  inner loop to handle number of columns \n        //  values changing acc. to outer loop \n        for (int j=0; j<=i; j++ ) \n        { \n            // printing stars \n            cout << \"* \"; \n        } \n  \n        // ending line after each row \n        cout << endl; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to get the IP address from a given hostname\n\ngoogle.com [/INST] import socket\n\ndef get_ip(hostname):\n    return socket.gethostbyname(hostname)\n\nprint(get_ip('google.com'))</s>"
  },
  {
    "text": "<s>[INST] Write a code to select all columns from a table named 'students' where the age is between 22 and 28 [/INST] SELECT * FROM students WHERE age BETWEEN 22 AND 28;</s>"
  },
  {
    "text": "<s>[INST] Implement a Swift function to filter an array of numbers by a given filter number\n\n[4, 5, 8, 11, 7], filter_num = 7 [/INST] func filter_array(_ numbers: [Int], filter_num: Int) -> [Int] {\n    var resultArr = [Int]()\n    for i in 0..<numbers.count {\n        if numbers[i] < filter_num { \n            resultArr.append(numbers[i])\n        }\n    }\n    return resultArr\n}\n\nfilter_array([4, 5, 8, 11, 7], filter_num: 7) // returns [4, 5]</s>"
  },
  {
    "text": "<s>[INST] Design a web page with the following HTML elements: (1) Heading, (2) Subheading, (3) Form, (4) Button. [/INST] <html>\n    <head>\n        <title> My Web Page </title>\n    </head>\n    <body>\n        <h1> Heading </h1>\n        <h2> Subheading </h2>\n        <form>\n            ...\n        </form>\n        <button> Button </button>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to retrieve all rows in a table that match a certain criteria.\n\nTable: Users\n\n name | age \n------|------\n John | 20\n Pete | 22\n Alex | 18 [/INST] SELECT * FROM Users WHERE age > 20;</s>"
  },
  {
    "text": "<s>[INST] Design a fourth-order Butterworth low-pass filter. [/INST] s = tf('s');\nH = 1/(s^4 + 2.39125*s^3 + 2.37238*s^2 + 0.857723*s + 0.147902);</s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query to find all documents that have a field called 'city' with a value of 'New York' [/INST] db.collection.find({city: 'New York'});</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code for a div tag with an id attribute of 'main-content'. [/INST] <div id=\"main-content\"></div></s>"
  },
  {
    "text": "<s>[INST] Write a Python code snippet to evaluate an expression stored as a string.\n\nexpression = '2+2*2' [/INST] def evaluate_expression(expression):\n    return eval(expression)\n\nprint(evaluate_expression(expression))</s>"
  },
  {
    "text": "<s>[INST] Create a database query in SQL to filter records within a particular range.\n\nTable Name: records\n Attributes: id (INTEGER), name (TEXT), start_date (DATE), end_date (DATE) [/INST] SELECT * FROM records WHERE start_date >= '<date1>' AND end_date <= '<date2>';</s>"
  },
  {
    "text": "<s>[INST] Find the largest value in an array of numbers.\n\n[5, 9, 40, 0.5, 3] [/INST] 40</s>"
  },
  {
    "text": "<s>[INST] Generate a URL to search the desired content on Google using Python.\n\nSearch Keyword: Covid-19 Pandemic [/INST] import urllib\nurl = 'https://www.google.com/search?q=Covid-19+Pandemic'\nurllib.request.urlopen(url)</s>"
  },
  {
    "text": "<s>[INST] Convert an array from its x-coordinate values to an array of polar coordinates.\n\n[(1, 1), (4, 2)] [/INST] [(1.4142135623730951, 0.7853981633974483), (4.47213595499958, 0.4636476090008061)]</s>"
  },
  {
    "text": "<s>[INST] Initialize a 2D array with `0`s. [/INST] def init2DArray(rows, cols): \n    # initialize the array \n    arr = [[0 for i in range(cols)] for j in range(rows)]\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Given a 2D array, replace every element with the greatest element on its row.\n\n[[6, 2, 9],\n [3, 8, 7],\n [1, 4, 5]] [/INST] def greatest_element(arr): \n    # loop through elements of 1D array \n    for i in range(len(arr)): \n        max_element = arr[i][0] \n  \n        # loop through elements of 2D array \n        for j in range(len(arr[i])):  \n            if arr[i][j] > max_element: \n                max_element = arr[i][j] \n              \n        # replace every element with max_element \n        for j in range(len(arr[i])): \n            arr[i][j] = max_element \n    return arr</s>"
  },
  {
    "text": "<s>[INST] In a given list, replace the even numbers by their square.\n\n[1, 2, 3, 4, 5, 6] [/INST] def even_nums_square(nums): \n    for i in range(len(nums)): \n        # check for even number \n        if nums[i] % 2 == 0: \n            # square the number \n            nums[i] = nums[i] * nums[i] \n    return nums</s>"
  },
  {
    "text": "<s>[INST] Consider the given list of tuples, remove the third element if it exists.\n\ndata = [(1, 5), (3, 4), (2, 6, 4)] [/INST] data = [(1, 5), (3, 4)]</s>"
  },
  {
    "text": "<s>[INST] Construct a lambda function to filter a given list based on a given predicate.\n\nnumbers = [1, 2, 3, 4, 5, 6]\npredicate = lambda x: x % 2 == 0 [/INST] filtered_list = list(filter(predicate, numbers)) #=> [2, 4, 6]</s>"
  },
  {
    "text": "<s>[INST] how to implement a recursive function for computing Fibonacci numbers?\n\nmax_num = 5 [/INST] def Fibonacci(n):\n    if n==0 or n==1:\n        return n \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n\ndef Fibonacci_Series(max_num):\n    for n in range(max_num+1):\n        print(Fibonacci(n))\n\n# Output: 0 1 1 2 3 5</s>"
  },
  {
    "text": "<s>[INST] Construct a regular expression pattern to match a specific set of strings.\n\nMatch the following strings: \nApple, Bananas, Oranges [/INST] ^(Apple|Bananas|Oranges)$</s>"
  },
  {
    "text": "<s>[INST] Using the provided class, add a new method to print the age of employees.\n\nclass Employee: \n    def __init__(self, name, age): \n        self.name = name\n        self.age = age [/INST] class Employee: \n    def __init__(self, name, age): \n        self.name = name\n        self.age = age \n\n    def get_age(self): \n        print(self.age)</s>"
  },
  {
    "text": "<s>[INST] Explain in a sentence the concept of proxy objects. [/INST] A proxy object is an intermediary object that is responsible for managing access to a target object or service to protect it from unauthorized access.</s>"
  },
  {
    "text": "<s>[INST] Translate the provided sentence into Pig Latin.\n\nThe cat jumped over the box. [/INST] eThay atcay jumpeday overay ethay oxbay.</s>"
  },
  {
    "text": "<s>[INST] Convert the given matrix into a comma-separated values (CSV) format.\n\n[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]] [/INST] 1,2,3\n4,5,6\n7,8,9</s>"
  },
  {
    "text": "<s>[INST] Make a simple program that adds two numbers. [/INST] # Take the input from user\nnum1 = int(input(\"Enter number 1: \"))\nnum2 = int(input(\"Enter number 2: \"))\n\n# Add the numbers\nsum = num1 + num2\n\n# Print the result\nprint(\"The sum is: \" + str(sum))</s>"
  },
  {
    "text": "<s>[INST] Construct a JSON structure from its respective python dictionaries\n\na = {\n  \"name\": \"John\",\n  \"age\": 32\n}\n\nb = {\n  \"cars\": [\"Ford\", \"BMW\", \"Fiat\"]\n} [/INST] import json\n\ndata = {**a, **b}\njson_data = json.dumps(data)</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes an array and prints every element in a single line.\n\nmy_array = [1, 2, 3] [/INST] def print_array(arr):\n    for element in arr:\n        print(element, end=' ')</s>"
  },
  {
    "text": "<s>[INST] Write a statement which checks whether a number is within a given range.\n\nnumber = 7\nmin_range = 5\nmax_range = 10 [/INST] if (number >= min_range) and (number <= max_range):\n    print(\"The number is within the given range.\")</s>"
  },
  {
    "text": "<s>[INST] Using a conditional statement, print a message depending on the day of the week.\n\nday_of_week = \"Thursday\" [/INST] if day_of_week == \"Monday\":\n    print(\"It's Monday\")\nelif day_of_week == \"Tuesday\":\n    print(\"It's Tuesday\")\nelif day_of_week == \"Wednesday\":\n    print(\"It's Wednesday\")\nelif day_of_week == \"Thursday\":\n    print(\"It's Thursday\")\nelif day_of_week == \"Friday\":\n    print(\"It's Friday\")\nelif day_of_week == \"Saturday\":\n    print(\"It's Saturday\")\nelif day_of_week == \"Sunday\":\n    print(\"It's Sunday\")</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following expression using an if-else statement.\n\nx = 5\nif x > 4: \n    print('x is greater than 4') [/INST] x = 5\nif x > 4:\n    print('x is greater than 4')\nelse:\n    print('x is not greater than 4')</s>"
  },
  {
    "text": "<s>[INST] Design a class that stores the data of an individual employee [/INST] class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n\n    def get_salary(self):\n        return self.salary</s>"
  },
  {
    "text": "<s>[INST] Create a function that compares two numbers and returns 'lower', 'higher', or 'equal' based on the comparison. [/INST] def compare_numbers(num1, num2):\n    if num1<num2:\n        return 'lower'\n    elif num1>num2:\n        return 'higher'\n    else:\n        return 'equal'</s>"
  },
  {
    "text": "<s>[INST] Calculate the number of seconds in a day. [/INST] seconds_in_day = 24 * 60 * 60</s>"
  },
  {
    "text": "<s>[INST] Create a database schema for managing authentication users. [/INST] CREATE TABLE users (\n\tid SERIAL PRIMARY KEY,\n\tusername VARCHAR NOT NULL UNIQUE,\n\tpassword VARCHAR NOT NULL,\n\tcreated_at TIMESTAMP NOT NULL DEFAULT NOW()\n);</s>"
  },
  {
    "text": "<s>[INST] Pass the following JSON array to an AJAX request.\n\n[{\"name\":\"John\", \"age\":21}, {\"name\":\"Dave\", \"age\":25}] [/INST] $.ajax({\n  url: 'url',\n  type: 'POST',\n  contentType: 'application/json',\n  data: JSON.stringify([{\"name\":\"John\", \"age\":21}, {\"name\":\"Dave\", \"age\":25}])\n});</s>"
  },
  {
    "text": "<s>[INST] Change the value of the third element in the following array.\n\nint[] arr = {1, 3, 4, 5}; [/INST] arr[2] = 10;</s>"
  },
  {
    "text": "<s>[INST] Write CSS code to separate the sidebar from the content by a horizontal line. [/INST] #sidebar {\n  border-bottom: 1px solid black;\n}\n\n#content {\n  border-top: 1px solid black;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a route for a REST API to retrieve a list of all books. [/INST] app.get('/books', (req, res) => {\n  // retrieve list of books from database\n  res.json(books);\n});</s>"
  },
  {
    "text": "<s>[INST] Identify the programming language of the sample code snippet.\n\ndef find_average(numbers):\n sum = 0\n for num in numbers:\n sum += num\n return sum / len(numbers) [/INST] Python.</s>"
  },
  {
    "text": "<s>[INST] Write a function to implement heap sort in JavaScript. [/INST] function heapSort(arr) {\n let n = arr.length;\n \n for (let i = Math.floor(n / 2 - 1); i >= 0; i--) {\n heapify(arr, n, i);\n }\n \n for (let i = n - 1; i > 0; i--) {\n [arr[0], arr[i]] = [arr[i], arr[0]];\n heapify(arr, i, 0);\n }\n \n return arr;\n}\n\nfunction heapify(arr, n, i) {\n let largest = i;\n let left = 2 * i + 1;\n let right = 2 * i + 2;\n\n if (left < n && arr[left] > arr[largest])\n largest = left;\n \n if (right < n && arr[right] > arr[largest])\n largest = right;\n \n if (largest !== i) {\n [arr[i], arr[largest]] = [arr[largest], arr[i]];\n heapify(arr, n, largest);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the given function in Python to convert the given list of integers a into a multidimensional list of size len(a) X len(a).\n\ndef convert_to_multi(a):\n    return [a] [/INST] def convert_to_multi(a):\n    result = []\n    for i in range(len(a)):\n        row = []\n        for j in range(len(a)):\n            row.append(a[j])\n        result.append(row)\n    return result</s>"
  },
  {
    "text": "<s>[INST] Find the data type of the variable x in the following JavaScript code snippet?\n\nlet x = \"Hello World\"; [/INST] String.</s>"
  },
  {
    "text": "<s>[INST] Given a word, remove all the vowels from it in C. [/INST] void remove_vowels(char *s) \n{ \n    for (int i = 0; s[i] != '\\0'; i++) \n    { \n        if (s[i] == 'a' || s[i] == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] == 'I' || s[i] == 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U') \n        { \n            for (int j = i; s[j] != '\\0'; ++j) {\n                s[j] = s[j+1]; \n            } \n        } \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create an object in JavaScript to save the particular book detail.\n\nTitle: Lord of the Rings\nAuthor: J.R.R. Tolkien [/INST] let book = { \n    title: 'Lord of the Rings', \n    author: 'J.R.R. Tolkien'\n};</s>"
  },
  {
    "text": "<s>[INST] Explain the concept of classes and objects in Java. [/INST] Classes in Java are user-defined templates for creating objects. A class specifies the data and behavior associated with any objects created from it. An object is an instance of a class which contains its own set of attributes and methods. Objects can interact with each other’s attributes and methods. Classes and objects are the fundamental components of object-oriented programming.</s>"
  },
  {
    "text": "<s>[INST] Generate an SQL query to select product names and prices that are greater than $50. [/INST] SELECT product_name, price \nFROM products \nWHERE price > 50;</s>"
  },
  {
    "text": "<s>[INST] Create a Python class 'Calculator' with two methods: 'add' and 'sub'. [/INST] class Calculator:\n def add(self, x, y):\n  return x + y\n\n def sub(self, x, y):\n  return x - y</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML page to add a table with three rows and two columns.\n\n<!-- HTML page -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Table Example</title>\n</head>\n<body>\n\n</body>\n</html> [/INST] <!-- Edited HTML page -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Table Example</title>\n</head>\n<body>\n  <table>\n   <tr>\n    <th>First Header</th>\n    <th>Second Header</th>\n   </tr>\n   <tr>\n    <td>Row 1, Cell 1</td>\n    <td>Row 1, Cell 2</td>\n   </tr>\n   <tr>\n    <td>Row 2, Cell 1</td>\n    <td>Row 2, Cell 2</td>\n   </tr>\n  </table>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Java method to decide if one point is inside a given rectangle or not. [/INST] public static boolean isPointInsideRectangle(Point p, Rectangle r) {\n    return (p.getX() <= r.getMaxX() && p.getX() >= r.getMinX() \n            && p.getY() <= r.getMaxY() && p.getY() >= r.getMinY());\n}</s>"
  },
  {
    "text": "<s>[INST] Create an if-else statement that prints \"Welcome!\" if the input is \"John\" and \"Goodbye!\" if the input is \"Caroline\". [/INST] if name == \"John\":\n    print(\"Welcome!\")\nelse:\n    print(\"Goodbye!\")</s>"
  },
  {
    "text": "<s>[INST] Given two lists, create a function that finds the common elements between the two lists.\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 6, 7] [/INST] def find_common(list1, list2):\n    common_elems = []\n    for elem in list1:\n        if elem in list2:\n            common_elems.append(elem)\n    return common_elems</s>"
  },
  {
    "text": "<s>[INST] Define what a global variable is. [/INST] A global variable is a variable that is accessible and can be modified in any part of a program. It is not limited to the scope of any particular function.</s>"
  },
  {
    "text": "<s>[INST] Explain what the \"continue\" statement does. [/INST] The \"continue\" statement is used to skip the current iteration of a loop and continue with the next iteration. It is commonly used to ignore certain items in a list or when the program should take a different action based on a particular condition.</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to encourage user input by prompting the user \"Please enter a valid email address.\" [/INST] def get_email(): \n  email = input(\"Please enter a valid email address: \")\n  return email</s>"
  },
  {
    "text": "<s>[INST] Sort an array in descending order using JavaScript.\n\n[50, 34, 97, 56, 12, 99] [/INST] let arrayToSort = [50, 34, 97, 56, 12, 99];\narrayTo Sort.sort((a, b) => b - a);\nconsole.log(arrayToSort); // [99, 97, 56, 50, 34, 12]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to convert a given number of seconds into the equivalent time in days, hours, minutes and seconds.\n\n15000 [/INST] let totalSeconds = 15000;\nlet days = Math.floor(totalSeconds / (24*60*60));\nlet remainingSeconds = totalSeconds % (24*60*60);\nlet hours = Math.floor(remainingSeconds / (60*60));\nlet remainingSeconds2 = remainingSeconds % (60*60);\nlet minutes = Math.floor(remainingSeconds2 / (60));\nlet seconds = remainingSeconds2 % (60);\n\nconsole.log(`${days} days, ${hours} hours, ${minutes} minutes, ${seconds} seconds.`);</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to find the remainder when two given numbers are divided.\n\n9 and 5 [/INST] let dividend = 9;\nlet divisor = 5;\nlet remainder = dividend % divisor;\nconsole.log(remainder);</s>"
  },
  {
    "text": "<s>[INST] Create an array to store 10 names of famous scientists. [/INST] let scientists = [\"Albert Einstein\", \"Isaac Newton\", \"Charles Darwin\", \"Marie Curie\", \"Galileo Galilei\", \"Stephen Hawking\", \"Sophie Germain\", \"Antoine Lavoisier\", \"Niels Bohr\", \"Blaise Pascal\"];</s>"
  },
  {
    "text": "<s>[INST] Create a code block that calculates the root of a given number\n\nFind the square root of 16 [/INST] #calculate the square root of a given number\ndef get_square_root(num):\n    root = num ** 0.5\n    return root\nif __name__ == '__main__':\n    number = 16\n    root = get_square_root(number)\n    print(\"Square root of {} is {}\".format(number, root))</s>"
  },
  {
    "text": "<s>[INST] Develop a code that can calculate the cumulative sum of an array\n\n[2, 4, 6, 8, 10] [/INST] def cummulative_sum(arr):\n    cum_sum = 0 \n    for num in arr:\n       cum_sum += num\n    return cum_sum\nif __name__ == '__main__':\n    test_list = [2, 4, 6, 8, 10]\n    print('Cumulative Sum:', cummulative_sum(test_list))</s>"
  },
  {
    "text": "<s>[INST] Given a function that takes two parameters \"a\" and \"b\", write a code to add the two parameters together and return the result.\n\na = 1, b = 2 [/INST] #Add two parameters together and return the result\ndef add_two_params(a, b):\n    return a + b\nresult = add_two_params(1, 2)\nprint('The result is', result)</s>"
  },
  {
    "text": "<s>[INST] Write a code to find control characters such as carriage returns inside a given string\n\n'This is a string\\r\\nwith some control characters' [/INST] #Function to find control characters\ndef find_control_chars(string):\n    control_chars = [\n        '\\r', \n        '\\n'\n    ]\n    for char in control_chars:\n        if char in string:\n            return True\n    return False\n    \nstring = 'This is a string\\r\\nwith some control characters'\ncontrol_char_exists = find_control_chars(string)\nprint('Control character exists:', control_char_exists)</s>"
  },
  {
    "text": "<s>[INST] Create a method to calculate the amount of tax to be paid based on the inputs of income and country.\n\nincome = 20000, country = Ireland [/INST] #Calculate the applicable tax amount \ndef get_tax_amount(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\nif __name__ == '__main__':\n    income = 20000\n    country = 'Ireland'\n    tax_amount = get_tax_amount(income, country)\n    print('Tax amount:', tax_amount)</s>"
  },
  {
    "text": "<s>[INST] Write a code block to return a random value from a given list\n\n[1, 4, 8, 12] [/INST] #Return a random value from a given list\nimport random\n\ndef get_random_value(lst):\n    n = random.randint(0, len(lst) - 1)\n    return lst[n]\n\ntest_list = [1, 4, 8, 12]\nrandom_value = get_random_value(test_list)\nprint('Random value:', random_value)</s>"
  },
  {
    "text": "<s>[INST] Generate three different sorting algorithms for a list of integers. [/INST] # Bubble Sort algorithm\ndef bubble_sort(lst):\n    for i in range(len(lst)-1):\n        for j in range(len(lst)-1-i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\n# Insertion Sort algorithm\ndef insertion_sort(lst):\n    for i in range(1, len(lst)):\n        key = lst[i]\n        j = i - 1\n        while j >= 0 and key < lst[j]:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = key\n    return lst\n\n# Heap Sort algorithm\ndef heap_sort(lst):\n    # build max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, len(lst), i)\n   \n    # extract elements\n    for i in range(len(lst) - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n    return lst\n\ndef heapify(lst, n, i):\n    # Find largest among root, left child and right child\n    largest = i \n    l = 2 * i + 1\n    r = 2 * i + 2 \n  \n    if l < n and lst[i] < lst[l]:\n        largest = l\n  \n    if r < n and lst[largest] < lst[r]:\n        largest = r\n  \n    # change root, if needed\n    if largest != i:\n        lst[i], lst[largest] = lst[largest], lst[i]\n        heapify(lst, n, largest)</s>"
  },
  {
    "text": "<s>[INST] Replace each letter in the following text with its corresponding number:\n\nHello world! [/INST] 83055109 16971134!</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby code to convert a double-linked list to a single-linked list. [/INST] def double_to_single(list)\n    current_node = list.head\n    while current_node\n        current_node.next = current_node.other\n        current_node.other = nil\n        current_node = current_node.next\n    end\nend</s>"
  },
  {
    "text": "<s>[INST] Given a valid XML string, write an XPath query to retrieve all the elements\n\n<?xml version=\"1.0\"?>\n<root>\n  <child name=\"child1\" />\n  <child name=\"child2\">\n    <subchild>subchild</subchild>\n  </child>\n  <child name=\"child3\" />\n</root> [/INST] // XPath query to retrieve all elements from the given XML string \n/root/child</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to update the record of the column \"Gender\" to 'Male' where the column \"Name\" is 'John'. [/INST] UPDATE table_name\nSET Gender = 'Male'\nWHERE Name = 'John';</s>"
  },
  {
    "text": "<s>[INST] Create an R code to convert yes/no questions to binary input.\n\nDo you have a pet? [/INST] question <- \"Do you have a pet?\"\n\nbinary_input <- ifelse(question == \"Do you have a pet?\", 1, 0)\n\nprint(binary_input) # prints 1</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to count the number of distinct values for a specific column in a table.\n\nTable Name: myTable\nColumn Name: myColumn [/INST] SELECT COUNT(DISTINCT myColumn)\nFROM myTable</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression to match dates in the MM/DD/YYYY format. [/INST] import re\n\npattern = re.compile(r'^\\d{2}\\/\\d{2}\\/\\d{4}$')</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form with name, email address and a submit button. [/INST] <form>\n  Name: <input type=\"text\" name=\"name\"><br>\n  Email: <input type=\"email\" name=\"email\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to show all employee details with their attachments in a specific department.\n\nDepartment Name: Sales [/INST] SELECT e.name, a.file_name, a.file_url\nFROM employees e\nJOIN attachments a ON e.id = a.employee_id\nWHERE e.department = 'Sales'</s>"
  },
  {
    "text": "<s>[INST] Create a class in C++ for a light emitting diode (LED) object that describes the color of the LED. [/INST] class LED \n{ \n    private: \n    int color; \n\npublic: \n    // default constructor \n    LED() \n    { \n        color = 0; \n    } \n\n    // setter function \n    void setColor(int c) \n    { \n        color = c; \n    } \n\n    // getter function  \n    int getColor() \n    { \n        return color; \n    } \n};</s>"
  },
  {
    "text": "<s>[INST] Create a Ruby method to keep only text from a string.\n\nstring = \"This is a string with numbers such as 1, 2, and 3 in it.\" [/INST] def only_text(string)\n  return string.gsub(/[0-9,]/, '')\nend\n\nonly_text(string) // output: \"This is a string with numbers such as  and  in it.\"</s>"
  },
  {
    "text": "<s>[INST] Read the following code and debug the errors.\n\ndef double_up(str):\n  double_str = str + \" \" + str\n  strlen = len(str)\n  print(double_str[strlen]) [/INST] def double_up(str):\n  double_str = str + \" \" + str\n  strlen = len(str)\n  print(double_str[strlen - 1])</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to sort an array of employee objects from oldest to youngest based on age property.\n\n[{name: 'John', age: 30},\n{name: 'Mary', age: 25},\n{name: 'Kevin', age: 27}] [/INST] let employees = [{name: 'John', age: 30}, \n                 {name: 'Mary', age: 25}, \n                 {name: 'Kevin', age: 27}];\n\nemployees.sort((employee1, employee2) => {\n  return employee2.age - employee1.age;\n});</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to get the list of members younger than 30. [/INST] SELECT * \nFROM members \nWHERE age < 30;</s>"
  },
  {
    "text": "<s>[INST] What is the output of this C++ code for n = 3?\n\nint f(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return f(n-1) + f(n-2);\n} [/INST] 3</s>"
  },
  {
    "text": "<s>[INST] Output \"Hello World!\" using Java. [/INST] public class HelloWorld { \n    public static void main(String[] args) \n    { \n        System.out.println(\"Hello World!\"); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Add the following data to a JavaScript associative array: {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"} [/INST] let data = {\n  \"name\": \"John\", \n  \"age\": 30, \n  \"city\": \"New York\"\n};</s>"
  },
  {
    "text": "<s>[INST] Create a HTML element for inputting an email address. [/INST] <input type=\"email\" name=\"email\" placeholder=\"Enter your email address\"></s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to calculate the length and breadth of a given rectangle. [/INST] def calculate_rectangle_length_and_breadth(x, y):\n    length = x\n    breadth = y\n    return length, breadth</s>"
  },
  {
    "text": "<s>[INST] Given a list of student grades, write HTML code to display them in a table.\n\nlet grades = [85, 90, 77, 95]; [/INST] <table>\n    <thead>\n        <tr>\n            <th>Grades</th>\n        </tr>\n    </thead>\n    <tbody>\n    <tr><td>85</td></tr>\n    <tr><td>90</td></tr>\n    <tr><td>77</td></tr>\n    <tr><td>95</td></tr>\n    </tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Given two strings, write a Python function to check if they are anagrams. [/INST] def check_anagrams(str1, str2): \n \n    if (len(str1) != len(str2)): \n        return False \n  \n    # sorting both strings \n    str1_list = sorted(str1) \n    str2_list = sorted(str2) \n  \n    # Check if both lists are equal \n    for i in range(0, len(str1_list)): \n        if str1_list[i] != str2_list[i]: \n            return False \n  \n    # If all characters were same \n    return True</s>"
  },
  {
    "text": "<s>[INST] Write an HTML form with two input fields, one for the user's name and one for the user's age. [/INST] <form>\n  <label>Name:</label><input type=\"text\" name=\"name\"><br>\n  <label>Age:</label><input type=\"number\" name=\"age\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write a HTML code snippet to create a link which redirects to a given website. [/INST] <a href=\"https://www.example.com/\">Link Text</a></s>"
  },
  {
    "text": "<s>[INST] Write a Java code snippet to swap two given values.\n\nint a = 10;\nint b = 20; [/INST] int temp = a;\na = b;\nb = temp;</s>"
  },
  {
    "text": "<s>[INST] Given a string, the task is to output a new string with all repeating continuous characters collapsed to a single character.\n\naabbccddcc [/INST] abcdc</s>"
  },
  {
    "text": "<s>[INST] Reverse the order of an array.\n\n[2, 3, 4, 5, 6] [/INST] [6, 5, 4, 3, 2]</s>"
  },
  {
    "text": "<s>[INST] Given a string, replace characters with their corresponding HTML entities\n\nString: '<div>' [/INST] String: '&lt;div&gt;'</s>"
  },
  {
    "text": "<s>[INST] Create an API Request to send a request with a body in JSON format\n\nEndpoint: https://example.com/orders\n<noinput> [/INST] fetch('https://example.com/orders', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    orderId: '12434',\n    items: [\n      { itemId: '345', quantity: 3 },\n      { itemId: '678', quantity: 4 }\n    ]\n  }\n});</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a list of strings and combines them together into one string\n\n[\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"] [/INST] def combineStrings(strings):\n    combined_string = \"\"\n    for string in strings:\n        combined_string += string + \" \"\n    return combined_string\n\ncombined_string = combineStrings([\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"])</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to select the name and description of all products [/INST] SELECT name, description FROM products;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to list out the product names and prices from a database [/INST] SELECT name, price FROM products;</s>"
  },
  {
    "text": "<s>[INST] Transform an array of objects using JavaScript\n\nArray: [{name: \"John\", age: 21}, {name: \"Mary\", age: 18}, {name: \"Steve\", age: 24}] [/INST] const result = arr.map(obj => (\n  {\n    name: obj.name, \n    age: obj.age * 2\n  }\n));</s>"
  },
  {
    "text": "<s>[INST] Write a TensorFlow program to construct a basic neural network [/INST] import tensorflow as tf\n\n# Set up the layers for the model\nmodel = tf.keras.models.Sequential([\n    # Set up the first layer\n    tf.keras.layers.Dense(64, input_shape = (784, ), activation = 'relu'),\n    # Set up the second layer\n    tf.keras.layers.Dense(64, activation = 'relu'),\n    # Set up the output layer\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])\n\n# Compile the model\nmodel.compile(\n  optimizer = 'adam',\n  loss = 'sparse_categorical_crossentropy',\n  metrics = ['accuracy']\n)</s>"
  },
  {
    "text": "<s>[INST] Write a Python script that extracts the name and age of all customers from the customer table in a database. [/INST] import MySQLdb \n\n# connect to database\ndb = MySQLdb.connect(host=\"localhost\", user=\"user\", passwd=\"password\", db=\"customers\")  \n\n# create a cursor \ncursor = db.cursor()\n\n# execute SQL query \ncursor.execute(\"SELECT name, age FROM customers\")  \n\n# fetch the rows \nrows = cursor.fetchall() \n\n# traverse over the results \nfor row in rows: \n    name = row[0] \n    age = row[1] \n    print(\"Name = {}, Age = {}\".format(name, age))</s>"
  },
  {
    "text": "<s>[INST] Modify the following JavaScript code to make it print the result on the console.\n\nvar num1 = 10;\nvar num2 = 20; [/INST] var num1 = 10;\nvar num2 = 20;\nconsole.log(num1 + num2);</s>"
  },
  {
    "text": "<s>[INST] How could you modify the following JavaScript code to generate a random number between 0 and 10?\n\nvar randomNum = Math.random() [/INST] var randomNum = Math.floor(Math.random() * (11 - 0)) + 0;</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to create a list of n numbers (where n is the input) and print the list in reverse order.\n\nn=5 [/INST] n = 5\nlst = list(range(n, 0, -1))\nprint(lst)</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression that finds all occurrences of the word \"computer\" in the following text.\n\n\"A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming. [/INST] import re\n\npattern = re.compile(r'\\bcomputer\\b')\n\ntext = \"A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming.\"\n\nmatches = pattern.finditer(text)\n\nfor match in matches:\n    print(match)</s>"
  },
  {
    "text": "<s>[INST] Write a C# program to take a given number and print it in words.\n\nint n = 1234 [/INST] int n = 1234;\nString[] ones = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\nString[] teens = {\"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"};\nString[] tens = {\"\", \"ten\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"};\n\nint n1 = n % 10;\nint n2 = n / 10;\nint n3 = n2 % 10;\nint n4 = n2 / 10;\nint n5 = n4 % 10;\nint n6 = n4 / 10;\n\nString words = \"\";\nif (n6 > 0)\n    words += ones[n6] + \" thousand \";\nif (n5 > 0)\n    words += ones[n5] + \" hundred \";\nif (n4 > 1)\n    words += tens[n3] + \" \";\nif (n3 == 1)\n    words += teens[n1 - 1] + \" \";\nif (n2 > 0 && n3 != 1)\n    words += ones[n1] + \" \";\n\nSystem.out.println(words);</s>"
  },
  {
    "text": "<s>[INST] Given an array of strings, write a code snippet in Python that finds the longest string and prints its length.\n\narr = [\"Dog\",\"Cat\",\"Mouse\"] [/INST] arr = [\"Dog\",\"Cat\",\"Mouse\"]\nlongest_str = max(arr, key=len)\nprint(len(longest_str))</s>"
  },
  {
    "text": "<s>[INST] Write a code that computes the sum and difference of two numbers in JavaScript.\n\nvar x = 10;\nvar y = 5; [/INST] var x = 10;\nvar y = 5;\n\nvar sum = x + y;\nvar diff = x - y;\n\nconsole.log(\"The sum of \" + x + \" and \" + y + \" is: \" + sum);\nconsole.log(\"The difference of \" + x + \" and \" + y + \" is: \" + diff);</s>"
  },
  {
    "text": "<s>[INST] Change the font size of the HTML element <p> to \"14px\". [/INST] document.querySelector('p').style.fontSize = \"14px\";</s>"
  },
  {
    "text": "<s>[INST] How do you loop over a JavaScript array? [/INST] for (let i = 0; i < array.length; i++) {\n    let element = array[i];\n    //code to execute for each element\n}</s>"
  },
  {
    "text": "<s>[INST] Find the square root of 961 using JavaScript. [/INST] Math.sqrt(961); //Output is: 31</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code snippet to make the <h1> text bold with font size of 24px. [/INST] h1 {\n font-weight: bold;\n font-size: 24px;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to calculate the sum of all items in a given dictionary with integer values.\n\ndict = {'a': 5, 'b': 10, 'c': 3} [/INST] def dict_sum(nums):\n sum = 0\n for key, val in nums.items():\n  sum +=val\n return sum\n\nprint(dict_sum(dict)) //Output is: 18</s>"
  },
  {
    "text": "<s>[INST] Create a Dictionary object in JavaScript and add three key-value pairs. [/INST] let dictionary = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n};</s>"
  },
  {
    "text": "<s>[INST] Sort a JavaScript array of objects by a given property.\n\narr = [\n {name:\"Harry\", age:25}, \n {name:\"John\", age:30},\n {name:\"Jane\", age:22}\n] [/INST] arr.sort((a, b) => (a.age > b.age) ? 1 : -1 ); //Output is: [{name:\"Jane\", age:22}, {name:\"Harry\", age:25}, {name:\"John\", age:30}]</s>"
  },
  {
    "text": "<s>[INST] Construct a for-loop to iterate through a given list of strings and print each member one line at a time.\n\nword_list = [\"hello\", \"world\", \"!\"] [/INST] for word in word_list:\n print(word)</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java that stores a student's ID and name. [/INST] public class Student { \n    int id; \n    String name; \n  \n    Student(int id, String name) { \n        this.id = id; \n        this.name = name; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to calculate the total and the average of an array of numbers.\n\narr = [56, 23, 89, 17, 13, 10] [/INST] total=sum(arr)\navg=sum(arr)/len(arr)\nprint(\"Total of the array elements is: \"+str(total))\nprint(\"Average of the array elements is: \"+str(avg))</s>"
  },
  {
    "text": "<s>[INST] Create a Node.js function to validate an email with a given regex. [/INST] function validateEmail(email) {\n    var re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    return re.test(email); \n}</s>"
  },
  {
    "text": "<s>[INST] Construct an if-statement to check whether the given element is present in an array or not.\n\narr = [4, 5, 6]\nelement = 5 [/INST] if element in arr:\n    print(\"Element is present in array\")</s>"
  },
  {
    "text": "<s>[INST] Create a Python function to sort a list of dictionaries in ascending order of \"count\".\n\ndata = [\n    {'name': 'Alice', 'count': 5}, \n    {'name': 'Bob', 'count': 3}, \n    {'name': 'John', 'count': 7},\n    {'name': 'David', 'count': 4},\n] [/INST] def sort_dict_list(data):\n    \"\"\"Sort a list of dictionaries in ascending order of 'count'\n   \n    Args:\n        data (list): A list of dictionaries\n   \n    Returns:\n        list: A sorted list of dictionaries\n    \"\"\"\n \n    sorted_data = sorted(data, key=lambda x: x['count'])\n    return sorted_data\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'Alice', 'count': 5}, \n        {'name': 'Bob', 'count': 3}, \n        {'name': 'John', 'count': 7},\n        {'name': 'David', 'count': 4},\n    ]\n    sorted_data = sort_dict_list(data)\n    print(sorted_data)</s>"
  },
  {
    "text": "<s>[INST] Generate a C++ function to print the Fibonacci series [/INST] #include <iostream> \nusing namespace std; \n\nvoid Fibonacci(int n) \n{ \n    int f1 = 0, f2 = 1, i; \n  \n    if (n == 0) \n        return; \n  \n    for (i = 1; i <= n; i++) \n    { \n        cout << f2 << \" \"; \n        int next = f1 + f2; \n        f1 = f2; \n        f2 = next; \n    } \n} \n  \nint main() \n{ \n    int n = 10; \n    Fibonacci(n); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] What is the result of performing arithmetic subtraction between two numbers, 5 and 2? [/INST] The result of performing arithmetic subtraction between two numbers, 5 and 2 is 3. Since subtraction is the inverse of addition, to get the difference between two numbers you subtract the number being subtracted from the number that is being subtracted from. Thus, 5 - 2 = 3.</s>"
  },
  {
    "text": "<s>[INST] How can you print the Hello World message using the Tkinter module in Python? [/INST] \"\"\"Print the Hello World message using the Tkinter module in Python\"\"\"\nimport tkinter as tk\n\n# Create the main window\nwindow = tk.Tk()\n\n# Create the label with the text\nhello_label = tk.Label(window, text=\"Hello World\")\n\n# Pack the label to the window\nhello_label.pack()\n\n# Main loop\nwindow.mainloop()</s>"
  },
  {
    "text": "<s>[INST] Use a regex expression to find all the words that begin with a \"t\" and end with an \"e\" in the following sentence.\n\nsentence = \"The dark night was quiet and still\" [/INST] import re\n\nsentence = \"The dark night was quiet and still\"\n\npattern = r\"\\bT\\w*e\\b\"\n\n# Find all the words that begin with a \"t\" and end with an \"e\"\nmatches = re.findall(pattern, sentence)\nprint(matches)\n\n# Output: ['The', 'night', 'quiet', 'still']</s>"
  },
  {
    "text": "<s>[INST] Using the JavaScript Math object, calculate the sine of an angle.\n\nangle = 45 [/INST] \"\"\"Using the Math object, calculate the sine of an angle\"\"\"\n\nangle = 45\n\nsine = Math.sin(angle * Math.PI / 180);\nconsole.log(sine);\n\n# Output: 0.7071067811865476</s>"
  },
  {
    "text": "<s>[INST] Using the given variables, create an if-else statement that prints \"You are an adult\" when age is greater than or equal to 18, otherwise print \"You are a minor\".\n\nage = 18 [/INST] if age >= 18:\n    print(\"You are an adult\")\nelse:\n    print(\"You are a minor\")</s>"
  },
  {
    "text": "<s>[INST] Compare two values to check if the first one is greater than the second one, and if so, print \"A is greater than B\".\n\nA = 5\nB = 3 [/INST] if A > B:\n    print(\"A is greater than B\")</s>"
  },
  {
    "text": "<s>[INST] Implement a function that swaps the places of two elements in a list.\n\nmy_list = [1,2,3,4,5] [/INST] def swap(my_list, index_1, index_2):\n    # Store the two elements \n    temp = my_list[index_1]\n    my_list[index_1] = my_list[index_2]\n    my_list[index_2] = temp</s>"
  },
  {
    "text": "<s>[INST] Implement a function that creates a dictionary from two lists which contain the keys and values, respectively.\n\nkeys = [\"name\", \"age\", \"city\"]\nvalues = [\"John\", 30, \"New York\"] [/INST] def create_dictionary(keys, values):\n    # Create an empty dictionary\n    my_dict = {}\n    # Populate the dictionary with elements from lists\n    for i in range(len(keys)): \n        my_dict[keys[i]] = values[i]\n    return my_dict</s>"
  },
  {
    "text": "<s>[INST] Access the third element from a list.\n\nmy_list = [1,2,3,4,5] [/INST] element = my_list[2]</s>"
  },
  {
    "text": "<s>[INST] Construct a MySQL query to create a new table with 3 columns.\n\ntableName = ‘products’\ncolumns = ['id', 'name', 'price'] [/INST] CREATE TABLE products (id INTEGER, name VARCHAR(255), price DECIMAL);</s>"
  },
  {
    "text": "<s>[INST] How would you limit the output of a SQL query to the first 10 rows? [/INST] SELECT * FROM [table_name] LIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] In Java, how do you make a method that takes a number and displays its square? [/INST] public static void displaySquare(int num){\n  System.out.println(num*num);\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an XPath query to select all <h2> tags from a web page [/INST] //h2</s>"
  },
  {
    "text": "<s>[INST] Write a neural network in Keras that can distinguish between a cat and a dog. [/INST] import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n\n# Define the model\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])</s>"
  },
  {
    "text": "<s>[INST] Create a Kendo-UI application to display an interactive grid with the following options: sorting, pagination, and search filter.\n\n<no-input> [/INST] <div id=\"grid\"></div>\n<script>\n$(\"#grid\").kendoGrid({\n    dataSource: {\n        sort: {\n            field: \"firstName\",\n            dir: \"asc\"\n        },\n        pageSize: 10,\n        serverPaging: true,\n        serverFiltering: true\n    },\n    columns: [\n        { \n            field: \"firstName\", \n            title: \"First Name\" \n        },\n        { \n            field: \"lastName\", \n            title: \"Last Name\" \n        },\n        { \n            field: \"age\", \n            title: \"Age\" \n        }\n    ],\n    sortable: true,\n    pageable: {\n        refresh: true,\n        pageSizes: true\n    },\n    filterable: {\n        mode: \"row\"\n    },\n    height: 550\n});\n</script></s>"
  },
  {
    "text": "<s>[INST] Create a class \"Person\" in Kotlin with first name, last name, and age as its fields. [/INST] class Person(\n    var firstName: String,\n    var lastName: String, \n    var age: Int\n)</s>"
  },
  {
    "text": "<s>[INST] Write a function in R to filter out the words containing more than 5 letters. [/INST] filter_words_over_five_letters <- function(words_list) {\n  filtered_words <- words_list[nchar(words_list) > 5]\n  return(filtered_words)\n}</s>"
  },
  {
    "text": "<s>[INST] Write code in Swift to print the Fibonacci Sequence to the first 20 numbers [/INST] var a = 0, b = 1\n\nfor _ in 1...20 {\n    let c = a + b\n    a = b\n    b = c\n    print(\"\\(c)\")\n}</s>"
  },
  {
    "text": "<s>[INST] Create a GraphQL query to get the list of products from a database. [/INST] query { \n  products { \n    id \n    name \n    price \n    quantity \n    category \n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a list of email addresses using the given range.\n\nRange: 10-100 [/INST] [\n    'email10@example.com',\n    'email11@example.com',\n    'email12@example.com',\n    'email13@example.com',\n    'email14@example.com',\n    'email15@example.com',\n    'email16@example.com',\n    'email17@example.com',\n    'email18@example.com',\n    'email19@example.com',\n    'email20@example.com',\n    'email21@example.com',\n    'email22@example.com',\n    'email23@example.com',\n    'email24@example.com',\n    'email25@example.com',\n    'email26@example.com',\n    'email27@example.com',\n    'email28@example.com',\n    'email29@example.com',\n    'email30@example.com',\n    'email31@example.com',\n    'email32@example.com',\n    'email33@example.com',\n    'email34@example.com',\n    'email35@example.com',\n    'email36@example.com',\n    'email37@example.com',\n    'email38@example.com',\n    'email39@example.com',\n    'email40@example.com',\n    'email41@example.com',\n    'email42@example.com',\n    'email43@example.com',\n    'email44@example.com',\n    'email45@example.com',\n    'email46@example.com',\n    'email47@example.com',\n    'email48@example.com',\n    'email49@example.com',\n    'email50@example.com',\n    'email51@example.com',\n    'email52@example.com',\n    'email53@example.com',\n    'email54@example.com',\n    'email55@example.com',\n    'email56@example.com',\n    'email57@example.com',\n    'email58@example.com',\n    'email59@example.com',\n    'email60@example.com',\n    'email61@example.com',\n    'email62@example.com',\n    'email63@example.com',\n    'email64@example.com',\n    'email65@example.com',\n    'email66@example.com',\n    'email67@example.com',\n    'email68@example.com',\n    'email69@example.com',\n    'email70@example.com',\n    'email71@example.com',\n    'email72@example.com',\n    'email73@example.com',\n    'email74@example.com',\n    'email75@example.com',\n    'email76@example.com',\n    'email77@example.com',\n    'email78@example.com',\n    'email79@example.com',\n    'email80@example.com',\n    'email81@example.com',\n    'email82@example.com',\n    'email83@example.com',\n    'email84@example.com',\n    'email85@example.com',\n    'email86@example.com',\n    'email87@example.com',\n    'email88@example.com',\n    'email89@example.com',\n    'email90@example.com',\n    'email91@example.com',\n    'email92@example.com',\n    'email93@example.com',\n    'email94@example.com',\n    'email95@example.com',\n    'email96@example.com',\n    'email97@example.com',\n    'email98@example.com',\n    'email99@example.com',\n    'email100@example.com'\n]</s>"
  },
  {
    "text": "<s>[INST] Find the area of the following circle\n\nRadius: 8 cm [/INST] Area = pi * r^2\n\nArea = 3.14 * 8^2 \n\nArea = 201.06 cm^2</s>"
  },
  {
    "text": "<s>[INST] Implement a class to create an object with the given characteristics\n\nCharacteristics: Name, Age, Gender [/INST] class Person:\n    def __init__(self, name, age, gender):\n        self.name = name \n        self.age = age \n        self.gender = gender \n\n    def get_details(self):\n        return f\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}\"</s>"
  },
  {
    "text": "<s>[INST] How would you set up a database table to store medical records [/INST] CREATE TABLE medical_records (\n    record_id INT AUTO_INCREMENT PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    doctor VARCHAR(255) NOT NULL,\n    diagnosis TEXT,\n    test_results TEXT,\n    notes TEXT\n);</s>"
  },
  {
    "text": "<s>[INST] Fix the bug in the following code that causes the output to be incorrect.\n\ndef calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}') [/INST] def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}.')</s>"
  },
  {
    "text": "<s>[INST] Take the following code and convert it from a for loop to a While loop.\n\nnums = [1,2,3,4,5]\nfor num in nums:\n    print(num**2) [/INST] nums = [1,2,3,4,5]\ni = 0\nwhile i < len(nums):\n    print(nums[i]**2)\n    i = i + 1</s>"
  },
  {
    "text": "<s>[INST] Write a code that takes a number and prints it out in words.\n\n25 [/INST] def number_to_word(n):\n    tens_words = {\n        0: '',\n        2: 'twenty',\n        3: 'thirty',\n        4: 'forty',\n        5: 'fifty',\n        6: 'sixty',\n        7: 'seventy',\n        8: 'eighty',\n        9: 'ninety',\n    }\n    ones_words = {\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n        9: 'nine',\n    }\n\n    tens = n // 10\n    ones = n % 10\n\n    return tens_words[tens] + ' ' + ones_words[ones]\n\nprint(number_to_word(25))</s>"
  },
  {
    "text": "<s>[INST] Take the following array and add up all of the numbers\n\nnumbers = [4,15,7,10,45] [/INST] def sum_numbers(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nprint(sum_numbers(numbers))</s>"
  },
  {
    "text": "<s>[INST] Write a Python code take a given string and return the string in reverse.\n\nhello [/INST] def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string('hello'))</s>"
  },
  {
    "text": "<s>[INST] Write a code that takes two lists and find the longest common starting substring\n\nlist1 = ['cat', 'car', 'camel']\nlist2 = ['carry', 'cap', 'caterpillar'] [/INST] def find_longest_substring(list1, list2):\n    string1 = list1[0]\n    string2 = list2[0]\n    min_length = min(len(string1), len(string2))\n    longest_substring = \"\"\n    \n    for i in range(min_length):\n        if string1[i] == string2[i]:\n            longest_substring += string1[i]\n        else:\n            break\n    return longest_substring\n    \nprint(find_longest_substring(list1, list2))</s>"
  },
  {
    "text": "<s>[INST] Write a Python code that takes a string and replace all the non-alphanumeric characters with a given character.\n\nstring = 'Hello, world!'\ncharacter = '#' [/INST] import re\n\ndef replace_non_alphanum(string, character):\n    return re.sub(r'\\W', character, string)\n\nstring = 'Hello, world!'\ncharacter = '#'\n\nprint(replace_non_alphanum(string, character))</s>"
  },
  {
    "text": "<s>[INST] Identify common elements between two given lists\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10] [/INST] def common_elements(list1, list2):\n    return set(list1).intersection(list2)\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]\n\nprint(common_elements(list1, list2))</s>"
  },
  {
    "text": "<s>[INST] Generate a new list from an old list by multiplying each element of the old list with a given number\n\nnumbers = [2, 4, 6]\nmultiply = 5 [/INST] def multiply_elements(numbers, multiply):\n    new_list = []\n    for num in numbers:\n        new_list.append(num * multiply)\n    return new_list\n\nnumbers = [2, 4, 6]\nmultiply = 5\n\nprint(multiply_elements(numbers, multiply))</s>"
  },
  {
    "text": "<s>[INST] Take the following list of words and return the words in alphabetical order\n\nwords = ['daisy', 'apple', 'cat', 'zebra'] [/INST] def sort_alphabetical(words):\n return sorted(words)\n\nwords = ['daisy', 'apple', 'cat', 'zebra']\n\nprint(sort_alphabetical(words))</s>"
  },
  {
    "text": "<s>[INST] Find the code snippet to format the output of a List. [/INST] for item in some_list:\n    print(\"{:>20}\".format(item))</s>"
  },
  {
    "text": "<s>[INST] Select the correct code for a for-loop for a sequential array of numbers. [/INST] for i in range(1, 10):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Modify the code to declare a variable as a float.\n\nx = 5 [/INST] x = float(5)</s>"
  },
  {
    "text": "<s>[INST] Delete the elements at a specified position of the given list.\n\nmy_list = [1, 2, 3, 4, 5]\npos = 3 [/INST] def delete_element(list1, pos):\n    del list1[pos]\n    print(\"After deleting the element at position {0} the list is: {1}\".format(pos, list1))\n\ndelete_element(my_list, pos)</s>"
  },
  {
    "text": "<s>[INST] What command should be added to the function to make sure the input list is sorted?\n\ndef remove_duplicates(list):\n    # TODO: add command\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list [/INST] def remove_duplicates(list):\n    # sort the list\n    list.sort()\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list</s>"
  },
  {
    "text": "<s>[INST] Write a while loop to print all numbers from 20 to 0. [/INST] num = 20\n\nwhile num >= 0:\n    print(num)\n    num -= 1</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the maximum of three numbers using if else. [/INST] def maximum_of_three(x, y, z): \n    if x > y and x > z: \n        max = x \n    elif y > x and y > z: \n        max = y \n    else: \n        max = z \n    return max</s>"
  },
  {
    "text": "<s>[INST] Generate a recursive function for the following task:\n\nGiven a list of integers, \"find the max element present in the list\". [/INST] def find_max(list):\n    # base condition\n    if len(list) == 1:\n        return list[0] \n    else:\n        # compare the current element to the next element\n        max_element = max(list[0], list[1])\n        # remove the compared element\n        list.pop(1)\n        # call the function on the remaining list\n        return find_max(list[:1] + [max_element] + list[1:])</s>"
  },
  {
    "text": "<s>[INST] Create a class to represent an Employee, which includes a name, salary, and ID number [/INST] class Employee:\n    def __init__(self, name, salary, id_number):\n        self.name = name\n        self.salary = salary\n        self.id_number = id_number</s>"
  },
  {
    "text": "<s>[INST] What should be the output for the given code?\n\na = 7\nb = 2\n\nif a % b == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\") [/INST] Yes</s>"
  },
  {
    "text": "<s>[INST] You are passed an array and a value. Write a Python program to insert the value in the array at the end.\n\narray = [1, 2, 3, 4], value = 7 [/INST] array = [1, 2, 3, 4, 7]</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that takes a string and prints the frequency table of all its characters.\n\nstring = “Hello world\" [/INST] def get_freq_table(string): \n    char_freq_dict = dict() \n    for char in string: \n        if char in char_freq_dict.keys(): \n            char_freq_dict[char] += 1\n        else: \n            char_freq_dict[char] = 1\n    print (\"Frequency table of given string is : \\n\",char_freq_dict) \n\nget_freq_table(string)</s>"
  },
  {
    "text": "<s>[INST] Create a program in C++ to find the max and min of an array of fixed size.\n\narray = [3, 5, 8, 6, 10, 1] [/INST] #include <iostream>\nusing namespace std;\n\n// Function to find maximum and minimum of an array\nvoid minMax(int arr[], int n) \n{ \n    int max = arr[0]; \n    int min = arr[0]; \n  \n    for (int i = 1; i < n; i++) \n    { \n        if (arr[i] > max) \n            max = arr[i]; \n  \n        if (arr[i] < min) \n            min = arr[i]; \n    } \n  \n    cout << \"Maximum element = \" << max << endl; \n    cout << \"Minimum element = \" << min; \n} \n\nint main() \n{ \n    int arr[] = {3, 5, 8, 6, 10, 1}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    minMax(arr, n); \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a bash script that prints out a sequence of numbers between 0 and 100. [/INST] #!/bin/bash \n\nfor num in {0..100}\ndo\n  echo \"$num\"\ndone</s>"
  },
  {
    "text": "<s>[INST] In the given Java program replace the line number 3 with a line that outputs the remainder of dividing 10 by 3.\n\npublic class Main {\n    public static void main(String[] args) {\n        // Code to be replaced\n    }\n} [/INST] public class Main {\n    public static void main(String[] args) {\n        System.out.println(10 % 3);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query that retrieves all data from the table 'Sales' for the date range 01-04-2021 and 15-04-2021 using the date column. [/INST] SELECT * FROM Sales WHERE date BETWEEN '2021-04-01'AND '2021-04-15';</s>"
  },
  {
    "text": "<s>[INST] Determine the number of words in the given passage using text processing in Python.\n\npassage = \"Once upon a midnight dreary, while I pondered, weak and weary\" [/INST] n_words = len(passage.split())\nprint(\"The number of words in the passage is:\", n_words)</s>"
  },
  {
    "text": "<s>[INST] Given a list containing strings, write a Python program to filter out unique strings.\n\nmylist = [\"fox\", \"fox\", \"cat\", \"dog\", \"dog\"] [/INST] mylist = list(set(mylist))\nprint(mylist)</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java with private variables, getter and setter method, and constructor. [/INST] public class MyClass {\n    private int variable1;\n    private int variable2;\n    \n    public MyClass(int variable1, int variable2) {\n        this.variable1 = variable1;\n        this.variable2 = variable2;\n    }\n    \n    public int getVariable1() {\n        return variable1;\n    }\n    \n    public void setVariable1(int variable1) {\n        this.variable1 = variable1;\n    }\n    \n    public int getVariable2() {\n        return variable2;\n    }\n    \n    public void setVariable2(int variable2) {\n        this.variable2 = variable2;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Design a function to select the nth smallest element from an array.\n\nint[] arr = {11, -2, 4, 9, -5, 7} [/INST] def selectNthSmallest(arr, n): \n \n    # sort the array \n    arr = sorted(arr) \n  \n    # return the nth smallest element \n    return arr[n-1]  \n      \n# Driver code \narr = [11, -2, 4, 9, -5, 7]  \nn = 3\n  \n# Output \nprint(selectNthSmallest(arr, n))</s>"
  },
  {
    "text": "<s>[INST] Convert a Python function to a JavaScript function.\n\ndef add(a, b):\n    return a + b [/INST] function add(a, b) {\n    return a + b;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to print all prime numbers up to 1000. [/INST] def is_prime(x):\n    if x<2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\nfor x in range(2,1001):\n    if is_prime(x):\n        print(x)</s>"
  },
  {
    "text": "<s>[INST] Describe how multithreading works in Java. [/INST] Multithreading in Java is a process by which multiple threads can exist within the context of a single program and run concurrently. This allows for multiple processing tasks to be accomplished at the same time and makes the most of your available processing power. In a multithreaded application, threads can share objects and work cooperatively to complete tasks. Java also provides support for synchronization of threads, which allows for threads to co-ordinate their activities to ensure that critical shared resources are not used simultaneously or destroyed by improper access.</s>"
  },
  {
    "text": "<s>[INST] Editor a Swift code to add item into an array.\n\nvar array = [5, 7, 15] [/INST] var array = [5, 7, 15]\narray.append(21)\nprint(array)</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript variable which stores a dictionary of team members and their respective ages.\n\n{\n\t\"Tom\": 30,\n\t\"Harry\": 25,\n\t\"Sally\": 28\n} [/INST] let teamMembers = {\n  \"Tom\": 30,\n  \"Harry\": 25,\n  \"Sally\": 28\n};</s>"
  },
  {
    "text": "<s>[INST] Convert a given expression to the postfix notation.\n\n(A + B) * (C - D) [/INST] A B + C D - *</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find all records from the table \"licenses\" with license state \"CA\". [/INST] SELECT * FROM licenses WHERE license_state = 'CA';</s>"
  },
  {
    "text": "<s>[INST] Execute a loop over all elements of a given array and print the square of each element.\n\n[1,2,3] [/INST] for (let i = 0; i < arr.length; i++) {\n console.log(arr[i] * arr[i]);\n}\n\n// Output:\n1\n4\n9</s>"
  },
  {
    "text": "<s>[INST] Create an artificial neural network to predict the stock prices. [/INST] import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom sklearn.neural_network import MLPRegressor\n \n# Read data into a dataframe \ndf = pd.read_csv('stock_data.csv') \n \n# Split the data into features and target \nX = np.array(df[['open', 'high', 'low', 'volume']]) \ny = np.array(df['close']) \n \n# Create the model and fit the data \nmodel = MLPRegressor(hidden_layer_sizes=(4,4,4), max_iter=20000) \nmodel.fit(X,y) \n \n# Make predictions based on the test data \npredictions = model.predict(X) \n \n# Plot the results to compare the predicted and actual values \nplt.scatter(y, predictions) \nplt.xlabel('Actual Prices') \nplt.ylabel('Predicted Prices') \nplt.title('Predicted vs Actual Stock Prices') \nplt.show()</s>"
  },
  {
    "text": "<s>[INST] Connect to a MySQL database on localhost, select all columns from the table 'products' and display the results. [/INST] import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"username\",\npassword=\"password\"\n)\n\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * from products\")\n\nresult = mycursor.fetchall()\n\nfor row in result:\n    print(row)</s>"
  },
  {
    "text": "<s>[INST] Write a Java program for sorting a given list of numbers in descending order.\n\nunsortedList = [7, 6, 5, 4, 3, 2, 1] [/INST] import java.util.Arrays; \n\npublic class SortList { \n    public static void main(String[] args) \n    { \n        int unsortedList[] = {7, 6, 5, 4, 3, 2, 1}; \n        Arrays.sort(unsortedList);\n  \n        int n = unsortedList.length; \n        for (int i=n-1; i>=0; i--) \n            System.out.print(unsortedList[i]+\" \"); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python code snippet for a function to calculate the number of words in a given string.\n\nmyString = \"The sky is blue\" [/INST] def countWords (myString): \n    return len(myString.split()) \n\nnum = countWords(myString) \nprint(\"Number of words =\", num)</s>"
  },
  {
    "text": "<s>[INST] Write a PL/SQL query to display the sum of salaries of all the employees in a given department. [/INST] SELECT SUM(salary) FROM employees WHERE department = 'department_name';</s>"
  },
  {
    "text": "<s>[INST] Write a Java function for reversing a given array of integers.\n\narr = [1,2,3,4,5,6] [/INST] public static void reverse(int arr[])  \n{\n    int i, j;\n    int n = arr.length;    \n    for (i = 0; i < n/2; i++)\n    {\n        j = n - i - 1;\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to delete all the records from a table named 'friends' where the first name is \"John\". [/INST] DELETE FROM friends WHERE first_name = 'John';</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function to encode a given string with Base64 encoding.\n\nmyString = \"Hello World!\" [/INST] function encodeBase64(myString) {\n    return btoa(myString);\n}\nvar myStringEncoded = encodeBase64(myString);\nconsole.log(myStringEncoded);</s>"
  },
  {
    "text": "<s>[INST] Construct a C# program for displaying \"Hello World!\" on the console. [/INST] using System;\n\nnamespace HelloWorld\n{   \n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a PHP script to redirect a page to another page after 4 seconds. [/INST] <?php\n    // Redirect after 4 seconds\n    header(\"Refresh: 4; url=http://example.com\");\n?></s>"
  },
  {
    "text": "<s>[INST] Write a C++ program for sorting a given list of numbers using bubble sort algorithm.\n\nunsortedList = [7, 6, 5, 4, 3, 2, 1] [/INST] #include<iostream>\n\nusing namespace std;  \n  \nvoid bubbleSort(int unsortedList[], int n)  \n{  \n    int i, j;  \n    for (i = 0; i < n-1; i++)      \n      for (j = 0; j < n-i-1; j++)  \n        if (unsortedList[j] > unsortedList[j+1])  \n        {\n            int temp = unsortedList[j];  \n            unsortedList[j] = unsortedList[j+1];  \n            unsortedList[j+1] = temp;  \n        }\n}  \n  \nint main()  \n{  \n    int n = 7;  \n    int unsortedList[] = {7, 6, 5, 4, 3, 2, 1} ;\n  \n    bubbleSort(unsortedList, n);  \n  \n    cout<<\"Sorted List: \";  \n    for (int i = 0; i < n; i++)  \n        cout << unsortedList[i] << \" \";  \n    cout << endl;\n    \n    return 0;  \n}</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet in JavaScript to get the date and time of the last day of the current month. [/INST] var today = new Date();\nvar lastDayOfMonth = new Date(today.getFullYear(), today.getMonth()+1, 0);\nvar lastDayOfMonthTime = lastDayOfMonth.toLocaleString();\nconsole.log(lastDayofMonthTime);</s>"
  },
  {
    "text": "<s>[INST] Modify the following Java code to print the second element in a given array.\n\nint[] arr = {1, 2, 3, 4, 5}; [/INST] int[] arr = {1, 2, 3, 4, 5};\nSystem.out.println(arr[1]);</s>"
  },
  {
    "text": "<s>[INST] What is the name of the method used to log a message to the console in JavaScript? [/INST] console.log()</s>"
  },
  {
    "text": "<s>[INST] Create an array of size ten with every even slot filled with the value 0 and every odd slot filled with the value 1. [/INST] [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]</s>"
  },
  {
    "text": "<s>[INST] Describe how to access the fifth element in an associative array in PHP. [/INST] You can access the fifth element in an associative array in PHP by using the syntax $array['key_name'], where key_name is the key for the fifth element.</s>"
  },
  {
    "text": "<s>[INST] Create a Java method that takes a decimal number as an argument and returns its binary equivalent. [/INST] public static String decToBinary(int n)  \n{  \n    String s=\"\";  \n    while(n > 0)  \n    {  \n        int a = n % 2;  \n        s = a + s;  \n        n = n / 2;  \n    }  \n    return s;  \n}</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select all data from a table named 'users' in descending order by the 'age' column. [/INST] SELECT * FROM users ORDER BY age DESC;</s>"
  },
  {
    "text": "<s>[INST] What programming language is used to create a web page? [/INST] HTML is the most commonly used language for creating web pages. CSS and JavaScript can also be used.</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select the names of employees and their salaries from a table named 'employees', in ascending order of the salaries. [/INST] SELECT name, salary FROM employees ORDER BY salary ASC;</s>"
  },
  {
    "text": "<s>[INST] What is the name of the method used in Java to compare two strings? [/INST] The method used in Java to compare two strings is the .equals() method.</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to check if a given number is a prime number or not. A prime number is an integer greater than 1 which is not divisible by any other numbers.\n\n11 [/INST] def is_prime(n):\n  #Check if n islarger than one \n  if n > 1:\n    # Check if n is divisible by any number between2 and n\n    for i in range(2,n):\n      if (n % i) == 0:\n        return False\n    else:\n      return True\n  else:\n    return False</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the average salary for employees with the position of Manager at a company. [/INST] SELECT AVG(salary) FROM employees WHERE position = 'Manager';</s>"
  },
  {
    "text": "<s>[INST] What is the most efficient sorting algorithm in C? [/INST] The most efficient sorting algorithm in C is Quick Sort.</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to create a class for a circle, with a parameter for the radius, and methods for calculating the area and circumference of a circle. [/INST] public class Circle {\n  double radius;\n  \n  public Circle(double r){\n    this.radius = r;\n  }\n  \n  public double area(){\n    return (Math.PI * Math.pow(this.radius, 2));\n  }\n  \n  public double circumference(){\n    return (2 * Math.PI * this.radius);\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to generate a Fibonacci sequence of length 10. [/INST] #include <iostream> \n\nusing namespace std; \n\nint main () \n{ \n\tint n1 = 0, n2 = 1, n3, i, number; \n\n\tcout << \"Enter the number of elements: \"; \n\tcin >> number; \n\tcout << n1 << \" \" << n2 << \" \"; \n\n\tfor (i = 2; i < number; ++i) \n\t{ \n\t\tn3 = n1 + n2; \n\t\tcout << n3 << \" \"; \n\t\tn1 = n2; \n\t\tn2 = n3; \n\t} \n\t\n\treturn 0; \n}</s>"
  },
  {
    "text": "<s>[INST] What language is used to install packages in Ubuntu and other Linux-based systems? [/INST] The language used to install packages in Ubuntu and other Linux-based systems is apt.</s>"
  },
  {
    "text": "<s>[INST] How to check if a given number is a multiple of 10 in Java? [/INST] In Java, the best way to check if a given number is a multiple of 10 is to use the modulo operator (%). The modulo operator (x % y) will return 0 if x is a multiple of y. Therefore, if (n % 10) == 0, then n is a multiple of 10.</s>"
  },
  {
    "text": "<s>[INST] Create a boolean type variable called \"isValid\" and set it to true. [/INST] bool isValid = true;</s>"
  },
  {
    "text": "<s>[INST] Transform the input string to upper case and print the result.\n\nThis is a string [/INST] String inputString = \"This is a string\";\nString upperCaseString = inputString.ToUpper();\nConsole.WriteLine(upperCaseString);</s>"
  },
  {
    "text": "<s>[INST] Write a Python program that finds the longest common subsequence of two strings.\n\nstr1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\" [/INST] def lcs(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    lcs = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]\n\n\nstr1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"\n\nprint(lcs(str1, str2))</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code that implements a binary search algorithm.\n\narr = [1, 3, 5, 7, 9, 11]\ntarget = 11 [/INST] function binarySearch(arr, target) {\n  let start = 0;\n  let end = arr.length - 1;\n  let middle = Math.floor((start + end) / 2);\n\n  while (arr[middle] !== target && start <= end) {\n    if (target < arr[middle]) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n    middle = Math.floor((start + end) / 2);\n  }\n  if (arr[middle] === target) {\n    return middle;\n  }\n\n  return -1;\n}\n\narr = [1, 3, 5, 7, 9, 11];\ntarget = 11;\n\nconsole.log(binarySearch(arr, target));</s>"
  },
  {
    "text": "<s>[INST] Create a Python function that takes an array of strings and returns a dictionary whose keys are the strings and the values are the lengths of the strings.\n\narr = [\"apple\", \"banana\", \"cherry\"] [/INST] def array_lengths_to_dict(arr):\n    my_dict = {}\n    for s in arr:\n        my_dict[s] = len(s)\n    return my_dict\n\narr = [\"apple\", \"banana\", \"cherry\"]\n\nprint(array_lengths_to_dict(arr))</s>"
  },
  {
    "text": "<s>[INST] Write a PowerShell script to print out the current date. [/INST] Get-Date | Format-List</s>"
  },
  {
    "text": "<s>[INST] Use LINQ syntax to create a query that returns all items that begin with the letter 'b'.\n\nvar letters = new[] { \"a\", \"b\", \"c\", \"d\", \"e\" }; [/INST] var query = from letter in letters\n            where letter.StartsWith(\"b\")\n            select letter;\n\nforeach (string letter in query)\n{\n    Console.WriteLine(letter);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function that multiplies each element of the input array by 10 and returns the result.\n\narr = [2, 3, 4] [/INST] def multiply_by_10(arr):\n  newArr = []\n  for i in arr:\n    newArr.append(i * 10)\n  return newArr\n\narr = [2, 3, 4]\n\nprint(multiply_by_10(arr))</s>"
  },
  {
    "text": "<s>[INST] Write a C++ code that implements the selection sort algorithm.\n\narr = { 7, 4, 3, 1, 9 } [/INST] #include <iostream> \nusing namespace std; \n  \nvoid swap(int *xp, int *yp) \n{ \n  int temp = *xp; \n  *xp = *yp; \n  *yp = temp; \n} \n  \nvoid selectionSort(int arr[], int n) \n{ \n  int i, j, min_idx; \n  \n  for (i = 0; i < n-1; i++) \n  { \n    min_idx = i; \n    for (j = i+1; j < n; j++) \n      if (arr[j] < arr[min_idx]) \n        min_idx = j; \n  \n    swap(&arr[min_idx], &arr[i]); \n  } \n} \n  \nint main() \n{ \n  int arr[] = {7, 4, 3, 1, 9}; \n  int n = sizeof(arr)/sizeof(arr[0]); \n  selectionSort(arr, n); \n  return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to select name, age, and city from a table called \"users\". [/INST] SELECT name, age, city FROM users;</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to print the current day in the week. [/INST] const day = new Date().getDay();\nlet dayString;\n\nswitch (day) {\n  case 0:\n    dayString = \"Sunday\";\n    break;\n  case 1:\n    dayString = \"Monday\";\n    break;\n  case 2:\n    dayString = \"Tuesday\";\n    break;\n  case 3:\n    dayString = \"Wednesday\";\n    break;\n  case 4:\n    dayString = \"Thursday\";\n    break;\n  case 5:\n    dayString = \"Friday\";\n    break;\n  case 6:\n    dayString = \"Saturday\";\n    break;\n  default:\n    dayString = \"Unknown\";\n}\n\nconsole.log(dayString);</s>"
  },
  {
    "text": "<s>[INST] Build a function in JavaScript that takes two integers and returns the minimum value of the two.\n\nint x = 5;\nint y = 8; [/INST] const findMin = (x, y) => {\n  if (x < y) {\n    return x;\n  }\n  return y;\n}\n\nfindMin(x, y); // 5</s>"
  },
  {
    "text": "<s>[INST] Design a Java method that takes an integer as an argument and prints its negative equivalent.\n\nint x = 5; [/INST] public static void printNegativeNumber(int x) {\n    System.out.println(-x);\n}\n\nprintNegativeNumber(x); // -5</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to add a new column called \"Gender\" to the table \"Employees\" with values Male and Female. [/INST] ALTER TABLE `Employees` ADD `Gender` VARCHAR(20);\nUPDATE `Employees` SET `Gender`=\"Male\";\nUPDATE `Employees` SET `Gender`=\"Female\";</s>"
  },
  {
    "text": "<s>[INST] Construct a JavaScript program to find the maximum element in the following array.\n\n[12,3,4,1,26,7] [/INST] let arr = [12,3,4,1,26,7];\nlet max = arr[0];\n\nfor(let i=0; i<arr.length; i++) {\n    if(arr[i] > max) {\n        max = arr[i];\n    }\n}\n\nconsole.log(max);    # Output: 26</s>"
  },
  {
    "text": "<s>[INST] Suggest the missing code to open a connection with a MySQL database in PHP. [/INST] $host=\"localhost\";\n$user=\"username\";\n$password=\"password\";\n$db=\"database_name\";\n\n$conn=mysqli_connect($host,$user,$password,$db);\nif(mysqli_connect_error()){\n    echo \"Error connecting to database\";\n    die();\n}</s>"
  },
  {
    "text": "<s>[INST] Explain how to traverse a binary tree using breadth-first search (BFS). [/INST] Breadth-first search (BFS) is a technique used to traverse a tree or graph. In BFS, nodes are visited layer by layer, moving across each level from left to right. The algorithm traverses the tree level by level, beginning with the root node, then traversing the child nodes of the root, then traversing the grandchild nodes of the root, and so on. It continues the traversal until all the nodes in the tree have been visited.</s>"
  },
  {
    "text": "<s>[INST] Generate a SQL query to select all the columns from a table named 'department' where the department name is 'Marketing'. [/INST] SELECT * FROM department WHERE department_name = 'Marketing';</s>"
  },
  {
    "text": "<s>[INST] Create a new data structure to store the following information and write an algorithm to access it.\n\nKey: \"B\"\n Value: \"Blue\" [/INST] data_structure = {\n    \"B\": \"Blue\"\n}\n\ndef access_data_structure(key):\n    return data_structure.get(key)</s>"
  },
  {
    "text": "<s>[INST] Add an additional parameter to the following function.\n\ndef greet(name):\n    print(\"Hello \" + name + \"!\") [/INST] def greet(name, message):\n    print(message + \" \" + name + \"!\")</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to retrieve all the columns from a table named 'customers' where their address includes the string \"Palm Street\". [/INST] SELECT * FROM customers WHERE address LIKE '%Palm Street%';</s>"
  },
  {
    "text": "<s>[INST] Create a function `calculate_discount` to calculate 20% discount for a given price.\n\nprice = 50 [/INST] def calculate_discount(price):\n    return price * 0.8\n\ndiscount = calculate_discount(price)</s>"
  },
  {
    "text": "<s>[INST] Create a for loop which will run till the given number and add each number to a list.\n\nend_number = 10 [/INST] numbers = [] \nfor num in range (1, end_number+1): \n    numbers.append(num)</s>"
  },
  {
    "text": "<s>[INST] Create a function called `convert_csv_to_json` to convert the following csv to the corresponding JSON formatt.\n\ncity,country,latitude,longitude\nFrankfurt,Germany,50.1117,8.6785\nLondon,UK,51.4667,-0.25 [/INST] import json\n\ndef convert_csv_to_json(csv_string):\n    lines = csv_string.split(\"\\n\")\n    keys = lines[0].split(\",\")\n    out_list = [] \n    for line_num in range(1, len(lines)):\n        line = lines[line_num]\n        values = line.split(\",\")\n        item = {}\n        for key_num in range(0, len(keys)):\n            key = keys[key_num]\n            val = values[key_num]\n            item[key] = val\n        out_list.append(item)\n    return json.dumps(out_list)</s>"
  },
  {
    "text": "<s>[INST] Create a function that detects whether a given string is a palindrome.\n\nstring = ‘level’ [/INST] def detect_palindrome(string): \n    reversed_string = string[::-1] \n    if (string == reversed_string): \n        return \"This string is a palindrome\" \n    else: \n        return \"This string is not a palindrome\"\n\nprint(detect_palindrome(string))</s>"
  },
  {
    "text": "<s>[INST] Write a code to filter and print all lines that end in the given character.\n\nstring = ‘Hello world\\nMy name is John\\nHello again\\nToday is Monday’\ncharacter = ‘n’ [/INST] lines = string.split(\"\\n\") \nfor line in lines: \n    if line.endswith(character): \n        print(line)</s>"
  },
  {
    "text": "<s>[INST] Assign 1 to all the elements of a 2D array that are divisible by 3.\n\narr = [[1,2,3],\n       [10,15,20],\n       [3, 8, 6]] [/INST] for row in range(len(arr)): \n    for col in range(len(arr[row])): \n        if arr[row][col] % 3 == 0: \n            arr[row][col] = 1\nprint(arr)</s>"
  },
  {
    "text": "<s>[INST] Create a function named `binary_search` that implement a binary search algorithm.\n\nlist = [1, 3, 5, 7, 8, 9, 11]\ngoal = 5 [/INST] def binary_search(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\nresult = binary_search(list, goal)\nprint(result)</s>"
  },
  {
    "text": "<s>[INST] Create a function called `replace_words` which replaces all the words specified in; the given list of words with their corresponding synonyms.\n\nstring = “The quick brown fox jumps over the lazy dog”\nwords = [[‘quick’, ‘fast’], [‘lazy’, ‘sluggish’]] [/INST] def replace_words(string, words): \n    for item in words: \n        string = string.replace(item[0], item[1])\n    return string\n\nreplaced_string = replace_words(string, words)\nprint(replaced_string)</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression that captures all the words starting with \"A\". [/INST] ^A\\w+</s>"
  },
  {
    "text": "<s>[INST] Differentiate the methods of machine learning and explain the differences. [/INST] There are three main methods of machine learning: supervised learning, unsupervised learning, and reinforcement learning. In supervised learning, the model is trained using labeled data, that is, data that has its output (or target) value given to the model. Unsupervised learning models learn by extracting patterns from unlabeled datasets without the need for a defined output value. Reinforcement learning models use reward-based learning to maximize a reward signal by taking actions in an environment. Supervised and unsupervised learning use input data and a set of instructions to learn from known data. Reinforcement learning, on the other hand, uses an environment with a reward system to teach an agent how to achieve a goal through a series of trial-and-error based decisions.</s>"
  },
  {
    "text": "<s>[INST] Explain how a support vector machine works. [/INST] A Support Vector Machine (SVM) is a supervised learning algorithm that can be used for binary classification, regression, or outlier detection. SVMs use a hyperplane to separate data points into two categories, each represented by a different class. The hyperplane divides data points into classes by minimizing the distance between them and maximizing the margin between the two classes, while creating a decision boundary. SVMs then use a kernel function to project the data into a higher dimensional space and maximize the distance between observations. This allows SVMs to identify non-linear patterns in data and find the optimal decision boundary. The support vectors are points closest to the decision boundary</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes an integer as an argument and prints its least significant digit. [/INST] def print_lsc(x):\n   print(x%10)</s>"
  },
  {
    "text": "<s>[INST] Create an array of the squared values of all elements of the given array.\n\narr = [2, 3, 6, 8] [/INST] def square_arr(arr):\n    return [x**2 for x in arr]</s>"
  },
  {
    "text": "<s>[INST] Select all the records in the given table where the ID is greater than 5.\n\nTable\nID | Name | Address\n1 | John | UK\n2 | Jack | US\n5 | Mary | UK\n11 | Chris | Canada [/INST] SELECT * FROM Table WHERE ID > 5;</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to find the minimum element from the given array.\n\narr = [11, 9, 10, 14] [/INST] def find_min(arr):\n    return min(arr)</s>"
  },
  {
    "text": "<s>[INST] Add an import statement to the code to import the regex module.\n\nimport sys [/INST] import sys\nimport re</s>"
  },
  {
    "text": "<s>[INST] Write a query to delete all the rows in the given table.\n\nTable\nID | Name | Address\n18 | John | UK\n2 | Jack | US\n6 | Mary | UK\n14 | Chris | Canada [/INST] DELETE FROM Table;</s>"
  },
  {
    "text": "<s>[INST] Write a Python code to construct a dictionary from the given input.\n\nkey_arr = [100, 200, 300]\nvalue_arr = [\"apple\", \"banana\", \"mango\"] [/INST] def dict_from_arrs(key_arr, value_arr):\n    return dict(zip(key_arr, value_arr))</s>"
  },
  {
    "text": "<s>[INST] Initialize a dictionary using the given keys.\n\nkeys=[\"key1\", \"key2\", \"key3\"] [/INST] keys = [\"key1\", \"key2\", \"key3\"]\n\ndictionary = {key: None for key in keys}\n\nprint(dictionary)</s>"
  },
  {
    "text": "<s>[INST] Given two strings s1 and s2, find the number of times the characters in s2 are present in s1.\n\ns1 = \"Hello World\", s2 = \"o\" [/INST] s1 = \"Hello World\"\ns2 = \"o\"\n\ndef count_characters(s1, s2):\n    count = 0\n    for c in s1:\n        if c == s2:\n            count += 1\n    return count\n\nprint(count_characters(s1,s2))</s>"
  },
  {
    "text": "<s>[INST] Filter out the integers from the list that are divisible by 6.\n\nnums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18] [/INST] nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]\n\ndef filter_divisible_by_6(nums):\n    return [num for num in nums if num % 6 == 0]\n\nprint(filter_divisible_by_6(nums))</s>"
  },
  {
    "text": "<s>[INST] Transform and print the given list which includes negative and positive numbers.\n\nnums = [-5, -2, 3, 7, 1] [/INST] nums = [-5, -2, 3, 7, 1]\n\ndef transform(nums):\n return [abs(num) for num in nums]\n \nprint(transform(nums))</s>"
  },
  {
    "text": "<s>[INST] Replace all instances of a given character with another character.\n\ns = \"this is a sample string\", c=\"s\", r=\"x\" [/INST] s = \"this is a sample string\"\nc = \"s\"\nr = \"x\"\n\ndef replace_character(s, c, r):\n    return s.replace(c, r)\n\nprint(replace_character(s, c, r))</s>"
  },
  {
    "text": "<s>[INST] Writing a regex pattern to match words starting with \"Py\" [/INST] pattern = r'\\bPy\\w*\\b'</s>"
  },
  {
    "text": "<s>[INST] Rewrite the code to remove the unnecessary boolean flag\n\nflag = False\ndef printFooBar(x):\n    fooBarArray = []\n    for i in range(x):\n        fooBarArray.append(i)\n        flag = True\n    if flag and len(fooBarArray) > 0:\n        print(fooBarArray) [/INST] def printFooBar(x):\n    fooBarArray = []\n    for i in range(x):\n        fooBarArray.append(i)\n    if len(fooBarArray) > 0:\n        print(fooBarArray)</s>"
  },
  {
    "text": "<s>[INST] Convert the following snippet from ES6 to ES5\n\nconst multiply = ( x, y) => { return x * y }; [/INST] var multiply = function(x, y) { \n    return x * y;\n};</s>"
  },
  {
    "text": "<s>[INST] Classify the following pieces of data\n\nTexas\nBlue\nDog [/INST] State: Texas\nColor: Blue\nAnimal: Dog</s>"
  },
  {
    "text": "<s>[INST] Using python, implement a method to find the longest common subsequence in two strings\n\nstr1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\" [/INST] def lcs(str1, str2, n, m): \n    if n == 0 or m == 0:          \n        return 0\n  \n    elif str1[n-1] == str2[m-1]:   \n        return 1 + lcs(str1, str2, n-1, m-1) \n \n    else: \n        return max(lcs(str1, str2, n, m-1),    \n                   lcs(str1, str2, n-1, m))</s>"
  },
  {
    "text": "<s>[INST] Find the area of a triangle using the Heron's formula\n\nlengths = [3, 4, 5] [/INST] def herons_formula(lengths):\n    a, b, c = lengths[0], lengths[1], lengths[2]\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c))** 0.5\n    return area</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm to concatenate two strings.\n\nString 1: \"Hello,\" \nString 2: \"World!\" [/INST] def concatenate(str1, str2):\n  return str1 + str2</s>"
  },
  {
    "text": "<s>[INST] Generate a random string with the a capital letter followed by two lower case letters. [/INST] import string\nimport random\ndef random_string():\n\n  capitalletter = random.choice(string.ascii_uppercase)\n  lowercaseletter1 = random.choice(string.ascii_lowercase)\n  lowercaseletter2 = random.choice(string.ascii_lowercase)\n\n  return capitalletter + lowercaseletter1 + lowercaseletter2</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm to print all the possible n-ary trees with a given number of nodes.\n\nn=4 [/INST] # Node class \nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.children = [] \n\n# A function to print the n-ary tree \ndef printNaryTreeUtil(root, func, level = 0): \n   \n    # If node is None, simply return \n    if root is None: \n        return\n  \n    # Process child nodes of root recursively \n    for i in range(len(root.children)): \n        printNaryTreeUtil(root.children[i], func, \n                          level + 1) \n  \n    # Call the function for the root \n    func(root, level) \n  \n# Function to generate n-ary trees    \ndef constructNaryTree(nodes): \n  \n    # Create a root node \n    root = Node(nodes[0]) \n  \n    # Create a stack which will be used to \n    # create children of root and their subtrees \n    s = [root] \n  \n    # Traverse the tree nodes in pre order fashion \n    i = 1\n    while i < len(nodes): \n  \n        node = s[len(s) - 1] \n        child = Node(nodes[i]) \n        node.children.append(child) \n        s.append(child) \n  \n        # If number of children of the node is equal to \n        # its degree, remove the node and its subtree \n        if len(node.children) == node.degree: \n            s.pop() \n  \n        i += 1\n  \n    return root \n    \n# Driver code \nif __name__ == '__main__': \n\n\t# Given number of nodes \n\tn = 4\n\n\t# Generate the nodes \n\tnodes = list(range(1, n + 1)) \n\n\t# Construct n-ary tree \n\troot = constructNaryTree(nodes) \n\n\t# Function to print the tree \n\tdef printTree(node, level): \n\t\tprint('\\t' * level, node.data, sep=\"\") \n\n\t# Print the tree \n\tprintNaryTreeUtil(root, printTree)</s>"
  },
  {
    "text": "<s>[INST] Generate a regular expression to match words that contain only lowercase letters. [/INST] ^[a-z]+$</s>"
  },
  {
    "text": "<s>[INST] You need to write an algorithm to find the third largest value in a Binary Search Tree.\n\n8 \n      /   \\\n     3     10\n    / \\     \\\n   1   6     14\n      / \\    /\n     4   7  13 [/INST] def third_largest(root):\n    if root is None:\n        return None\n \n    queue = []\n    queue.append(root)\n    while len(queue):\n        curr = queue.pop(0)\n \n        if curr.right:\n            queue.append(curr.right)\n        if curr.left:\n            queue.append(curr.left)\n \n    if len(queue)>1:\n        return queue[1].val\n    else:\n        return root.val</s>"
  },
  {
    "text": "<s>[INST] Edit the given code to validate an IP address.\n\n# Function to validate an IPv4 address\ndef validate_IPv4(IP): [/INST] # Function to validate an IPv4 address\ndef validate_IPv4(IP):\n    # Split the IP string by '.' \n    ip_split = IP.split('.')\n    \n    #Checking for the corner cases \n    if (len(ip_split) == 4) and (1 <= int(ip_split[0]) <= 223) and (int(ip_split[0]) != 127) and (int(ip_split[0]) != 169 or int(ip_split[1]) != 254) and (0 <= int(ip_split[1]) <= 255 and 0 <= int(ip_split[2]) <= 255 and 0 <= int(ip_split[3]) <= 255): \n        return \"Valid IP!\"\n    else: \n        return \"Invalid IP!\"</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm to modify a given string by changing the case of each character.\n\nstring = \"Hello World\" [/INST] def modify_string(string):\n  new_string = \"\"\n  for i in string:\n    if (i.isupper()) == True:\n      new_string += i.lower()\n    elif (i.islower()) == True:\n      new_string += i.upper()\n  return new_string</s>"
  },
  {
    "text": "<s>[INST] Suppose a web page contains an unknown number of parameters. Write a function to count the number of parameters present in a given URL.\n\nhttps://www.example.com?query=environment&limit=10&sort=descending [/INST] def count_parameters(url):\n    params = url.split('?')[-1]\n    return len(params.split('&'))</s>"
  },
  {
    "text": "<s>[INST] Write a function to remove the first occurrence of a specified element from a given list.\n\n[2, 4, 8, 9, 4] [/INST] def remove_first_occurrence(arr, element):\n    if element in arr:\n        arr.remove(element)\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Write a function to find all elements that appear more than once in a given array.\n\n[1, 3, 2, 3, 8, 9, 10] [/INST] def find_duplicates(numbers):\n    seen = set()\n    duplicates = set()\n    for num in numbers:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    return list(duplicates)</s>"
  },
  {
    "text": "<s>[INST] Generate an 8 character random string. [/INST] import string\nimport random\n\ndef gen_random_string(size):\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(size))\n\nrandom_string = gen_random_string(8)\nprint(random_string)</s>"
  },
  {
    "text": "<s>[INST] Create a script to delete all system logs. [/INST] #!/bin/bash\n\n# Remove all system log files\nsudo rm /var/log/*.log</s>"
  },
  {
    "text": "<s>[INST] Compute the sum of all elements in an array given as an argument to a JavaScript function. [/INST] function sumArray(array) {\n   let result = 0;\n   array.forEach(function(element) {\n     result += element;\n   });\n   return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Classify three objects using a decision tree algorithm written in JavaScript.\n\nObject 1: round, red, 5cm\nObject 2: square, green, 10cm\nObject 3: triangular, red, 8cm [/INST] function classifyObject(object) {\n    if(object.shape === 'round') {\n        return 'object is round';\n    } else if(object.color === 'red') {\n        return 'object is red';\n    } else if(object.size <= 8) {\n        return 'object is small';\n    } else {\n        return 'object is large';\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Modify a given shell script to generate a text-based report of the commands run in the bash shell. [/INST] #!/bin/bash\n\n# Capture the output of command\nresult=$(bash -c \"${COMMAND}\")\n# Store the output of command in a file\necho \"$result\" >> output.txt\n# Include timestamp\necho \"Result at: $(date)\" >> output.txt\n# Add a newline to results file\necho >> output.txt</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to find all pairs of integers from an array whose sum equals a given number. [/INST] public static List<int[]> findSumPairs(int[] arr, int target) {\n    List<int[]> pairs = new ArrayList<>();\n \n    Map<Integer, Integer> numFreqMap = new HashMap<>();\n    for (int value : arr) {\n        numFreqMap.put(value, numFreqMap.getOrDefault(value, 0) + 1);\n    }\n    \n    for (int value : arr) {\n        int targetSubValue = target - value;\n \n        if (numFreqMap.containsKey(targetSubValue)) {\n            int targetSubValueFreq = numFreqMap.get(targetSubValue);\n \n            if (targetSubValue == value) {\n                if (targetSubValueFreq >= 2) {\n                    int[] pair = {value, targetSubValue};\n                    pairs.add(pair);\n                }\n            } else {\n                int[] pair = {value, targetSubValue};\n                pairs.add(pair);\n            }\n \n            numFreqMap.put(targetSubValue, 0);\n        }\n    }\n \n    return pairs;\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a string containing the first 10 characters of the alphabet in reverse order. [/INST] zyxwvutsrq</s>"
  },
  {
    "text": "<s>[INST] Determine the function of the Bluetooth signal in the given program.\n\nvoid setup() {\n  Serial.begin(9600);\n  Bluetooth.begin(9600);\n}\n\nvoid loop() {\n  BluetoothSignal();\n}\n\nvoid BluetoothSignal() {\n // Code to send a signal to the Bluetooth module.\n} [/INST] The function of the Bluetooth signal is to send a signal to the Bluetooth module.</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to convert a given temperature in Celsius to Kelvin. [/INST] def convert_celsius_to_kelvin(celsius):\n    kelvin = celsius + 273.15\n    return kelvin</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that returns the number of employees in each city. [/INST] SELECT city, COUNT(*) AS num_employees\nFROM employees\nGROUP BY city;</s>"
  },
  {
    "text": "<s>[INST] Edit the given Python code to compute the mean of the given list of numbers.\n\nmy_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x [/INST] my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x\n\nmean = sum / len(my_list)</s>"
  },
  {
    "text": "<s>[INST] Train a Random Forest classifier in Python on the Iris dataset. [/INST] import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Import Iris dataset\niris_data = pd.read_csv(\"iris.csv\")\n\n# Split dataset into training and testing\nX = iris_data.drop(\"species\", axis=1)\ny = iris_data['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Train a Random Forest classifier\nclf = RandomForestClassifier() \nclf.fit(X_train, y_train)\n\n# Make predictions\npreds = clf.predict(X_test)</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following if-statement into a switch statement.\n\nif (grade == \"A\") {\n    gradeValue = 4.0;\n}\nelse if (grade == \"B\") {\n    gradeValue = 3.0;\n}\nelse if (grade == \"C\") {\n    gradeValue = 2.0;\n}\nelse if (grade == \"D\") {\n    gradeValue = 1.0;\n} [/INST] switch(grade) {\n  case 'A':\n    gradeValue = 4.0;\n    break;\n  case 'B':\n    gradeValue = 3.0;\n    break;\n  case 'C':\n    gradeValue = 2.0;\n    break;\n  case 'D':\n    gradeValue = 1.0;\n    break;\n  default:\n    gradeValue = 0;\n    break;    \n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to normalize a given string by removing white spaces, changing to lower case and replacing special characters with underscores.\n\n\"Hello World!\" [/INST] def normalize_string(string):\n    \"\"\"Normalize a string by removing white spaces, changing to lower case and replacing special characters with underscores.\"\"\"\n    # Remove whitespaces\n    normalized_string = string.replace(\" \", \"\")\n\n    # Convert to lowercase\n    normalized_string = normalized_string.lower()\n\n    # Replace special characters\n    characters = [\"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\"]\n    for c in characters:\n        normalized_string = normalized_string.replace(c, \"_\")\n\n    return normalized_string\n\n# Example\nnormalized_string = normalize_string(\"Hello World!\")\nprint(normalized_string)\n# Output: hello_world_</s>"
  },
  {
    "text": "<s>[INST] Print the largest number in a given array in Python.\n\nmy_array = [5, 11, 7, 10, 2] [/INST] my_array = [5, 11, 7, 10, 2]\n\n# Function to find the largest number\ndef find_largest_number(array):\n    # Assume that the first item in the array is the largest\n    largest = array[0]\n\n    # Now loop through the array to find the largest number\n    for num in array:\n        # If a number is larger than the assumed largest, it is the new largest number\n        if num > largest:\n            largest = num\n\n    # Return the largest number\n    return largest\n\n# Call the function\nlargest = find_largest_number(my_array)\n\n# Print the result\nprint(largest)\n# Output: 11</s>"
  },
  {
    "text": "<s>[INST] Create a for loop in JavaScript to loop backwards from 10 to 1. [/INST] for (let i = 10; i > 0; i--) {\n  console.log(i);\n}\n\n// Output: 10 9 8 7 6 5 4 3 2 1</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python to add two numbers, which may take any number of arguments. [/INST] def add(*nums):\n    \"\"\"Add two or more numbers.\"\"\"\n    # Initialize sum\n    result = 0\n\n    # Iterate through given numbers\n    for num in nums:\n        result += num\n\n    # Return the sum \n    return result\n    \n# Example\nsum = add(15, 7, 10)\nprint(sum)\n# Output: 32</s>"
  },
  {
    "text": "<s>[INST] Write a stack class in Java. [/INST] public class Stack {\n \n    private int[] stackArray;\n    private int maxSize;\n    private int top;\n   \n    public Stack(int size) {\n        maxSize = size;\n        stackArray = new int[maxSize];\n        top = -1;\n    }\n   \n    public void push(int item) {\n        stackArray[++top] = item;\n    }\n   \n    public int pop() {\n        return stackArray[top--];\n    }\n   \n    public int peek() {\n        return stackArray[top];\n    }\n   \n    public boolean isEmpty() {\n        return (top == -1);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a DFS algorithm for a tree data structure. [/INST] def DFS(root):\n    S = []\n    visited = []\n \n    S.append(root)\n \n    while len(S) > 0:\n        node = S.pop()\n        visited.append(node)\n \n        for vertex in node.get_adjacent_vertices():\n            if vertex not in visited:\n                S.append(vertex)\n    return visited</s>"
  },
  {
    "text": "<s>[INST] Construct a program in Java to sort an array of String objects. [/INST] public class StringSort { \n  \n    public static void sortStringArray(String[] arr) \n    { \n        // Sorting strings \n        Arrays.sort(arr); \n  \n        // Displaying the strings after sorting \n        System.out.println(\"Strings in sorted order: \"); \n        for (int i = 0; i < arr.length; i++) \n            System.out.println(arr[i]); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Construct a data mining program to mine public internet data.\n\nTwitter datasets [/INST] import tweepy\n \nCONSUMER_KEY = 'XXXXXXXXXXXXXXXXXXX'\nCONSUMER_SECRET = 'XXXXXXXXXXXXXXXXXXX'\nACCESS_TOKEN = 'XXXXXXXXXXXXXXXXXXX'\nACCESS_TOKEN_SECRET = 'XXXXXXXXXXXXXXXXXXXX'\n\n# authenticating\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n\n# initializing the API for data mining\napi = tweepy.API(auth)\n\n# pulling the data from Twitter\ndata = api.search(q=\"data mining\", lang=\"en\", count=100, tweet_mode=\"extended\")\n\n# processing the data\nfor tweet in data:\n    print(tweet.full_text) # print the full text of each tweet</s>"
  },
  {
    "text": "<s>[INST] Give a function name in JavaScript that takes in two integer numbers as parameters and returns the remainder of the first parameter divided by the second. [/INST] function remainder(a, b) {\n    return a % b;\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a C++ code to print the numbers 1 to 10 in descending order. [/INST] for(int i=10; i>0; i--) \n    cout << i << \" \";</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet in HTML to include an external style sheet in web page. [/INST] <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" /></s>"
  },
  {
    "text": "<s>[INST] Describe the different thread states in Java programming. [/INST] In Java, threads can be in one of the following states: NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING or TERMINATED. The NEW state means that the thread has been created but not yet started. RUNNABLE means that the thread is running. BLOCKED means that the thread is waiting to acquire a lock. WAITING and TIMED_WAITING means that the thread is waiting for another thread to perform a particular action. Lastly, TERMINATED is the state when the thread has finished execution.</s>"
  },
  {
    "text": "<s>[INST] Compile a C program that calculates the area of a rectangle from the given values of length and width.\n\nLength = 10\nWidth = 15 [/INST] #include <stdio.h>\n \nint main()\n{\n    int length = 10;\n    int width = 15;\n    int area;\n    area = length * width;\n \n    printf(\"The area is %d.\", area);\n \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] List the types of inheritance supported in Java. [/INST] In Java, there are four types of inheritance supported: single inheritance, multiple inheritance, hierarchical inheritance, and socioeconomic inheritance. Single inheritance means a class extends only one class. Multiple inheritance is when a subclass extends multiple superclasses. Hierarchical inheritance is when a class can be extended by multiple subclasses. Lastly, socioeconomic inheritance is when a subclass can extend superclasses and use their methods, variables, and properties.</s>"
  },
  {
    "text": "<s>[INST] What is an event in JavaScript? [/INST] In JavaScript, an event is an action that a user performs that causes a change in the state of the program. Events can be generated by a user (e.g. pressing a button, clicking a link), by the browser (e.g. loading a page, scrolling, resizing the window) or by the system (e.g. device orientation changes, network connection changes). Events can trigger handlers (functions in JavaScript) that respond to the event with the appropriate action.</s>"
  },
  {
    "text": "<s>[INST] You need to develop a code that takes two strings and returns a boolean if the substrings are anagrams.\n\nStrings: \"computer\" and \"computer\" [/INST] def isAnagram (str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\nprint (isAnagram(\"computer\", \"computer\"))</s>"
  },
  {
    "text": "<s>[INST] Develop a function to encode a text string in a ROT13 manner.\n\nString: \"Hello World\" [/INST] def rot13(message):\n    output = []\n    for char in message:\n        char_code = ord(char)\n        if char_code >= ord('A') and char_code <= ord('Z'):\n            # Rotate lower case characters\n            char_code += 13\n            if char_code > ord('Z'):\n                char_code -= 26\n        elif char_code >= ord('a') and char_code <= ord('z'):\n            # Rotate upper case characters\n            char_code += 13\n            if char_code > ord('z'):\n                char_code -= 26\n        output.append(chr(char_code))\n    return ''.join(output)\nprint(rot13(\"Hello World\"))</s>"
  },
  {
    "text": "<s>[INST] Write the Big O time complexity of the given algorithm.\n\nAlgorithm: Finding the value at a given index of an unordered array. [/INST] O(n).</s>"
  },
  {
    "text": "<s>[INST] Given two strings, develop a function to calculate edit distance between them.\n\nStrings: \"kitten\" and \"sitting\" [/INST] def edit_distance(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\n    dp = [[0 for x in range(n2 + 1)] for x in range(n1 + 1)] \n\n    for i in range(n1 + 1): \n        for j in range(n2 + 1): \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],\n                                   dp[i - 1][j],\n                                   dp[i - 1][j - 1]) \n  \n    return dp[n1][n2] \n\nedit_distance(\"kitten\", \"sitting\")</s>"
  },
  {
    "text": "<s>[INST] You need to develop a function which checks if a given string is palindrome or not.\n\nString: \"redder\" [/INST] def is_palindrome(input_string): \n    # Convert string to lower case to ignore capitalization.\n    input_string = input_string.lower() \n    # Reverse input string \n    rev_string = reversed(input_string) \n  \n    # Check if strings are equal or not \n    if (list(input_string) == list(rev_string)): \n        return True\n    else: \n        return False\n  \nprint(is_palindrome(\"redder\"))</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to return the top 10 most popular books. [/INST] SELECT \n    title, COUNT(*) AS num_readers\nFROM books \nLEFT JOIN readers ON books.id = readers.book_id\nGROUP BY title\nORDER BY num_readers DESC\nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Create a React app that loads data from a given REST API endpoint. [/INST] import React from 'react';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n        };\n    }\n\n    async componentDidMount() {\n        const res = await Axios.get(<api_url>)\n        this.setState({data: res.data});\n    }\n\n    render(){\n        return (\n            <div>\n                {this.state.data.map(item => <p>{item.name}</p>)}\n            </div>\n        )\n    }\n}\n\nexport default App;</s>"
  },
  {
    "text": "<s>[INST] Write a Node.js program which fetches the top 10 trending news from a given website. [/INST] const rp = require('request-promise');\nconst cheerio = require('cheerio');\n\nasync function getTrendingContent(){\n    const options = {\n        uri: '<url>',\n    };\n\n    let trendingContent = [];\n\n    const htmlResult = await rp(options);\n    const $ = await cheerio.load(htmlResult);\n    \n    const allTitles = $('h2.title');\n\n    allTitles.each((index, element) => {\n        if(index < 10){\n            trendingContent.push($(element).text());\n        }\n    });\n\n    return trendingContent;\n}\n\ngetTrendingContent().then(content => console.log(content));</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm that sorts a given list of numbers.\n\n[1, 5, -3, 0, 8] [/INST] def bubble_sort(list):\n  for i in range(len(list)):\n   for j in range(len(list)-1-i):\n    if list[j] > list[j+1]:\n     list[j], list[j+1] = list[j+1], list[j]\n  return list\n\nbubble_sort([1,5,-3,0,8])</s>"
  },
  {
    "text": "<s>[INST] Create a HTML form that takes three inputs and print them out when the submit button is clicked. [/INST] <html>\n    <head>\n        <title>Input Form</title>\n    </head>\n    <body>\n        <h1>Input Form</h1>\n        <form action=\"#\">\n        <p>First name: <input type=\"text\" name=\"firstname\"></p>\n        <p>Last name: <input type=\"text\" name=\"lastname\"></p>\n        <p>Email: <input type=\"text\" name=\"email\"></p>\n        <button type=\"submit\" onclick=\"printInputs()\">Submit</button>\n        </form>\n\n        <script>\n            function printInputs(){\n                let firstName = document.querySelector(\"input[name=firstname]\").value;\n                let lastName = document.querySelector(\"input[name=lastname]\").value;\n                let email = document.querySelector(\"input[name=email]\").value;\n\n                console.log(firstName, lastName, email);\n            }\n        </script>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to implement a stack using a single queue. [/INST] class Stack:\n    def __init__(self):\n        self.queue = []\n\n    def push(self, item):\n        self.queue.append(item)\n        # Reverse the queue to implement a stack\n        self.queue.reverse()\n\n    def pop(self):\n        if self.queue:\n            # Reverse the queue to implement a stack\n            self.queue.reverse()\n            return self.queue.pop()\n        return None</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript program to make a TCP connection to the server. [/INST] const net = require('net');\n\nconst client = new net.Socket();\nclient.connect(5000, '127.0.0.1', () => {\n console.log('Connected');\n});\n\nclient.on('data', (data) => {\n console.log('Received: ' + data);\n});\n\nclient.on('close', () => {\n console.log('Connection closed');\n});</s>"
  },
  {
    "text": "<s>[INST] Formulate a SQL query to determine the name of the product with the highest price. [/INST] SELECT product_name \nFROM product_table \nWHERE price = (SELECT MAX(price) FROM product_table);</s>"
  },
  {
    "text": "<s>[INST] Create a Java program for finding the largest number among three integers. [/INST] public class LargestNumber \n{\n    public static int getLargestNumber(int num1, int num2, int num3)\n    {\n        int greater;\n        if( num1 > num2 && num1 > num3)\n         greater = num1;\n        \n        else if( num2 > num1 && num2 > num3)\n         greater = num2;\n         \n        else\n         greater = num3;\n         \n        return greater;\n    }\n \n    public static void main(String[] args) \n    {\n        int num1 = 10, num2 = 14, num3 = 12;\n        System.out.println(\"Largest number among \" + num1 + \", \" + num2 + \" and \" + num3 + \" is \" + getLargestNumber(num1, num2, num3));\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to rotate an array by 'k' positions.\n\nint arr[] = {1, 2, 3, 4, 5};\nint k = 2; [/INST] #include<iostream> \nusing namespace std; \n  \nvoid reverseArray(int arr[], int start, int end) \n{ \n    while (start < end) \n    { \n        int temp = arr[start]; \n        arr[start] = arr[end]; \n        arr[end] = temp; \n        start++; \n        end--; \n    } \n} \n  \nvoid leftRotate(int arr[], int d, int size) \n{ \n    reverseArray(arr, 0, d-1); \n    reverseArray(arr, d, size-1); \n    reverseArray(arr, 0, size-1); \n} \n  \nvoid printArray(int arr[], int size) \n{ \n    for (int i=0; i < size; i++) \n        cout << arr[i] << \" \"; \n} \n  \nint main() \n{ \n    int arr[] = {1, 2, 3, 4, 5}; \n    int size = sizeof(arr) / sizeof(arr[0]); \n    int k = 2; \n  \n    leftRotate(arr, k, size); \n    printArray(arr, size); \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python code snippet to check if an integer is between 5 and 10 (including both).\n\nx = 8 [/INST] if 5 <= x <= 10:\n    print('The integer is between 5 and 10.')\nelse:\n    print('The integer is not between 5 and 10.')</s>"
  },
  {
    "text": "<s>[INST] Write a PHP script to connect to a MySQL database and insert a row in the table with values in given fields.\n\nTable name: users\nFields: id, name, email [/INST] <?php\n// Connect to the database\n$db = new mysqli('localhost', 'user', 'password', 'dbname');\n\n// Check connection\nif($db->connect_errno > 0){\n    die('Unable to connect to database [' . $db->connect_error . ']');\n}\n\n// Prepare the statement\n$sql = \"INSERT INTO users (id, name, email)\n        VALUES (?, ?, ?)\";\n$stmt = $db->prepare($sql);\n\n// Execute the statement\n$stmt->bind_param('isi', $id, $name, $email);\n$stmt->execute();\n\n$stmt->close();\n$db->close();\n?></s>"
  },
  {
    "text": "<s>[INST] Write an R script to create a histogram of a given array of numeric values. [/INST] # Load libraries\nlibrary(ggplot2)\n\n# Define the data\ndata <- c(1, 4, 6, 8, 12, 16, 20)\n\n# Create the histogram\nggplot(data.frame(x=data), aes(x)) + geom_histogram(bins = 5, fill = \"#0072B2\", color = \"black\")</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of the np.random.seed() function. [/INST] The np.random.seed() function sets the random seed, or starting point, for generating random numbers. This allows users to reproduce the same random numbers each time they run the code, making apps and experiments easier to debug. The seed can be set to an integer value, a list of integers, or None. If the seed is set to None, the system time is used to set the starting point.</s>"
  },
  {
    "text": "<s>[INST] Given the following nested loop structure, write code to print all elements in the array.\n\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] for row in arr:\n    for elem in row:\n        print(elem, end=' ')\n    print()\n\n# Output\n# 1 2 3\n# 4 5 6\n# 7 8 9</s>"
  },
  {
    "text": "<s>[INST] Physicists often use the constant, Planck's constant, to measure the frequency of light waves. What is the value of Planck's constant? [/INST] Planck's constant (denoted by h) is a physical constant that has a value of 6.62607015×10-34 kg m2/s. It is the fundamental physical constant that is used to describe the size of quantum effects. It is named after physicist Max Planck, who first proposed it in 1900.</s>"
  },
  {
    "text": "<s>[INST] Suppose you have a list of numbers and you want to add all the numbers together. Write a loop to do so.\n\n[1, 2, 3, 4, 5] [/INST] sum = 0\nnums = [1, 2, 3, 4, 5]\nfor num in nums:\n    sum += num\n\nprint(sum)\n\n# Output\n15</s>"
  },
  {
    "text": "<s>[INST] We have a list of numbers, what is the correct syntax for finding the sum of all the numbers?\n\n[1, 2, 3, 4, 5] [/INST] total = 0\nnums = [1, 2, 3, 4, 5]\nfor num in nums:\n    total += num\n    \nprint(total)\n\n# Output\n15</s>"
  },
  {
    "text": "<s>[INST] Create a CSS class named \"card\" to create a card with border-radius = 10 px.. [/INST] .card {\n  border-radius: 10px;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a CSS selector for all paragraph tags, which will set the font size to 14px. [/INST] p { \n  font-size: 14px;\n}</s>"
  },
  {
    "text": "<s>[INST] How can a developer create a button with the text \"Submit\" in HTML? [/INST] <button>Submit</button></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to do the following: assign a value of \"true\" to a variable if the number is odd, and assign the value of \"false\" if the number is even.\n\nNumber: 6 [/INST] function assignOddOrEven(num){\n  let result;\n  if(num % 2 === 0) {\n    result = false;\n  } else {\n    result = true;\n  }\n  return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Gather data from the web page and write a C# program to extract the page title. [/INST] using System.Net;\nusing System.IO;\n\npublic static string GetPageTitle(string url)\n{\n  HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n  using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())\n  {\n    using (StreamReader reader = new StreamReader(response.GetResponseStream()))\n    {\n      string html = reader.ReadToEnd();\n\n      int startIndex = html.IndexOf(\"<title>\") + \"<title>\".Length;\n      int endIndex = html.IndexOf(\"</title>\", startIndex);\n\n      string title = html.Substring(startIndex, endIndex - startIndex);\n\n      return title;\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Translate the sentence \"I'm having dinner at 8pm\" into French. [/INST] Je prends mon dîner à 20h.</s>"
  },
  {
    "text": "<s>[INST] Convert a string of characters to uppercase in JavaScript.\n\nString: hello [/INST] let upperCaseString = 'hello'.toUpperCase();</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to insert a given string at a specific position within another given string.\n\nstring1 = 'Python is fun' \nstring2 = 'awesome '\nposition = 7 [/INST] def insert_string(string1, string2, pos):\n    return string1[:pos] + string2 + string1[pos:]</s>"
  },
  {
    "text": "<s>[INST] Given two lists, write a Python program to print all common elements in them.\n\nlist1 = [10, 20, 30, 40] \nlist2 = [30, 40, 50, 60] [/INST] def common_elements(list1, list2):\n    common = []\n    for elem in list1:\n        if elem in list2:\n            common.append(elem)\n    return common</s>"
  },
  {
    "text": "<s>[INST] Design a program in Python which takes a string as input and returns a list of words from the string.\n\nstring1 = 'Python Programming is Fun!' [/INST] def get_words(string1):\n    words = string1.split()\n    return words</s>"
  },
  {
    "text": "<s>[INST] Design a program in Python to remove all even elements from a given list.\n\nlst = [2, 4, 5, 6, 8, 10] [/INST] def remove_even(lst):\n    evens = []\n    for num in lst:\n        if num % 2 != 0:\n            evens.append(num)\n    return evens</s>"
  },
  {
    "text": "<s>[INST] Design a code to check if a given list is ordered in an increasing order.\n\nlst = [1, 2, 3, 5, 4] [/INST] def is_increasing(lst):\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to replace the last element in a list with another given element.\n\nlst = [1, 2, 3, 4]\nelement = 5 [/INST] def replace_last(lst, element):\n    lst[-1] = element\n    return lst</s>"
  },
  {
    "text": "<s>[INST] Modify the following given program to print all prime number between 1 and n [/INST] def check_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef print_prime_numbers(n):\n    for num in range(1, n + 1):\n        if check_prime(num):\n            print(num)</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to calculate the standard deviation of a given list [/INST] def calculate_std_dev(nums):\n    mean = sum(nums)/len(nums)\n    sum_deviation = 0\n    for num in nums:\n        diff = num - mean\n        squared_deviation = diff ** 2\n        sum_deviation += squared_deviation\n    std_dev = (sum_deviation/(len(nums)-1)) ** 0.5\n    return std_dev</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to generate the Fibonacci sequence up to the nth term [/INST] def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b</s>"
  },
  {
    "text": "<s>[INST] Write a code to retrieve tweets from a specific Twitter account by using their API.\n\nTwitter account: \"@twitter\" [/INST] \"\"\"\nRetrieve tweets from a specific Twitter account\n\"\"\"\n\nimport tweepy\n\n#Enter the respective information \nconsumer_key = 'XXXXXXXXXX'\nconsumer_secret = 'XXXXXXXXXX'\naccess_token = 'XXXXXXXXXX'\naccess_token_secret = 'XXXXXXXXXX'\n\n#Authentication using the given keys \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \n\n#getting the API  \napi = tweepy.API(auth) \n\n#fetch tweets related to \"@twitter\"\ntweets = api.user_timeline(\"@twitter\") \n\n#display first five tweets \nfor tweet in tweets[:5]: \n    print(tweet.text)</s>"
  },
  {
    "text": "<s>[INST] Write a code to establish a connection between your server and a remote database.\n\nServer host: 127.0.0.1\nDatabase Name: my_db\nUsername: root\nPassword: pw123 [/INST] \"\"\"\nEstablish a connection between your server and a remote database\n\"\"\"\n\nimport pymysql\n\ndb = pymysql.connect(host='127.0.0.1', user='root', \n                      password='pw123', db='my_db')</s>"
  },
  {
    "text": "<s>[INST] Write a code to get the IP address of a system. [/INST] import socket \n  \nhostname = socket.gethostname() \nIPAddr = socket.gethostbyname(hostname) \n  \nprint(\"The IP address of the system is:\" + IPAddr)</s>"
  },
  {
    "text": "<s>[INST] Create a code that removes all duplicate elements in a given array.\n\nArray: [5, 10, 5, 7, 10] [/INST] def unique_elements(arr): \n    new_arr = [] \n    for i in arr:\n        if i not in new_arr: \n            new_arr.append(i) \n    return new_arr \n  \narr = [5, 10, 5, 7, 10] \n\nprint(unique_elements(arr)) # [5, 10, 7]</s>"
  },
  {
    "text": "<s>[INST] Write a code to implement insertion sort on a given list.\n\nList: [4, 3, 6, 1, 5] [/INST] def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \narr = [4, 3, 6, 1, 5]\ninsertionSort(arr)\nprint (\"Sorted array is: \") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])</s>"
  },
  {
    "text": "<s>[INST] Modify a given code to sort a two-dimensional array (matrix) using bubble sort.\n\nMatrix: \n[[1, 5, 2], \n[8, 4, 6],\n[3, 7, 9]] [/INST] def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+1][k] : \n                    arr[j][k], arr[j+1][k] = arr[j+1][k], arr[j][k]\n  \narr = [[1, 5, 2], \n       [8, 4, 6], \n       [3, 7, 9]]\n\nbubble_sort(arr)\nprint(\"Sorted matrix: \") \nfor row in arr: \n    print(row)</s>"
  },
  {
    "text": "<s>[INST] Construct a Python class to represent a student with attributes such as name, age, and course. The class should have a method that returns the student information in a formatted output\n\nStudent Name: John Smith\nAge: 17\nCourse: Computer Science [/INST] class Student: \n    def __init__(self, name, age, course): \n        self.name = name \n        self.age = age\n        self.course = course\n\n    def get_info(self): \n        return f\"Name: {self.name}, Age: {self.age}, Course: {self.course}\"\n\nstudent = Student(\"John Smith\", 17, \"Computer Science\")\n\nprint(student.get_info()) # Name: John Smith, Age: 17, Course: Computer Science</s>"
  },
  {
    "text": "<s>[INST] Create a text classifier using a Random Forest algorithm.\n\n[['Ready Player One', 'Adventure'],\n['IT', 'Drama'],\n['Halloween', 'Horror'],\n['Pirates of the Caribbean', 'Adventure']] [/INST] \"\"\"\nCreate a text classifier using a Random Forest algorithm\n\"\"\"\n \nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# create the dataframe from the given input\ndf = pd.DataFrame(columns=['text', 'category'], data=input)\n\n# define the features and labels\nX = df['text']\ny = df['category']\n\n# create and train the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel = model.fit(X, y)</s>"
  },
  {
    "text": "<s>[INST] Write a code to create a 3x3 matrix with all elements 1. [/INST] #import numpy library\nimport numpy as np\n\n#create a 3x3 matrix with all elements 1 \nx = np.ones((3,3))\nprint(x)</s>"
  },
  {
    "text": "<s>[INST] Write a code to fetch the last 4 commits of a git repository.\n\nuser: 'rnyagah', repo: 'GPT-Evaluation' [/INST] \"\"\"\nWrite a code to fetch the last 4 commits of a git repository\n\"\"\"\n\nimport requests\n\nuser = 'rnyagah'\nrepo = 'GPT-Evaluation'\n\nurl = f'https://api.github.com/repos/{user}/{repo}/commits'\n\nresponse = requests.get(url)\ndata = response.json()\n\n# get the last 4 commits\ncommits = data[:4]\n\nfor commit in commits:\n    print(f'commit {commit[\"sha\"]}: {commit[\"commit\"][\"message\"]}')</s>"
  },
  {
    "text": "<s>[INST] Design a linked list data structure. [/INST] \"\"\"\nDesign a linked list data structure\n\"\"\"\n\nclass ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = ListNode(data)\n\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node\n\n    def search(self, target):\n        current = self.head\n        while current is not None:\n            if current.data == target:\n                return current\n            current = current.next\n        return None\n\n    def print_list(self):\n        current = self.head\n        while current is not None:\n            print(current.data)\n            current = current.next</s>"
  },
  {
    "text": "<s>[INST] Create a script to remove HTML tags from a web page.\n\n<html>\n  <head>\n    <title>Example</title>\n  </head>\n  <body>\n    <p>Welcome to example.com</p>\n  </body>\n</html> [/INST] \"\"\"\nCreate a script to remove HTML tags from a web page\n\"\"\"\n\nimport re\n\nhtml_string = input\n\n# remove all html tags using regex\nv = re.compile(r'<.*?>')\ncleaned_string = re.sub(v, '', html_string)\n\nprint(cleaned_string)</s>"
  },
  {
    "text": "<s>[INST] Create a FOR loop to print out the odd numbers between a given range.\n\nmin = 1, max = 10 [/INST] \"\"\"\nCreate a FOR loop to print out the odd numbers between a given range\n\"\"\"\n\n# define the range\nmin = input[0]\nmax = input[1]\n\n# iterate through the range\nfor i in range(min, max+1):\n    # check for odd numbers\n    if i % 2 == 1:\n        print(i)</s>"
  },
  {
    "text": "<s>[INST] Create a class 'Employee' with the following fields: name, address, and salary. [/INST] class Employee:\n    def __init__(self, name, address, salary):\n        self.name = name\n        self.address = address\n        self.salary = salary</s>"
  },
  {
    "text": "<s>[INST] What does the `filter()` method do in Python? [/INST] The filter() method in Python takes in a function and a list as arguments. The function is called with all the items in the list and a new list is returned which contains items\nfor which the function evaluates to True.\nIt is typically used to filter out elements from a list based on a certain condition.</s>"
  },
  {
    "text": "<s>[INST] Create a tuple `numbers` with the elements 1, 2, 3 and 4. [/INST] numbers = (1, 2, 3, 4)</s>"
  },
  {
    "text": "<s>[INST] Create a subclass 'Manager' of Employee and add the field 'experience'. [/INST] class Manager(Employee):\n    def __init__(self, name, address, salary, experience):\n        super().__init__(name, address, salary)\n        self.experience = experience</s>"
  },
  {
    "text": "<s>[INST] Write a code to remove elements from a list using the `remove()` method.\n\nlist = [1, 2, 3, 4] [/INST] list = [1, 2, 3, 4]\nlist.remove(2)\nlist.remove(3)\n\n# list is now [1, 4]</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary with the name 'salary' and assign values to the employee names.\n\nEmployee Names: \"John\", \"Jane\", \"Tina\". [/INST] salary = {\n    \"John\": 0,\n    \"Jane\": 0,\n    \"Tina\": 0\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the maximum of 3 arguments. [/INST] def find_max(a, b, c):\n    max_value = a\n    if b > max_value:\n        max_value = b\n    if c > max_value:\n        max_value = c\n    return max_value\n\nprint(find_max(1, 2, 3))  # Output: 3</s>"
  },
  {
    "text": "<s>[INST] Create an array with the elements 1, 2, 3, and 4 and name it 'numbers'. [/INST] numbers = [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Code an while loop statement to print a string with the value of the variable num.\n\nnum = 10 [/INST] while num > 0:\n    print(\"The value of num is \" + str(num))\n    num -= 1</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two numbers as an argument and compares them to find the highest number.\n\nx = 5\ny = 8 [/INST] def highest_number(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2\n\nhighest_number(x, y)   # returns 8</s>"
  },
  {
    "text": "<s>[INST] Read the following code and identify all the objects present in it.\n\nclass Person:\n    name = 'John'\n    age = 25 [/INST] In the given code, the object is ‘Person’, and the two data attributes of the object are ‘name’ and ‘age’.</s>"
  },
  {
    "text": "<s>[INST] Below is the code of a shopping list application. Modify it to add a function to calculate the total cost of all items in the list.\n\nshopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n} [/INST] shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}\n\ndef calculate_cost(list):\n    cost = 0\n    for item in list:\n        cost += list[item]\n    return cost\n\ntotal_cost = calculate_cost(shopping_list)\nprint(total_cost)  # prints 10.25</s>"
  },
  {
    "text": "<s>[INST] Write a code to input an array and find the maximum and minimum element in it.\n\narr = [1, 2, 3, 4, 5, 6] [/INST] def find_min_max(arr):\n    min_num = arr[0]\n    max_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num \n        if num > max_num:\n            max_num = num \n    return max_num, min_num\n\nmax_num, min_num = find_min_max(arr)\nprint('Max element is', max_num, 'and min element is', min_num)  # prints Max element is 6 and min element is 1</s>"
  },
  {
    "text": "<s>[INST] Generate a random string of length 10 that consists of characters 'a', 'b' and 'c'. [/INST] import random\n\nrandom_string = ''.join(random.choices(['a', 'b', 'c'], k=10))\nprint(random_string)  # prints something like ccaacccaac</s>"
  },
  {
    "text": "<s>[INST] Write a Python code using list comprehension to get the power of each element in a list.\n\nlist_num = [1, 2, 3, 4, 5] [/INST] power_list = [num**2 for num in list_num]\nprint(power_list)  # prints [1, 4, 9, 16, 25]</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to insert a new item at the end of a given Python list.\n\nitems = [1, 2, 3]\nnew_item = 4 [/INST] items = [1, 2, 3] + [new_item]\nprint(items)  # prints [1, 2, 3, 4]</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a string and a keyword, then delete all the occurrences of the keyword in the given string.\n\nstr = \"I am going to the market to buy apples\"\nkeyword = \"apples\" [/INST] def delete_occurrences(string, keyword):\n    new_str = string.replace(keyword, '')\n    return new_str\n\nprint(delete_occurrences(str, keyword))  # prints \"I am going to the market to buy\"</s>"
  },
  {
    "text": "<s>[INST] Create a list of 5 integers and print out their product. [/INST] \"\"\"\nCreate a list of 5 integers and print out their product\n\"\"\"\n\nlist_of_ints = [1, 2, 3, 4, 5]\n\nproduct = 1\nfor i in list_of_ints:\n    product *= i\nprint(product)</s>"
  },
  {
    "text": "<s>[INST] Print the duplicated items in an array of integers.\n\narray: [1, 2, 3, 2, 5, 1] [/INST] \"\"\"\nPrint the duplicated items in an array of integers\n\"\"\"\n\npublic class DuplicateItems \n{\n    public static void main(String[] args) \n    {\n        int [] array = {1, 2, 3, 2, 5, 1};\n        List<Integer> duplicates = new ArrayList<Integer>();\n        \n        for(int i = 0; i < array.length-1; i++){\n            for(int j = i+1; j < array.length; j++){\n                if(array[i] == array[j] && !duplicates.contains(array[i])) {\n                    duplicates.add(array[i]);\n                }\n            }\n        }\n        System.out.println(\"Duplicate items: \" + duplicates);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code in Java to print out the power of two of the given number.\n\nNumber: 4 [/INST] \"\"\"\nWrite a code in Java to print out the power of two of the given number\n\"\"\"\n\npublic class TwoPower \n{\n    public static void main(String[] args) \n    {\n        int number = 4;\n        double res = Math.pow(2,number);\n        System.out.println(\"2 to the power of \" + number + \" is \" + res);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code in Python to remove all the duplicate elements from a list and print the result.\n\nlist: [2, 3, 3, 4, 5, 5] [/INST] \"\"\"\nWrite a code in Python to remove all the duplicate elements from a list and print the result\n\"\"\"\n\ndef remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\nif __name__ == '__main__':\n    lst = [2,3,3,4,5,5]\n    print(\"List with duplicates removed:\", remove_duplicates(lst))</s>"
  },
  {
    "text": "<s>[INST] Evaluate the expression 3^2 + 5%2. [/INST] \"\"\"\nEvaluate the expression 3^2 + 5%2\n\"\"\"\n\nint result = 3^2 + 5%2;\nSystem.out.println(\"Result: \"+ result);\n\n// Output: Result: 8</s>"
  },
  {
    "text": "<s>[INST] Given a string and two words, write a program to find the shortest sub sequence containing both words.\n\nString: the quick brown fox jumps over the lazy dog\nTwo words: quick and dog [/INST] The sequence is \"quick brown fox jumps over the lazy dog\".</s>"
  },
  {
    "text": "<s>[INST] Implement a search algorithm to search a node in a binary search tree. [/INST] def search(node, key):\n   if node is None or node.key == key:\n        return node\n \n   if node.key < key:\n        return search(node.right, key)\n \n    return search(node.left, key)</s>"
  },
  {
    "text": "<s>[INST] What is the Big O notation of the algorithm you wrote in Task 8? [/INST] The algorithm has an O(n) time complexity, where n is the size of the input.</s>"
  },
  {
    "text": "<s>[INST] Write a code to traverse a matrix in spiral form. [/INST] def spiral_traverse(matrix):\n    top = 0\n    left = 0\n    right = len(matrix[0])-1\n    bottom = len(matrix)-1\n    while top <= bottom and left <= right:\n        for i in range(left, right+1):\n            print(matrix[top][i], end = ' ')\n        top += 1\n        for i in range(top, bottom+1):\n            print(matrix[i][right], end = ' ')\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left-1, -1):\n                print(matrix[bottom][i], end = ' ')\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top-1, -1):\n                print(matrix[i][left], end = ' ')\n            left += 1</s>"
  },
  {
    "text": "<s>[INST] What is abstraction in computer programming? [/INST] Abstraction in computer programming is the process of hiding details of how the code is implemented and only exposing the information that is necessary. It involves separating a complex task into simpler and smaller units in order to solve problems efficiently. It also helps to break down a complex system into its fundamental parts and allow a programmer to focus on the most important parts.</s>"
  },
  {
    "text": "<s>[INST] Write a reusuable function in Python that takes two string variables and returns the longest string. [/INST] def longest_string(str1, str2):\n    if len(str1) > len(str2):\n        return str1\n    else:\n        return str2</s>"
  },
  {
    "text": "<s>[INST] Extract all the words from a given sentence and save them to a list.\n\nSentence: This is a sample sentence with words. [/INST] words = [\"this\", \"is\", \"a\", \"sample\", \"sentence\", \"with\", \"words\"]</s>"
  },
  {
    "text": "<s>[INST] Translate the following statement from English to Python code: \"If the value of x is greater than 10, print 'x is greater than 10.\" [/INST] if x > 10:\n    print(\"x is greater than 10.\")</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript statement to log a string onto the console.\n\nString: \"Print this message\" [/INST] console.log(\"Print this message\");</s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to make all text appear in bold font. [/INST] body {\n    font-weight: bold;\n}</s>"
  },
  {
    "text": "<s>[INST] How do you install the Django web framework? [/INST] Install Django using pip by running the following command from the command line:\npip install Django\n\nYou can also install Django from source:\ngit clone https://github.com/django/django.git\ncd django\npython setup.py install</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to select only the first name, last name, and email columns from a table named 'customers'. [/INST] SELECT first_name, last_name, email\nFROM customers;</s>"
  },
  {
    "text": "<s>[INST] How do you set up a local development environment for a Node.js application? [/INST] Setting up a local development environment for a Node.js application involves installing a compatible version of Node.js and setting up the necessary modules. After installation, node’s package manager, NPM, can be used to install the packages and dependencies for the application. Additionally, an IDE such as Visual Studio Code can be used for writing and running the code.</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to filter out comments containing profane language in a text corpus. [/INST] One way to filter out comments containing profane language in a text corpus is to use a rule-based algorithm with a list of profane words and phrases. This algorithm can be configured to identify words or phrases in a given corpus that match the list of profane words and phrases, and flag them as inappropriate. A second approach is to use natural language processing to identify profane content. This involves training a machine learning model to detect profanity by analyzing patterns in the text, such as its word or phrase context, structure, and so on.</s>"
  },
  {
    "text": "<s>[INST] Create a class called 'Product' in Python and assign the following attributes to it.\n\nname, price, description [/INST] class Product:\n    \"\"\"\n    A class that represents a product with its attributes.\n    \"\"\"\n    def __init__(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n        self.description = description</s>"
  },
  {
    "text": "<s>[INST] Explain what is Cross-validation in Machine Learning. [/INST] Cross-validation is a technique used to evaluate a machine learning model by dividing the dataset into training and validation sets. The model is trained on the training set, and its performance is evaluated on the validation set. In other words, cross-validation is a method for selecting model hyperparameters and for assessing performance of a model. It is a technique used to ensure that we are not overfitting to the training data and evaluate the accuracy of a model on unseen data. This can be done by splitting the data into a set of folds, typically 5 - 10, and running model training and testing k times, with each time one of the folds as the validation set and the other folds as the training set. The result of this process is the average validation accuracy across the k folds of the data. This gives us a better understanding of how the model will perform in production.</s>"
  },
  {
    "text": "<s>[INST] Write a script in Python to make an http request and extract the title of the web page.\n\nurl = 'https://en.wikipedia.org/wiki/Deep_learning' [/INST] import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    \"\"\"\n    This function makes an HTTP request to the given URL and extracts the title of the web page.\n    \"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup.title.string\n\nprint(get_page_title('https://en.wikipedia.org/wiki/Deep_learning'))</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to generate random passwords using Python. [/INST] One way to generate random passwords using Python is to use the string module's methods. Using the string.ascii_letters and string.digits sequences, we can create a random sequence of alphanumeric characters. The string module's choice() function can then be used to randomly select characters from this sequence to create a new password string. The length of the password should be specified as an argument to the choice() function. For example, to generate an 8 character long password, you can use string.choice(string.ascii_letters + string.digits, 8).</s>"
  },
  {
    "text": "<s>[INST] Create a switch statement to convert an RGB value to HEX.\n\nrgb = (255, 205, 100) [/INST] const convertRGBtoHEX = (rgb) => {\n    let hex = '';\n    switch (rgb) {\n        case (rgb[0], rgb[1], rgb[2]):\n            hex = (rgb[0] << 16 | rgb[1] << 8 | rgb[2]).toString(16);\n            break;\n        default:\n            hex = \"000000\";\n            break;\n    }\n    return hex;\n}\n\nconsole.log(convertRGBtoHEX([255, 205, 100]))</s>"
  },
  {
    "text": "<s>[INST] Construct a loop that prints the even numbers from 0 to 20, one number per line. [/INST] for i in range(0, 21):\n    if i % 2 == 0:\n        print(i)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that returns the total number of items per category. [/INST] SELECT category, COUNT(*) AS items \nFROM items \nGROUP BY category;</s>"
  },
  {
    "text": "<s>[INST] Generate a unique 9-digit hexadecimal code. [/INST] # 6ba62f1bf</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes an array as a parameter and continuously adds each item to the total sum.\n\narr = [6, 4, 3, 10] [/INST] def addItems(arr):\n  total = 0\n  for number in arr:\n    total = total + number\n  return total</s>"
  },
  {
    "text": "<s>[INST] Count the number of occurrences of the letter “a” in a given string.\n\nstring = \"My favorite animal is a dog\" [/INST] # 3</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to make an average of given 10 numbers.\n\narr = [3, 5, 8, 10, 14, 16, 22, 27, 33, 44] [/INST] #include<iostream> \nusing namespace std;\n  \n// Finds the average of given 10 numbers \nfloat Average(int arr[]) \n{\n    float sum = 0; \n  \n    for (int i=0; i<10; i++) \n    { \n        sum = sum + arr[i]; \n    }\n  \n    return (sum/10); \n} \n  \n// Driver program to run above function \nint main() \n{ \n    int numbers[10] = {3, 5, 8, 10, 14, 16, 22, 27, 33, 44}; \n  \n    cout << Average(numbers); \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Transform the following array into an HTML unordered list.\n\nconst veggies = [\"Lettuce\", \"Carrot\", \"Cucumber\"] [/INST] <ul>\n  <li>Lettuce</li>\n  <li>Carrot</li>\n  <li>Cucumber</li>\n</ul></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to check if a number is a whole number or has decimals. [/INST] const isWholeNumber = (num) => {\n  if (num % 1 === 0) return true\n  return false\n}</s>"
  },
  {
    "text": "<s>[INST] Should function A call function B or function B call function A?\n\nA:\nfunction getData() {\n  // do something\n  return data;\n}\n\nB:\nfunction processData(data) {\n  // do something\n  return processedData;\n} [/INST] Function B should call function A, since function A is the one that provides the data for the processing done by function B.</s>"
  },
  {
    "text": "<s>[INST] Perform a bubble sort on the following array of numbers.\n\nconst arr = [9, 5, 7, 11, 2] [/INST] let arr = [9, 5, 7, 11, 2];\n\nfunction bubbleSort(arr) {\n  let swapped;\n\n  do {\n    swapped = false;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] > arr[i+1]) {\n         let temp = arr[i];\n         arr[i] = arr[i+1];\n         arr[i+1] = temp;\n         swapped = true;\n      }\n    } \n  }\n  while (swapped);\n\n  return arr;\n}\n\nbubbleSort(arr);\n// Output: [2, 5, 7, 9, 11]</s>"
  },
  {
    "text": "<s>[INST] Create a for loop that prints the contents of a list of strings.\n\nlist_of_strings = [\"John\", \"Bob\", \"Jill\", \"Sara\"] [/INST] list_of_strings = [\"John\", \"Bob\", \"Jill\", \"Sara\"]\n\nfor name in list_of_strings:\n    print(name)</s>"
  },
  {
    "text": "<s>[INST] Find the longest word in a piece of text.\n\nThe quick brown fox jumps over the lazy dog [/INST] # Find the longest word in a piece of text\n\n# Split the text into a list of words\nwords =  \"The quick brown fox jumps over the lazy dog\".split()\n\n# Initialize a variable to keep track of the longest word\nlongest_word = \"\"\n\n# Loop over each word in the list\nfor word in words:\n    # Check if the current word is longer than the longest word\n    if len(word) > len(longest_word):\n        # Update the longest word\n        longest_word = word\n\n# Print the longest word\nprint(longest_word)</s>"
  },
  {
    "text": "<s>[INST] Create a program that assigns an ID to each element of an array.\n\narr = [\"Car\", \"Bike\", \"Bus\"] [/INST] # Create program that assigns an ID to each element of an array\n\narr = [\"Car\", \"Bike\", \"Bus\"]\n\n# Initialize a counter\ncounter = 0\n\n# Loop over each element of the array\nfor element in arr:\n    # Assign an ID to the element (in this case, the counter value)\n    element_id = counter\n\n    # Print the assigned ID\n    print(f\"Element {element} is assigned ID {element_id}\")\n\n    # Increment the counter\n    counter += 1</s>"
  },
  {
    "text": "<s>[INST] What is the factorial of 5? [/INST] The factorial of 5 is 1</s>"
  },
  {
    "text": "<s>[INST] Implement a random number generator in Python that returns a random number in the range of 1-100. [/INST] import random\n\ndef rand_num():\n    return random.randint(1, 100)</s>"
  },
  {
    "text": "<s>[INST] Find the longest substring of two characters that is a palindrome.\n\nstring = \"banana\" [/INST] def longest_palindrome(string):\n    # Create an empty substring\n    longest_substring = ''\n    \n    # Iterate through the string\n    for i in range(len(string)-1): \n        for j in range(i+1, len(string)):\n            substring = string[i:j+1]\n            if substring == substring[::-1] and len(substring) > len(longest_substring):\n                longest_substring = substring\n    return longest_substring\n\n# Call the function\nlongest_palindrome('banana') # returns 'anana'</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python and define several functions for that class. [/INST] class MyClass:\n    def __init__(self):\n        pass \n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n    def divide(self, x, y):\n        return x / y</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, write an algorithm to find the maximum difference between any two elements in the array.\n\nnums = [3, 2, 7, 1, 4] [/INST] def find_max_difference(nums):\n    # Initialize a max difference\n    max_diff = float('-inf')\n    \n    # Iterate through the array\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Call the function\nfind_max_difference([3, 2, 7, 1, 4]) # returns 6</s>"
  },
  {
    "text": "<s>[INST] Create a list in Python of elements 0-9 in random order. [/INST] import random \n\n# Generate a list of 10 numbers\nnums = [i for i in range(10)]\n\n# Shuffle the list\nrandom.shuffle(nums) \n\n# Print the shuffled list\nprint(nums) # [5, 0, 2, 3, 9, 8, 4, 1, 7, 6]</s>"
  },
  {
    "text": "<s>[INST] Design a data structure to store books that keeps track of page numbers. [/INST] class Book:\n    def __init__(self, title, num_pages):\n        self.title = title\n        self.num_pages = num_pages\n        self.pages_read = 0\n    \n    def read(self, num_pages):\n        self.pages_read += num_pages\n\n# Create an instance\nbook = Book(\"War and Peace\", 1220)\n\n# Read some pages\nbook.read(50)\n\n# Check the number of pages read\nbook.pages_read # returns 50</s>"
  },
  {
    "text": "<s>[INST] Edit a given sentence to make its sentence structure correct.\n\nsentence = \"This is wrong sentence structure\" [/INST] sentence = \"This sentence has an incorrect structure.\"</s>"
  },
  {
    "text": "<s>[INST] Create a function to calculate log base 10 in Python. [/INST] import math\n\ndef log10(x):\n    return math.log10(x)\n\nif __name__ == '__main__':\n    print(log10(10))</s>"
  },
  {
    "text": "<s>[INST] Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.\n\nn=5 [/INST] #Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.\n\ndef num_permutations(n):\n    if n == 0:\n        return 0\n    else:\n        return math.factorial(n)\n\nif __name__ == '__main__':\n    print(num_permutations(5))</s>"
  },
  {
    "text": "<s>[INST] Calculate the total product of all numbers in an array in JavaScript.\n\n[5, 4, 2] [/INST] const product = arr => arr.reduce((finalProduct, num) => finalProduct * num);\nconsole.log(product([5,4,2]));</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to find the First Name and Age of all people with the same Year of Birth.\n\nnoinput [/INST] SELECT FirstName, Age \nFROM TableName \nWHERE YEAR(Birthday) = YEAR(NOW())</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm to print all possible combinations of balanced parentheses. [/INST] def generateParenthesis(N): \n    string = \"\" \n    result = [] \n  \n    # dfs on the result \n    def generate(left, right, string): \n        if (left == 0 and right == 0): \n            result.append(string) \n            return\n  \n        if left > 0: \n            generate(left - 1, right, string + \"(\") \n  \n        if left < right: \n            generate(left, right - 1, string + \")\") \n  \n    # calling the function \n    if N > 0: \n        generate(N, N, string) \n    return result \n  \n# Driver function \nprint(generateParenthesis(3))</s>"
  },
  {
    "text": "<s>[INST] Given an array of numbers, find the index of the first occurrence of a given number in Java. [/INST] public class FindIndex {\n    public static int findIndex(int[] arr, int n) { \n        int i; \n        for (i = 0; i < arr.length; i++) { \n            if (arr[i] == n) \n                break; \n        } \n        if (i < arr.length) \n            return i; \n        else\n            return -1; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program that uses command line arguments to print out the argument passed in as a string. [/INST] #include <iostream>\n\nusing namespace std;\n\nint main(int argc, char* argv[])\n{\n    cout << argv[1];\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of the first 10 natural numbers in JavaScript. [/INST] let numbers = [1,2,3,4,5,6,7,8,9,10];</s>"
  },
  {
    "text": "<s>[INST] Given a JSON object, write a Python program to convert it into a Pandas dataframe.\n\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n} [/INST] import pandas as pd\n\ndata = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n\ndf = pd.DataFrame([data])</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to print names starting with a certain letter.\n\nLetter: A [/INST] SELECT name FROM table WHERE name LIKE 'A%';</s>"
  },
  {
    "text": "<s>[INST] Find the sum of the sequence of numbers from 1 to 10. [/INST] 55</s>"
  },
  {
    "text": "<s>[INST] Write a Bash command to list all the subdirectories of a given directory.\n\nPath: /home/test [/INST] ls /home/test/*/</s>"
  },
  {
    "text": "<s>[INST] How is an \"infinite loop\" created? [/INST] An infinite loop is created by writing a loop that always evaluates to true, causing it to repeat indefinitely. This can be done by writing the loop with no condition, or a condition that can never be false. For example, a loop with the condition “i < 10” will run infinitely if it increments i by 1 each time, as its value will never reach 10.</s>"
  },
  {
    "text": "<s>[INST] How is a 2D array declared and initialized in Java? [/INST] int[][] array 2D = new int[n][m]; \n//where n is the number of rows and m is the number of columns. \n//You can also create a 2D array by initializing elements with curly brackets, for example int[][] array2D = {{1,2,3},{4,5,6}};</s>"
  },
  {
    "text": "<s>[INST] What is \"branching\" in version control systems? [/INST] Branching is the ability to create a separate line of development within a version control system. This allows developers to have multiple versions of the same project, each with its own unique changes. Branches are used to isolate different features or bug fixes in different versions, without affecting the main line of development.</s>"
  },
  {
    "text": "<s>[INST] Write code to sort a Python list of tuples based on their second element in the tuple.\n\nlist_of_tuples = [('a', 5), ('b', 1), ('c', 10)] [/INST] list_of_tuples.sort(key=lambda tup: tup[1])</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select the maximum salary for each department from the \"Salary\" table. [/INST] SELECT department, MAX(salary) FROM Salary GROUP BY department;</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to select the names and ages of employees in the \"Employees\" table where the age is greater than 25. [/INST] SELECT name, age FROM Employees WHERE age > 25;</s>"
  },
  {
    "text": "<s>[INST] Modify the above C program to reverse a sentence. [/INST] #include<stdio.h>\n#include<string.h>\n \nvoid reverse(char *str) \n{ \n    int i = strlen(str) - 1, j = 0; \n  \n    while (i > j) { \n        char temp = str[i]; \n        str[i] = str[j]; \n        str[j] = temp; \n        i--; \n        j++; \n    } \n} \n  \nvoid reverseSentence(char *str) \n{ \n    reverse(str); \n  \n    int start = 0, end; \n    while (str[start] != '\\0') { \n        if (str[start] == ' ') { \n            start++; \n            continue;  \n        } \n \n        end = start + 1; \n        while (str[end] != ' ' && str[end] != '\\0') \n            end++; \n \n        reverse(str + start, end - start); \n  \n\t\tstart = end; \n    } \n} \n  \nint main() \n{ \n    char str[100] = \"How are you?\"; \n    reverseSentence(str); \n    printf(\"%s\", str); \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a drop-down menu with values “green”, “blue” and “red”. [/INST] <!DOCTYPE html>\n<html>\n    <body>\n        <select name=\"color\">\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n            <option value=\"red\">Red</option>\n        </select>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a program in Python to remove duplicate values from a list.\n\nlist_a = [1, 2, 2, 3, 4, 4] [/INST] def remove_duplicates(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\nlist_a = [1, 2, 2, 3, 4, 4]\nlist_a = remove_duplicates(list_a)\nprint(list_a)</s>"
  },
  {
    "text": "<s>[INST] What is the definition of polymorphism in programming? [/INST] Polymorphism in programming is a principle allowing the same code to be used for objects of different types, or for a given object to behave differently in different contexts. Polymorphism is an essential element of object-oriented programming, as it allows for code reusability, among other benefits. Polymorphism is achieved in programming by using inheritance and abstraction, along with virtual functions and templates. Examples of polymorphism include the various forms of overloading and overriding, and type punning.</s>"
  },
  {
    "text": "<s>[INST] Create a Python function that takes in a time string in the format hh:mm:ss and returns the time in seconds.\n\ntime_string = '01:10:30' [/INST] def time_in_seconds(time_string):\n    hour, minutes, seconds = map(int, time_string.split(':'))\n    return second + minutes * 60 + hour * 3600\ntime_in_seconds(time_string) # 4290</s>"
  },
  {
    "text": "<s>[INST] Using the given HTML, add the class \"container\" to the <div> element.\n\n<div>Hello</div> [/INST] <div class=\"container\">Hello</div></s>"
  },
  {
    "text": "<s>[INST] Using the following HTML, add an id attribute to the <div> element.\n\n<div>Hello</div> [/INST] <div id=\"myDiv\">Hello</div></s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to generate Fibonacci numbers up to a maximum of n values.\n\nn = 20 [/INST] #include <iostream>\n\nint main() {\n    int n = 20;\n    int a = 0, b = 1, c;\n\n    std::cout << a << \" \" << b << \" \";\n\n    for (int i = 2; i < n; ++i) {\n        c = a + b;\n        std::cout << c << \" \";\n        a = b;\n        b = c;\n    }\n\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Given the following HTML, change the text to \"Hello World\".\n\n<p>Hi there</p> [/INST] <p>Hello World</p></s>"
  },
  {
    "text": "<s>[INST] Gather the source code of a web page using a Java program.\n\nString url = \"https://www.example.com\"; [/INST] try {\n    URL page = new URL(url);\n    URLConnection conn = page.openConnection();\n    BufferedReader in = new BufferedReader(\n                     new InputStreamReader(conn.getInputStream())\n    );\n\n    String line;\n    while ((line = in.readLine()) != null) {\n        System.out.println(line);\n    }\n\n    in.close();\n} catch (IOException e) {\n    System.err.println(\"An IOException was caught!\");\n    e.printStackTrace();\n}</s>"
  },
  {
    "text": "<s>[INST] Write a helper function in Haskell that prints out a given string in uppercase.\n\nstr = \"hello\" [/INST] uppercase str = map toUpper str</s>"
  },
  {
    "text": "<s>[INST] What is a hashmap, and what is it used for? [/INST] A hashmap (also known as a dictionary or associative array) is a data structure that stores key-value pairs. It is used to store and retrieve information using a keyword or search term as the key. The key can then be used to quickly fetch the associated value from the hashmap. This makes hashmaps a powerful tool for storing and accessing large amounts of data efficiently.</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to add two numbers provided in two lists.\n\nlist1 = [2, 4, 3]\nlist2 = [5, 6, 4] [/INST] new_list = []\n \nfor i in range(len(list1)):\n    new_list.append(list1[i] + list2[i])\n \nprint(new_list) # Output: [7, 10, 7]</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python that takes an integer as an input and prints the number of digits in the integer.\n\nnum = 1234 [/INST] def countDigits(num):\n    count = 0\n    while(num > 0):\n        num = num//10\n        count += 1\n    return count\n\nprint(countDigits(num)) # Output: 4</s>"
  },
  {
    "text": "<s>[INST] What data structure can you use to store a set of unique values? [/INST] A set is a data structure that stores a collection of unique values. A set is efficient for checking if a particular value exists in the collection, as the existence of the value can be checked in constant time.</s>"
  },
  {
    "text": "<s>[INST] Convert this MySQL query to MongoDB.\n\nSELECT * FROM customers WHERE customer_id=1; [/INST] db.customers.find({ customer_id: 1 });</s>"
  },
  {
    "text": "<s>[INST] You are given two strings, A and B. Write a function to delete the characters in A that also appear in B.\n\nA = 'abcbbdef'\nB = 'abcdc' [/INST] def delete(A, B):\n    for i in B:\n        if i in A:\n            A = A.replace(i, '')\n    return A\n\ndelete(A, B) # Output: 'bdef'</s>"
  },
  {
    "text": "<s>[INST] Explain the principle of dynamic programming. [/INST] Dynamic programming is a technique for solving complex problems by breaking them down into smaller subproblems. The subproblems are solved and stored in a table, which is reused to solve future subproblems. This technique allows for efficient solutions regardless of the complexity of the problem, as it exploits the overlapping subproblems property to reduce time complexity.</s>"
  },
  {
    "text": "<s>[INST] You need to read a code and predict possible problems.\n\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (fib(n-1) + fib(n-2)) [/INST] The main problem with this code is that it is not very efficient. It uses a recursive approach which requires solving the same subproblem multiple times, thus leading to a large time complexity. To improve the efficiency of the code, it could be rewritten to use iteration instead of recursion.</s>"
  },
  {
    "text": "<s>[INST] Which language is used to develop applications for the Android platform? [/INST] The official language for developing applications for the Android platform is Java. Java is an object-oriented programming language, which allows developers to create robust and reliable applications for Android devices.</s>"
  },
  {
    "text": "<s>[INST] Create a sorting algorithm in Python that will sort an array of numbers in ascending order\n\n[3, 1, 5, 2, 4, 6] [/INST] def sort_nums_asc(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Generate a C program to count the frequency of each character in a given string\n\nString = “abcabcabc” [/INST] #include <stdio.h> \n#include <string.h> \n\nvoid characterCount(char str[]) \n{ \n    int count[256] = {0}; \n  \n    int len = strlen(str); \n    \n    // Count the frequency of each character in the string \n    int i; \n    for (i = 0; i < len; i++) \n        count[str[i]]++; \n  \n    // print lowercase characters \n    for (i = 0; i < 26; i++) \n        if (count[i] != 0) \n            printf(\"'%c' has occurred %d time(s).\\n\", i + 'a', count[i]); \n  \n    // print uppercase characters \n    for (i = 65; i < 91; i++) \n        if (count[i] != 0) \n            printf(\"'%c' has occurred %d time(s).\\n\", i + 'A', count[i]); \n} \n\nint main() \n{ \n   char str[] = \"abcabcabc\"; \n   characterCount(str); \n   return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a node.js program to get the name of the day for a given date [/INST] const dateformat = require('dateformat');\n  \nconst getDayName = (date) => { \n     const dayName = dateformat(date,'dddd'); \n     return dayName;\n};</s>"
  },
  {
    "text": "<s>[INST] Classify a given paragraph as having a positive or negative sentiment\n\nThe customer service was horrible and the wait was too long. [/INST] Negative</s>"
  },
  {
    "text": "<s>[INST] Retrieve the data stored in a SQL database [/INST] SELECT * FROM database_name;</s>"
  },
  {
    "text": "<s>[INST] Edit a JavaScript program to input a number and output its factorial\n\nlet n = 5; [/INST] function factorial(n) { \n    let result = 1; \n    for (let i = 2; i <= n; i++) \n        result *= i; \n    return result; \n} \nconsole.log( factorial(n) );</s>"
  },
  {
    "text": "<s>[INST] Create a bash script that sorts a list of numbers\n\nlist = [3,12,1,4,5] [/INST] #!/bin/bash\narr=($list)\nsort=`echo ${arr[*]} | tr \" \" \"\\n\" | sort -n`\necho $sort</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to sum up all the elements in a two-dimensional array\n\nint arr[][]={{1,2,3},{4,5,6}}; [/INST] public static int findSum(int[][] array) {  \n    int sum=0;  \n    for(int i=0;i<array.length;i++){\n      for(int j=0;j<array[i].length;j++){\n        sum = sum+array[i][j];\n      }\n    }\n    return sum;  \n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python class that processes a string of text\n\nString = \"Hello World\" [/INST] class StringProcessor:\n    def __init__(self, String):\n        self.string = String\n\n    def processString(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n        return myString</s>"
  },
  {
    "text": "<s>[INST] Generate a command to update a folder [/INST] git pull origin master</s>"
  },
  {
    "text": "<s>[INST] Generate a list comprehension in Python to get the cube of all the numbers between 1 to 10 [/INST] cubes_list = [x**3 for x in range(1, 11)]</s>"
  },
  {
    "text": "<s>[INST] Create a C# class to serialize a JSON object [/INST] [DataContract]\npublic class SampleObject\n{\n    [DataMember(Name = \"name\")]\n    public string Name { get; set; }\n\n    [DataMember(Name = \"age\")]\n    public int Age { get; set; }\n}\n\npublic static string SerializeObject(SampleObject obj)\n{  \n    DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType());  \n \n    MemoryStream ms = new MemoryStream();  \n    serializer.WriteObject(ms, obj);  \n    string json = Encoding.Default.GetString(ms.ToArray());  \n    ms.Close();  \n \n    return json;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of length n, containing all even numbers starting from 0. [/INST] def create_array(n):\n    arr = []\n    for i in range(0, n, 2):\n        arr.append(i)\n    return arr</s>"
  },
  {
    "text": "<s>[INST] Create an XML document with three elements \"Company\", \"Product\", and \"Price\". [/INST] <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n <Company>Company Name</Company>\n <Product>Product Name</Product>\n <Price>Price in Dollars</Price>\n</root></s>"
  },
  {
    "text": "<s>[INST] Write a Node.js program to generate a random 3-character string. [/INST] const randomString = function() { \n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \n    let str = \"\"; \n      \n    for (let i = 0; i < 3; i++)   \n        str += alphabet[Math.floor(Math.random() * alphabet.length)]; \n\n    return str; \n} \n  \nconsole.log(randomString());</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to display the 10 most recently added products. [/INST] SELECT *\nFROM products\nORDER BY date_created DESC\nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Train a SVM model on the given input data to classify the output as either \"yes\" or \"no\".\n\nx1, x2, y\n2, 3, Yes\n3, 4, Yes\n3, 5, No [/INST] model = svm.SVC(kernel=\"linear\")\nmodel.fit(X, y)</s>"
  },
  {
    "text": "<s>[INST] Sort the given array [1, 7, 5, 4, 2] in ascending order. [/INST] let arr = [1, 7, 5, 4, 2];\narr.sort(function(a, b){return a-b});\n\nconsole.log(arr); // [1, 2, 4, 5, 7]</s>"
  },
  {
    "text": "<s>[INST] Classify the following sentence into either Affective or Predicate.\n\n\"She was beautiful.\" [/INST] Affective</s>"
  },
  {
    "text": "<s>[INST] Provide a MySQL query for selecting a record from a table called \"inventory\". [/INST] SELECT * FROM inventory WHERE id = 1;</s>"
  },
  {
    "text": "<s>[INST] Write a code in Java for creating an instance of an interface. [/INST] MyInterface myInterface = new MyInterface() {\n    @Override\n    public void myMethod() {\n        // Implement your code here\n    }\n};</s>"
  },
  {
    "text": "<s>[INST] Describe the working of a set in Python. [/INST] A set in Python is an unordered collection of unique elements. It is an efficient data structure which provides a variety of operations such as membership testing, intersection, union and difference. Sets in Python do not allow duplicate elements and also do not maintain any particular order of the elements. Sets are mutable meaning that elements can be added or removed from them.</s>"
  },
  {
    "text": "<s>[INST] Create a function in R that will return the maximum number in a given vector.\n\nvec <- c(3,2,5,1,4,0) [/INST] max_num <- function(v){\n  return(max(v))\n}\nmax_num(vec)</s>"
  },
  {
    "text": "<s>[INST] Edit the following code so that it prints the first odd number in a given list.\n\nnums = [2, 3, 4, 5, 6] [/INST] for num in nums:\n    if num % 2 == 1:\n        print(num)\n        break</s>"
  },
  {
    "text": "<s>[INST] Create a variable in JavaScript that holds the value of a number. [/INST] let number = 7;</s>"
  },
  {
    "text": "<s>[INST] Create a PHP class that has two properties, an id and name. [/INST] <?php\n\nclass Person {\n  public $id;\n  public $name;\n\n  public function __construct($id, $name)\n  {\n    $this->id = $id;\n    $this->name = $name;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Design a JSON object with two keys, \"name\" and \"age\". [/INST] {\n  \"name\": \"John Doe\",\n  \"age\": 25\n}</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object that stores three pieces of digital contact data, an email address, a phone number, and a website URL. [/INST] const contact = {\n email: 'example@example.com',\n phone: '000-000-0000',\n website: 'www.example.com'\n};</s>"
  },
  {
    "text": "<s>[INST] Update the HTML structure with a <p> tag that contains the text \"Welcome to my website\".\n\n<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n\n</body>\n</html> [/INST] <html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n <p>Welcome to my website</p>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create an SQL table with three columns called id (int type), name (text type), and age (int type). [/INST] CREATE TABLE people (\n    id INT PRIMARY KEY, \n    name TEXT,\n    age INT\n);</s>"
  },
  {
    "text": "<s>[INST] Create a Python 3 script that prints out the total number of days in the current month. [/INST] import calendar\n\nprint(calendar.monthrange(2020, 11)[1])</s>"
  },
  {
    "text": "<s>[INST] Design a PHP class that can be used to store a user's name, age and gender. [/INST] <?php\n\nclass User {\n  public $name;\n  public $age;\n  public $gender;\n\n  public function __construct($name, $age, $gender)\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->gender = $gender;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to take an array of numbers, and return an array in which each element is the result of squaring the original.\n\n[1,2,3,4] [/INST] [1,4,9,16]</s>"
  },
  {
    "text": "<s>[INST] Give an algorithm to delete a key, say k, from a binary search tree (BST). [/INST] 1. If the tree is empty, then return \n2. Find the key to be deleted in the tree and store it in a temporary node. \n3. Check if the key to be deleted has zero children or one child. \n    a. If the key has one child, then copy the child to the temporary node and delete the key. \n    b. If the key has two children, then find inorder successor of the key, copy it to the temporary node and delete the key.\n4. Free the memory occupied by the temporary node.</s>"
  },
  {
    "text": "<s>[INST] Fill the missing statement for for-while loop based on following pseudocode:\n\ni = 1 [/INST] while i <= 10:\n # write statement here \n print(i)\n i = i + 1</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript which takes a situation as a parameter and returns the probability of success.\n\nThe probability of the stock market rising tomorrow. [/INST] function findProbability(situation) {\n // code to calculate probability \n return probability;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a HTML page with a form that takes user input and performs some action when the user clicks the submit button. [/INST] <html>\n <head>\n  <title>Form Demo</title>\n </head>\n <body>\n  <form action=\"form_action.php\" method=\"post\">\n   <label for=\"username\">Username:</label>\n   <input type=\"text\" name=\"username\">\n   <input type=\"submit\" name=\"submit\" value=\"Submit\">\n  </form>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Bash script to check if the directory exists or not.\n\nmy_directory [/INST] #!/bin/bash\n\nif [ -d \"my_directory\" ]; then\n  echo \"The directory exists\"\nelse \n  echo \"The directory does not exist\"\nfi</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to select the names of all the customers who have made a purchase in the past month. [/INST] SELECT name\nFROM customers\nWHERE purchase_date > NOW()-INTERVAL 1 MONTH;</s>"
  },
  {
    "text": "<s>[INST] Write a query to find the five highest scores in a leaderboard table. [/INST] SELECT *\nFROM leaderboard\nORDER BY score DESC\nLIMIT 5;</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the total payments made a group of customers in the last 30 days. [/INST] SELECT customer_id, SUM(payment_amount) \nFROM payments \nWHERE payment_date > NOW() - INTERVAL 30 DAY \nGROUP BY customer_id;</s>"
  },
  {
    "text": "<s>[INST] Implement an algorithm to find all the sets of three numbers in an array which adds up to a given number.\n\nArray: [2, 5, 8], Number: 10 [/INST] def three_sum(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\nprint(three_sum([2, 5, 8], 10)) # Result: [[2, 5, 8]]</s>"
  },
  {
    "text": "<s>[INST] Create a query to find the total payments from one customer in the last 10 months. [/INST] SELECT SUM(payment_amount) \nFROM payments \nWHERE payment_date > NOW() - INTERVAL 10 MONTH \nAND customer_id = '<customer_id>';</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to find the longest common substring from two given strings.\n\nString1: 'Hello World', String2: 'Hey World' [/INST] def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nprint(longest_common_substring('Hello World', 'Hey World'))  # Result: 'ello Wo'</s>"
  },
  {
    "text": "<s>[INST] Write a SQL clause to get all the records from a table if the value in each column is greater than 5. [/INST] SELECT * FROM table_name WHERE col1 > 5 AND col2 > 5 AND col3 > 5 AND ...;</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to convert the following XML code into JSON in Python.\n\n<data>\n  <records> \n  \t<record name=\"John Smith\" age=\"27\">\n   \t\t<address>123 Main Street</address>\n   \t</record>\n    <record name=\"Jane Smith\" age=\"18\">\n    \t<address>167 King Avenue</address>\n    </record>\n  </records>\n</data> [/INST] import json \nimport xmltodict \n  \nxml_data = \"\"\"\n<data> \n  <records> \n    <record name=\"John Smith\" age=\"27\"> \n      <address>123 Main Street</address> \n    </record> \n    <record name=\"Jane Smith\" age=\"18\"> \n      <address>167 King Avenue</address> \n    </record> \n  </records>\n</data> \n\"\"\"\n  \nxml_dict = xmltodict.parse(xml_data)  \njson_data = json.dumps(xml_dict) \nprint(json_data)</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two arguments, a string and a character, and replaces all occurrences of the character with the string in JavaScript. [/INST] function replaceCharacter(str, char) { \n    return str.replace(new RegExp(char,\"g\"), str); \n} \n  \nlet str = \"Hello World\"; \nlet char = \"l\"; \nlet result = replaceCharacter(str, char); \n  \nconsole.log(result); // Output: Heooo Worod</s>"
  },
  {
    "text": "<s>[INST] Take the following array as an argument and output the sum of all the numbers in the array using Python.\n\n[1, 2, 3, 4, 5] [/INST] def sum_of_array(arr):\n  return sum(arr)\n\narray = [1, 2, 3, 4, 5]\nresult = sum_of_array(array)\n\nprint(resutl) # Output: 15</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to get the average of all the number from a single column. [/INST] SELECT AVG(column_name) FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Extend the following HTML code to include a dropdown list.\n\n<select class=\"form-control\">\n<option value=\"\">Select one</option>\n</select> [/INST] <select class=\"form-control\">\n  <option value=\"\">Select one</option>\n  <option value=\"Option 1\">Option 1</option>\n  <option value=\"Option 2\">Option 2</option>\n  <option value=\"Option 3\">Option 3</option>\n</select></s>"
  },
  {
    "text": "<s>[INST] Code a function in Python to calculate the nth value of the Fibonacci sequence. [/INST] def fibonacci(n): \n    if n <= 0: \n        return 0 \n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2)</s>"
  },
  {
    "text": "<s>[INST] Create a visualization to compare the customer preferences of two websites.\n\nWebsite 1 has 4000 customers and their favourite products are video games and consoles.\nWebsite 2 has 5000 customers and their favourite products are movies, music and books. [/INST] The customer preferences can be compared using a bar chart. The X-axis can have the labels ‘Website 1’ and ‘Website 2’ and the Y-axis can have ‘Video games/Consoles’, ‘Movies’, ‘Music’ and ‘Books’ on the axis. The bars can represent the percentage of customers with the corresponding favourite product.</s>"
  },
  {
    "text": "<s>[INST] Visit the API documentation and create code to make a POST request using Python. [/INST] import requests \n  \ndata = {'name': 'John Doe', 'age': '25'} \n  \nheaders = {'Content-type': 'application/x-www-form-urlencoded', 'Accept': 'text/plain'} \n  \nresponse = requests.post('https://example.com/api/v1/data', data=data, headers=headers)</s>"
  },
  {
    "text": "<s>[INST] You need to generate a virtual object with React.js. [/INST] const VirtualObject = () => {\n  const [state, setState] = React.useState({ \n    height: 100,\n    width: 100,\n    backgroundColor: 'blue'\n  }); \n\nreturn ( \n  <div \n  style={{ \n   height: state.height,\n   width: state.width,\n   backgroundColor: state.backgroundColor\n  }} \n  >\n  </div> \n  );\n};</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to search for customer names whose age is greater than 30 [/INST] SELECT name \nFROM customers \nWHERE age > 30</s>"
  },
  {
    "text": "<s>[INST] Use nltk package in Python and remove stopwords from the given text.\n\nText: \"I am wondering what is the best way to learn English.\" [/INST] import nltk\nfrom nltk.corpus import stopwords\n\ntxt = \"I am wondering what is the best way to learn English.\"\nwords = nltk.word_tokenize(txt)\nfiltered_words = [w for w in words if not w in stopwords.words('english')] \n  \nprint(filtered_words)</s>"
  },
  {
    "text": "<s>[INST] Construct a switch statement for the given pseudo-code.\n\nswitch (day)\n  case Sunday:\n    print(\"Sunday is a Day of Rest\");\n    break;\n  case Saturday:\n    print(\"Saturday is a Day of Work\");\n    break; [/INST] switch (day)\n{\n  case \"Sunday\":\n    printf(\"Sunday is a Day of Rest\");\n    break;\n  case \"Saturday\":\n    printf(\"Saturday is a Day of Work\");\n    break;\n  default:\n    printf(\"Default Action\");\n    break;\n}</s>"
  },
  {
    "text": "<s>[INST] Build a web scraper in Python to fetch the restaurant details from the website.\n\n<uri of the website> [/INST] import requests \nfrom bs4 import BeautifulSoup \n  \npage = requests.get(<uri of website>) \nsoup = BeautifulSoup(page.content, 'html.parser') \n  \nrests = soup.find_all('div', class_='restaurant-item')\n\n# Parse the details of restaurants one by one\nfor rest in rests:  \n    name = rest.find('div', class_='restaurant-name') \n    cuisine = rest.find('li', class_='cuisine-list-item') \n    location = rest.find('li', class_='restaurant-location') \n    rating = rest.find('span', class_='star-rating-text') \n      \n    # Print details of restaurant \n    print(name.text, cuisine.text, location.text, rating.text)</s>"
  },
  {
    "text": "<s>[INST] Using SVG element and CSS properties, create an animation of a car moving in a straight line. [/INST] <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 500 500\" >\n  <rect x=\"0\" y=\"0\" width=\"500\" height=\"500\" fill=\"black\"/>\n  <rect x=\"20\" y=\"20\" width=\"20\" height=\"20\" fill=\"red\" id=\"car\"/>\n  <animate xlink:href=\"#car\" attributeName=\"x\" from=\"20\" to=\"480\" dur=\"4s\"\n    repeatCount=\"indefinite\" />\n</svg></s>"
  },
  {
    "text": "<s>[INST] Develop a function in Java to display the prime numbers between 0 and 100. [/INST] public static void printPrimeNumbers(int n) {\n\n    for (int i = 2; i < n; i++) {\n        boolean isPrime = true;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0 ) {\n                isPrime = false;\n           \n            }\n        }\n            \n        if (isPrime) {\n            System.out.print(i + \" \");\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Given a JSON object, encode it using Base64.\n\n{\n\"name\":\"John Doe\",\n\"age\":25\n} [/INST] import base64\n\njson_object = '{\"name\":\"John Doe\",\"age\":25}'\nencoded_object = base64.b64encode(bytes(json_object, 'utf-8'))\nprint(encoded_object)</s>"
  },
  {
    "text": "<s>[INST] Build a function to loop through an array and check if each key exists in the object.\n\narray = [1,2,3]\nobject = {\n  1: 'one',\n  2: 'two'\n} [/INST] function checkKeys(array, object) {\n  for (let i = 0; i < array.length; i++) {\n    let key = array[i];\n    if (object.hasOwnProperty(key)) {\n      console.log(\"key \"+key+\" exists\");\n    } else {\n      console.log(\"key \"+key+\" does not exist\");\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a program to spell a given word.\n\n\"Hello\" [/INST] def spellWord(word):\n    words = list(word)\n    for i in range(len(words)):\n        print(words[i])</s>"
  },
  {
    "text": "<s>[INST] Fill in the blank to print a string 7 times. [/INST] for i in range(7):\n    print(\"Hello, World!\")</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to increment a variable by one when its value is less than 10.\n\nint i = 5; [/INST] int i = 5;\nif (i < 10) {\n    i++;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to remove the nth index character from a nonempty string.\n\nvar_str = Python, n = 0 [/INST] def remove_character(var_str, n):\n  first_part = var_str[:n] \n  last_part = var_str[n+1:]\n  return first_part + last_part\n\nprint(remove_character('Python', 0))\n\nOutput: ython</s>"
  },
  {
    "text": "<s>[INST] Iterate over a list and count the number of occurrences of each item.\n\nlist1 = [10, 20, 30, 10, 10, 40, 10] [/INST] def count_instances(list1):\n    count_dict = dict() \n\n    for item in list1: \n        if (item in count_dict): \n            count_dict[item] += 1\n        else: \n            count_dict[item] = 1\n   \n    for key, value in count_dict.items(): \n        print(f\"{key} : {value}\") \n  \ncount_instances(list1)\n\nOutput: 10 : 4, 20 : 1, 30 : 1, 40 : 1</s>"
  },
  {
    "text": "<s>[INST] Determine the longest word in a given string.\n\nsentence = \"I am Python Programmer\" [/INST] def longest_word(sentence):\n    words = sentence.split()\n    max_len = len(words[0])\n     \n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n     \n    return max_word\n \nprint(longest_word('I am Python Programmer'))\n\nOutput: Programmer</s>"
  },
  {
    "text": "<s>[INST] Given a number n, print “Hello” n times.\n\nn = 5 [/INST] def print_hello(n):\n    for i in range (n):\n        print(\"Hello\")\n\nprint_hello(5)\n\nOutput: \nHello \nHello \nHello \nHello \nHello</s>"
  },
  {
    "text": "<s>[INST] Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper/lower case differences.\n\nstr1 = \"Strawberry\", str2 = \"berry\" [/INST] def check_case_ignore(str1, str2):\n    return str1.lower().endswith(str2.lower())\n\nprint(check_case_ignore('Strawberry', 'berry'))\n\nOutput: True</s>"
  },
  {
    "text": "<s>[INST] Get all permutations of string.\n\nstring = \"abc\" [/INST] from itertools import permutations \n  \ndef permutations_string(string):\n    return list(permutations(string))\n\npermutations_string(\"abc\")\n\nOutput: [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]</s>"
  },
  {
    "text": "<s>[INST] You need to create an HTML page containing a table that contains at least 4 columns and 5 rows. [/INST] <!DOCTYPE html>\n<html>\n<head>\n <title>HTML Table</title>\n</head>\n<body>\n  <table>\n   <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n   </tr>\n   <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n    <td>Row 1</td>\n    <td>Row 1</td>\n   </tr>\n   <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n    <td>Row 2</td>\n    <td>Row 2</td>\n   </tr>\n   <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n    <td>Row 3</td>\n    <td>Row 3</td>\n   </tr>\n   <tr>\n    <td>Row 4</td>\n    <td>Row 4</td>\n    <td>Row 4</td>\n    <td>Row 4</td>\n   </tr>\n   <tr>\n    <td>Row 5</td>\n    <td>Row 5</td>\n    <td>Row 5</td>\n    <td>Row 5</td>\n   </tr>\n  </table>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] You are given a list of numbers. Count how many of them are prime numbers.\n\n[1,2,3,4,5,6,7] [/INST] def count_primes(numbers):\n    count = 0\n    for number in numbers:\n        if is_prime(number):\n            count += 1\n    return count\n \ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Edit the given code to ensure it outputs appropriate messages for successful and unsuccessful output.\n\ndef handleInput(name):\n  if len(name) > 0:\n    print('Hello, ' + name) [/INST] def handleInput(name):\n    if len(name) > 0:\n        print('Hello, ' + name)\n    else:\n        print('No name provided.')</s>"
  },
  {
    "text": "<s>[INST] Is the following code syntactically correct?\n\nfunction addNumbers(a, b) {\n  return a + b [/INST] Yes. The function is syntactically correct.</s>"
  },
  {
    "text": "<s>[INST] Create a JS program that rotates a given string by 3 characters. [/INST] function rotateString(string) { \n\treturn string.slice(3) + string.slice(0, 3); \n}</s>"
  },
  {
    "text": "<s>[INST] Modify the following code so that it takes a string as a parameter, reverses it and prints out the reversed string.\n\nstr = \"Hello World!\" [/INST] def reverse_string(str):\n  reverse = \"\" \n  # Traverse through each letter of the input string \n  for i in range(len(str) - 1, -1, -1): \n    reverse = reverse + str[i] \n  print(reverse)</s>"
  },
  {
    "text": "<s>[INST] Find a way to randomly swap two elements of an array.\n\n[1, 2, 3, 4, 5] [/INST] import random \n# Function to swap two elements \n# in a list at positions i and j  \ndef swap(arr, i, j): \n    arr[i], arr[j] = arr[j], arr[i] \n\n# Function to generate a random \n# permutation of arr[]  \ndef randomize ( arr, n ) : \n    # Start from the last element and swap \n    # one by one. We don't need to run for\n    # the first element that's why i > 0 \n    for i in range(n-1,0,-1): \n        # Pick a random index from 0\n        # to i \n        j = random.randint(0,i+1) \n        # Swap arr[i] with the element \n        # at random index \n        swap(arr, i, j)</s>"
  },
  {
    "text": "<s>[INST] Implement a method that reverses a linked list\n\nhead = 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null [/INST] // A linked list node \nclass Node: \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to reverse the linked list  \ndef reverse(head): \n    prev = None\n    current = head\n    while(current is not None): \n        next = current.next\n        current.next = prev \n        prev = current \n        current = next\n    head = prev \n    return head</s>"
  },
  {
    "text": "<s>[INST] Find a way to get the size of a linked list without traversing it.\n\nhead: 1 -> 2 -> 3 -> 4 -> 5 -> null [/INST] def get_list_size(head):\n    count = 0\n    temp = head\n    while(temp):\n        count += 1\n        temp = temp.next\n    return count</s>"
  },
  {
    "text": "<s>[INST] Write a function to find the smallest subarray with a given sum.\n\narr = [3, 4, 5, 6, 7], sum = 11 [/INST] def smallest_subarray_sum(arr, sum):\n\n    start = 0\n    end = 1\n    min_length = float('inf')\n    current_sum = arr[start]\n    while(end < len(arr)):\n        while(current_sum < sum and end < len(arr)):\n            current_sum += arr[end]\n            end += 1\n\n        while(start < end and current_sum >= sum):\n            min_length = min(min_length, end-start)\n            current_sum -= arr[start]\n            start += 1\n    \n    return min_length</s>"
  },
  {
    "text": "<s>[INST] Edit the following code so that it prints out all powers of 2 up to 2^n\n\nn = 5 [/INST] def power_of_2(n):\n    result = 1\n    for i in range(n):\n        print(result)\n        result *= 2</s>"
  },
  {
    "text": "<s>[INST] Create a function that reverses a given string without using the built-in parity.\n\nstr = 'I am here for the coding challenge\" [/INST] def reverse_string_without_parity(str):\n  # Create empty string \n  reversed_str = \"\" \n  # Iterate through the input string in the reverse order\n  for i in range(len(str)-1,-1,-1): \n    reversed_str += str[i] \n  return reversed_str</s>"
  },
  {
    "text": "<s>[INST] Find a way to calculate the power of a number without using * or **\n\nbase = 3\nexponent = 4 [/INST] def power(base, exponent): \n    result = 1\n    for _ in range(exponent):\n        result *= base \n    return result</s>"
  },
  {
    "text": "<s>[INST] Identify the possible output types for the following task.\n\nTask: Write a Spark program to calculate the mean and the median of a set of numbers. [/INST] The possible output types for the given task are Double, Int, Float, and Long.</s>"
  },
  {
    "text": "<s>[INST] Rewrite this SQL query in Postgres.\n\nSELECT id, prof_name\nFROM teachers\nWHERE rank = 'assistant' [/INST] SELECT id, prof_name\nFROM teachers\nWHERE rank = 'Associate Professor'  // fixed the rank.</s>"
  },
  {
    "text": "<s>[INST] Create a Java class for representing a student object. [/INST] public class Student {\n    private String id;\n    private String name;\n    private int age;\n    \n    public Student(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;\n    }\n\n     public String getId() {\n         return id;\n     }\n\n     public void setId(String id) {\n        this.id = id;\n     }\n\n     public String getName() {\n        return name;\n     }\n\n     public void setName(String name) {\n        this.name = name;\n     }\n\n     public int getAge() {\n        return age;\n     }\n\n     public void setAge(int age) {\n        this.age = age;\n     }\n }</s>"
  },
  {
    "text": "<s>[INST] Find the errors in this HTML page.\n\n<html>\n  <title> My Webpage </title>\n  <body>\n    <h2>Welcome!</h2>\n  </head>\n</html> [/INST] The error in the HTML page is that there is no closing <body> tag. The HTML page should have a closing </body> tag after the <h2>Welcome!</h2> tag.</s>"
  },
  {
    "text": "<s>[INST] Explain the differences between OOP and procedural programming. [/INST] Object-oriented programming (OOP) is a programming paradigm that is based on the concept of objects which contain both data and methods. These objects can interact with each other to create complex systems. Procedural programming is a programming paradigm that is based on the concept of procedures or functions that are used to complete a task. The main difference between OOP and procedural programming is that OOP focuses on the utilization of objects to create complex system while procedural programming focuses on the utilization of procedures or functions.</s>"
  },
  {
    "text": "<s>[INST] Rewrite this code into Python.\n\nArrayList<Integer> arr = new ArrayList<>();\nfor (int i = 0; i < 10; i++) {\n    arr.add(i);\n}\n\nint sum = 0;\nfor(int num : arr){\n    sum += num;\n} [/INST] arr = []\nfor i in range(10):\n    arr.append(i)\n\nsum = 0\nfor num in arr:\n    sum += num</s>"
  },
  {
    "text": "<s>[INST] Build a package and deploy it in the cloud.\n\nThe package is an API to authenticate users and the API should be able to authenticate users having different types of API keys. [/INST] Create a package containing API authentication logic and all the necessary API keys. Set up a cloud service, such as AWS or GCP, and deploy the package. Configure the cloud service to accept incoming requests and authenticate the user using the API keys.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the number of customers that have purchased a product more than 5 times.\n\nThe database has three tables: \n \ncustomer(cust_id, cust_name, balance) \nproduct(prod_id, prod_name, price) \nsales(cust_id, prod_id, quantity) [/INST] SELECT count(*) \nFROM customer c \nJOIN sales s on c.cust_id = s.cust_id \nGROUP BY c.cust_id \nHAVING SUM(s.quantity) > 5;</s>"
  },
  {
    "text": "<s>[INST] Fix the following C++ code segment.\n\n#include <iostream>\n\nint main()\n{\n    if (a == b)\n    {\n        cout << a; [/INST] #include <iostream>\n\nint main()\n{\n    int a, b;\n    cin >> a >> b;\n    if (a == b)\n    {\n        cout << a;\n    }\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in two strings and determines of the strings are anagrams\n\nString 1: \"spite\"\nString 2: \"pists\" [/INST] def is_anagram(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\n    # sorting both the strings \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n\n    if len(s1) != len(s2): \n        return False\n\n    # compare character by character \n    for i in range(len(s1)): \n        if s1[i] != s2[i]: \n            return False\n    return True\n\n# Driver code \nif is_anagram(\"spite\", \"pists\"):\n    print(\"Strings are anagrams\")\nelse:\n    print(\"Strings are not anagrams\")</s>"
  },
  {
    "text": "<s>[INST] Identify any type error that is present in the following code.\n\ndef sum_of_values(num_list): \n    total = 0\n    for value in num_list:\n        total += value \n    return total/len(num_list)\n\nsquare_value = sum_of_values(5) [/INST] Type error: The function sum_of_values() takes a list as an argument, but the argument provided is an integer (5).</s>"
  },
  {
    "text": "<s>[INST] Write a HTML page to display a bar chart representing the total sales of a company in different months.\n\nMonths: Jan, Feb, Mar, Apr, May \nTotal sales in each month: 2500, 4000, 4500, 6000, 5500 [/INST] <html>\n<head>\n    <title>Bar Chart Representing Total Sales</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\"></script>\n    <style>\n    canvas{\n        -moz-user-select: none;\n        -webkit-user-select: none;\n        -ms-user-select: none;\n    }\n    </style>\n</head>\n<body>\n<div style=\"width:75%;\">\n    <canvas id=\"myBarChart\"></canvas>\n</div>\n<script>\n    var ctx = document.getElementById('myBarChart').getContext('2d');\n    var myBarChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"],\n            datasets: [{\n                label: \"Total sales\",\n                data: [2500, 4000, 4500, 6000, 5500],\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)'\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)'\n                ],\n            }]\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            }\n        }\n    });\n</script>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Given a list of integers, write a function to compute their average.\n\nList of integers: [1, 2, 3, 4, 5] [/INST] def compute_average(lst): \n    total = 0\n    for num in lst: \n        total += num \n        \n    # calculate the average \n    avg = total / len(lst) \n    \n    return avg\n\n# Driver Code \nlst = [1, 2, 3, 4, 5] \nprint(\"Average of the list =\", round(compute_average(lst), 2))</s>"
  },
  {
    "text": "<s>[INST] Explain what is the purpose of a classifier model in machine learning [/INST] The purpose of a classifier model in machine learning is to predict the class or category of an input data point. A classifier acts as a decision boundary between different categories of data points. It takes a set of input features, applies a set of mathematical operations to them, and uses them to make a prediction about the class of the input data point.</s>"
  },
  {
    "text": "<s>[INST] Generate all combinations of the string \"abcd\". [/INST] def generate_combinations(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            result.append(string[i:j])\n    return result\n\nif __name__ == '__main__':\n    string = \"abcd\"\n    print(generate_combinations(string)) # outputs ['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']</s>"
  },
  {
    "text": "<s>[INST] Create a program to split the given string on a specific character.\n\nString: \"A/B/C/D\"\nCharacter: \"/\" [/INST] def split_string(string, character):\n    return string.split(character)\n    \nif __name__ == '__main__':\n    string = \"A/B/C/D\"\n    character = \"/\"\n    print(split_string(string, character)) # outputs ['A', 'B', 'C', 'D']</s>"
  },
  {
    "text": "<s>[INST] Create a REST API endpoint that returns a list of all user names from a list of users. [/INST] app.get('/users', (req, res) => {\n const users = [\n { id: 1, name: 'John' },\n { id: 2, name: 'Jane' },\n { id: 3, name: 'Jack' },\n ];\n\n const userNames = users.map(user => user.name);\n\n res.status(200).json(userNames);\n});</s>"
  },
  {
    "text": "<s>[INST] Write a CSS style to turn all text in a document to italic. [/INST] * {\n font-style: italic;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a Python class to hold a student's information: name, age and major. [/INST] class Student:\n def __init__(self, name, age, major):\n self.name = name\n self.age = age\n self.major = major\n\ndef get_name(self):\n return self.name\n\ndef get_age(self):\n return self.age\n\ndef get_major(self):\n return self.major</s>"
  },
  {
    "text": "<s>[INST] Compile the following code in C++ and check for any warnings or errors.\n\n#include<iostream>\nusing namespace std;\n\nint main() {\n cout << \"Hello World!\";\n return 0;\n} [/INST] No output is produced when compiling the above code in C++. Any warnings or errors should be indicated while compiling.</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object that holds the global temperatures for the last 5 years. [/INST] const temperatures = {\n  2015: 34.7,\n  2016: 35.2,\n  2017: 35.7,\n  2018: 36.1,\n  2019: 36.7\n};</s>"
  },
  {
    "text": "<s>[INST] Write an R function to calculate the binomial coefficient of n and k [/INST] binomial_coeff <- function(n, k) {\n   if((k == 0) | (k == n))  \n   return(1)\n   else return(binomial_coeff(n-1, k-1) + binomial_coeff(n-1,k))  \n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to print out the multiplication table for the first 10 numbers [/INST] public class MultiplicationTable {\n public static void main(String[] args) {\n  for (int i = 1; i <= 10; i++) {\n   for (int j = 1; j <= 10; j++) {\n    System.out.print(i * j + \" \");\n   }\n   System.out.println();\n  }\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Write an Android app to display the current time and date [/INST] public class MainActivity extends AppCompatActivity {\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n\n TextView tvTimeDate = findViewById(R.id.tvTimeDate);\n\n SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd MMM yyyy, hh:mm aa\");\n Date date = new Date();\n String dateTime = dateFormat.format(date);\n\n tvTimeDate.setText(dateTime);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] Extract words starting with 's' in this sentence.\n\nSentence: I send a package to Steve. [/INST] send, Steve.</s>"
  },
  {
    "text": "<s>[INST] Change the last line of the code to assign a list value to the variable x.\n\nx = None [/INST] x = []</s>"
  },
  {
    "text": "<s>[INST] Write a one-liner to print the elements from list L in reverse order.\n\nL = [\"apple\", \"pear\", \"banana\"] [/INST] print(*L[::-1])</s>"
  },
  {
    "text": "<s>[INST] What data type does the output of this Python code have?\n\nx = 5 [/INST] integer</s>"
  },
  {
    "text": "<s>[INST] Change the code to make it a valid Python program.\n\nx = \"hello world [/INST] x = \"hello world\"</s>"
  },
  {
    "text": "<s>[INST] How can you access the third element of a tuple T? [/INST] T[2]</s>"
  },
  {
    "text": "<s>[INST] Change the code to make it an Expression Statement in Python\n\nx + 1 [/INST] print(x + 1)</s>"
  },
  {
    "text": "<s>[INST] What is the command for cloning a GitHub repository? [/INST] The command for cloning a GitHub repository is `git clone <repository-url>`.</s>"
  },
  {
    "text": "<s>[INST] Determine the output of this code snippet in C++: int x = 7; x = x + x + 2; [/INST] The output of the code snippet is 22, since the value of x will be incremented twice, from 7 to 16 and then again from 16 to 22.</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary where the numbers 1 to 100 are the keys and the strings \"one\" to \"one hundred\" are the values. [/INST] d = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16: 'sixteen',\n    17: 'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n    20: 'twenty',\n    21: 'twenty-one',\n    22: 'twenty-two',\n    23: 'twenty-three',\n    24: 'twenty-four',\n    25: 'twenty-five',\n    26: 'twenty-six',\n    27: 'twenty-seven',\n    28: 'twenty-eight',\n    29: 'twenty-nine',\n    30: 'thirty',\n    31: 'thirty-one',\n    32: 'thirty-two',\n    33: 'thirty-three',\n    34: 'thirty-four',\n    35: 'thirty-five',\n    36: 'thirty-six',\n    37: 'thirty-seven',\n    38: 'thirty-eight',\n    39: 'thirty-nine',\n    40: 'forty',\n    41: 'forty-one',\n    42: 'forty-two',\n    43: 'forty-three',\n    44: 'forty-four',\n    45: 'forty-five',\n    46: 'forty-six',\n    47: 'forty-seven',\n    48: 'forty-eight',\n    49: 'forty-nine',\n    50: 'fifty',\n    51: 'fifty-one',\n    52: 'fifty-two',\n    53: 'fifty-three',\n    54: 'fifty-four',\n    55: 'fifty-five',\n    56: 'fifty-six',\n    57: 'fifty-seven',\n    58: 'fifty-eight',\n    59: 'fifty-nine',\n    60: 'sixty',\n    61: 'sixty-one',\n    62: 'sixty-two',\n    63: 'sixty-three',\n    64: 'sixty-four',\n    65: 'sixty-five',\n    66: 'sixty-six',\n    67: 'sixty-seven',\n    68: 'sixty-eight',\n    69: 'sixty-nine',\n    70: 'seventy',\n    71: 'seventy-one',\n    72: 'seventy-two',\n    73: 'seventy-three',\n    74: 'seventy-four',\n    75: 'seventy-five',\n    76: 'seventy-six',\n    77: 'seventy-seven',\n    78: 'seventy-eight',\n    79: 'seventy-nine',\n    80: 'eighty',\n    81: 'eighty-one',\n    82: 'eighty-two',\n    83: 'eighty-three',\n    84: 'eighty-four',\n    85: 'eighty-five',\n    86: 'eighty-six',\n    87: 'eighty-seven',\n    88: 'eighty-eight',\n    89: 'eighty-nine',\n    90: 'ninety',\n    91: 'ninety-one',\n    92: 'ninety-two',\n    93: 'ninety-three',\n    94: 'ninety-four',\n    95: 'ninety-five',\n    96: 'ninety-six',\n    97: 'ninety-seven',\n    98: 'ninety-eight',\n    99: 'ninety-nine',\n    100: 'one hundred'\n    }</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code so that the loop runs in reverse (decreases rather than increases).\n\nfor i in range(0, 10):\n    print(i) [/INST] for i in range(10, 0, -1):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Count how many words are in a string and output the count.\n\nstring = \"Hello world!\" [/INST] def count_words(str):\n    \"\"\"Counts how many words are in a string.\n    \n    Parameters:\n    str (str): string to be counted\n    \"\"\"\n    return len(str.split())\n\nif __name__ == '__main__':\n    string = \"Hello world!\"\n    print(count_words(string))</s>"
  },
  {
    "text": "<s>[INST] Create a function to output true if the given string is a palindrome, otherwise output false.\n\nstring = \"racecar\" [/INST] def is_palindrome(str):\n    \"\"\"Checks if a given string is a palindrome.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    str = str.lower()\n    return str[::-1] == str\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))</s>"
  },
  {
    "text": "<s>[INST] Replace the comments in the code with the proper Python code.\n\n#TODO: get the date from the user\n#TODO: get the month from the user [/INST] date = int(input(\"Enter the date: \"))\nmonth = int(input(\"Enter the month: \"))</s>"
  },
  {
    "text": "<s>[INST] Find the number of different words in a string of unlimited length.\n\nstring = \"This is a long sentence about nothing.\" [/INST] def word_count(str):\n    \"\"\"Counts the number of different words in a string of unlimited length.\n    \n    Parameters:\n    str (str): string to be counted\n    \"\"\"\n    words = str.split()\n    return len(set(words))\n\nif __name__ == '__main__':\n    string = \"This is a long sentence about nothing.\"\n    print(word_count(string))</s>"
  },
  {
    "text": "<s>[INST] Write a code to check if a string contains only digits and output true or false.\n\nstring = \"1234567890\" [/INST] def is_digits(str):\n    \"\"\"Checks if a string contains only digits.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    return str.isdigit()\n\nif __name__ == '__main__':\n    string = \"1234567890\"\n    print(is_digits(string))</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes in an array of strings and outputs an array of tuples of the first and last word in each string.\n\narray = [\"Hello World\", \"Foo Bar\", \"Goodbye Moon\"] [/INST] def first_last_words(arr):\n    \"\"\"Gets the first and last word from each string.\n    \n    Parameters:\n    arr (list): array of strings\n    \"\"\"\n    result = []\n    for string in arr:\n        words = string.split()\n        result.append((words[0], words[-1]))\n    return result\n\nif __name__ == '__main__':\n    array = [\"Hello World\", \"Foo Bar\", \"Goodbye Moon\"]\n    print(first_last_words(array))</s>"
  },
  {
    "text": "<s>[INST] Create an HTML webpage which when opened displays the current date in a paragraph. [/INST] <!DOCTYPE html> \n<html> \n   <head> \n   <title>Date Page</title> \n   </head> \n   <body> \n      <p> \n      <?php \n       echo \"Current date: \" . date(\"d-m-Y\"); \n      ?> \n      </p> \n   </body> \n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the top 3 highest paying employee’s name and salary. [/INST] SELECT TOP 3 name, salary FROM employees ORDER BY salary DESC;</s>"
  },
  {
    "text": "<s>[INST] Create a script in JavaScript for flipping a coin. [/INST] function coinFlip(){\n  let flipResult = Math.floor(Math.random() * 2);\n  \n  if (flipResult == 0){\n    return \"Heads\";\n  } \n  else {\n    return \"Tails\";\n  }\n}\n\nlet result = coinFlip();\nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the number of employees working in a company with a salary over 50000. [/INST] SELECT COUNT(*)\nFROM employees\nWHERE salary > 50000;</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that finds the names and ages of employees who are older than 40 years. [/INST] SELECT name, age\nFROM employees \nWHERE age > 40;</s>"
  },
  {
    "text": "<s>[INST] Create a Python program that finds the highest number in a list of numbers.\n\n[2, 4, 32, 41, 19] [/INST] # Initializing list\nlist_of_numbers = [2, 4, 32, 41, 19]\n\n# Finding the highest number\nmax_number = max(list_of_numbers)\n\n# Printing the result\nprint(max_number)\n\n# Output: 41</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to compute the volume of a cube. [/INST] public class CubeVolume {\n \n    public static void main(String[] args) {\n        double sideLenght = 10; \n        double volume;\n \n        volume = sideLenght * sideLenght * sideLenght;\n \n        System.out.println(\"Volume of a cube with side lenght \"+ sideLenght +\" is: \" + volume);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Replace the placeholder with actual API calls to execute the following code.\n\nstring search_term = \"coffee shop\"; \nlist results = API_call(search_term)\nprint(results) [/INST] string search_term = \"coffee shop\"; \nlist results = requests.get(\"https://api.example.com/search?term=\"+search_term).json()\nprint(results)</s>"
  },
  {
    "text": "<s>[INST] Create an asyncio event loop and execute a coroutine. [/INST] import asyncio\n\nasync def myfunc():\n   print(\"I'm in a coroutine\")\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(myfunc())\n\nfinally:\n    loop.close()</s>"
  },
  {
    "text": "<s>[INST] Write a query in SQL that returns all customers with the name \"John\".\n\nNo input [/INST] SELECT * \nFROM customer \nWHERE customer_name = 'John';</s>"
  },
  {
    "text": "<s>[INST] Use a framework like React to create a button component that fires an event when clicked. [/INST] class Button extends React.Component {\n  handleClick = () => {\n    console.log('Button was clicked!')\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click Me!\n      </button>\n    )\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that takes two integers N and M and prints out all possible combinations of numbers that add up to N and are at most M.\n\nN=8, M=3 [/INST] def combinations_with_sum(n, m): \n  for i in range(1, m): \n    for j in range(i, m):\n      if i + j == n:\n        print(i, '+', j, '=', n)</s>"
  },
  {
    "text": "<s>[INST] Create a React class component that renders a paragraph of text from props. [/INST] class Paragraph extends React.Component {\n  render() {\n    return <p>{this.props.text}</p>\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Multiply two input matrices using numpy.\n\nmatrix A:\n[[1,2],\n[3,4]]\n\nmatrix B:\n[[5,6],\n[7,8]] [/INST] import numpy as np\nA = np.array([[1,2], [3,4]]) \nB = np.array([[5,6], [7,8]]) \n\nC = np.matmul(A,B)\nprint(C)</s>"
  },
  {
    "text": "<s>[INST] Re-write this Python code as a JavaScript function.\n\ndef double_number(num):\n  return num * 2 [/INST] function doubleNumber(num) {\n  return num * 2;\n}</s>"
  },
  {
    "text": "<s>[INST] Determine the type of data structure that is most suitable for the given case.\n\nUse case: You need to store multiple formats of information like a person's name (string), age (integer) and pets (array) in a data structure. [/INST] The most suitable data structure for this use case is an object, as it is capable of storing multiple values of various types.</s>"
  },
  {
    "text": "<s>[INST] Create a CSS style that changes the color of links to red when visited. [/INST] a:link {\n    color: blue;\n}\n\na:visited {\n    color: red;\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the purpose of the %i in a Python format string. [/INST] The %i in Python is a special format specifier used to format integer numbers. When used in a format string, it will convert the number to an integer and insert it into the output string. This can be used to easily format numbers when printing output.</s>"
  },
  {
    "text": "<s>[INST] Change the following code snippet to use a different method to display the alert.\n\nalert(\"Hello World!\"); [/INST] console.log(\"Hello World!\");</s>"
  },
  {
    "text": "<s>[INST] Create an instance of an Apache Spark DataFrame using an existing Pandas dataframe.\n\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}) [/INST] from pyspark.sql import SparkSession\n\n# Create SparkSession object\nspark = SparkSession.builder.getOrCreate()\n\n# Create Spark DataFrame using Pandas df\nspark_df = spark.createDataFrame(df)</s>"
  },
  {
    "text": "<s>[INST] Compute the sum of all elements in a numpy array.\n\nimport numpy as np\narr = np.array([[1,2,3],[4,5,6]]) [/INST] import numpy as np\narr = np.array([[1,2,3],[4,5,6]])\n\n# Get the sum of all elements in the array\ntotal_sum = np.sum(arr)\n\n# Print the sum\nprint(total_sum)</s>"
  },
  {
    "text": "<s>[INST] Parse a string containing HTML markups and extract the text content.\n\nhtml_string = '<html><body><h1>Sample HTML String</h1>Hello there!</body></html>' [/INST] import html\n\n# Parse the string\nparsed_string = html.unescape(html_string)\n\n# Extract the text content\ntext_content = parsed_string.split('>')[-1]\n\n# Print the content\nprint(text_content)</s>"
  },
  {
    "text": "<s>[INST] Compare two strings and return the index of the first character that is unequal in the two strings.\n\nstring1 = \"Hello world!\"\nstring2 = \"Howdy world!\" [/INST] def get_index_of_first_diff(string1, string2):\n    # Get the length of the strings \n    len_1 = len(string1)\n    len_2 = len(string2)\n\n    # Get the length of the shorter string\n    len_shorter = min(len_1, len_2)\n\n    # Compare the two strings character by character\n    for i in range(len_shorter):\n        if string1[i] != string2[i]:\n            # Return the index of the first differing character\n            return i\n\n# Get the index of first differing character\nindex = get_index_of_first_diff(string1, string2)\n\n# Print the index\nprint(index)</s>"
  },
  {
    "text": "<s>[INST] Perform a linear search on an array of 10 numbers and return the index for the target number.\n\nnums = [2, 8, -4, 1, 0, 5, 3, 9, 6, 10]\ntarget_num = 8 [/INST] def linear_search(nums, target_num):\n    # Get the length of the array\n    len_nums = len(nums)\n\n    # Loop through the array to find the index of the target number\n    for i in range(len_nums):\n        if nums[i] == target_num:\n            # Return the index of the target number\n            return i\n\n# Get the index of the target number\nindex = linear_search(nums, target_num)\n\n# Print the index\nprint(index)</s>"
  },
  {
    "text": "<s>[INST] Convert an array of tuples of 2 numbers into an array of complex numbers.\n\ntuple_array = [(3,4), (5,6), (7,8)] [/INST] import numpy as np \n\n# Convert the array of tuples into an array of complex numbers \ncomplex_arr = np.array(tuple_array, dtype=complex)\n\n# Print the complex array\nprint(complex_arr)</s>"
  },
  {
    "text": "<s>[INST] Given a list of emails and corresponding info, write a code to keep only the emails and transform the list into a dictionary of emails and corresponding info.\n\nmy_list = [('john@example.com', 'John Smith', '27'), \n           ('sarah@example.com', 'Sarah Jane', '31'), \n           ('paul@example.com', 'Paul Walker', '45')] [/INST] # Create a dictionary of emails and corresponding info \nemail_dict = {email[0]: email[1:] for email in my_list}\n\n# Print the dictionary\nprint(email_dict)</s>"
  },
  {
    "text": "<s>[INST] Create a list of unique elements from a list of numbers.\n\nnums = [1, 1, 2, 3, 3, 4, 4, 5, 6] [/INST] # Create a list of unique elements from given list\nunique_nums = list(set(nums))\n\n# Print the list\nprint(unique_nums)</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to parse a date string and display the date in ISO 8601 format.\n\ndate_string = '21 May 2021' [/INST] from datetime import datetime\nimport re\n\n# Parse the date string \ndate = datetime.strptime(date_string, '%d %B %Y')\n\n# Convert the date to ISO 8601 format\niso_8601 = date.strftime(\"%Y-%m-%d\")\n\n# Print the ISO 8601 formatted date\nprint(iso_8601)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve the max and min values from a field.\n\ntable_name = 'Users'\ncolumn_name = 'age' [/INST] SELECT MAX(age) AS maximum, MIN(age) AS minimum \nFROM Users;</s>"
  },
  {
    "text": "<s>[INST] Create a for loop to traverse a list and print each element in the list in sequence.\n\nlist_to_traverse = [1,2,3,4,5] [/INST] for item in list_to_traverse:\n    print(item)</s>"
  },
  {
    "text": "<s>[INST] Using the input string, create a new string that contains all the characters in even indices.\n\nmy_string = \"abcdefghi\" [/INST] # Create an empty string\nnew_string = \"\"\n\n# Iterate over the even indices\nfor i in range(0, len(my_string), 2):\n    new_string += my_string[i]\n\n# Print the new string\nprint(new_string) # prints 'acegi'</s>"
  },
  {
    "text": "<s>[INST] Add a try-catch block around the code example that catches an exception if it is thrown.\n\nwith open(\"myfile.txt\") as f:\n    for line in f:\n        print(line) [/INST] try:\n    with open(\"myfile.txt\") as f:\n        for line in f:\n            print(line)\nexcept:\n    print(\"An exception has been thrown\")</s>"
  },
  {
    "text": "<s>[INST] Write a Java program that creates two arrays and prints out the difference in number of elements between them.\n\nint[] arr1 = {1, 2, 3, 4, 5};\nint[] arr2 = {1, 2, 3}; [/INST] public class ArraySizeDiff {\n    public static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] arr2 = {1, 2, 3};\n\n        int diff = arr1.length - arr2.length;\n        System.out.println(\"Difference in number of elements between the two arrays is: \" + diff);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Using the input, create a new list of strings where all strings in the new list have an uppercase first letter.\n\nmy_list = [\"hello\", \"world\", \"how\", \"are\", \"you?\"] [/INST] new_list = []\nfor string in my_list:\n    new_list.append(string.capitalize())\n\nprint(new_list) # prints ['Hello', 'World', 'How', 'Are', 'You?']</s>"
  },
  {
    "text": "<s>[INST] Create a CSS rule to set the div width to 100px. [/INST] div {\n    width: 100px;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a regex pattern to match strings having at least 3 digits. [/INST] ^\\d{3,}$</s>"
  },
  {
    "text": "<s>[INST] Write a Ruby statement to check if the given number is even.\n\nnum = 6 [/INST] if num % 2 == 0\n    puts \"The number is even\"\nend</s>"
  },
  {
    "text": "<s>[INST] Using the input, classify whether the number is even or odd.\n\nnum = 5 [/INST] if num % 2 == 0\n    puts \"The number is even\"\nelse\n    puts \"The number is odd\"\nend</s>"
  },
  {
    "text": "<s>[INST] Create an object-oriented JavaScript class to represent a point in two-dimensional space. [/INST] class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  distance(other) {\n    let dx = this.x - other.x;\n    let dy = this.y - other.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select the top 5 customers whose address is in the USA. [/INST] SELECT TOP 5 customers.* \nFROM customers\nWHERE customers.address LIKE '%USA%'\nORDER BY customers.name</s>"
  },
  {
    "text": "<s>[INST] Calculate the following expression using Java: (3^3+11) × (3+3) [/INST] int result = (int)Math.pow(3, 3) + 11 * (3 + 3);\n// result = 144</s>"
  },
  {
    "text": "<s>[INST] Complete the following HTML template with appropriate tags:\n\n<html>\n<head> \n</head>\n<body>\n\n</body>\n</html> [/INST] <html>\n<head> \n  <title> Title of page </title>\n</head>\n<body>\n  <h1> Header title </h1>\n  <p> This is a sample content of a web page. </p>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Suggest a technique to detect plagiarism in programming assignments. [/INST] One technique to detect plagiarism in programming assignments is to compute the similarity between submissions and reference solutions. This can be done by extracting the key pieces of code from submissions, such as functions and loops, and then comparing them against the reference solution. If the extracted pieces of code are more similar than would be expected by chance, it could be an indication of plagiarism.</s>"
  },
  {
    "text": "<s>[INST] Create a python program that takes a string as input and prints the length of the longest substring without repeatingcharacters.\n\n\"abcabcbb\" [/INST] def find_longest_substring(s):\n  max_length = 0\n  start = 0\n  usedChar = {}\n\n  for i in range(len(s)):\n    if s[i] in usedChar and start <= usedChar[s[i]]:\n        start = usedChar[s[i]] + 1\n    else:\n        max_length = max(max_length, i - start + 1)\n\n    usedChar[s[i]] = i\n\n  return max_length\n\ninput_string = \"abcabcbb\"\n\nprint(\"The length of longest substring without repeating characters is: {}\".format(find_longest_substring(input_string)))</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code for the following requirements\n\nCreate an anchor tag with the following text: “Click Here to Learn More”. [/INST] <a href=\"\">Click Here to Learn More</a></s>"
  },
  {
    "text": "<s>[INST] Create a function in C++ that will sort a given array of integers in ascending order of their values.\n\nunsorted_arr = {45, 21, 12, 56, 7, 47, 34} [/INST] #include<iostream>\nusing namespace std;\n\nvoid sort(int arr[], int n){ \n    int i, key, j; \n    for (i = 1; i < n; i++) { \n        key = arr[i]; \n        j = i - 1; \n  \n        while (j >= 0 && arr[j] > key) { \n            arr[j + 1] = arr[j]; \n            j = j - 1; \n        } \n        arr[j + 1] = key; \n    } \n}\n\n// Driver Code \nint main() { \n    int unsorted_arr[] = {45, 21, 12, 56, 7, 47, 34}; \n    int n = sizeof(unsorted_arr) / sizeof(unsorted_arr[0]); \n  \n    cout << \"Array before sorting: \\n\"; \n    for (int i = 0; i < n; i++) \n        cout << unsorted_arr[i] << \" \"; \n    cout << endl; \n  \n    sort(unsorted_arr, n); \n  \n    cout << \"Array after sorting: \\n\"; \n    for (int i = 0; i < n; i++) \n        cout << unsorted_arr[i] << \" \"; \n    cout << endl; \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Change the code so it will output the multiplication result when \"multiply\" is clicked.\n\n<button class=\"button\" onclick=\"calc()\">Multiply</button>\n\n<script>\n    let result;\n    function calc() {\n        // TODO: Output the multiplication result\n    }\n</script> [/INST] <button class=\"button\" onclick=\"calc()\">Multiply</button>\n\n<script>\n    let result;\n    function calc() {\n        result = 4*9\n        alert(`The result of the multiplication is: ${result}`)\n    }\n</script></s>"
  },
  {
    "text": "<s>[INST] Generate a MySQL query to display all the columns of a table called \"employee\" [/INST] SELECT * FROM employee;</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the employee who is earning the highest salary. [/INST] SELECT name, MAX(salary)\nFROM employee\nGROUP BY name;</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript snippet to display the current date in the format \"Monday, DD-MM-YYYY\" [/INST] let today = new Date();\nlet options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\nlet dateText = today.toLocaleDateString('en-GB', options);\n\nconsole.log(dateText); // Monday, DD-MM-YYYY</s>"
  },
  {
    "text": "<s>[INST] Generate an expression in R that returns the number of elements in a vector\n\nvec_1 <- c(1, 3, 5, 7) [/INST] length(vec_1)</s>"
  },
  {
    "text": "<s>[INST] Create a java program that checks if a given string has any special characters\n\nString str = \"This is a string!\" [/INST] public class CheckSpecialChar {\n\n    public static void main(String[] args) {\n        String str = \"This is a string!\";\n        boolean flag = false;\n        String specialChar = \"[^a-zA-Z0-9]\";\n        if(str.matches(specialChar))\n        {\n            flag = true;\n        }\n        System.out.println(\"Does the string contains special character : \" + flag);\n    }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to edit the contents of the \"employee\" table\n\nUpdate the column \"salary\" of the employee with ID = 5 [/INST] UPDATE employee\nSET salary=10000\nWHERE id=5;</s>"
  },
  {
    "text": "<s>[INST] Create a MongoDB query to find all the documents with the \"status\" field equal to \"completed\" [/INST] db.collection.find({status: \"completed\"});</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code to display the results of a survey\n\nSurvey Results:\n- Option A: 40%\n- Option B: 30%\n- Option C: 20%\n- Option D: 10% [/INST] <div class=\"survey-results\">\n    <p>Survey Results:</p>\n    <ul>\n        <li>Option A: 40%</li>\n        <li>Option B: 30%</li>\n        <li>Option C: 20%</li>\n        <li>Option D: 10%</li>\n    </ul>\n</div></s>"
  },
  {
    "text": "<s>[INST] Generate a correct SQL statement to select the employees with their name, gender, age and salary [/INST] SELECT name, gender, age, salary\nFROM employee;</s>"
  },
  {
    "text": "<s>[INST] Create two classes 'Circle' and 'Rectangle' in Java which print the circumference and area of their respective shapes. [/INST] class Circle {\n\tprivate double radius;\n\n\tpublic Circle(double radius) {\n\t\tthis.radius = radius;\n\t}\n\n\tpublic double getCircumference() {\t\n\t\treturn 2 * Math.PI * this.radius;\n\t}\n\n\tpublic double getArea() {\n\t\treturn Math.PI * this.radius * this.radius;\t\n\t}\n}\n\nclass Rectangle {\n\tprivate double width;\n\tprivate double length;\n\n\tpublic Rectangle(double width, double length) {\n\t\tthis.width = width;\n\t\tthis.length = length;\n\t}\n\n\tpublic double getCircumference() {\n\t\treturn 2*(this.width + this.length);\n\t}\n\n\tpublic double getArea() {\n\t\treturn this.width * this.length;\n\t}\n}</s>"
  },
  {
    "text": "<s>[INST] What is an HTML tag? [/INST] An HTML tag is an element in an HTML document that is used to structure and format the content of the page. Tags are used to create HTML elements like headings, paragraphs, and links. Tags typically contain attributes which provide additional information about the element, and also define how the element's content should be displayed. Tags are surrounded by angle brackets and typically follow the syntax <tag_name attribute=\"value\">content</tag_name>.</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to instantiate an Employee class with a given name and age. [/INST] public class Employee {\n\tprivate String name;\n\tprivate int age;\n\t\n\tpublic Employee(String name, int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the difference between subclasses and superclasses. [/INST] A superclass is a class from which other classes can inherit methods and properties. A subclass is a class that has inherited a superclass' methods and properties. In object-oriented programming (OOP), a class can be both a superclass and a subclass simultaneously. When a class inherits from another class it is said to extend the superclass, thereby creating a subclass. As such, a subclass has all the properties and methods of its superclass, as well as additional properties and methods that are unique to the subclass itself.</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to prompt the user for a string and print the number of unique characters it contains. [/INST] user_string = input(\"Please enter a string: \")\n\nunique_chars = set()\n\nfor char in user_string:\n    unique_chars.add(char)\n\nprint(\"The string contains\", len(unique_chars), \"unique character(s).\")</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript function that takes an array of numbers and returns true if every element is an even number and false otherwise [/INST] function checkEven(array) {\n    for (var i = 0; i < array.length; i++) {\n        if (array[i] % 2 !== 0) {\n            return false;\n        }\n    }\n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve all rows from the table 'movies' whose genre is 'comedy' [/INST] SELECT * FROM movies WHERE genre = 'comedy';</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python named 'Car' with attributes 'color' and 'make', and methods 'start' and 'stop'. [/INST] class Car:\n    def __init__(self, color, make):\n        self.color = color\n        self.make = make\n    \n    def start(self):\n        print(\"Car started.\")\n        \n    def stop(self):\n        print(\"Car stopped.\")</s>"
  },
  {
    "text": "<s>[INST] Given two strings, print the one that is longer.\n\nstring1 = \"Hello\"\nstring2 = \"World!\" [/INST] if len(string1) > len(string2):\n    print(string1)\nelse:\n    print(string2)</s>"
  },
  {
    "text": "<s>[INST] Write a paint program that displays a 10x10 blue square on the screen. [/INST] import tkinter as tk\n\n# Create a window\nroot = tk.Tk()\n\n# Create a canvas \ncanvas = tk.Canvas(root, width=100, height=100)\n\n# Create a blue square\ncanvas.create_rectangle(0, 0, 100, 100, fill=\"blue\")\n\n# Pack the canvas\ncanvas.pack()\n\n# Display the window\nroot.mainloop()</s>"
  },
  {
    "text": "<s>[INST] Using the turtle module, create a drawing of a triangle.\n\nimport turtle\n<noinput> [/INST] import turtle\n# create an instance of Turtle class\nmy_turtle = turtle.Turtle()\nmy_turtle.speed(0)\n# draw a triangle\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\n# finish the drawing\nmy_turtle.done()</s>"
  },
  {
    "text": "<s>[INST] Construct a dictionary from the provided list of tuples such that the keys and values are switched.\n\ntuples = [('Hello', 5), ('World', 10)] [/INST] #Create a new dictionary\nnewDict = {}\n\n#Iterate through the list and swap the keys and values\nfor tup in tuples:\n    key, value = tup\n    newDict[value] = key\n\n#Print the new dictionary\nprint(newDict)</s>"
  },
  {
    "text": "<s>[INST] Output the sum of the largest and smallest numbers from the provided list.\n\nlist2 = [3, 4, 5, 8, 9] [/INST] #Get the largest and smallest numbers and assign them to variables\nlargestNumber = max(list2)\nsmallestNumber = min(list2)\n\n#Calculate the sum\nsumOfExtremes = largestNumber + smallestNumber\n\n#Print the sum\nprint(sumOfExtremes)</s>"
  },
  {
    "text": "<s>[INST] Output the length of the string passed to the function.\n\ndef getLengthOfString(inputString): [/INST] def getLengthOfString(inputString):\n    #Get the length of the string\n    length = len(inputString)\n\n    #Return the length of the string\n    return length</s>"
  },
  {
    "text": "<s>[INST] Replace the placeholder words in the string with the provided words.\n\nThis is a PLACEHOLDER1 sentence with PLACEHOLDER2 words.\nplaceholder1 = \"sample\"\nplaceholder2 = \"three\" [/INST] #Replace the words in the string\nmodifiedString = \"This is a \" + placeholder1 + \" sentence with \" + placeholder2 + \" words.\"\n\n#Print the modified string\nprint(modifiedString)</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary such that each element in the list is a key and the respective value is its length.\n\nwords = ['cat', 'dog', 'elephant'] [/INST] #Create a new dictionary\nwordLengths = {}\n\n#Fill in the dictionary with the words as keys and their respective lengths as values\nfor word in words:\n    wordLengths[word] = len(word)\n\n#Print the populated dictionary\nprint(wordLengths)</s>"
  },
  {
    "text": "<s>[INST] Create a method that parses the provided HTML and returns a list of all the <p> tags.\n\n<html>\n    <p>This is a test.</p>\n    <a href=\"\">link</a>\n    <p>Another test.</p>\n</html> [/INST] #Create a method to parse the HTML\ndef getPTags(html):\n    #Create an empty list\n    pTags = []\n\n    #Iterate over the HTML\n    for line in html.split(\"\\n\"):\n        #Check if the line is a <p> tag\n        if \"<p>\" in line:\n            #Add the tag to the list\n            pTags.append(line)\n\n    #Return the list\n    return pTags\n\n#Print the list\nprint(getPTags(html))</s>"
  },
  {
    "text": "<s>[INST] Create a function that filters the numbers in the list and returns a list of prime numbers only.\n\nlist3 = [3, 4, 5, 7, 11, 13] [/INST] def primeNums(inputList):\n    #Create an empty list\n    primes = []\n\n    #Iterate over the list\n    for num in inputList:\n        #Check if the number is prime\n        isPrime = True\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n        #Add the number to the list if prime\n        if isPrime:\n            primes.append(num)\n\n    #Return the list\n    return primes\n\n#Print the list\nprint(primeNums(list3))</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to delete records from the \"users\" table that have a name of \"John\" or \"David\". [/INST] DELETE FROM users \n    WHERE name IN ('John', 'David');</s>"
  },
  {
    "text": "<s>[INST] Depending on the provided boolean value, set the result to 0 or 1.\n\nbool1 = False [/INST] #Set the result based on the boolean value\nif bool1:\n    result = 1\nelse:\n    result = 0\n\n#Print the result\nprint(result)</s>"
  },
  {
    "text": "<s>[INST] Write a function to calculate the perimeter of a provided triangle by using its three side lengths. [/INST] def calculatePerimeter(s1, s2, s3):\n    \"\"\"This function will calculate the perimeter of a triangle\n    given its three side lengths\"\"\"\n\n    #Calculate the perimeter\n    perimeter = s1 + s2 + s3\n\n    #Return the perimeter\n    return perimeter</s>"
  },
  {
    "text": "<s>[INST] Calculate the average of the given two integers.\n\nInteger 1: 2\nInteger 2: 5 [/INST] The average of 2 and 5 is 3.5.</s>"
  },
  {
    "text": "<s>[INST] Provide an example of a Python class and its elements. [/INST] class Car: \n    def __init__(self, color, make, model): \n        self.color = color \n        self.make = make \n        self.model = model \n    \n    def start(self): \n        print(\"Engine started!\") \n\nford_mustang = Car('Red', 'Ford', 'Mustang') \nford_mustang.start()</s>"
  },
  {
    "text": "<s>[INST] Use regular expressions to filter words beginning with 't' from a given sentence.\n\nSentence: The quick brown fox jumps over the lazy dog. [/INST] import re\n\nsentence = \"The quick brown fox jumps over the lazy dog.\"\n\nfiltered_words = re.findall(r\"\\b[tT]\\w+\", sentence)\n\nprint(filtered_words) \n\n# Output: ['The', 'that', 'the']</s>"
  },
  {
    "text": "<s>[INST] Write a code in SQL to select the employee information from 'employee' table where the salary is greater than 2000 and is less than 3000. [/INST] SELECT * FROM employee \nWHERE salary > 2000 AND salary < 3000;</s>"
  },
  {
    "text": "<s>[INST] Construct a linked list data structure in C language. [/INST] #include <stdio.h>\n#include <stdlib.h>\n \n// Node of a linked list\nstruct Node \n{\n    int data;\n    struct Node *next;\n};\n \n// Function to create a new node\nstruct Node *newnode(int data)\n{\n    struct Node *temp = (struct Node*)malloc(sizeof(struct Node));\n    temp->data = data;\n    temp->next = NULL;\n    return temp;\n}\n\n// Function to insert a node at the beginning of the Linked List\nvoid insertAtBeginning(struct Node** head, int data) \n{\n    // Create the new node\n    struct Node* new_node = newnode(data); \n  \n    // Make the next of new node as head node\n    new_node->next = *head; \n  \n    // Move the head to point to the new node\n    *head = new_node;\n}\n\n// Function to insert a node at the end of the Linked List\nvoid append(struct Node** head, int data) \n{\n    struct Node* new_node = newnode(data);  \n  \n    // If the Linked List is empty, \n    // then make new_node as head \n    if (*head == NULL) \n    { \n        *head = new_node; \n        return; \n    } \n  \n    // Else traverse to the end of the Linked List\n    struct Node *last = *head;\n    while (last->next != NULL) \n        last = last->next; \n  \n    // Change the next of last node\n    last->next = new_node; \n    return; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a code in C to print a given integer in binary.\n\nInteger: 10 [/INST] #include <stdio.h>\n \nvoid printBinary(unsigned int num)\n{\n    if (num == 0)\n        printf(\"0\");\n    else\n    {\n        printBinary(num / 2);\n        printf(\"%d\", num % 2);\n    }\n}\n \nint main()\n{\n    int n = 10;\n \n    printf(\"The binary representation of %d is: \", n);\n    printBinary(n);\n    printf(\"\\n\");\n    return 0;\n}\n\n# Output: The binary representation of 10 is: 1010</s>"
  },
  {
    "text": "<s>[INST] Replace each character of a string with the next character in alphabetic order. [/INST] def replace_chars(s): \n    chars = list(s) \n    res = \"\" \n    for char in chars: \n        res += chr(ord(char) + 1) \n  \n    return res</s>"
  },
  {
    "text": "<s>[INST] Edit a given JSON string to set a specific value in it.\n\nJSON String:  {\n \"name\": \"John Doe\",\n \"age\": 20,\n \"address\": {\n  \"street\": \"1 Main Street\", \n  \"city\": \"New York\"\n  }\n }\nSet the age to 25. [/INST] {\n \"name\": \"John Doe\",\n \"age\": 25,\n \"address\": {\n  \"street\": \"1 Main Street\", \n  \"city\": \"New York\"\n  }\n }</s>"
  },
  {
    "text": "<s>[INST] Create a table that lists the output of the given SQL query.\n\nSELECT course_id, COUNT(*) as count\nFROM students\nGROUP BY course_id [/INST] course_id | count\n----------+------\nC1        | 10\nC2        | 5\nC3        | 3</s>"
  },
  {
    "text": "<s>[INST] Refactor the following code in C++ to incorporate dynamic memory allocation.\n\n#include <stdio.h>\nint main() \n{ \n    int a[20]; \n    int n = 20;\n    for (int i=0; i<n; i++) \n        scanf(\"%d\", &a[i]); \n    return 0;\n} [/INST] #include <stdio.h>\n#include <stdlib.h>\nint main() \n{\n    int* a;\n    int n = 20;\n    a = (int *)malloc(n * sizeof(int)); \n    for (int i=0; i<n; i++) \n        scanf(\"%d\", &a[i]); \n    free(a); \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Edit the following JSON to add a new key.\n\n{\n \"name\" : \"Bob\", \n \"age\" : 32\n} [/INST] {\n \"name\" : \"Bob\", \n \"age\" : 32,\n \"profession\" : \"dentist\"\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a text input box, a submit button and a table to display the results. [/INST] <html>\n    <head>\n        <title>Inputs</title>\n    </head>\n    <body>\n        <form>\n            <input type=\"text\" id=\"inputText\">\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n        <table>\n            <thead>\n                <tr>\n                    <th>Input Text</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td id=\"displayValue\"></td>\n                </tr> \n            </tbody>\n        </table>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to extract the words from a given sentence that contains a specific letter.\n\nSentence: The quick brown fox jumps over the lazy dog\nLetter: o [/INST] function extractWordsWithLetter(sentence, letter) {\n    let words = sentence.split(' ');\n    let result = [];\n    words.forEach(word => {\n        if (word.includes(letter)) {\n            result.push(word);\n        }\n    }); \n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C# class that stores student information such as name, age, and classes. [/INST] public class Student \n{ \n    public string name; \n    public int age; \n    public string[] classes; \n\n    public Student(string name, int age, string[] classes) \n    { \n        this.name = name; \n        this.age = age; \n        this.classes = classes; \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of items and calculate the average of the items.\n\n[1, 5, 9, 8, 2] [/INST] const input = [1, 5, 9, 8, 2];\n\nconst average = input.reduce((sum, item) => sum + item) / input.length;\n\nconsole.log(average); // 5</s>"
  },
  {
    "text": "<s>[INST] Update the code so that it prints out the first ten multiples of 5.\n\nfor (i=1; i<5; i++) {\n  console.log(i * 2);\n} [/INST] for (i=1; i<11; i++) {\n  console.log(i * 5);\n}</s>"
  },
  {
    "text": "<s>[INST] Create a class named 'Shape' which has a method 'getArea' which returns the area of the shape. [/INST] class Shape {\n  constructor() {\n  }\n\n  getArea() {\n    return 0;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of length 7 and set the values to the first 7 letters of the alphabet. [/INST] const array = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];</s>"
  },
  {
    "text": "<s>[INST] Answer the following question: what language is HTML typically written in? [/INST] HTML is typically written in a markup language such as XML or XHTML.</s>"
  },
  {
    "text": "<s>[INST] Improve the function below to make it more efficient\n\ndef swap_case(x):\n y = \"\"\n for i in x:\n  if i.isupper():\n   y += i.lower()\n  else:\n   y += i.upper()\n return y [/INST] def swap_case(x):\n    return x.swapcase()</s>"
  },
  {
    "text": "<s>[INST] Generate code to remove duplicate characters from a string.\n\nstring = \"google\" [/INST] def remove_duplicates(string):\n    res = \"\" \n    for i in string: \n        if i not in res: \n            res = res + i\n    return res</s>"
  },
  {
    "text": "<s>[INST] Give an example of the binary search algorithm [/INST] def binary_search(arr, target): \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n  \n        mid = (low+high) // 2\n  \n        # Check if target is present at mid \n        if arr[mid] == target: \n            return mid \n  \n        # If target is greater than mid, ignore left half \n        elif arr[mid] < target: \n            low = mid + 1\n  \n        # If target is smaller than mid, ignore right half \n        else: \n            high = mid - 1\n  \n    # If we reach here, then the element was not present \n    return -1</s>"
  },
  {
    "text": "<s>[INST] Generate a program that finds the sum of all natural numbers from 0 to n [/INST] def find_sum(n): \n    sum = 0\n    for i in range(n+1): \n        sum += i \n    return sum</s>"
  },
  {
    "text": "<s>[INST] Change the response to now fulfill the following purpose\n\nFind the number of ones in a binary number 101011 [/INST] def find_ones(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n        n //= 10        \n    return count</s>"
  },
  {
    "text": "<s>[INST] Generate a Java program to sort an array of n elements in ascending order [/INST] public static void sort(int arr[]) \n{ \n    int n = arr.length; \n  \n    // Build heap (rearrange array) \n    for (int i = n / 2 - 1; i >= 0; i--) \n        heapify(arr, n, i); \n  \n    // One by one extract an element from heap \n    for (int i=n-1; i>=0; i--) \n    { \n        // Move current root to end \n        int temp = arr[0]; \n        arr[0] = arr[i]; \n        arr[i] = temp; \n  \n        // call max heapify on the reduced heap \n        heapify(arr, i, 0); \n    } \n} \n  \n// To heapify a subtree rooted with node i which is \n// an index in arr[]. n is size of heap \nstatic void heapify(int arr[], int n, int i) \n{ \n    int largest = i; // Initialize largest as root \n    int l = 2*i + 1; // left = 2*i + 1 \n    int r = 2*i + 2; // right = 2*i + 2 \n  \n    // If left child is larger than root \n    if (l < n && arr[l] > arr[largest]) \n        largest = l; \n  \n    // If right child is larger than largest so far \n    if (r < n && arr[r] > arr[largest]) \n        largest = r; \n  \n    // If largest is not root \n    if (largest != i) \n    { \n        int swap = arr[i]; \n        arr[i] = arr[largest]; \n        arr[largest] = swap; \n  \n        // Recursively heapify the affected sub-tree \n        heapify(arr, n, largest); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Generate a SQL query to select all distinct numbers from a column named 'nums' [/INST] SELECT DISTINCT nums FROM table;</s>"
  },
  {
    "text": "<s>[INST] Generate a SQL query to update existing row in a table\n\nTable = employee\nSet salary = 5000 where id = 2 [/INST] UPDATE employee \nSET salary = 5000 \nWHERE id = 2;</s>"
  },
  {
    "text": "<s>[INST] Modify the code provided so it prints the first 10 prime numbers.\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True [/INST] def is_prime(n): \n    if n == 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n\ndef print_primes():\n    count = 0\n    number = 2\n    while(count != 10):\n        if is_prime(number):\n            print(number)\n            count += 1\n        number += 1\n\nprint_primes()</s>"
  },
  {
    "text": "<s>[INST] Design a function that takes in an integer and prints the multiplication table till that input number. [/INST] def print_multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i*j, end=\" \")\n        print()\n\nprint_multiplication_table(n)</s>"
  },
  {
    "text": "<s>[INST] Create a program that reads a sentence, replaces all spaces with hyphens, and prints the modified sentence.\n\nsentence = \"This is a sentence\" [/INST] def replace_space_with_hyphen(sentence):\n   return sentence.replace(\" \", \"-\")\n\nprint(replace_space_with_hyphen(sentence))</s>"
  },
  {
    "text": "<s>[INST] Design a function to take a string input and reverse the order of its words.\n\nstring = \"This is a sentence\" [/INST] def reverse_words_order(string):\n    words = string.split(' ')\n    words_reversed = words[::-1]\n    return ' '.join(words_reversed)\n\nprint(reverse_words_order(string))</s>"
  },
  {
    "text": "<s>[INST] Create a program to solve a math equation given in a string.\n\nequation = \"6 + 3*2\" [/INST] def solve_math_equation(equation):\n    return eval(equation)\n\nprint(solve_math_equation(equation))</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to select all customers who have purchased items from a specific store in the last seven days.\n\nstore_id = 12345 [/INST] SELECT * FROM Customers\nWHERE store_id = 12345\nAND purchases_date > DATE_SUB(CURDATE(), INTERVAL 7 DAY)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to calculate the sum of all prices of items purchased by customers. [/INST] SELECT SUM(price) FROM Purchases;</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page to display a heading, a table and a button.\n\nheadline = “List of Products”\ntable_headers = [“Name”, “Price”, “Quantity”] [/INST] <!DOCTYPE html>\n<html>\n   <head>\n       <title>My Webpage</title>\n   </head>\n   <body>\n       <h1>List of Products</h1>\n   \n       <table>\n           <thead>\n               <tr>\n                   <th>Name</th>\n                   <th>Price</th>\n                   <th>Quantity</th>\n               </tr>\n           </thead>\n           <tbody>\n               <!-- Table Data Here -->\n           </tbody>\n       </table>\n       \n       <button>Submit</button>\n   </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a C++ program to insert an element into a given vector. [/INST] #include <iostream>\n#include <vector>\n \nvoid InsertElement(std::vector<int> &vec, int element, int index)\n{\n    vec.insert(vec.begin() + index, element);\n \n    // Print vector after inserting element\n    std::cout << \"Vector elements after insertion: \";\n    for (int i = 0; i < vec.size(); ++i)\n       std::cout << vec[i] << \" \";\n    std::cout << std::endl;\n}\n \nint main()\n{\n    // Initialize vector\n    std::vector<int> vec = {1, 2, 3, 4};\n \n    // Print vector before inserting element\n    std::cout << \"Vector elements before insertion: \";\n    for (int i = 0; i < vec.size(); ++i)\n        std::cout << vec[i] << \" \";\n    std::cout << std::endl;\n \n    // Insert element\n    int element = 5;\n    int index = 3;\n    InsertElement(vec, element, index);\n \n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program to count the number of trailing 0s in a given number. [/INST] #include <iostream>\n \nint trailing_zeroes(int n)\n{\n    int cnt = 0;\n    while (n > 0)\n    {\n        if (n % 10 == 0)\n            cnt++;\n        else\n            break;\n        n /=  10;\n    }\n    return cnt;\n}\n \n// Driver code\nint main()\n{\n    int num = 102450;\n    std::cout << trailing_zeroes(num);\n    return 0;\n}\n\n// Output : 2</s>"
  },
  {
    "text": "<s>[INST] Using Java, create a program that takes a list of strings, and returns the longest one.\n\nstrings = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"] [/INST] public static String getLongestString(String[] strings) {\n    int maxLength = 0;\n    String longestString = null;\n    for (String s: strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n            longestString = s;\n        }\n    }\n    return longestString;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a function which will take two strings as input and reverse their order while maintaining the same character at each index.\n\ns1 = \"hello\"\ns2 = \"world\" [/INST] def reverse_string_order(s1, s2):\n    result = \"\"\n    for i in range(len(s1)):\n        result += s2[i] + s1[i]\n    return result</s>"
  },
  {
    "text": "<s>[INST] Find the bug in the following C++ program and suggest a fix.\n\n#include <iostream>\nusing namespace std;\n\nint main() \n{\n    int a = 3;\n    int b = 4;\n    if(a < b)\n     return 0;\n    else\n     return 1;\n} [/INST] #include <iostream>\nusing namespace std;\n\nint main() \n{\n    int a = 3;\n    int b = 4;\n    if(a < b)\n     return 0;\n    else\n     return 1;\n}\n\n// fix: making it an if-else statement instead of using the return statements\nif (a < b)\n{\n    return 0;\n}\nelse \n{\n    return 1;\n}</s>"
  },
  {
    "text": "<s>[INST] Train a model to classify text into two categories, positive and negative. [/INST] import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# tokenize text\ndef tokenize(text):\n    tokens = nltk.word_tokenize(text)\n    return tokens\n\n# build a Bag of Words model\ncountVec = CountVectorizer(tokenizer=tokenize)\n\n# load training data\ntrainData, trainLabels = loadTrainingData()\n\n# Learn a vocabulary dictionary\ncountVec.fit(trainData)\n\n# transform training data into a document-term matrix\nX_train = countVec.transform(trainData)\n\n# split data into training and validation sets\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, trainLabels, test_size = 0.2, random_state = 0)\n\n# train a Multinomial Naive Bayes classifier \nclf = MultinomialNB().fit(X_train, y_train)\n\n# predict sentiment on validation data\npredicted = clf.predict(X_valid)</s>"
  },
  {
    "text": "<s>[INST] Suggest the best way to store the following data structure in a MySQL database.\n\n[\n    {\n        \"id\": 25,\n        \"questions\": [\n            {\n                \"question_id\": 39,\n                \"question\": \"What is the capital of India?\"\n            }\n        ]\n    }\n] [/INST] The best way to store the above data in a MySQL database is to create three tables: \n\n1. A \"Questions\" table with the following fields: \n\t- id (Primary key)\n\t- question\n  \n2. An \"Answers\" table with the following fields:\n\t- id (Primary key)\n\t- question_id (Foreign key to the \"Questions\" table)\n  \n3. Allocations table with the following fields:\n\t- id (Primary key)\n\t- answer_id (Foreign key to the \"Answers\" table)\n\t- questions_id (Foreign key to the \"Questions\" table)\n\t\nThe \"Questions\" and \"Answers\" table should be related to each other by the \"question_id\" field. And the \"Questions\" and \"Answers\" table should be related to the \"Allocations\" table by the \"question_id\" and \"answer_id\" fields respectively.</s>"
  },
  {
    "text": "<s>[INST] Use Django to create a basic website for a restaurant. [/INST] We can use Django to create a basic website for a restaurant by following the steps below: \n\n1. Design a template for the website using HTML and CSS\n2. Create a Django project with the basic layout as given by the template\n3. Create views that will be used to render different pages (eg. home page, menu page, contact page, etc.)\n4. Create models in the Django project which will store information related to the restaurant, such as menu items, pricing, opening times, etc.\n5. Create URLs for each of the views\n6. Add the necessary code to link the models and views together\n7. Create a form for customers to submit their queries\n8. Add necessary functionality to the website, such as a search feature and ordering system</s>"
  },
  {
    "text": "<s>[INST] Using Java, build a program that will convert a given number from one base to another. [/INST] public static int convertBase(int num, int fromBase, int toBase) {\n    int result = 0;\n    int power = 1;\n    \n    while (num > 0) {\n        result += (num % toBase) * power;\n        power *= fromBase;\n        num /= toBase;\n    }\n    \n    return result;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a program in JavaScript that will take a list of numbers and return the first index of the highest value.\n\nlist = [1, 2, 5, 4, 4] [/INST] function findIndexOfHighestValue(list){\n\tlet highest = list[0];\n\tlet highestIndex = 0;\n    for (let i=0; i<list.length; i++){\n        if (list[i] > highest){\n            highest = list[i];\n            highestIndex = i;\n        }\n    }\n    return highestIndex;\n}</s>"
  },
  {
    "text": "<s>[INST] Use Node.js to create a program which will take an array of strings and remove any duplicate values. [/INST] function dedupeArray(arr){\n    let uniqueArray = [];\n    arr.forEach(item => {\n        if(uniqueArray.indexOf(item) === -1){\n            uniqueArray.push(item);\n        }\n    });\n    return uniqueArray;\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest an algorithm in Python that will detect an anomaly in time-series data. [/INST] We can use Gaussian Mixture Models to detect anomalies in time-series data. This method takes the time-series data as input and trains a model using the data. The model defines a probability distribution for the time-series data, and the anomalies are detected as those data points which have a low probability of occurring according to the distribution.</s>"
  },
  {
    "text": "<s>[INST] Create a program in Go that will take an array of integers and return the smallest number. [/INST] func min(numbers []int) int {\n\tmin := numbers[0]\n\tfor _, number := range numbers {\n\t\tif min > number {\n\t\t\tmin = number\n\t\t}\n\t}\n\treturn min \n}</s>"
  },
  {
    "text": "<s>[INST] Given a URL string, create a JavaScript function to extract the domain name.\n\nhttps://www.example.com [/INST] /**\n * Function to extract the domain name from a given URL string\n * @param {string} url - The URL\n * @return {string} The domain name\n */\nfunction extractDomain(url) {\n    var a = document.createElement('a');\n    a.href = url;\n    // Deconstruct the URL to get the domain\n    return a.hostname;\n}\n\nconst domain = extractDomain('https://www.example.com');\nconsole.log(domain); //outputs \"example.com\"</s>"
  },
  {
    "text": "<s>[INST] Why is using the+= operator more efficient than using a+=b on strings in Java? [/INST] Using the += operator is more efficient on strings than using a+=b in Java because += operator creates only one string object in memory, whereas a+=b creates a new string every time and requires two string objects. This means that using += operator for strings is faster and uses less memory than using a+=b. This is because if we use a+=b then the expression is evaluated as a = new String(a+b). On the other hand when we use +=, then the expression is evaluated as a = a + b.</s>"
  },
  {
    "text": "<s>[INST] Create a Java class called Student that contains a first name, last name and age. [/INST] public class Student {\n    private String firstName;\n    private String lastName;\n    private int age;\n      \n    public Student(String firstName, String lastName, int age) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n    }\n   \n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        if(age<0) {\n            throw new IllegalArgumentException(\"age must be >= 0\");\n        }\n        this.age = age;\n\t}\n}</s>"
  },
  {
    "text": "<s>[INST] Explain how to use Binary Search in Python? [/INST] Binary search is an efficient search algorithm for sorted arrays. In Python, the bisect module can be used for binary search. The bisect.bisect() function finds the position of the number in the list or a place for the number if it is not present. The bisect.bisect_left() function does the same, but carefully chooses its insertion point to the left of any existing entries of the same value.\n\nFor example, to search for an element in a list, one can use the following code:\n\nimport bisect\n\ndef binary_search(list, item):\n    pos = bisect.bisect_left(list, item)\n    if pos != len(list) and list[pos] == item:\n        return pos\n    else:\n        return -1\n\nlist = [1, 2, 4, 7, 8]\nprint(binary_search(list, 2))  # Outputs 1</s>"
  },
  {
    "text": "<s>[INST] How to check if a given number is an Armstrong number in Python? [/INST] #Function to check if a number is an Armstrong number\ndef isArmstrong(number):\n   sum  = 0\n   temp = number\n\n   while temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n \n   if number == sum:\n       return True\n   else:\n       return False\n   \n#Usage\nnumber = 9\nif(isArmstrong(number)):\n    print(f\"{number} is an Armstrong number\")\nelse:\n    print(f\"{number} is not an Armstrong number\")</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query that retrieves the first 20 rows from a table. [/INST] SELECT * FROM table_name LIMIT 20;</s>"
  },
  {
    "text": "<s>[INST] Parse the following text and remove all non-alphanumeric characters\n\nHello$#@, this is a te*x&t [/INST] text = 'Hello, this is a text'\nout_text = re.sub('[^a-zA-Z0-9]', '', text)\nprint(out_text)</s>"
  },
  {
    "text": "<s>[INST] Select the Python data types which can store a sequence of items. [/INST] Sequence data types in Python include lists, tuples and range objects.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all records from the table 'products' with a price equal to 10. [/INST] SELECT * FROM products WHERE price = 10;</s>"
  },
  {
    "text": "<s>[INST] Construct a python code to print the following text in reverse.\n\nHello World [/INST] text = 'Hello World'\nprint(text[::-1])</s>"
  },
  {
    "text": "<s>[INST] Count the number of parameters for the given function.\n\ndef add_names(name1, name2, name3, name4, name5):\n    names = [name1, name2, name3, name4, name5] \n    return names [/INST] 5 parameters.</s>"
  },
  {
    "text": "<s>[INST] Create a program that prints the greatest common divisor between two numbers.\n\nnum1 = 99\nnum2 = 77 [/INST] def gcd(num1, num2): \n      \n    if(num2 == 0): \n        return num1 \n    else: \n        return gcd(num2, num1 % num2) \n  \n# Driver code \nnum1 = 99\nnum2 = 77\nprint (\"The GCD of\", num1, \"and\", num2, \"is\", gcd(num1, num2))</s>"
  },
  {
    "text": "<s>[INST] Change the given array to a singly linked list without using a loop.\n\narray = [1, 2, 3, 4, 5] [/INST] class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \ndef convertToLinkedList(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\n# Driver code\narray = [1, 2, 3, 4, 5]\nhead = convertToLinkedList(array) \nwhile head != None: \n    print(head.data) \n    head = head.next</s>"
  },
  {
    "text": "<s>[INST] Generate a code to reverse a string without using any loop.\n\nInput String = \"Hello World!\" [/INST] input_string = 'Hello World!'\n\ndef reverse_string(input_string):\n    if len(input_string) == 0:\n        return \"\" \n    else:\n        return reverse_string(input_string[1:]) + input_string[0] \n \nres = reverse_string(input_string) \nprint(res)</s>"
  },
  {
    "text": "<s>[INST] Write a function that returns the length of the longest common substring between two strings.\n\ns1 = 'abcde'\ns2 = 'abfghe' [/INST] def longest_common_substring(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\n# Driver code \ns1 = 'abcde'\ns2 = 'abfghe'\nprint(\"Length of Longest Common Substring is: \", longest_common_substring(s1, s2))</s>"
  },
  {
    "text": "<s>[INST] Evaluate the following expression and report the result\n\n3 * (4 + 2) / 5 [/INST] 5.2</s>"
  },
  {
    "text": "<s>[INST] Output true if the given string contains the word \"Hello\", otherwise output false.\n\n\"Hello world!\" [/INST] true</s>"
  },
  {
    "text": "<s>[INST] Print out the product of all the even numbers between 0 and 10 [/INST] 384</s>"
  },
  {
    "text": "<s>[INST] Output the Fibonacci sequence up to 50 [/INST] 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55</s>"
  },
  {
    "text": "<s>[INST] Complete the following function to output a reversed string [/INST] def reverse(s):\n    rev = \"\"\n \n    i = len(s)\n    while i > 0:\n        rev += s[ i - 1 ]\n        i = i - 1\n \n    return rev</s>"
  },
  {
    "text": "<s>[INST] Write a JSON script that keeps track of the number of times a user has visited a website. [/INST] {\n    \"user1\": {\n        \"visit_count\": 0\n    },\n    \"user2\": {\n        \"visit_count\": 0\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Given an integer n, write a program to print out the prime numbers up to n. [/INST] def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\ndef find_prime_numbers(n):\n primes = []\n for i in range(2, n + 1):\n if is_prime(i):\n primes.append(i)\n return primes</s>"
  },
  {
    "text": "<s>[INST] Given a 2D array of characters, replace each '0' entry with 'x'.\n\n[\n ['1', '0', '1'],\n ['0', '1', '0'],\n ['1', '0', '1'],\n] [/INST] [\n ['1', 'x', '1'],\n ['x', '1', 'x'],\n ['1', 'x', '1'],\n]</s>"
  },
  {
    "text": "<s>[INST] Create a function in SQL to find the maximum salary of an employee. [/INST] CREATE FUNCTION getMaxSalary() \nRETURNS int \nBEGIN \n  DECLARE @maxSalary int;\n  SELECT @maxSalary = MAX(salary) FROM employees; \n  RETURN @maxSalary; \nEND</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to convert it from JavaScript to Java.\n\nfunction getAverage(a, b) {\n  return (a + b) / 2;\n} [/INST] public float getAverage(float a, float b) {\n  return (a + b) / 2;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a PHP script to return whether a given number is divisible by 7 [/INST] <?php\n\nfunction isDivisibleBy7($num)\n{\n    return ($num % 7 == 0);\n}\n?></s>"
  },
  {
    "text": "<s>[INST] Create a Java class which sorts the given array of numbers.\n\n[9, 2, 4, 3, 6, 1] [/INST] class ArraySort { \n  \n    void sort(int arr[]) { \n        int n = arr.length; \n  \n        // One by one move boundary of unsorted subarray \n        for (int i = 0; i < n-1; i++) { \n            \n            // Find the minimum element in unsorted array \n            int min_index = i; \n            for (int j = i+1; j < n; j++) \n                if (arr[j] < arr[min_index]) \n                    min_index = j; \n  \n            // Swap the found minimum element with the first element \n            int temp = arr[min_index]; \n            arr[min_index] = arr[i]; \n            arr[i] = temp; \n        } \n    } \n  \n    // Prints the array \n    void printArray(int arr[]) { \n        int n = arr.length; \n        for (int i=0; i<n; ++i) \n            System.out.print(arr[i] + \" \"); \n        System.out.println(); \n    } \n  \n    // Driver code to test above \n    public static void main(String args[]) \n    { \n        ArraySort ob = new ArraySort(); \n        int arr[] = {9, 2, 4, 3, 6, 1}; \n        ob.sort(arr); \n        System.out.println(\"Sorted array\"); \n        ob.printArray(arr); \n    } \n}</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to sum two numbers. [/INST] function addNumbers(a, b) {\n  return a + b;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page which displays Hello World in the center of the page. [/INST] <!DOCTYPE html>\n<html>\n<head>\n  <title>Hello World</title>\n  <style>\n    body {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      margin: 0;\n    }\n  </style>\n</head>\n<body>\n  <h1>Hello World</h1>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Turn the following sentence into an imperative sentence.\n\nLet's print \"Hello World\" [/INST] Print \"Hello World\".</s>"
  },
  {
    "text": "<s>[INST] Compose a program to reverse a list of numbers [/INST] def reverse_nums(num_list):\n    n = len(num_list)\n    for i in range(n//2):\n        num_list[i], num_list[n-i-1] = num_list[n-i-1], num_list[i]\n    return num_list</s>"
  },
  {
    "text": "<s>[INST] Modify the given code to ensure that the input is a number\n\nnum = input(\"Enter a number: \") [/INST] num = input(\"Enter a number: \")\ntry:\n    num = int(num)\nexcept ValueError:\n    print(\"Input must be a number\")</s>"
  },
  {
    "text": "<s>[INST] Program a function to remove all the even numbers from an array [/INST] def remove_even(arr):\n    new_arr = []\n    for num in arr:\n        if num % 2 != 0:\n            new_arr.append(num)\n    return new_arr</s>"
  },
  {
    "text": "<s>[INST] Modify the code for the given purpose\n\nstring = input(\"Enter a string: \") [/INST] string = input(\"Enter a string: \")\nif not string.isalpha():\n    print(\"Input must contain only letters\")</s>"
  },
  {
    "text": "<s>[INST] Rewrite the program to get the same output\n\ndef find_sum(x):\n   sum = 0\n   for i in range(1,x):\n      if i % 3 == 0 or i % 5 == 0:\n        sum += i\n   return sum [/INST] def find_sum(x):\n    sum = 0\n    for i in range(1, x):\n        if i % 3 == 0:\n            sum += i\n        elif i % 5 == 0:\n            sum += i\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Create a program to determine if a number is divisible by another number [/INST] def is_divisible(n, m):\n    if n % m == 0:\n        return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Modify the given code to set the third parameter to 0\n\ndef foo(x, y, z):\n    print(x, y, z) [/INST] def foo(x, y, z = 0):\n    print(x, y, z)</s>"
  },
  {
    "text": "<s>[INST] Write a code to encode a given body of text into base64\n\ntext=\"Hello World\" [/INST] import base64\ndef encode_base64(text):\n return base64.b64encode(text.encode()).decode()</s>"
  },
  {
    "text": "<s>[INST] Write a code to determine if a given list contains a particular element\n\nnums=[1,2,3,4] [/INST] def contains(nums, element):\n return element in nums</s>"
  },
  {
    "text": "<s>[INST] Write a code to decrypt a given cipher text using the Caesar cipher\n\ncipher_text=\"dfwlrq\" [/INST] def decrypt_caesar_cipher(cipher_text):\n alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n output=\"\"\n for char in cipher_text:\n   i=(alphabet.index(char)-3)%26\n   output+=alphabet[i]\n return output</s>"
  },
  {
    "text": "<s>[INST] Write an HTML tag for a blockquote. [/INST] <blockquote> </blockquote></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that takes an array and counts the occurence of each element in the array.\n\n[1, 4, 2, 4, 1] [/INST] function countOccurences(arr){\n    let count = {};\n    arr.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that contains two textboxes. The first textbox is for the user to type in their name and the second textbox is for the user to type in their age. [/INST] <html>\n    <head>\n        <title>Text Boxes</title>\n    </head>\n    <body>\n        <form>\n            Name: <input type=\"text\" name=\"name\" />\n            <br><br>\n            Age: <input type=\"text\" name=\"age\" />\n            <br><br>\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Analyze the code below and suggest three ways to address the memory leak issue.\n\nimport os\n\ndef function():\n message = \"\"\n while True:\n message += \"a\" * 1024 [/INST] 1. Explicitly deallocate any unnecessary memory by using `del`: \n`del message`\n\n2. Close any open files or resources by using the `with` block for better resource management: \n```\nwith open(\"file_name\",\"w\") as f:\n    # process the file\n```\n\n3. Avoid using dynamic memory allocation where possible. You could use a fixed-sized string instead of a dynamically-allocated one. For example, you could use a `char` array:\n`char message[1500000]`</s>"
  },
  {
    "text": "<s>[INST] Output the below tree structure in Python. [/INST] print('  *  ')\nprint(' *** ')\nprint('*****')</s>"
  },
  {
    "text": "<s>[INST] Identify the correct data type for the value \"37.45\". [/INST] float</s>"
  },
  {
    "text": "<s>[INST] Create a function in C++ to print the Fibonacci numbers between 0 and 50. [/INST] #include <iostream>\nvoid print_fibonacci(int n) {\n int first = 0, second = 1, next;\n while (first <= n) \n {\n std::cout << first << \" \"; \n next = first + second; \n first = second; \n second = next; \n } \n}\n\nint main () {\n int n = 50;\n print_fibonacci(n); \n return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Explain how the Naive Bayes classifier works. [/INST] The Naive Bayes classifier is a probabilistic learning model that is based on the Bayes' theorem. It is a supervised learning algorithm that uses prior probabilities and uses it to observe the relationship between the dependent variable and the independent variable. This algorithm assumes that the different features are independent of each other, which is known as the \"naive\" assumption. It then computes the posterior probabilities of the target variable given the feature inputs, which is then used to classify the observation into one of the classes.</s>"
  },
  {
    "text": "<s>[INST] Write a function that sorts an array of strings in ascending order based on the number of distinct characters in each string. [/INST] def sort_by_distinct_characters(strings):\n    strings.sort(key=lambda x: len(set(list(x))))\n    return strings</s>"
  },
  {
    "text": "<s>[INST] Take an array of integers and return true if there is a triplet whose sum is equals to the given target.\n\narr = [1, 4, 45, 6, 10, -8], target = 16 [/INST] def find_triplet_sum(arr, target):\n    arr.sort()\n    for i in range(0, len(arr)-2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n\n            if curr_sum == target:\n                return True \n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False</s>"
  },
  {
    "text": "<s>[INST] Compile a function that checks if a number is prime. Output true if prime, false if not. [/INST] def is_prime(num):\n    # form 2 to num-1\n    for i in range(2, num):\n        # percentage to check, output False if divisible by any number\n        if num % i == 0:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Take an array of strings and return a new array containing only the strings with the longest length. [/INST] def longest_strings(str_arr):\n    longest = 0\n    strings = []\n    for string in str_arr:\n        if len(string) > longest:\n            strings = [string]\n            longest = len(string)\n        elif len(string) == longest:\n            strings.append(string)\n    return strings</s>"
  },
  {
    "text": "<s>[INST] Output the longest consecutive character string in a given string. [/INST] def longest_consecutive_str(s):\n    longest_str = \"\"\n    cur_str = \"\"\n\n    for char in s:\n        if not cur_str or char == cur_str[-1]:\n            cur_str += char\n        else:\n            if len(cur_str) > len(longest_str):\n                longest_str = cur_str\n            cur_str = char\n\n    if len(cur_str) > len(longest_str):\n            longest_str = cur_str\n\n    return longest_str</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a matrix (MxN array) and returns the transposed matrix. [/INST] def transpose(matrix):\n    tr_matrix = [[None for i in range(len(matrix))] for j in range(len(matrix[0]))]\n    for i, row in enumerate(matrix):\n        for j, col in enumerate(row):\n            tr_matrix[j][i] = col\n    return tr_matrix</s>"
  },
  {
    "text": "<s>[INST] Take an array of strings and a character and return an array containing only the strings containing the given character. [/INST] def filter_by_character(str_arr, char):\n    filtered_arr = []\n    for string in str_arr:\n        if char in string:\n            filtered_arr.append(string)\n    return filtered_arr</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query to read the contents of a table called \"users\". [/INST] SELECT * FROM users;</s>"
  },
  {
    "text": "<s>[INST] Create a web page with a login form that has 2 input fields. [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>My Login Page</title>\n</head>\n<body>\n  <form action=\"/login\" method=\"post\">\n    <label for=\"username\">Username:</label><br>\n    <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\"><br>\n    <label for=\"password\">Password:</label><br>\n    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Using Numpy, create an array of size 10 and fill it with random integer numbers between 0 and 9. [/INST] import numpy as np\n\narr = np.random.randint(low=0, high=10, size=10)</s>"
  },
  {
    "text": "<s>[INST] Scrape the results of a web page and extract all the names and emails. [/INST] import requests\n\nr = requests.get('http://www.example.com/page')\n\nif r.status_code == 200:\n    data = r.text\n    names = re.findall(r'<span class=\"name\">(.*?)</span>', data)\n    emails = re.findall(r'<span class=\"email\">(.*?)</span>', data)</s>"
  },
  {
    "text": "<s>[INST] Implement a sorting algorithm which takes an array of integers as input and sorts it in ascending order.\n\n[34, 19, 42, -9, 2018, 0, 105] [/INST] def sorting_algorithm(arr):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n# Test\narr = [34, 19, 42, -9, 2018, 0, 105]\nprint(sorting_algorithm(arr)) # [-9, 0, 19, 34, 42, 105, 2018]</s>"
  },
  {
    "text": "<s>[INST] Create a class called \"Computer\" with two attributes \"name\" and \"model\" and two methods \"get_name\" and \"get_model\". [/INST] class Computer:\n    def __init__(self, name, model):\n        self.name = name\n        self.model = model\n    \n    def get_name(self):\n        return self.name\n    \n    def get_model(self):\n        return self.model</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary of all the capital cities of Europe as key-value pairs. [/INST] europe_capitals = {\n  'France': 'Paris',\n  'Germany': 'Berlin',\n  'Russia': 'Moscow',\n  'Greece': 'Athens',\n  'Norway': 'Oslo',\n  'Denmark': 'Copenhagen',\n  'Italy': 'Rome',\n  'Poland': 'Warsaw',\n  'Spain': 'Madrid',\n  'Sweden': 'Stockholm'\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a 10 character random user password with at least one Upper Case letter, one lower case letter, one number, and one special character. [/INST] import random\nimport string\n\ndef generate_password(length):\n    char_types = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation)\n    password = []\n    for _ in range(length):\n        ch = random.choice(char_types)\n        while ch in password:\n            ch = random.choice(char_types)\n        password.append(ch)\n \n    return ''.join(password)\n\npassword = generate_password(10)\nprint(password) # e.W8.vHc2e</s>"
  },
  {
    "text": "<s>[INST] Generate a 4 by 4 multiplication table. [/INST] for i in range(1, 5):\n    for j in range(1, 5):\n        print(i*j, end=\"\\t\")\n    print()\n\n# Output\n1\t2\t3\t4\t\n2\t4\t6\t8\t\n3\t6\t9\t12\t\n4\t8\t12\t16</s>"
  },
  {
    "text": "<s>[INST] Design a web page with a top navigation bar and 2 different color sidebars. [/INST] <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>My Web Page</title>\n  \n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n    }\n\n    .top-nav {\n      position: fixed;\n      background-color: #222;\n      left: 0;\n      top: 0;\n      width: 100%;\n      text-align: center;\n    }\n\n    .sidebar-left {\n      float: left;\n      width: 25%;\n      height: 100%;\n      background-color: #f1f1f1;\n    }\n\n    .sidebar-right {\n      float: right;\n      width: 25%;\n      height: 100%;\n      background-color: #ccc;\n    }\n\n    .main {\n      margin-left: 25%;\n      margin-right: 25%;\n    }\n  </style>\n</head>\n<body>\n  <nav class=\"top-nav\">\n    <ul>\n      <li>{Your navigation items here}</li>\n    </ul>\n  </nav>\n  <div class=\"sidebar-left\"></div>\n  <div class=\"main\">\n    {Your main content here}\n  </div>\n  <div class=\"sidebar-right\"></div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Given a target number, find two numbers in the list whose sum is equal to the target number.\n\nlist = [2, 7, 11, 15], target = 9 [/INST] list = [2, 7, 11, 15]\ntarget = 9\n\nfor i in range(0, len(list) - 1):\n    for j in range(i + 1, len(list)):\n        if list[i] + list[j] == target:\n            print('The two numbers in the list whose sum is equal to the target number are %d and %d' %(list[i], list[j]))</s>"
  },
  {
    "text": "<s>[INST] Given an array of numbers, find the maximum product of any three numbers in the array.\n\narr = [2, 5, 6, 9, -2, -7, -1] [/INST] arr = [2, 5, 6, 9, -2, -7, -1]\n\n# create an empty list to store the products of all triplets\ntriplets = []\n\n# loop through the array\nfor i in range(len(arr)):\n    for j in range(i+1,len(arr)):\n        for k in range(j+1,len(arr)):\n            # calculate and append the product of each triplet to the list\n            triplets.append(arr[i]*arr[j]*arr[k])\n\n# get the maximum product from the list\nmax_product = max(triplets)\n\nprint(\"The maximum product of any three numbers in the array is:\", max_product)</s>"
  },
  {
    "text": "<s>[INST] Extract a character's count from a given string.\n\nstring = \"this is a sample string\" [/INST] def count_characters(string):\n    '''This function takes a string as argument and returns a dictionary\n       that contains the count of characters in the given string.''' \n    # create an empty dictionary\n    char_count = {}\n    # iterate over the characters and add to dictionary if not already present\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            # Increment the count if already present\n            char_count[char] += 1 \n    return char_count</s>"
  },
  {
    "text": "<s>[INST] Concatenate two given strings and return the result.\n\nstring1 = \"Hello \", string2 = \"World\" [/INST] string1 = \"Hello \"\nstring2 = \"World\"\n\n# use '+' operator for string concatenation\nresult_string = string1 + string2 \n\nprint(\"The concatenated string is:\", result_string)</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, find the longest subarray with total sum less than the given sum.\n\narr = [1, -2, 2, 4, 3], sum = 3 [/INST] arr = [1, -2, 2, 4, 3]\nsum = 3\n\n# create an empty list to store the longest subarray\nlongest = []\n\n# loop through the array\nfor i in range(len(arr)):\n    # set the sum of current subarray to 0 \n    curr_sum = 0\n    # another loop to check if any subarray of the array\n    # has a sum less than the given sum\n    for j in range(i, len(arr)):\n        curr_sum += arr[j]\n        # if any subarray is found update the longest list\n        if curr_sum < sum:\n            longest = arr[i: j + 1]\n\nprint(\"The longest subarray with total sum less than the given sum is:\", longest)</s>"
  },
  {
    "text": "<s>[INST] Sort a given array in ascending order based on the second element of each array element pair.\n\narr = [(3, 5), (4, 1), (1, 4), (2, 2)] [/INST] arr = [(3, 5), (4, 1), (1, 4), (2, 2)]\n\n# sort the array based on the second element in each pair\narr.sort(key=lambda x: x[1])\n \nprint(\"The array sorted in ascending order based on the second element of each array element pair is:\", arr)</s>"
  },
  {
    "text": "<s>[INST] Write a Java program to remove n characters from a given string, starting from a specified position.\n\nstr = \"This is a sample string\"\n  n = 5\n  pos = 8 [/INST] public static String removeCharAt(String s, int pos, int n) \n    { \n        return s.substring(0, pos) + s.substring(pos + n); \n    } \n  \n    // Driver Code \n    public static void main(String[] args) \n    { \n        String str = \"This is a sample string\"; \n        int n = 5; \n        int pos = 8; \n  \n        System.out.println(removeCharAt(str, pos, n)); \n    }</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the 10 longest surnames from a given table of surnames. [/INST] SELECT surname, LENGTH(surname) \nFROM table \nORDER BY LENGTH(surname) DESC \nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Write a shell script to detect the internet speed and display it in the terminal. [/INST] #!/bin/bash\n \n# This script shows the internet speed\n \n# Get deivce interface\ninterface=$(ip route list | grep default | cut -d' ' -f5)\n \n# Get download speed\ndownload=$(curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -  | grep Download | cut -d':' -f2 | cut -d' ' -f2)\n \n# Get upload speed\nupload=$(curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -  | grep Upload | cut -d':' -f2 | cut -d' ' -f2)\n \n# Echo the results\necho \"Device: $interface\"\necho \"Download speed: $download\"\necho \"Upload speed: $upload\"</s>"
  },
  {
    "text": "<s>[INST] Write a snippet of code for looping over a list of numbers.\n\nmyList = [1, 2, 3, 4] [/INST] for x in myList:\n  print(x)</s>"
  },
  {
    "text": "<s>[INST] Given a list of student records, write a Python code snippet to find all the students who scored above 80.\n\nstudentList = [ \n    {'name': 'John', 'score': 80},\n    {'name': 'Jane', 'score': 90},\n    {'name': 'Tom', 'score': 75},\n    {'name': 'Eric', 'score': 85}\n  ] [/INST] highScoringStudents = [student for student in studentList if student['score'] > 80]</s>"
  },
  {
    "text": "<s>[INST] Create a function to check if the two strings can be made equal by replacing the letters with asterisks in the same order.\n\nString s1 = \"aaabbcc\";\nString s2 =  \"a*a*b*c*\"; [/INST] public boolean canBeEqual(String s1, String s2) {\n    if (s1.length() != s2.length()) return false;\n    int len = s1.length();\n    for (int i = 0; i < len; i++) {\n        if (s1.charAt(i) != s2.charAt(i) && s2.charAt(i) != '*') return false;\n    }\n    return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to parse and evaluate a simple mathematical expression entered as a string.\n\nString str = \"2 + 3 * 4 - 5 / 3\"; [/INST] function evaluateExpression(str) {\n    let expression = str.split(' ').map(el => {\n        if (el === '+' || el === '-' || el === '*' || el === '/') {\n            return el;\n        }\n        return parseInt(el);\n    });\n    let stack = [];\n    let result;\n\n    for (let i = 0; i < expression.length; i++) {\n        let el = expression[i];\n        if (typeof el === 'number') {\n            stack.push(el);\n        } else {\n            let secondOperand = stack.pop();\n            let firstOperand = stack.pop();\n            switch (el) {\n                case '+':\n                    result = firstOperand + secondOperand;\n                    break;\n                case '-':\n                    result = firstOperand - secondOperand;\n                    break;\n                case '*':\n                    result = firstOperand * secondOperand;\n                    break;\n                case '/':\n                    result = firstOperand / secondOperand;\n                    break;\n            }\n            stack.push(result);\n        }\n    }\n    return stack.pop();\n}\n\nconsole.log(evaluateExpression(\"2 + 3 * 4 - 5 / 3\"));</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to find the first name, last name, and the total number of orders placed for all customers, sorted by Number of orders in descending order. [/INST] SELECT c.first_name, c.last_name, COUNT(o.customer_id) as num_orders \nFROM customers c JOIN orders o \nWHERE c.id = o.customer_id\nGROUP BY c.id\nORDER BY num_orders DESC;</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to get the names of the customers who have placed orders more than 3 times. [/INST] SELECT c.first_name, c.last_name\nFROM customers c JOIN orders o \nWHERE c.id = o.customer_id\nGROUP BY c.id\nHAVING COUNT(o.customer_id) > 3\nORDER BY c.first_name ASC;</s>"
  },
  {
    "text": "<s>[INST] Calculate the total number of unique elements in this array.\n\narray = [[1, 1], [2, 2], [3, 3], [4, 4]] [/INST] total_items = len(array)\nunique_items = len(set(sum(array, [])))\ntotal_unique_items = total_items - unique_items\nprint(total_unique_items)\n# Output: 4</s>"
  },
  {
    "text": "<s>[INST] Parse this HTML document and print out the text inside the first <h1> tag.\n\nhtml_doc = \"<html><head><title>Sample Website</title></head><body><h1>Hello World!</h1><p>This is a sample website.</p><ul><li>Item 1</li><li>Item 2</li><ul></body></html>\" [/INST] from bs4 import BeautifulSoup\nsoup = BeautifulSoup(html_doc, 'html.parser')\nh1_text = soup.find(\"h1\").text\nprint(h1_text)\n# Output: Hello World!</s>"
  },
  {
    "text": "<s>[INST] Using the comment as a guide, insert a for loop in the following code to print out all numbers from 0 to 10.\n\n# TODO: Insert a for loop here [/INST] for i in range(0, 11):\n    print(i)</s>"
  },
  {
    "text": "<s>[INST] Find the longest palindromic substring of this string.\n\nstring = \"carrace\" [/INST] def longest_palindrome_substring(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \nprint(longest_palindrome_substring(string))\n# Output: carrac</s>"
  },
  {
    "text": "<s>[INST] Group the elements in this array into pairs and print them.\n\narr = [1, 2, 3, 4, 5] [/INST] i = 0\nwhile i < len(arr):\n    pair = (arr[i], arr[i+1])\n    print(pair)\n    i += 2\n# Output: (1, 2) (3, 4) (5, None)</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to sort this dictionary by values.\n\nmy_dict = {\"Jerry\": 10, \"Marcus\": 3, \"Hanna\": 5} [/INST] def sort_dict_by_values(d):\n    sorted_dict = dict(sorted(d.items(), key=lambda x: x[1])) \n    return sorted_dict\n\nprint(sort_dict_by_values(my_dict))\n# Output: {'Marcus': 3, 'Hanna': 5, 'Jerry': 10}</s>"
  },
  {
    "text": "<s>[INST] Flatten this nested list into a single list.\n\nnested_list = [[1,2], [3,4], [5,6]] [/INST] import itertools\nflattened_list = list(itertools.chain.from_iterable(nested_list))\nprint(flattened_list)\n# Output: [1, 2, 3, 4, 5, 6]</s>"
  },
  {
    "text": "<s>[INST] Create a set from this list where no duplicates will be present.\n\nmy_list = [1, 2, 1, 2, 3, 4] [/INST] my_set = set(my_list)\nprint(my_set)\n# Output: {1, 2, 3, 4}</s>"
  },
  {
    "text": "<s>[INST] Generate all possible permutations of this list.\n\nmy_list = [1, 2, 3] [/INST] from itertools import permutations\npermutation_list = list(permutations(my_list))\nprint(permutation_list)\n# Output: [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]</s>"
  },
  {
    "text": "<s>[INST] Use regex to extract words from the sentence 'Some of my favorite words are pencil, dinosaur, and coffee.' [/INST] var words = 'Some of my favorite words are pencil, dinosaur, and coffee.';\nvar result = words.match(/[a-zA-Z]+/g);\nconsole.log(result);\n// Result: [\"Some\", \"of\", \"my\", \"favorite\", \"words\", \"are\", \"pencil\", \"dinosaur\", \"and\", \"coffee\"]</s>"
  },
  {
    "text": "<s>[INST] Design a function in Python to automate the extraction of emails from a single HTML page.\n\n<html>\n<body>\n Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html> [/INST] def extract_emails(html_page):\n emails = []\n soup = BeautifulSoup(html_page)\n for a in soup.find_all('a'):\n  if a.get('href') and (a.get('href').startswith('mailto:')):\n  emails.append(a.get('href')[7:])\n return emails\n\n# Usage \npage = '<html>\n <body>\n  Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>'\n\nemails = extract_emails(page)\nprint(emails)\n# Output: ['janice@example.com', 'susie@example.com']</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers, write a program in JavaScript to find the sum of the elements of the given array? [/INST] let array = [2,4,5,7,1];\nlet sumOfArrayElements = 0;\n\nfor(let i = 0; i < array.length; i++)\n{\n    sumOfArrayElements += array[i];\n}\n\nconsole.log(sumOfArrayElements); // Output: 19</s>"
  },
  {
    "text": "<s>[INST] Write a Python script which checks if an input string is a palindrome. [/INST] def is_palindrome(input_string):\n    input_string = input_string.lower()\n    if len(input_string) == 0:\n        return False\n    if len(input_string) == 1:\n        return True\n\n    if input_string[0] == input_string[-1]:\n        return is_palindrome(input_string[1:-1])\n\n    return False\n\n# Usage \nstring = 'RADAR'\nresult = is_palindrome(string)\nprint(result) # Output: True</s>"
  },
  {
    "text": "<s>[INST] Design a function in Python to toggle whether a given HTML tag has a given class.\n\n<div class=\"myClass\">Hello world</div> [/INST] def toggle_class(html_string, tag, tag_class):\n    soup = BeautifulSoup(html_string, 'html.parser')\n    tag_html = soup.find(tag)\n\n    if tag_html:\n        classes = tag_html.get('class')\n        if classes and tag_class in classes:\n            classes.remove(tag_class)\n        else:\n            classes.append(tag_class)\n        tag_html['class'] = classes\n    return soup.decode()\n\n# Usage\nhtml_string = '<div class=\"myClass\">Hello world</div>'\ntag = 'div'\ntag_class = 'myClass'\nnew_html_string = toggle_class(html_string, tag, tag_class)\nprint(new_html_string)\n# Output: <div>Hello world</div></s>"
  },
  {
    "text": "<s>[INST] Design a function in Python to format a given string as a URL slug.\n\nstring = \"This is a sample string to be converted\" [/INST] def format_as_slug(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\n# Usage \nstring = \"This is a sample string to be converted\"\nresult = format_as_slug(string)\nprint(result) # Output: this-is-a-sample-string-to-be-converted</s>"
  },
  {
    "text": "<s>[INST] Create a script in JavaScript to sort the elements of an array in ascending order. [/INST] let array = [1, 9, 4, 2, 5, 7];\nlet sortedArray = array.sort(function(a, b){return a-b});\nconsole.log(sortedArray); // Output: [1, 2, 4, 5, 7, 9]</s>"
  },
  {
    "text": "<s>[INST] Build a class in Python with three methods. [/INST] class MyClass:\n  def __init__(self):\n   # initialization code \n   self.data = []\n   self.count = 0\n \n  def add_data(self, data_element):\n   # add data to a list\n   self.data.append(data_element)\n   self.count += 1 \n \n  def get_data_count(self):\n   # return number of data elements\n   return self.count</s>"
  },
  {
    "text": "<s>[INST] Compile the given C++ code.\n\n#include <iostream> \nusing namespace std; \nint main()\n{ \n  cout << \"Hello World!\"; \n  return 0; \n} [/INST] g++ file.cpp -o file</s>"
  },
  {
    "text": "<s>[INST] Add a try-catch block to the given code snippet.\n\ndef divide(num1, num2):\n    return num1 / num2 [/INST] def divide(num1, num2):\n  try:\n    return num1 / num2\n  except:\n    print('Error: Unable to perform division')</s>"
  },
  {
    "text": "<s>[INST] Create a stored procedure in SQL for selecting all the records from a customers table. [/INST] CREATE PROCEDURE select_customers \nAS\nBEGIN\n SELECT * FROM customers;\nEND;</s>"
  },
  {
    "text": "<s>[INST] Explain what is meant by a backtracking algorithm. [/INST] A backtracking algorithm is an algorithmic technique that is used to find all (or some) solutions to a problem by incrementally building a solution and testing it against the given constraints. If the solution is not feasible or the constraints are not satisfied, the algorithm takes a step back and explores a different path of solution construction. The process continues until a solution is found or all the possibilities are exhausted.</s>"
  },
  {
    "text": "<s>[INST] Fix the following code so that it works without errors.\n\n```\ndef remove_characters(name, characters):\n    for c in characters:\n        name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n``` [/INST] ```\ndef remove_characters(name, characters):\n    for c in characters:\n        name = name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n```</s>"
  },
  {
    "text": "<s>[INST] Sort the list of numbers by increasing order.\n\n[4, 6, 0, 1, 7, 9] [/INST] [0, 1, 4, 6, 7, 9]</s>"
  },
  {
    "text": "<s>[INST] Write the code for a function that takes two parameters n and m and returns the sum of the first n odd integers starting with m. [/INST] def sum_of_odd_integers(n,m):\n    total_sum = 0\n    for i in range(m,m+(2*n-1),2):\n        total_sum += i\n    return total_sum</s>"
  },
  {
    "text": "<s>[INST] Determine how many elements in the list are greater than zero.\n\n[2, -1, -5, 6, 7] [/INST] 4</s>"
  },
  {
    "text": "<s>[INST] Write the code to create a one-dimensional array and initialize it with random numbers of length 4. [/INST] import random\n\ndef create_random_array():\n    lst = []\n    for i in range(4):\n        lst.append(random.randint(1,10))\n\n    return lst</s>"
  },
  {
    "text": "<s>[INST] Write the code to produce a new array that includes all elements from two given arrays. [/INST] def merge_two_arrays(arr1, arr2):\n    merged_arr = arr1 + arr2\n    return merged_arr</s>"
  },
  {
    "text": "<s>[INST] Create a class with the name \"Animal\" and add the methods \"make_sound\" and \"eat\". [/INST] class Animal:\n\n    def make_sound(self):\n        \"\"\"Makes a sound specific to the animal.\"\"\"\n        pass\n    \n    def eat(self):\n        \"\"\"Eats food.\"\"\"\n        pass</s>"
  },
  {
    "text": "<s>[INST] Connect to a remote database using a JDBC connection.\n\nhost:localhost \nport: 3306\nusername: user \npassword:password \ndatabase: sampledb [/INST] import java.sql.Connection;\nimport java.sql.DriverManager;\n\nString host = \"localhost\";\nint port = 3306;\nString username = \"user\";\nString password = \"password\";\nString database = \"sampledb\";\n\nString connectionString = \"jdbc:mysql://\"+host+\":\"+port+\"/\"+database;\nConnection connection = DriverManager.getConnection(connectionString , username, password);</s>"
  },
  {
    "text": "<s>[INST] Find the inverse of the given matrix\n\n[ [1, 2], [3, 4] ] [/INST] # Find the inverse of the given matrix\n\nA = [[1,2], [3,4]]\n\ninverse_A = [[round(A[1][1]*A[0][0] - A[0][1]*A[1][0]),\n        round(-A[1][0]*A[0][0] + A[0][1]*A[1][1])],\n        [round(-A[1][1]*A[0][1] + A[0][0]*A[1][0]),\n        round(A[1][1]*A[0][1] - A[0][0]*A[1][0])]]\n\nprint(inverse_A) # [[4,-2],[-3,1]]</s>"
  },
  {
    "text": "<s>[INST] Replace words with corresponding synonyms in the given text\n\ntext: \"The cat is lazy and likes to sleep.\"\nword: \"sleep\"\nsynonym: \"nap\" [/INST] # Replace words with corresponding synonyms in the given text\n\ntext = \"The cat is lazy and likes to sleep.\"\n\n# Replace the word\ntext = text.replace(\"sleep\", \"nap\")\n\nprint(text) # \"The cat is lazy and likes to nap.\"</s>"
  },
  {
    "text": "<s>[INST] Write an assembly language program to generate a Fibonacci series with n number of elements. [/INST] .section __DATA, \"rw\"\n   arraylength: .int 2\n   array:       .int 0, 1\n\n.text\n   .global _start\n_start:\n   mov r1, #0\nloop:\n   sub r2, r1, #1\n\tadd r3, array, r2\n\tldr r2, [r3]\n\n   sub r3, r1, #2\n\tadd r4, array, r3\n\tldr r3, [r4]\n\t\n\tadd r5, r2, r3\n\t\n   add r3, array, r1\n\tstr r5, [r3]\n\n\tldr r1, =arraylength\n\tadd r2, r1, #1\n\tstr r1, =arraylength\n\n\tcmp r1, r2\n\tbne loop</s>"
  },
  {
    "text": "<s>[INST] Write a Swift code to split a string into an array of strings by a specific separator.\n\nlet string = \"Hello, World!\"\nlet separator = \",\" [/INST] let string = \"Hello, World!\"\nlet separator = \",\"\n\nlet array = string.components(separatedBy: separator)\nprint(array) // [\"Hello\", \" World!\"]</s>"
  },
  {
    "text": "<s>[INST] Write a MATLAB code to count how many element in an array is greater than a given number.\n\narray = [4, 5, 2, 8, 9];\nnumber = 6; [/INST] array = [4, 5, 2, 8, 9];\nnumber = 6;\n\n% Count the number of elements in the array that are greater than the given number\ncount = 0;\nfor i=1:length(array)\n    if array(i) > number\n        count = count + 1;\n    end\nend\n\ndisp(count);  % Output: 2</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query gives the total counts of a particular type of traffic on a given website [/INST] SELECT COUNT(*) \nFROM traffic \nWHERE type = 'website' \nAND date = '<date>'</s>"
  },
  {
    "text": "<s>[INST] Find the sum of the first 10 positive integers [/INST] The sum of the first 10 positive integers is 55.</s>"
  },
  {
    "text": "<s>[INST] Develop a code to get the current date and time and print it [/INST] from datetime import datetime\n\ndef get_current_datetime():\n    # Get the current date and time\n    current_datetime = datetime.now()\n    # Print the current date and time\n    print(\"Current date and time:\", current_datetime)\n\n# Call the function\nget_current_datetime()</s>"
  },
  {
    "text": "<s>[INST] Generate a Huffman code for a given set of symbols and probabilities\n\nSymbols: ['A', 'B', 'C', 'D']\nProbabilities: [0.2, 0.3, 0.3, 0.2] [/INST] A: 00\nB: 01\nC: 10\nD: 11</s>"
  },
  {
    "text": "<s>[INST] Suggest a machine learning algorithm suitable for predicting the next seven days of weather [/INST] A suitable machine learning algorithm for predicting the next seven days of weather would be an Long Short Term Memory (LSTM) Recurrent Neural Network (RNN). An LSTM RNN can be trained on historical weather data to learn the patterns and relationships between various weather variables. By utilizing these patterns and relationships, the model can then make predictions about the next seven days of weather.</s>"
  },
  {
    "text": "<s>[INST] Suggest an optimisation algorithm for a minimisation problem [/INST] A suitable optimisation algorithm for a minimisation problem is Gradient Descent. Gradient Descent works by calculating the gradient of the cost function with respect to the input variables. This gradient is then used to update the input variables in order to reduce the cost. The process is repeated until an optimum value is reached.</s>"
  },
  {
    "text": "<s>[INST] Write a python code to insert a new node at the head of a linked list [/INST] # Node class \nclass Node: \n \n\t# Function to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data # Assign data \n\t\tself.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n\n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\n\t# Function to insert a new node at the beginning \n\tdef insert_at_head(self, new_data): \n\t\t\n\t\t# Create a new node \n\t\tnew_node = Node(new_data) \n\n\t\t# update the new nodes next to old head\n\t\tnew_node.next = self.head \n\n\t\t# update head to new node \n\t\tself.head = new_node</s>"
  },
  {
    "text": "<s>[INST] Given a range of numbers, write a python program to find the sum of the elements within that range.\n\nrange: 1 to 10 [/INST] def sum_range(start, end):\n    res = 0\n    for i in range(start, end+1):\n        res += i\n    return res\n\nsum_range(1, 10)</s>"
  },
  {
    "text": "<s>[INST] Decompose the following code into two different functions.\n\ndef calculateMinimumDifference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, abs(nums[x] - nums[x-1]))\n    return min_diff [/INST] def calculate_diff(arr):\n    return abs(arr[0] - arr[1])\n\ndef calculate_minimum_difference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, calculate_diff(nums[x-1:x+1]))\n    return min_diff</s>"
  },
  {
    "text": "<s>[INST] Count and return the number of lowercase and uppercase characters in a given string.\n\nmy_str = \"Hello World!\" [/INST] def count_cases(s):\n    num_lower = 0\n    num_upper = 0\n    for char in s:\n        if char.islower():\n            num_lower += 1\n        elif char.isupper():\n            num_upper += 1\n    return num_lower, num_upper</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes a list of strings as an argument and returns a list containing only non-duplicate strings.\n\nmy_list = [\"Apple\", \"Orange\", \"Grapes\", \"Apple\", \"Watermelon\"] [/INST] def remove_duplicates(arr):\n    final_list = []\n    for i in arr:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list</s>"
  },
  {
    "text": "<s>[INST] What is the unit of measurement for the average speed of a car? [/INST] The unit of measurement for the average speed of a car is kilometers per hour (km/h) or miles per hour (mph).</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that returns the records with the highest salary from the Employees table.\n\nEmployees table \ncolumns: id | name | salary\n\n1 | John | 120000\n2 | Jane | 150000\n3 | Jack | 160000 [/INST] SELECT * FROM Employees ORDER by Salary DESC LIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that returns the names and salaries of all employees who are earning more than $100,000.\n\nEmployees table \ncolumns: id | name | salary\n\n1 | John | 120000\n2 | Jane | 150000\n3 | Jack | 160000 [/INST] SELECT name, salary FROM Employees WHERE salary > 100000;</s>"
  },
  {
    "text": "<s>[INST] Create a CSS stylesheet for a webpage that centers the heading and makes the background color gray. [/INST] body {\n    background-color: gray;\n}\n\nh1 {\n    text-align: center;\n}</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code segment in C#.\n\nfor (i = 0; i < n; i++) {\n   j = j + i;\n} [/INST] int j = 0;\nfor (int i = 0; i < n; i++)\n{\n    j += i;\n}</s>"
  },
  {
    "text": "<s>[INST] Parse the following XML document and print its content.\n\n<people>\n<person>\n   <name>John Doe</name>\n   <age>45</age>\n</person>\n<person>\n   <name>Jane Doe</name>\n   <age>32</age>\n</person>\n</people> [/INST] Name: John Doe\nAge: 45\n\nName: Jane Doe\nAge: 32</s>"
  },
  {
    "text": "<s>[INST] Create an array of descending numbers starting from 10 to 1 using a for loop. [/INST] numberArray = []\nfor x in range(10, 0, -1):\n    numberArray.append(x)\n\nprint(numberArray) # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] How would you implement a function to determine if a number is even or odd in Python? [/INST] def even_odd(number):\n    if number % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")</s>"
  },
  {
    "text": "<s>[INST] Create a Flask route for handling GET requests with the path \"/hello\". [/INST] from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/hello\", methods=[\"GET\"]) \ndef hello(): \n    return \"Hello!\"</s>"
  },
  {
    "text": "<s>[INST] Modify the following HTML to create a link that opens in a new window.\n\n<a href=\"www.example.com\">Example Link</a> [/INST] <a href=\"www.example.com\" target=\"_blank\">Example Link</a></s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to traverse through a given 2D array.\n\n[\n  [1, 2],\n  [3, 4],\n  [5, 6]\n] [/INST] function traverse2DArray(arr) {\n    for(let i=0; i<arr.length; i++) {\n        for(let j=0; j<arr[i].length; j++) {\n            console.log(arr[i][j]);\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a print statement in Python to print the first 5 elements in a list.\n\n[2, 3, 4, 5, 6, 7, 8] [/INST] print(list[:5])</s>"
  },
  {
    "text": "<s>[INST] How do you pass a parameter to a function in JavaScript? [/INST] function foo(param) {\n    // do something with param\n}\n\nfoo(param); // pass the parameter here</s>"
  },
  {
    "text": "<s>[INST] How can you make an AJAX request using jQuery? [/INST] $.ajax({\n  url: \"test.html\",\n  context: document.body\n}).done(function() {\n  $( this ).addClass( \"done\" );\n});</s>"
  },
  {
    "text": "<s>[INST] Modify the code so that it prints \"Python is the best language\" five times.\n\nfor i in range(10):\n    print(\"Python is great!\") [/INST] for i in range(5):\n    print(\"Python is the best language!\")</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query that retrieves all rows from the \"Employees\" table where the salary is above 30000. [/INST] SELECT * FROM Employees WHERE salary > 30000;</s>"
  },
  {
    "text": "<s>[INST] Modify the program so that the \"count\" variable counts from 0 to 10 11.\n\ncount = 0\nwhile count < 10:\n    print(count) [/INST] count = 0\nwhile count <= 10:\n    print(count)\n    count = count + 1</s>"
  },
  {
    "text": "<s>[INST] Rewrite the code as a single line with a one-line lambda function.\n\ndef square(x):\n    return x * x [/INST] square = lambda x: x * x</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to compare two lists and print the elements which are not common between the two.\n\nlist_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7] [/INST] list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]\n\nnot_common_elements = [i for i in list_a if not(i in list_b)] + [i for i in list_b if not(i in list_a)]\n\nprint(not_common_elements)</s>"
  },
  {
    "text": "<s>[INST] Write a jQuery script to hide the element with ID \"hidden-element\". [/INST] $(\"#hidden-element\").hide();</s>"
  },
  {
    "text": "<s>[INST] Write a MongoDB query that retrieves the documents from the inventory collection where the quantity field is greater than 10. [/INST] db.inventory.find( { quantity: { $gt: 10 } } )</s>"
  },
  {
    "text": "<s>[INST] Rewrite the loop as a generator expression.\n\narr = []\nfor i in range(5):\n    arr.append(i) [/INST] arr = [i for i in range(5)]\narr = (i for i in range(5))</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that generates an array of numbers from 1 to 10 with their cubes. [/INST] function getCubes(){\n    var arr = [];\n    for(var i = 1; i <= 10; i++){\n        arr.push(i*i*i);\n    }\n    return arr;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a loop that prints out the first 10 elements in a given list.\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] [/INST] for i in range(10):\n    print(my_list[i])</s>"
  },
  {
    "text": "<s>[INST] Create a function that returns true if the given number is a prime number.\n\nnumber = 9 [/INST] def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, number // 2 + 1):\n        if number % i == 0:\n            return False\n    return True\n\nif is_prime(number):\n    print(\"The number is a prime number\")\nelse:\n    print(\"The number is not a prime number\")</s>"
  },
  {
    "text": "<s>[INST] Write a code that will delete a node in a Linked List at a given position.\n\n# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n        \n# Given Position\nposition = 5 [/INST] # Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    # Function to delete given node at position \n    def delete_node(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store head node \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position -1 ): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next \n  \n# Given Position\nposition = 5\n\n# Create a linked list with four nodes\nlinked_list = LinkedList()\nlinked_list.head = Node(1)\nsecond = Node(2)\nthird = Node(3)\nfourth = Node(4)\n\n# Now connect the linked list \nlinked_list.head.next = second\nsecond.next = third\nthird.next = fourth\n\n# Delete the node from given position\nlinked_list.delete_node(position)</s>"
  },
  {
    "text": "<s>[INST] Write a code that will check if a given string is a palindrome or not without using extra space.\n\nstring = \"level\" [/INST] def is_palindrome(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \nif is_palindrome(string):\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")</s>"
  },
  {
    "text": "<s>[INST] Generate a Matrix with random integers between 1-50 and output the Matrix.\n\nrows = 5\ncolumns = 6 [/INST] import random\n\nrows = 5\ncolumns = 6\n\nmatrix = [[random.randint(1,50) for c in range(columns)]for r in range(rows)]\n\nfor row in matrix:\n    print(row)</s>"
  },
  {
    "text": "<s>[INST] Construct a Python program to print out the biggest number from a given list.\n\nmy_list = [6, 5, 9, 1, 8, 2] [/INST] def find_max(my_list):\n    max_num = my_list[0]\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max(my_list))</s>"
  },
  {
    "text": "<s>[INST] Create an HTML NavBar so that clicking on Home takes the user to a Home page\n\n<html>\n<body>\n\n</body>\n</html> [/INST] <html>\n<body>\n  <nav>\n    <ul>\n      <li><a href=\"index.html\">Home</a></li>\n    </ul>\n  </nav>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Update the given function to return a list of tuples where each tuple contains the name and age of each person.\n\ndef get_person_info(name, age):\n    \"\"\"Returns a tuple containing name and age.\"\"\"\n    return \"Person \" + name + \" is \" + age + \" years old.\" [/INST] def get_person_info(name, age):\n    \"\"\"Returns a list of tuples containing name and age.\"\"\"\n    return [(name, int(age))]</s>"
  },
  {
    "text": "<s>[INST] Using the given list of strings, create a new list that contains only the lowercase letters.\n\nwords = [\"Alphabet\", \"Marble\", \"Buttons\"] [/INST] words = [\"Alphabet\", \"Marble\", \"Buttons\"]\n\nlowercase_letters = [word.lower() for word in words] \nprint(lowercase_letters) \n# Output: ['alphabet', 'marble', 'buttons']</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to convert the given 12-hour time format to 24-hour format.\n\ntime = \"12:05 PM\" [/INST] function convertTo24Hour(timeString) {\n    let [hours, minutes, period] = timeString.split(' ');\n    let [hoursString, minutesString] = hours.split(':');\n    let hoursInteger = parseInt(hoursString);\n    \n    if (period === 'AM' && hoursInteger === 12) {\n        hoursInteger = 0;\n    } else if (period === 'PM' && hoursInteger !== 12) {\n        hoursInteger += 12;\n    }\n    \n    return `${hoursInteger.toString().padStart(2, '0')}:${minutesString}`;\n}\n\nlet result = convertTo24Hour(time);\nconsole.log(result); // Outputs: \"00:05\"</s>"
  },
  {
    "text": "<s>[INST] Update the given function to return the greatest common divisor of two numbers.\n\ndef divisor_function(a, b):\n    \"\"\"Returns the greatest common divisor of two numbers.\"\"\"\n    return a % b [/INST] def divisor_function(a, b):\n    \"\"\"Returns the greatest common divisor of two numbers.\"\"\"\n    if b == 0:\n        return a\n    else:\n        return divisor_function(b, a % b)</s>"
  },
  {
    "text": "<s>[INST] Create a function to print the numbers from 1 to 20, and also print \"skip\" for multiplies of 3 and 5. [/INST] def print_numbers():\n    '''This function prints numbers from 1 to 20, and also prints \"skip\" for the multiplies of 3 and 5.'''\n    for num in range(1, 21):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"skip\")\n        else:\n            print(num)\n\nprint_numbers()\n# Output: 1 2 skip 4 5 skip 7 8 skip 10 11 skip 13 14 skip 16 17 skip 19 20</s>"
  },
  {
    "text": "<s>[INST] Using the given list of names, create a new set that contains only the names with length greater than 6.\n\nnames = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"] [/INST] names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]\n\nlong_names = {name for name in names if len(name) > 6}\nprint(long_names) # Output: {'Sophia', 'Olivia', 'Michael'}</s>"
  },
  {
    "text": "<s>[INST] Create a decision tree to classify if a given student's grade ranges from A to D. [/INST] # Decision Tree\ndef classify_grades_decision_tree(grade):\n    if grade in range(90, 101): # A range\n        return 'A'\n    elif grade in range(80,90): # B range\n        return 'B'\n    elif grade in range(70,80): # C range\n        return 'C'\n    elif grade in range(60,70): # D range\n        return 'D'\n    else:\n        return 'Error: Grade not in range'\n\n# Driver code\n# Testing\nprint(classify_grades_decision_tree(87)) # Output: B</s>"
  },
  {
    "text": "<s>[INST] Suggest a completion for the following HTML code to demonstrate items in a unordered list.\n\n<ul>\n    <li></li>\n</ul> [/INST] <ul>\n    <li>Apple</li>\n    <li>Orange</li>\n    <li>Banana</li>\n    <li>Grapes</li>\n</ul></s>"
  },
  {
    "text": "<s>[INST] Assign a class of 'active' to the last <a> element in the given HTML code.\n\n<div>\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n</div> [/INST] <div>\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\" class=\"active\">Contact</a>\n</div></s>"
  },
  {
    "text": "<s>[INST] Suggest a completion to the following python code to print the square of a number.\n\nnumber = 5\n\nprint(number) [/INST] number = 5\n\nprint(number*number) # Output: 25</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python that creates an immutable list. [/INST] class ImmutableList:\n    def __init__(self, list_values):\n        self._dict = dict()\n        for i, elem in enumerate(list_values):\n            self._dict[i] = elem\n    \n    def __getitem__(self, item):\n        return self._dict[item]\n    \n    def __len__(self):\n        return len(self._dict)</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the name of customers who have ordered more than two items this month. [/INST] SELECT C.name\nFROM Customers C \nINNER JOIN Orders O\nON C.customer_id = O.customer_id\nWHERE O.order_date >= CURRENT_DATE - INTERVAL '1' MONTH\nGROUP BY C.name\nHAVING COUNT(*) > 2;</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the top 10 highest-priced items in the products table. [/INST] SELECT item_name, price\nFROM products\nORDER BY price DESC\nLIMIT 10;</s>"
  },
  {
    "text": "<s>[INST] Sort the list below using insertion sort in Python:\n\nlist = [1,12,1,4,8,10,13] [/INST] list = [1,1,4,8,10,12,13]\n\ndef insertion_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\narr = [1,12,1,4,8,10,13]\ninsertion_sort(arr)\nprint (arr)</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm in JavaScript to print all the elements inside a given array.\n\nvar names = [\"Harry\", \"Ron\", \"Hermione\"] [/INST] for (var i = 0; i < names.length; i++) {\n    console.log(names[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] Describe an algorithm to convert an array of numbers into an array of its squares. [/INST] def calculate_squares(arr):\n result = []\n for num in arr:\n result.append(num ** 2)\n return result</s>"
  },
  {
    "text": "<s>[INST] Produce a snippet of C++ code to subtract two given numbers a and b. [/INST] int a = 5;\nint b = 2;\n\nint c = a - b;</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression to match the following pattern: words that consist only of capital letters. [/INST] ^[A-Z]+$</s>"
  },
  {
    "text": "<s>[INST] Suggest the best algorithm to reverse a string. [/INST] # Algorithm to reverse a string\ndef reverse_string(s):\n# Create a result string\n result = \"\"\n # Iterate through the string in reverse order\n for i in range(len(s)-1, -1, -1):\n result += s[i]\nreturn result</s>"
  },
  {
    "text": "<s>[INST] Create a function to add two integers x and y. [/INST] def add_two_integers(x, y):\n return x + y</s>"
  },
  {
    "text": "<s>[INST] Construct a regular expression that matches a string containing numbers from 0 to 9 within a range of 8 and 16 digits. [/INST] ^[0-9]{8,16}$</s>"
  },
  {
    "text": "<s>[INST] Explain why software design patterns are important in software development. [/INST] Software design patterns are important because they allow developers to create extensible and maintainable software applications. Design patterns provide a way of reusing the same code and structure across multiple applications, while allowing the application to remain logically organized. This can reduce the amount of time it takes to develop and debug applications, as well as prevent bugs from arising due to unfamiliar code structures. Additionally, well-designed applications can be easier for new developers to understand and contribute to. Lastly, design patterns can help improve the overall organization and scalability of a codebase.</s>"
  },
  {
    "text": "<s>[INST] Create a shell script to find the first ten prime numbers [/INST] #!/bin/bash\n\n# num will be the number to be checked\nnum=2\n\n# counter to count the number of Prime numbers\ncounter=0\n \necho \"First 10 prime numbers are:\"\n\nwhile [ $counter -lt 10 ]\ndo\n\t# isPrime will take value 0 or 1, 1 if prime\n\tisPrime=1\n \n\t# i will start from 2, because 2 is the smallest prime number\n\ti=2\n \n\t# this loop will run from 2 to less than given number\n\twhile [ $i -lt $num ]\n\tdo\n \n\t\tif [ `expr $num % $i` -eq 0 ]\n\t\tthen\n\t\t\t# if modulus comes out to be 0, then it is not prime\n\t\t\tisPrime=0\n\t\tfi\n \n\t\ti=`expr $i + 1`\n \n\tdone\n \n\t# if prime, then counter should be incremented\n\tif [ $isPrime -eq 1 ]\n\tthen\n\t\techo $num\n\t\tcounter=`expr $counter + 1`\n\tfi\n \n\t# increment the number for next loop\n\tnum=`expr $num + 1`\n \ndone</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to generate a report which display the total number of customers in each country. [/INST] SELECT COUNT(*) AS Customer_Count, Country \nFROM Customers \nGROUP BY Country;</s>"
  },
  {
    "text": "<s>[INST] Write an HTML code to design a form which contain two fields, Name and Age. The form should have a button with text \"Submit\". [/INST] <form action=\"form-handler.php\" method=\"post\">\n  <label>Name:</label><br>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Age:</label><br>\n  <input type=\"text\" name=\"age\"><br>\n  \n  <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Create a HTML document which show \"Hello World!\" text with red color in Times New Roman font. [/INST] <html>\n <head>\n  <title>Hello World</title>\n </head>\n <body>\n  <p style=\"color: red; font-family: Times New Roman;\">Hello World!</p>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Java program to print all the Armstrong numbers between 100 to 500. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the total number of digits. [/INST] public class ArmstrongNumbers {\n \n    public static void main(String[] args) {\n \n        int min = 100;\n        int max = 500;\n \n        for (int number = min; number <= max; number++) {\n            int digits = 0;\n            int result = 0;\n            int originalNumber = number;\n \n            while (originalNumber != 0) {\n                originalNumber /= 10;\n                digits++;\n            }\n \n            originalNumber = number;\n \n            while (originalNumber != 0) {\n                int remainder = originalNumber % 10;\n                result += Math.pow(remainder, digits);\n                originalNumber /= 10;\n            }\n            if (result == number) {\n                System.out.println(number);\n            }\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a web page using HTML and CSS to display the current date and time. [/INST] <!DOCTYPE html>\n<html>\n<head>\n    <title>Current Date and Time</title>\n    <style>\n        p {\n            font-size: 3em;\n            font-family: Arial, sans-serif;\n        }\n    </style>\n</head>\n<body>\n    <p id=\"time\"></p>\n\n    <script>\n        const today = new Date();\n        const time = `${today.toLocaleString()}`;\n        document.getElementById(\"time\").innerHTML = time;\n    </script>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a code to add two integers without any type conversion. [/INST] function addIntWithoutTypeConversion(a, b) {\n  let sum = 0;\n  let carryin = 0;\n  let k = 0;\n  let temp_a = a;\n  let temp_b = b;\n\n  while (k < 32) {\n    let ak = a >> k & 1;\n    let bk = b >> k & 1;\n    let carryout = (ak & bk) | (ak & carryin) | (bk & carryin);\n    sum |= (ak ^ bk ^ carryin) << k;\n    carryin = carryout << 1;\n    k++;\n  }\n\n  return sum;\n}\n\nconst result = addIntWithoutTypeConversion(1, 2);\n\nconsole.log(result); // 3</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to group the records from a table named 'countries' by their population greater than 10 million. [/INST] SELECT population, COUNT(*) as count\nFROM countries\nWHERE population > 10e6\nGROUP BY population;</s>"
  },
  {
    "text": "<s>[INST] Create a C++ program to print a pattern's series of numbers. [/INST] #include <iostream> \nusing namespace std;  \n  \nvoid printPattern(int n) \n{ \n    int i, j, num; \n    num = 1; \n  \n    // Prints the upper half  \n    for (i = 0; i <= n; i++) { \n        // Start with printing number 1 \n        num = 1; \n  \n        // Print 2*i+1 stars \n        for (j = 0; j < 2 * i + 1; j++) { \n            cout << num << \" \"; \n            if (i % 2 == 0)  \n                num++;   \n            else\n                num--; \n        } \n  \n        // Move to the next line \n        cout << endl; \n    } \n  \n    // Prints the lower half  \n    for (i = n; i > 0; i--) { \n        // Start with printing number 1 \n        num = 1; \n          \n        // print 2*i-1 stars \n        for (j = 0; j < 2 * i - 1; j++) { \n            cout << num << \" \"; \n            if (i % 2 == 0)  \n                num++;   \n            else\n                num--; \n        } \n          \n        // Move to the next line \n        cout << endl; \n    } \n} \n\nint main() \n{ \n    int n = 9; \n  \n    printPattern(n); \n  \n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a MySQL query to count the number of book titles in the 'books' table having the word 'the' in their title. [/INST] SELECT COUNT(*)\nFROM books\nWHERE title LIKE '%the%';</s>"
  },
  {
    "text": "<s>[INST] Write a Java code to create a thread and process the tasks in separate threads. [/INST] public class Main {\n  public static void main(String[] args)  \n  { \n    Thread thread1 = new Thread(new Runnable(){ \n            public void run(){ \n                //task 1\n            } \n        });  \n    Thread thread2 = new Thread(new Runnable(){ \n            public void run(){ \n                //task 2\n            } \n        }); \n    thread1.start(); \n    thread2.start(); \n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query that returns the sum of the values in a 'salary' column in a table named 'employees'. [/INST] SELECT SUM(salary) FROM employees;</s>"
  },
  {
    "text": "<s>[INST] Create a class in Python named 'Circle' with a parameterized constructor to take the radius of the circle as input. [/INST] class Circle():\n    def __init__(self, radius):\n        self.radius = radius</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to retrieve the employee’s name from a table with the employee’s id.\n\nemployees (id, name, age) [/INST] SELECT name \nFROM employees \nWHERE id = ?</s>"
  },
  {
    "text": "<s>[INST] Create a JSON string that represents a dictionary of two key-value pairs. [/INST] {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}</s>"
  },
  {
    "text": "<s>[INST] Write HTML to create a paragraph with the text \"This is a paragraph\". [/INST] <p>This is a paragraph</p></s>"
  },
  {
    "text": "<s>[INST] Construct a regular expression that matches an email address that ends in .com. [/INST] /\\S+@\\S+\\.com$/</s>"
  },
  {
    "text": "<s>[INST] Convert the following matrix into a list of lists in Python.\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]</s>"
  },
  {
    "text": "<s>[INST] Using Swift, generate a random integer between 0 and 10. [/INST] let randomNumber = Int.random(in: 0..<10)</s>"
  },
  {
    "text": "<s>[INST] Write a Perl program to remove the last element from an array and return the resulting array. [/INST] @array = (\"one\",\"two\",\"three\",\"four\");\n \n# remove the last element\npop(@array);\n \n# print the resulting array\nprint \"@array\\n\";</s>"
  },
  {
    "text": "<s>[INST] Create a function in C++ that generates a random number between 0 and 1. [/INST] #include <stdlib.h>\n#include <time.h>\n\nfloat genRandomNum(){\n    srand (time(NULL));\n    float randomNum = (float)rand()/(float)(RAND_MAX);\n    return randomNum;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a C program which will check if user input is an integer number or not. [/INST] #include <stdio.h>\n\nint isInteger(int x) \n{ \n    // Your code here\n    if(x == (int) x) \n        return 1;  \n    else \n        return 0; \n} \n\nint main() \n{ \n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num); \n    \n    if(isInteger(num)){\n        printf(\"It is an integer number.\");\n    } else{\n        printf(\"It is not an integer number.\");\n    }\n\n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Write a SELECT statement in SQL to get the count of customers with a salary greater than 40,000. [/INST] SELECT COUNT(*) FROM customers WHERE salary > 40000;</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script which will retrieve system information, including memory, storage and IP address. [/INST] #!/bin/bash\n\n#Program to Retrieve System Information\nmemory=$(free -m | awk 'NR==2{printf \"Memory Usage: %s/%sMB (%.2f%%)\\n\", $3,$2,$3*100/$2 }')\n\n#Storage Information\nstorage=$(df -h | awk '$NF==\"/\"{printf \"Disk Usage: %d/%dGB (%s)\\n\", $3,$2,$5}')\n\n#IP Address\nipaddress=$(ip addr | awk '/^[0-9]+: / {}; /inet.*global/ {print \"IP Address: \" $2}')\n\n#Print Info\necho \"$memory\"\necho \"$storage\"\necho \"$ipaddress\"</s>"
  },
  {
    "text": "<s>[INST] Implement an R program to calculate the median of an integer array.\n\n[2, 3, 4, 5] [/INST] calculate median <- function(arr){\n    sorted <- sort(arr)\n    n <- length(arr)\n    if(n%%2 == 0){\n        mid <- n/2\n        median <- (sorted[mid] + sorted[mid + 1] ) / 2\n    } else {\n        mid <- (n + 1) / 2\n        median <- sorted[mid]\n    }\n    return(median)\n}\n\ncalculate_median(c(2, 3, 4, 5))</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a table which contains three rows and three columns. [/INST] <html>\n    <head>\n        <title>Table Example</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <td>Row 1, Column 1</td>\n                <td>Row 1, Column 2</td>\n                <td>Row 1, Column 3</td>\n            </tr>\n            <tr>\n                <td>Row 2, Column 1</td>\n                <td>Row 2, Column 2</td>\n                <td>Row 2, Column 3</td>\n            </tr>\n            <tr>\n                <td>Row 3, Column 1</td>\n                <td>Row 3, Column 2</td>\n                <td>Row 3, Column 3</td>\n            </tr>\n        </table>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a JavaFX program that allows a user to move a square shape in 3 different directions using the arrow keys. [/INST] import javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.paint.Color;\nimport javafx.scene.shape.Rectangle;\nimport javafx.stage.Stage;\n\npublic class MoveSquare extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n    \n    public void start(Stage primaryStage) {       \n        Rectangle rect = new Rectangle(30, 30);\n        rect.setFill(Color.BLUE);\n        \n        Pane root = new Pane();\n        root.getChildren().add(rect);\n        \n        Scene scene = new Scene(root);\n        scene.setOnKeyPressed(event -> {\n            KeyCode keyPressed = event.getCode();\n            if (keyPressed == KeyCode.UP) {\n                rect.setY(rect.getY() - 5);\n            } else if (keyPressed == KeyCode.DOWN) {\n                rect.setY(rect.getY() + 5);\n            } else if (keyPressed == KeyCode.LEFT) {\n                rect.setX(rect.getX() - 5);\n            } else if (keyPressed == KeyCode.RIGHT) {\n                rect.setX(rect.getX() + 5);\n            }\n        });\n        \n        primaryStage.setTitle(\"Move Square\");\n        primaryStage.setScene(scene);\n        primaryStage.setWidth(300);\n        primaryStage.setHeight(300);\n        primaryStage.show();\n        \n        scene.requestFocus();\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a C++ class called Employee with two data fields age and name. [/INST] class Employee {\n    int age;\n    string name;\npublic:\n    int getAge() { return age; }\n    string getName() { return name; }\n    void setAge(int age) { this->age = age; }\n    void setName(string name) { this->name = name; }\n};</s>"
  },
  {
    "text": "<s>[INST] Convert the following paragraph from English to Python code:\n\n\"Given a list of numbers, find the largest number\". [/INST] def find_largest(nums):\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest</s>"
  },
  {
    "text": "<s>[INST] Identify the bug in the following python code:\n\ndef foo(x):\n    x[0] = 2\n\n[0, 1, 2] [/INST] This code is trying to modify an immutable object (a tuple) as it is attempting to assign a value to the first element in a tuple. The correct way to do this is with a list, not a tuple. The code should be changed to:\n\ndef foo(x):\n    x[0] = 2\n    \nwhere the input x is a list instead of a tuple.</s>"
  },
  {
    "text": "<s>[INST] Generate a stack trace for the following JavaScript code:\n\nfunction foo(n) {\n    return n + 1;\n}\n\nfoo(2); [/INST] Traceback (most recent call last):\n  File \"code.js\", line 3, in <module>\n    foo(2)\n  File \"code.js\", line 1, in foo\n    return n + 1\nTypeError: unsupported operand type(s) for +: 'int' and 'str'</s>"
  },
  {
    "text": "<s>[INST] Implement a for loop in Python to iterate through a given list of numbers.\n\n[1, 2, 3, 4] [/INST] for num in [1, 2, 3, 4]:\n    print(num)</s>"
  },
  {
    "text": "<s>[INST] Analyze the following code and explain what it does:\n\ndef func(n):\n    if n == 0:\n        return 0\n    else:\n        return n + func(n - 1) [/INST] This code implements a recursive function to compute the sum of numbers from 1 to n. Specifically, the base case is when n is 0, and the recursive case is when n is greater than 0. In the recursive case, the function will call itself with n-1 as the argument, and then adds n to the result of that call. Thus, each recursive call will add one more number until it reaches the base case. This is known as the base case and recursion principle. The result of the function will be the sum of the numbers from 1 to n.</s>"
  },
  {
    "text": "<s>[INST] Identify the data type of the following Python expression:\n\n{\"name\": \"John\", \"age\": 40} [/INST] This expression is a dictionary, which is a type of data structure in Python. A dictionary is a key-value pair, where the key is unique and the value can be a list of data items or a single item. In this example, the key is \"name\" and the value is \"John\", and the key is \"age\" and the value is 40.</s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code snippet in Python to print out the word \"Hello\":\n\nprint(\"Hello\") [/INST] print(\"Hello\")</s>"
  },
  {
    "text": "<s>[INST] Divide two floating-point numbers without using the '/' operator.\n\nA = 5.0, B = 3.0 [/INST] A * (1.0 / B)</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query that lists all entries from a table that have a given parameter in the distinct column.\n\nTable: employee\nParameter: name [/INST] SELECT DISTINCT name FROM employee;</s>"
  },
  {
    "text": "<s>[INST] Using Javascript, create an object that has a property of message with a value of \"Hello, World\" [/INST] let obj = {\n   message: \"Hello, World\"\n}</s>"
  },
  {
    "text": "<s>[INST] Create a method in Java that takes two integers and finds the maximum of them. [/INST] public static int findMax(int num1, int num2) {\n   return (num1 > num2) ? num1 : num2;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a for loop in C++ to print out all the even numbers from 0 to a given number. [/INST] for (int i = 0; i <= n; i+=2) {\n    cout << i << \" \";\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an object in JavaScript to store the details of a person with the fields \"name\",\"age\" and \"address\". [/INST] let person = {\n  \"name\": \"John Doe\",\n  \"age\": 25,\n  \"address\": \"123 Main St, New York, NY 10001\"\n}</s>"
  },
  {
    "text": "<s>[INST] Create a React component that takes two props, a message and a color, and displays the message with the desired color. [/INST] const Message = (props) => {\n  return (\n    <div style={{color: props.color}}>{props.message}</div>\n  )\n}</s>"
  },
  {
    "text": "<s>[INST] Using the comment as a guide, edit the code to handle the error appropriately.\n\ntry:\n    # TODO: Make API call\nexcept Exception:\n    # TODO: Handle error [/INST] try:\n    # Make API call\nexcept Exception as e:\n    # Handle error\n    print(\"An error occurred:\", e)</s>"
  },
  {
    "text": "<s>[INST] Create a function in Haskell that takes an integer and returns a string representing its factorial. [/INST] factorial :: Integer -> String\nfactorial n = show $ product [1..n]</s>"
  },
  {
    "text": "<s>[INST] Create an array of size 10 with each element being a random integer between 0 and 1. [/INST] arr = [random.randint(0, 1) for _ in range(10)]</s>"
  },
  {
    "text": "<s>[INST] Implement a function that returns the reversed version of a given string. [/INST] def reverse_string(string):\n  return string[::-1]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to sort the characters of a string alphabetically. [/INST] function sortString(str) { \n  return str.split(\"\").sort().join(\"\"); \n}</s>"
  },
  {
    "text": "<s>[INST] Create a Java method to interpret a given string into an integer. [/INST] public static int stringToInteger(String s) { \n    int result = 0; \n    int power = 0; \n    for (int i = s.length() - 1; i >= 0; i--) { \n       char ch = s.charAt(i); \n       result += (ch - '0') * Math.pow(10, power); \n        power++; \n    } \n    return result; \n}</s>"
  },
  {
    "text": "<s>[INST] Create a Node.js script that logs a string. [/INST] const fs = require('fs');\n\n// Logs the specified string\nfunction logString(str) {\n  console.log(str);\n}\n\nlogString('Log this string');</s>"
  },
  {
    "text": "<s>[INST] Create a Java class with an empty constructor and a parameterized constructor [/INST] public class TestConstructor {\n \n    public TestConstructor() {\n    }\n \n    public TestConstructor(int n) {\n        // code to run when constructor with parameter is called \n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with two <div> elements [/INST] <html>\n  <body>\n    <div>\n      Content\n    </div>\n    <div>\n      Content\n    </div>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Design a C++ class to count the occurrences of a character [/INST] class CharCounter{\n  private:\n    char charToCount;\n    int counter;\n public:\n    CharCounter(char c) : charToCount{c}, counter{0} {}\n    void countChar(char c);\n    int getCounter();\n};\n\nvoid CharCounter::countChar(char c){\n    if (c == this->charToCount) this->counter++;\n}\n\nint CharCounter::getCounter(){\n    return this->counter;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Java program that takes an array of integers and prints the numbers that are divisible by 5\n\n[10, 20, 25, 15] [/INST] // Create the array of integers\nint[] numbers = {10, 20, 25, 15};\n \n// Iterate over array and print numbers divisible by 5\nfor (int number : numbers) {\n  if (number % 5 == 0) {\n    System.out.println(number);\n  }\n}\n \n// Output: 10 20 25</s>"
  },
  {
    "text": "<s>[INST] Modify the following code to compute the sum of squares of the numbers from k to n.\n\ndef sum(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i\n    return sum [/INST] def sum_squares(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i**2\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Categorize the following phrases into the given categories.\n\nphrase, category\nThis is a big mess, Disaster\nThat was a nice evening, Joy\nI am feeling thirsty, Discomfort [/INST] phrase, category\nThis is a big mess, Disaster\nThat was a nice evening, Joy\nI am feeling thirsty, Discomfort</s>"
  },
  {
    "text": "<s>[INST] In the following code snippet, what will be the output of the print statement ?\n\nx = 10\ny = 5\nx = x + y\nprint(x) [/INST] x = 10\ny = 5\nx = x + y\nprint(x) # Prints 15</s>"
  },
  {
    "text": "<s>[INST] Design a function which takes two numbers as input and returns the largest one as output. [/INST] def largest_of_two(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2</s>"
  },
  {
    "text": "<s>[INST] Assign the correct data type for the following variable.\n\nname = \"John Smith\" [/INST] name = \"John Smith\" # str</s>"
  },
  {
    "text": "<s>[INST] Design a function which prints all the permutations of a given list of numbers. [/INST] def permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    res = []\n    for i in range(len(nums)):\n        for p in permutations(nums[:i] + nums[i+1:]):\n            res.append([nums[i]] + p)\n    return res\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print(permutations(nums)) # [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm that iterates through a given string and returns the number of alphabets present in the string.\n\n\"abracadabra\" [/INST] def count_alphabets(string):\n  count = 0\n  for i in range(len(string)):\n    if string[i].isalpha():\n      count += 1\n  return count</s>"
  },
  {
    "text": "<s>[INST] Write a function in R that takes a vector as an argument and returns a new vector in which each element is the average of that element with its two neighbors from the original vector.\n\nc(1, 4, 2, 8, 6) [/INST] average_three <- function(x) {\n  c(mean(c(x[2], x[1])), mean(x), mean(c(x[2], x[3])))\n}</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression pattern in JavaScript that checks if a given string is a valid mobile phone number in India. [/INST] ^[6-9]\\d{9}$</s>"
  },
  {
    "text": "<s>[INST] Create a machine learning model in Python using the given data that classifies the data into either 'positive' or 'negative'.\n\n<contents of the dataset>, data type: binary classification [/INST] # Load the dataset\nX, y = <contents of the dataset>\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy score: \", accuracy)</s>"
  },
  {
    "text": "<s>[INST] Implement a data structure in Java that implements a stack with the following methods: 'push', 'pop', 'peek', and 'isEmpty'. [/INST] import java.util.*;\n \npublic class StackImplementation {\n \n    private Stack<Integer> stack;\n \n    public StackImplementation() {\n        stack = new Stack<>();\n    }\n \n    public void push(int x) {\n        stack.push(x);\n    }\n \n    public int pop() {\n        if (stack.isEmpty()) {\n            System.out.println(\"Stack is empty\");\n            return -1;\n        }\n        return stack.pop();\n    }\n \n    public int peek() {\n        if (stack.isEmpty()) {\n            System.out.println(\"Stack is empty\");\n            return -1;\n        }\n        return stack.peek();\n    }\n \n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Parse the given XML document using an XSLT transformation and create an HTML table with the list of books and their authors.\n\n<the content of the xml document> [/INST] <?xml version=\"1.0\"?>\n<xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n\n<xsl:template match=\"/\">\n <html>\n   <body>\n     <table border=\"1\">\n       <tr>\n         <th>Book</th>\n         <th>Author</th>\n       </tr>\n      <xsl:for-each select=\"catalog/book\">\n      <tr>\n        <td><xsl:value-of select=\"title\"/></td>\n        <td><xsl:value-of select=\"author\"/></td>\n      </tr>\n     </xsl:for-each>\n     </table>\n   </body>\n </html>\n</xsl:template>\n</xsl:stylesheet></s>"
  },
  {
    "text": "<s>[INST] Create a web page using HTML and CSS where the font size of the content increases with the screen size. [/INST] <!DOCTYPE html>\n<html>\n  <head>\n   <style>\n     h1{\n       font-size: 1.5em;\n     }\n     @media only screen and (min-width: 600px) {\n       h1 { font-size: 2em; }\n     }\n     @media only screen and (min-width: 900px) {\n       h1 { font-size: 2.5em; }\n     }\n   </style>\n  </head>\n  <body>\n  <h1>My Title</h1>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a Ruby program that takes a group of strings and returns the number of strings longer than 5 characters.\n\n[\"Hello\", \"World\", \"Foo\", \"Bar\", \"Baz\"] [/INST] strings = [\"Hello\", \"World\", \"Foo\", \"Bar\", \"Baz\"]\ncount = 0\n\nstrings.each do |str|\n  if str.length > 5\n    count += 1\n  end\nend\n\nputs \"The number of strings longer than 5 characters is: #{count}\"</s>"
  },
  {
    "text": "<s>[INST] Find the minimum value from a given array.\n\n[3, -2, 4, 7] [/INST] def findMin(arr):\n    current_min = arr[0]\n    for num in arr:\n        if num < current_min:\n            current_min = num\n    return current_min</s>"
  },
  {
    "text": "<s>[INST] Describe how a linked list data structure works in pseudo code. [/INST] A linked list is a linear data structure that consists of a sequence of elements, each element containing a pointer to the next element in the list. Some implementations may also contain a pointer to the previous element in the list. Pseudo-code would look like:\n\nSTART \nClass Node \n   int data \n   Node next \nEND Class \n\nNode head  // the start of the list \n\n// traverse the list \nwhile (current != NULL) {\n   // process node \n   current = current.next \n}\n\nEND</s>"
  },
  {
    "text": "<s>[INST] Develop a Python code to extract all words from a sentence that begin with a specific letter.\n\nsentence = \"I love coding in Python\"\nletter = \"P\" [/INST] sentence = \"I love coding in Python\"\nletter = \"P\"\n\nwords_starting_with_P = [word for word in sentence.split() if word.startswith(letter)]\n\nprint(words_starting_with_P)\n# Output: ['Python']</s>"
  },
  {
    "text": "<s>[INST] Write a web scraper in Python to collect the data from the top 1000 IMDB movies [/INST] import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&view=simple&count=250&start=1'\nhtml_doc = requests.get(url).text\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# extract data from HTML table\ntable = soup.find('table', attrs={'class': 'chart'})\nmovies = []\nfor row in table.find_all('tr')[1:]:\n    title = row.find('td', style='').get_text()\n    rating = row.find('td', class_='ratingColumn imdbRating').get_text().strip()\n    movies.append({'title': title, 'rating': rating})\n\nprint(movies)</s>"
  },
  {
    "text": "<s>[INST] Create a new array of integers which contains the sum of corresponding elements of two existing arrays.\n\narr1 = [1, 2, 3]\narr2 = [4, 5, 6] [/INST] arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\n# Initialize new array\narr_sum = [0 for _ in range(len(arr1))]\n\n# Add the values of both arrays\nfor i in range(len(arr1)):\n    arr_sum[i] = arr1[i] + arr2[i]\n\nprint(arr_sum)\n# Output: [5, 7, 9]</s>"
  },
  {
    "text": "<s>[INST] Write a method to implement binary search using Java. [/INST] public static int binarySearch(int[] array, int x) \n   { \n       int low = 0, high = array.length - 1; \n          \n       while (low <= high)  \n       { \n           int mid = (low + high) / 2; \n           if (array[mid] < x) \n               low = mid + 1; \n           else if (array[mid] > x)  \n               high = mid - 1; \n           else\n               return mid; \n       } \n       return -1; \n   }</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL query for fetching all rows from a table named \"Employees\". [/INST] SELECT * FROM Employees;</s>"
  },
  {
    "text": "<s>[INST] Create a regular expression for validating a lowercase alphabet, number, or underscore. [/INST] ^[a-z0-9_]*$</s>"
  },
  {
    "text": "<s>[INST] Construct a for loop for iterating 10 times and executing a block of code. [/INST] for (int i=0; i<10; i++) {\n    // execute block of code\n}</s>"
  },
  {
    "text": "<s>[INST] Style the following title with css.\n\n<h1>My Webpage</h1> [/INST] <h1 style=\"display: block; text-align: center; font-size: 2em; color: #FF0000;\">My Webpage</h1></s>"
  },
  {
    "text": "<s>[INST] Debug the following function.\n\ndef f(n):\n    i = 0\n    while i < n:\n        i+=1\n        if i % 5 == 0:\n        print(i) [/INST] def f(n): \n    i = 0\n    while i < n:\n        i+=1\n\t\t# Fixed missing indentation\n        if i % 5 == 0:\n            print(i)\n\t\t# Added missing closing bracket after print() statement</s>"
  },
  {
    "text": "<s>[INST] Construct an object-oriented code for a Book class. [/INST] class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_year(self):\n        return self.year\n    \n    def set_title(self, new_title):\n        self.title = new_title\n        \n    def set_author(self, new_author):\n        self.author = new_author\n        \n    def set_year(self, new_year):\n        self.year = new_year</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm that can recognize handwriting. [/INST] The algorithm should use pre-processing techniques like image cropping, normalization, and thresholding to convert the raw input image into a binary image. It should then use feature extraction techniques like contours, corner detection, and Hough Transform to detect and separate the characters from the image. The algorithm should then use machine learning techniques like error-backpropagation and convolutional neural networks to classify and recognize the characters in the image.</s>"
  },
  {
    "text": "<s>[INST] Suggest a better algorithm for calculating Fibonacci sequence. [/INST] A better algorithm for calculating Fibonacci sequence is the iterative method. Instead of making recursive calls, this method computes each element of the Fibonacci sequence in a loop. This method is more efficient and requires less memory overhead. The algorithm is as follows:\n\ndef iterative_fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(1,n+1):\n        c = a + b\n        a = b\n        b = c\n    return a</s>"
  },
  {
    "text": "<s>[INST] Write a generic code for traversing a tree. [/INST] def traverse_tree(root): \n  if root is None: \n    return\n\t\n  traverse_tree(root.left) \n  print(root.data) \n  traverse_tree(root.right)</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression that matches all English alphabets. [/INST] RegEx: [a-zA-Z]</s>"
  },
  {
    "text": "<s>[INST] Create a new view controller class named \"MainViewController\". [/INST] class MainViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to iterate through a 1D array, and print each value.\n\narray = [1,2,3,4] [/INST] const array = [1,2,3,4];\n\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}</s>"
  },
  {
    "text": "<s>[INST] What is an SQL JOIN? [/INST] An SQL JOIN is a clause that allows for combining data from multiple tables in a relational database. A JOIN combines records from two or more tables based on the values from one or more columns. It is used in SELECT statement to join the results of two or more tables and then display the result set. There are four types of JOINs: INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN. Each one produces a different result set.</s>"
  },
  {
    "text": "<s>[INST] Create a new View subclass of UIView and name it \"MainView\". [/INST] class MainView: UIView { \n  override func draw(_ rect: CGRect) {\n      // code to customize the main view\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] What is HTML5 Canvas? [/INST] HTML5 Canvas is an HTML element that can be used to draw graphics and animation with JavaScript scripts. It provides the ability to render graphics on the fly without the need for any plugins. Canvas elements are rendered as bitmap images which can be manipulated with code to create dynamic effects.</s>"
  },
  {
    "text": "<s>[INST] Create a Swift enum to represent the different mobile phone brands. [/INST] enum MobilePhoneBrand {\n    case Apple\n    case Samsung\n    case Huawei\n    case Oppo\n    case Vivo\n    case Xiaomi\n}</s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to center a container with class \"main\". [/INST] .main {\n    margin: 0 auto;\n    width: 100%;\n    display: block;\n    text-align: center;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct an SQL statement to retrieve data from a table called \"users\". [/INST] SELECT * FROM users;</s>"
  },
  {
    "text": "<s>[INST] Identify the type of layout used in this HTML structure.\n\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"column\"><h1>Title</h1></div>\n    </div>\n    <div class=\"row\">\n        <div class=\"column\"><p>Content</p></div>\n        <div class=\"column\"><p>Content</p></div>\n        <div class=\"column\"><p>Content</p></div>\n    </div>\n</div> [/INST] The type of layout used in this HTML structure is a Grid Layout. The columns are divided into equal widths, which creates a grid pattern. The content within each column is arranged horizontally.</s>"
  },
  {
    "text": "<s>[INST] Write a PHP script to fetch data from an API. [/INST] <?php\n    //Initialize cURL\n    $curl = curl_init();\n\n    //Set cURL parameters\n    curl_setopt_array($curl, array(\n    CURLOPT_URL => \"http://path.to/api/\",\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_HTTPHEADER => array(\"Content-type: application/json\")\n    ));\n\n    //Execute cURL\n    $response = curl_exec($curl);\n\n    //Close cURL\n    curl_close($curl);\n\n    //Decode the response\n    $data = json_decode($response);\n\n    //Do something with the data\n    foreach ($data as $obj) {\n        echo $obj->name;\n        echo $obj->price;\n    }\n?></s>"
  },
  {
    "text": "<s>[INST] How does recursion work? [/INST] Recursion is a method of problem solving where the solution to a problem relies on solving smaller instances of the same problem. In computing, recursion is a process by which a method calls itself continuously. A base case is used to terminate the recursion, and each time the method calls itself, it works on a smaller version of the problem. Recursive algorithms can be used to solve a wide range of problems, from sorting and searching algorithms, to graph traversal and problems in computer graphics.</s>"
  },
  {
    "text": "<s>[INST] Create a C# class named \"Car\" that models a car. [/INST] class Car {\n    private string make;\n    private string model;\n    private int year;\n\n    public Car(string make, string model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    public string getMake() {\n        return this.make;\n    }\n\n    public string getModel() {\n        return this.model;\n    }\n\n    public int getYear() {\n        return this.year;\n    }\n\n    public void setMake(string make) {\n        this.make = make;\n    }\n\n    public void setModel(string model) {\n        this.model = model;\n    }\n\n    public void setYear(int year) {\n        this.year = year;\n    }\n\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a way of sorting an array of integers A in descending order.\n\nA = [4, 7, 2, 9, 6]; [/INST] A.sort(reverse=True);</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML code so that it displays a black, 100px border-radius circle.\n\n<div class=\"circle\"></div> [/INST] <div class=\"circle\" style=\"border-radius: 100px; background-color: black; height: 100px; width: 100px;\"></div></s>"
  },
  {
    "text": "<s>[INST] Rewrite the following code using try and except blocks.\n\nif (len(list) == 0):\n    print(\"List is empty\") [/INST] try:\n    if (len(list) == 0):\n        print(\"List is empty\")\nexcept:\n    print(\"No list is given\")</s>"
  },
  {
    "text": "<s>[INST] Run the following program and provide the console output.\n\ndef multiply(x, y):\n    return x * y\n\nprint(multiply(2, 5)) [/INST] 10</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to display the following list in a readable format.\n\nlist = [3,5,7,9,11] [/INST] print(\", \".join(str(x) for x in list)) \n# Output: 3, 5, 7, 9, 11</s>"
  },
  {
    "text": "<s>[INST] Suggest a way of replacing all the vowels in a string with a star (*).\n\nstring = \"Hello World!\" [/INST] print(''.join([x if x not in 'aeiou' else '*' for x in string]))\n# Output: H*ll* W*rld!</s>"
  },
  {
    "text": "<s>[INST] Suggest a way of encrypting text using a Caesar cipher.\n\nplaintext = \"Hello World\" [/INST] def caesar_encrypt(plaintext, k):\n    ciphertext = \"\" \n  \n    # traverse text \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + k-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            ciphertext += chr((ord(char) + k - 97) % 26 + 97) \n  \n    return ciphertext \n\nprint(caesar_encrypt(plaintext, 3))\n# Output: Khoor Zruog</s>"
  },
  {
    "text": "<s>[INST] Suggest a way of decoding a string encoded using Base64.\n\nencoded_string = \"SGVsbG8gV29ybGQ=\" [/INST] import base64\n\ndef decodeBase64(encoded_string):\n    return base64.b64decode(encoded_string).decode('utf-8')\n\nprint(decodeBase64(encoded_string))\n# Output: Hello World</s>"
  },
  {
    "text": "<s>[INST] Write a RabbitMQ consumer in Java to listen to a particular queue. [/INST] import com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\npublic class Consumer {\n\n  public static void main(String[] args) throws Exception {\n    // establish a connection to the RabbitMQ broker\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"hostname\");\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n    \n    // declare a queue\n    String queueName = \"myQueue\";\n    channel.queueDeclare(queueName, false, false, false, null);\n\n    // set up a consumer that will listen to the declared queue\n    DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n      String message = new String(delivery.getBody());\n      System.out.println(\"Received '\" + message + \"'\");\n    };\n    channel.basicConsume(queueName, true, deliverCallback, consumerTag -> { });\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Identify and correct the bug in the following program.\n\ndef square_numbers(lst):\n    lst_sq = []\n    lst_sq.append(lst[i] ** 2 for i in range(len(lst)))\n    return lst_sq [/INST] def square_numbers(lst):\n    lst_sq = []\n    for i in range(len(lst)):\n        lst_sq.append(lst[i] ** 2)\n    return lst_sq</s>"
  },
  {
    "text": "<s>[INST] Create a program to generate the n-th Fibonacci number. [/INST] def fibonacci(n):\n    '''This function returns the n-th Fibonacci number.'''\n\n    if n == 0 or n == 1:\n        return n\n    \n    fib_n_1 = 0\n    fib_n_2 = 1\n\n    for i in range(2, n+1):\n        fib_n = fib_n_1 + fib_n_2\n        fib_n_1, fib_n_2 = fib_n_2, fib_n\n\n    return fib_n</s>"
  },
  {
    "text": "<s>[INST] Extract the strings that match the following regex pattern from a text block\n\ntext block = “hotel #9888, school #9876, airport #987”\nregex pattern = #[0-9]{4} [/INST] ['#9888', '#9876', '#987']</s>"
  },
  {
    "text": "<s>[INST] Create a Ruby program that asks for a user's name and greets them with their name [/INST] puts \"What is your name?\"\nname = gets.chomp\nputs \"Hello, #{name}!\"</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java with three private fields and three public functions to access those fields. [/INST] public class MyClass{\n    private int num;\n    private double dbl; \n    private char c;\n\n    public int getNum(){\n        return num;\n    }\n    public void setNum(int num){\n        this.num = num;\n    }\n    public double getDbl(){\n        return dbl;\n    }\n    public void setDbl(double dbl){\n        this.dbl = dbl;\n    }\n    public char getChar(){\n        return c;\n    }\n    public void setChar(char c){\n        this.c = c;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] What is the HTML code for a button tag that sends the user to a URL? [/INST] <button type=\"button\" onclick=\"window.location.href='https://example.com'\">Go to website</button></s>"
  },
  {
    "text": "<s>[INST] Update the below HTML snippet to make all the section heading elements center aligned.\n\n<h1>Section 1</h1>\n<h2>Section 2</h2>\n<h3>Section 3</h3> [/INST] <h1 style=\"text-align: center;\">Section 1</h1>\n<h2 style=\"text-align: center;\">Section 2</h2>\n<h3 style=\"text-align: center;\">Section 3</h3></s>"
  },
  {
    "text": "<s>[INST] How do you test a web application using Selenium webdriver? [/INST] In order to test a web application using Selenium webdriver, you need to create a Selenium script that navigates the web application, verifies the expected output, and records test results. You would then run the script on different browsers or devices to verify the application's functionality across various environments.</s>"
  },
  {
    "text": "<s>[INST] Replace the placeholders in the following Python code snippet with appropriate values.\n\nfor x in range(__, __):\n    print(x) [/INST] for x in range(0, 10):\n    print(x)</s>"
  },
  {
    "text": "<s>[INST] Rewrite the below C statement using a ternary operator.\n\nif (condition) {\n    result = 5;\n}\n\nelse {\n    result = 10;\n} [/INST] result = (condition) ? 5 : 10;</s>"
  },
  {
    "text": "<s>[INST] Identify the division of numbers 10 and 5. [/INST] The division of 10 and 5 is 2.</s>"
  },
  {
    "text": "<s>[INST] Create a multi-dimensional array in Python. [/INST] arr = [[1,2,3], [4,5,6], [7,8,9]]</s>"
  },
  {
    "text": "<s>[INST] Print the maximum element in a linked list.\n\nhead - [1, 3, 4, 10, 8] [/INST] def maximum(head): \n    max = head.data \n    while head is not None: \n        if max < head.data: \n            max = head.data \n        head = head.next\n    return max</s>"
  },
  {
    "text": "<s>[INST] Create a loop in Python to multiply each element of a list with 10.\n\nlst = [1, 2, 3, 4, 5] [/INST] def multiply_list(lst):\n    for i in range(len(lst)):\n        lst[i] *= 10\n    return lst</s>"
  },
  {
    "text": "<s>[INST] Given an array of integers and a target value, modify the array such that each element is the multiplication of the previous element and the target value.\n\narr = [2, 4, 5], target = 3 [/INST] arr = [2, 8, 24]  # [2 * 3, 4 * 3, 5 * 3]</s>"
  },
  {
    "text": "<s>[INST] Compute the average of the elements of the given list.\n\nnums = [8, 19, 2, 5, 6] [/INST] average = 8.4  # (8 + 19 + 2 + 5 + 6)/5</s>"
  },
  {
    "text": "<s>[INST] Find the closest number to given value using a binary search algorithm.\n\narr = [2, 4, 7, 10, 11, 12], val = 6 [/INST] closest_num = 7  # 10 is the closest number to 6 in the array</s>"
  },
  {
    "text": "<s>[INST] Print the value corresponding to the given key in a dictionary.\n\ndic = {'name': 'John', 'age': 18}, key = 'name' [/INST] John  # The value associated with 'name' is 'John'</s>"
  },
  {
    "text": "<s>[INST] Create a class that contains two methods: one to generate a random number between a given range, and one to create a list of \"n\" random numbers.\n\nn = 10, min = 0, max = 100 [/INST] class RandomNumberList:\n    def __init__(self):\n        self.numbers = []\n    \n    def generate_random(self, min, max):\n        return random.randint(min, max) \n    \n    def create_list(self, n, min, max):\n    # Generate a list of n random numbers between min and max\n        self.numbers = [self.generate_random(min, max) for _ in range(n)]\n        return self.numbers</s>"
  },
  {
    "text": "<s>[INST] Calculate the sum of all the integers in the range of m to n (inclusive).\n\nm = 10, n = 20 [/INST] sum = 165  # 10 + 11 + 12 + ... + 20 = 165</s>"
  },
  {
    "text": "<s>[INST] Suggest an improvement to make the code more efficient.\n\na = [1,2,3,4,5]\nloop_count = len(a)\nwhile loop_count > 0:\n    print(loop_count)\n    loop_count -= 1 [/INST] a = [1,2,3,4,5]\nfor number in a:\n    print(number) // Instead of looping through the number of items in 'a', loop through the items of 'a' directly.</s>"
  },
  {
    "text": "<s>[INST] Complete the following JavaScript function so that it reads the string parameter and prints all the uppercase letters.\n\nfunction print_uppercase_letters(string) {\n  \n} [/INST] function print_uppercase_letters(string) {\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (char === char.toUpperCase()) {\n      console.log(char);\n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Suggest a method to search for a specified character in a string. [/INST] One approach is to loop through each character in the string and check if it matches the character to be searched for. If it does, the index of the character can be returned, or a boolean indicating whether the character is present in the string or not can be returned. Another approach is to use built-in string functions such as .indexOf() or .includes() to search for the specified character.</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to make the following code more concise.\n\nif i == 0:\n    result = \"zero\"\nelif i == 1:\n    result = \"one\"\nelif i == 2:\n    result = \"two\" [/INST] result = [\"zero\", \"one\", \"two\"][i] // Using a list and indexing can shorten the code.</s>"
  },
  {
    "text": "<s>[INST] Suggest a way to change the following code so that it does not use a nested loop.\n\nfor n in range(10):\n    for i in range(n):\n        print('*', end='')\n    print() [/INST] for n in range(10):\n    print('*' * n) // The code can be rewritten to use one single line and one loop only.</s>"
  },
  {
    "text": "<s>[INST] Suggest a data structure that can be used to store contacts information (name, email, phone number). [/INST] A hash table can be used to store the contacts information as it provides a key-value mapping of the information. Keys can be either the name, email or phone number depending on the mapping pattern desired. A set or LinkedList can also be used for this purpose, as the information does not have any orders associated with it.</s>"
  },
  {
    "text": "<s>[INST] Write a regular expression that matches URLs that end with \".net\". [/INST] /(.*)\\.net$/ // Matches URLs that end with \".net\".</s>"
  },
  {
    "text": "<s>[INST] Suggest one line of code that should be added to the following function to make it more efficient.\n\ndef search_prime_numbers(n):\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            print(num) [/INST] def search_prime_numbers(n):\n    for num in range(2, n + 1):\n        if num > 2 and num % 2 == 0: // This line can be added to make the function more efficient by avoiding the check for even numbers greater than 2.\n            continue\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            print(num)</s>"
  },
  {
    "text": "<s>[INST] Generate a random password of 8 characters containing numbers and letters. [/INST] jK9xz39V</s>"
  },
  {
    "text": "<s>[INST] Use regular expression to create a pattern to identify email addresses in a string.\n\n‘This is an example of an email: xyz@example.com’ [/INST] pattern = re.compile(r'[\\w\\.-]+@[\\w\\.-]+')</s>"
  },
  {
    "text": "<s>[INST] Write a LINQ query in C# to select customers from the USA. [/INST] var filteredResult = from customer in customers\n                     where customer.Country == \"USA\"\n                     select customer;</s>"
  },
  {
    "text": "<s>[INST] Create a user-defined type in Python to store information about a person. [/INST] class Person:\n    def __init__(self, firstname, lastname, age):\n        self.firstname = firstname\n        self.lastname = lastname\n        self.age = age\n\nperson1 = Person('John', 'Smith', 25)</s>"
  },
  {
    "text": "<s>[INST] Write a query in MySQL to delete a record from a table named 'customers' where the address field is ‘Unknown’. [/INST] DELETE FROM customers WHERE address = 'Unknown';</s>"
  },
  {
    "text": "<s>[INST] Define a JavaScript class to store information about a circle. [/INST] class Circle {\n  constructor(radius) {\n    this.radius = radius;\n    this.diameter = radius * 2;\n  }\n  \n  area() {\n    return Math.PI * this.radius * this.radius;\n  }\n  \n  circumference() {\n    return Math.PI * this.diameter;\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Create a stored procedure in SQL to insert a new entry into a 'products' table. [/INST] CREATE PROCEDURE InsertProduct\n(@Name varchar(50), \n @Price decimal(2,2))\nAS\n BEGIN\n \tINSERT INTO products(name, price) \n \tVALUES (@Name, @Price)\n \tSELECT @@IDENTITY As NewId\n END;</s>"
  },
  {
    "text": "<s>[INST] Use a template in HTML and JavaScript to create a table with 10 columns. [/INST] <table>\n  <thead>\n    <tr>\n      <th>Col1</th>\n      <th>Col2</th>\n      <th>Col3</th>\n      <th>Col4</th>\n      <th>Col5</th>\n      <th>Col6</th>\n      <th>Col7</th>\n      <th>Col8</th>\n      <th>Col9</th>\n      <th>Col10</th>\n    </tr>\n  </thead>\n  <tbody>\n    <script>\n      for (var i = 0; i < 10; i++){\n        document.write(\"<tr><td>\" + i + \"</td></tr>\");\n      }\n    </script>\n  </tbody>\n</table></s>"
  },
  {
    "text": "<s>[INST] Implement a class to implement a Huffman coding algorithm. [/INST] class HuffmanCoding:\n \n    def __init__(self, inp_string):\n        self.inp_string = inp_string\n        self.string_length = len(inp_string)\n        self.frequency_table = self.get_frequency_table(inp_string)\n        self.huff_tree = self.build_huffman_tree(self.frequency_table)\n \n    def get_frequency_table(self, inp_string):\n        # Create dictionary to store frequencies\n        freq_table = {}\n        # Count frequency of characters in the string\n        for char in inp_string:\n            if char in freq_table:\n                freq_table[char] += 1\n            else:\n                freq_table[char] = 1\n        # Return the frequency table\n        return freq_table\n \n    def build_huffman_tree(self, frequency_table):\n        # Create a priority queue to store the trees \n        pq = PriorityQueue()\n        # Create a tree for each value\n        for value in frequency_table:\n            pq.put((frequency_table[value], Node(value)))\n        # Start the loop with two trees\n        while pq.qsize() > 1:\n            left_node = pq.get()\n            right_node = pq.get()\n            combined_freq = left_node[0] + right_node[0]\n            new_node = Node(left=left_node[1], right=right_node[1])\n            pq.put((combined_freq, new_node))\n        # Return the tree\n        return pq.get()[1]</s>"
  },
  {
    "text": "<s>[INST] What is the workflow of a deep learning project? [/INST] The workflow of a deep learning project typically consists of the following steps:\n\n1. Data Collection, Preparation and Analysis: Collecting and preparing the data for the project, including data exploration, feature engineering, and data cleaning.\n\n2. Model Design & Training: Designing the architecture of the deep learning model and selecting the best hyperparameters that will lead to the highest possible performance on a given task.\n\n3. Model Evaluation: Evaluating the performance of the model on test data to determine its accuracy.\n\n4. Model Deployment: Deploying the model in the form of an application or service.</s>"
  },
  {
    "text": "<s>[INST] Implement the bottom up cut rod algorithm in Python. [/INST] def bottomUpCutRod(prices, n): \n \n    # Create an array of size n+1 \n    temp_array = [0 for i in range(n+1)] \n    for i in range(1, n+1): \n        tempval = -float('inf') \n        for j in range(i): \n            tempval = max(tempval, prices[j] + temp_array[i-j-1]) \n        temp_array[i] = tempval \n  \n    return temp_array[n]</s>"
  },
  {
    "text": "<s>[INST] How can you handle errors in Python? [/INST] Python provides two ways to handle errors: \n\n1. The try and except statement, and \n2. The raise statement.\n\nThe try and except statement is used to catch and handle exceptions, while the raise statement is used to explicitly raise an exception.</s>"
  },
  {
    "text": "<s>[INST] Describe the working of a Recurrent Neural Network (RNN). [/INST] A Recurrent Neural Network (RNN) is a type of artificial neural network that is widely used for natural language processing, dialogue systems, and time series prediction. RNNs have the ability to process data sequences, which gives them an advantage over traditional neural networks. This is done by using recurrent connections between the hidden layers of the network. In this type of network architecture, the outputs from the previous layer are used as inputs to the next layer. This allows the network to remember the context of the data sequentially, which makes it suitable for problems with a temporal component. RNNs can also be used to train the model to produce a sequence output by predicting the next item in the sequence.</s>"
  },
  {
    "text": "<s>[INST] Provide a function to implement a Binary Tree traversal. [/INST] def printTree(root): \n    \n    # Check if tree is empty\n    if root == None: \n        return\n    \n    # First print the root data\n    print(root.data, end=\" \")\n    \n    # First recur on left child\n    printTree(root.left)\n    \n    # the recur on right child\n    printTree(root.right)</s>"
  },
  {
    "text": "<s>[INST] Create a correlation heatmap in Python using a given dataset.\n\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD')) [/INST] import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr = data.corr()\n\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)\nplt.show()</s>"
  },
  {
    "text": "<s>[INST] For a given programming language, list the data types supported by that language. [/INST] In Java, the supported data types include primitive data types like int, float, char, as well as non-primitive types such as String, Array, List, Set, and Map.</s>"
  },
  {
    "text": "<s>[INST] Generate the Fibonacci sequence in a given range in Python.\n\nn = 8 [/INST] def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \nFibonacci(n)</s>"
  },
  {
    "text": "<s>[INST] Write code to convert a given string to all uppercase letters in Python. [/INST] string_org = \"convert this to uppercase\"\nstring_uppercase = string_org.upper() \nprint(string_uppercase) \n# OUTPUT: CONVERT THIS TO UPPERCASE</s>"
  },
  {
    "text": "<s>[INST] Generate a random 9-digit id in Java. [/INST] import java.util.Random;\n  \npublic class Example {\n  \n public static void main(String[] args) {\n    Random random = new Random();\n    int random_number = 1000000000 + random.nextInt(900000000);\n    System.out.println(random_number);\n }\n  \n}</s>"
  },
  {
    "text": "<s>[INST] Create a url parser in JavaScript that can return the path from a given url. [/INST] function getPathFromURL(url) {\n  const urlObj = new URL(url);\n  const path = urlObj.pathname;\n  return path;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to print out a multiplication table of a number in Python. [/INST] def print_multiplication_table(num): \n    for i in range(1,11):  \n       print(num,'x',i,'=',num*i)\n\nprint_multiplication_table(5) \n# OUTPUT: 5 x 1 = 5\n        5 x 2 = 10\n        5 x 3 = 15\n        5 x 4 = 20\n        5 x 5 = 25\n        5 x 6 = 30\n        5 x 7 = 35\n        5 x 8 = 40\n        5 x 9 = 45\n        5 x 10 = 50</s>"
  },
  {
    "text": "<s>[INST] Create a C# class with an interface that can be used to store and manipulate data. [/INST] public class DataManipulator\n{\n    public interface IDataManipulator\n    {\n        void StoreData(string data);\n        void ManipulateData();\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all the vehicles from a table that are owned by John.\n\nTable name: vehicles\nColumns: owner_name, vehicle [/INST] SELECT vehicle FROM vehicles WHERE owner_name = 'John'</s>"
  },
  {
    "text": "<s>[INST] What is the ASCII character for the code “97”? [/INST] The ASCII character for the code “97” is 'a'.</s>"
  },
  {
    "text": "<s>[INST] In the following code, what is the variable a?\n\nvar a = 3 + 4; [/INST] The variable a is the result of the expression 3 + 4, which is 7.</s>"
  },
  {
    "text": "<s>[INST] Write a recurrence relation for the following algorithm.\n\nAlgorithm A:\nn = n - 3 \nif n ≥ 0 then A(n) [/INST] The recurrence relation for Algorithm A is A(n) = A(n - 3), n ≥ 0.</s>"
  },
  {
    "text": "<s>[INST] Are string and array objects mutable or immutable in JavaScript? [/INST] In JavaScript, strings and arrays are both mutable objects. This means that these objects can be changed after they have been created, and can be modified in place. Other primitive data types, such as numbers and booleans, are immutable and cannot be changed after they have been created.</s>"
  },
  {
    "text": "<s>[INST] Suggest a machine learning model for predicting stock prices. [/INST] A possible machine learning model for predicting stock prices is the Long Short-Term Memory (LSTM) Neural Network. This model is widely used for forecasting time-series data, such as stock prices. It is capable of capturing long-term dependencies and has been used successfully to make accurate predictions in many areas.</s>"
  },
  {
    "text": "<s>[INST] Write CSS code to position a div in the middle and bottom of the page. [/INST] div {\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n}</s>"
  },
  {
    "text": "<s>[INST] How would you design a game of hangman using object-oriented programming? [/INST] In designing a game of hangman using object-oriented programming, one could create separate classes for a Hangman game, a player, a puzzle, and a set of words. The Hangman class would be responsible for managing the game overall and for handling the interactions between the player and the puzzle. The player class would store the players name, number of guesses, and score. The puzzle class would manage the state of the puzzle and handle updates when new letters are guessed. Finally, the Words class would handle the management and loading of word data.</s>"
  },
  {
    "text": "<s>[INST] Convert the following block of code into a more concise version using more appropriate looping mechanisms.\n\nmyList = [\"one\", \"two\", \"three\", \"four\"]\n\nnewList = []\nfor element in myList:\n    newList.append(element[0]) [/INST] myList = [\"one\", \"two\", \"three\", \"four\"]\n\nnewList = [element[0] for element in myList]</s>"
  },
  {
    "text": "<s>[INST] Generate a new array by selecting the menu entries associated with each table.\n\ntable1 = [\"burger\", \"fries\"]\ntable2 = [\"pizza\", \"bbq chicken\"] [/INST] menu = []\nmenu.extend(table1)\nmenu.extend(table2)</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet that prints out each name and its length.\n\nnames = [\"John\", \"Alice\", \"Paul\"] [/INST] for name in names:\n    print(name, len(name))</s>"
  },
  {
    "text": "<s>[INST] Generate a list containing all multiples of 3 from 0 to 30. [/INST] multiples_of_3 = [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30]</s>"
  },
  {
    "text": "<s>[INST] Sort the string list across both key and value.\n\nlist =[(\"hello\", 1), (\"world\", 2), (\"today\", 4), (\"is\", 3)] [/INST] list =[(\"hello\", 1), (\"world\", 2), (\"today\", 4), (\"is\", 3)]\nsorted_list = sorted(list, key = lambda kv:(kv[0], kv[1])) \nprint(sorted_list)</s>"
  },
  {
    "text": "<s>[INST] Describe a short code fragment that imports xml as an object. [/INST] import xml.etree.ElementTree as ET \ntree = ET.parse(\"doc.xml\") \nroot = tree.getroot()</s>"
  },
  {
    "text": "<s>[INST] How would you use regex to identify a valid ip4 address? [/INST] A valid IPv4 address can be identified using the regular expression pattern: \n\n^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$</s>"
  },
  {
    "text": "<s>[INST] Reverse a given string using recursive function in Python. [/INST] def reverse_string(str):\n    if len(str) == 0: \n        return str \n    else:\n        return reverse_string(str[1:]) + str[0]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to remove all the occurrences of a specified character from a string.\n\nThe quick brown fox [/INST] function removeChar(str, char){\n  return str.replace(new RegExp(char, 'g'), '');\n}</s>"
  },
  {
    "text": "<s>[INST] Create an array of 5 random numbers between 1 and 10 and output it to the console. [/INST] let arr = [];\nfor (let i = 0; i < 5; i++) {\n    arr.push(Math.floor(Math.random() * 10 + 1));\n}\nconsole.log(arr);</s>"
  },
  {
    "text": "<s>[INST] Debug and fix the code in the given input.\n\ndef multiply(x,y)  \n{ \n    return x*y \n  \nx = 5\ny = 4\nprint multiply(x,y) [/INST] def multiply(x,y)  { \n    return x*y \n  \nx = 5\ny = 4\nprint(multiply(x,y))</s>"
  },
  {
    "text": "<s>[INST] Create a Java program that takes in a String and returns a String with the letters of the original String reversed.\n\nstring = \"Hello\" [/INST] public static String reverseString(String s) \n{\n    StringBuilder sb = new StringBuilder();\n    \n    for (int i = s.length() - 1; i >= 0; i--)\n    {\n        sb.append(s.charAt(i));\n    }\n    \n    return sb.toString();\n}</s>"
  },
  {
    "text": "<s>[INST] You need to add a feature to the existing code in the given input.\n\nclass Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year [/INST] class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = 0\n\n    def getMileage(self):\n        return self.mileage</s>"
  },
  {
    "text": "<s>[INST] Re-write the code in the given input to make it more efficient.\n\ndef fibonacci(n):\n   if n <= 1:\n      return n\n   else:\n      return(fibonacci(n-1) + fibonacci(n-2)) [/INST] def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        a = 0\n        b = 1\n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with an input field and a button. The input field should take a sentence and the two button should \"Upper Case\" and \"Lower Case\" respectively. When clicked, it should upper case or lower case the sentence in the input field. [/INST] <!DOCTYPE html>\n<html>\n  <head>\n    <title>String Case Transformer</title>\n  </head>\n  <body>\n    <input type=\"text\" id=\"inputStr\">\n    <button onclick=\"transformCase('upper')\">Upper Case</button>\n    <button onclick=\"transformCase('lower')\">Lower Case</button>\n    <script>\n      function transformCase(choice) {\n        var str = document.getElementById(\"inputStr\").value;\n        if (choice === 'upper') {\n          document.getElementById(\"inputStr\").value = str.toUpperCase();\n        } else {\n          document.getElementById(\"inputStr\").value = str.toLowerCase();\n        }\n      }\n    </script>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a SQL statement to select all the authors whose age is greater than 18. [/INST] SELECT * \nFROM authors\nWHERE age > 18</s>"
  },
  {
    "text": "<s>[INST] Create a C# event handler that is triggered when a button is clicked, and prints the text \"Button clicked!\" [/INST] public void btnClick_Click(object sender, System.EventArgs e)  \n{\n    System.Console.WriteLine(\"Button clicked!\");\n}</s>"
  },
  {
    "text": "<s>[INST] Given two strings s1 and s2, write a function to return a new string containing the characters present only in s1.\n\ns1 = \"abcdef\"\ns2 = \"fghijk\" [/INST] def unique_str(s1, s2):\n    res = \"\"\n    for i in s1:\n        if i not in s2:\n            res += i\n    return res</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select the first and last name of all employees that are located in New York. [/INST] SELECT first_name, last_name FROM employees WHERE location = \"New York\";</s>"
  },
  {
    "text": "<s>[INST] Design a function to evaluate an expression represented as a string.\n\nexpression = \"2.0+2.1\" [/INST] def evaluate(expression):\n  expr = expression.replace(\" \",\"\")\n  expr_list = expr.split(\"+\")\n  result = float(expr_list[0]) + float(expr_list[1])\n  return result</s>"
  },
  {
    "text": "<s>[INST] Using SQL, select the columns from the table below and order them in descending order by the \"date\" column.\n\nTable Name: Events\nColumns: id, name, date [/INST] SELECT id, name, date \nFROM Events \nORDER BY date DESC;</s>"
  },
  {
    "text": "<s>[INST] Generate a working Angular program [/INST] import { Component } from '@angular/core';\n \n@Component({\n   selector: 'app-root',\n   templateUrl: './app.component.html',\n   styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n   title = 'Angular Application';\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a working Android program to display a simple string [/INST] public class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        TextView textView = findViewById(R.id.text_view);\n        // You can use a string resource\n        textView.setText(R.string.message);\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Program a function in C++ which finds the number of duplicate elements in an array.\n\narray: [1,  3, 2, 5, 2, 3] [/INST] #include <iostream>\n#include <unordered_map>\n \nusing namespace std;\n \nint numOfDuplicates(int arr[], int n)\n{\n    unordered_map<int, int> freq;\n \n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]]++;\n    }\n \n    int count = 0;\n    for (auto i : freq)\n    {\n        if (i.second > 1)\n            count++;\n    }\n    return count;\n}</s>"
  },
  {
    "text": "<s>[INST] Implement a function in Python that calculates the Levenshtein Distance of two strings.\n\nstr1 = \"hackathon\"\nstr2 = \"hack\" [/INST] def calculate_levenshtein_distance(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n    return distances[len(str1), len(str2)]</s>"
  },
  {
    "text": "<s>[INST] Create a function in Python that takes two parameters and returns the sum of squares of all numbers between them [/INST] def sum_of_square_range(a, b):\n    sum = 0\n    for i in range(a, b+1):\n        sum += i * i\n    return sum</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, design a function in Python to check if all numbers in the list are even [/INST] def all_even(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Create a dictionary in Python whose keys are strings and values are integers [/INST] my_dict = {\n  \"one\": 1,\n  \"two\": 2,\n  \"three\": 3\n}</s>"
  },
  {
    "text": "<s>[INST] Create a program in Python to return the first n elements from an array [/INST] def first_n_elements(array, n):\n    return array[:n]</s>"
  },
  {
    "text": "<s>[INST] Print out the prime numbers between 0 to 100. [/INST] for n in range(2, 101): \n    for i in range(2, n): \n        if n % i == 0: \n            break\n    else: \n        print(n, end = ' ')</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm that finds the maximum subarray sum in a given array.\n\n[-2, 1, -3, 4, -1, 2, 1, -5, 4] [/INST] def max_subarray_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to generate a list of the vowels in a given string. [/INST] def get_vowels(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    res = []\n    for letter in str:\n        if letter.lower() in vowels:\n            res.append(letter)\n    return res</s>"
  },
  {
    "text": "<s>[INST] Create a function to classify an array as odd or even length. [/INST] def classify_array_length(arr):\n    if len(arr) % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'</s>"
  },
  {
    "text": "<s>[INST] How would you reverse the words order in a given string? [/INST] def reverse_words(string):\n    return \" \".join(string.split(\" \")[::-1])</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a positive integer and returns the next number which is divisible by 7. [/INST] def next_mult_of_7(num):\n    return num + (7 - num%7)</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, write a Python function to count how many numbers in the list are greater than 10. [/INST] def count_greater_than_ten(nums):\n    return len([n for n in nums if n > 10])</s>"
  },
  {
    "text": "<s>[INST] Given a dictionary, write a Python function to print all the key-value pairs in the dictionary. [/INST] def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")</s>"
  },
  {
    "text": "<s>[INST] Given a string and an integer N, write a Python function to construct the Nth palindromic string. [/INST] def construct_palindrome(string, N):\n    length = len(string)\n    mid = length // 2\n\n    left = string[:mid]\n    right = left[::-1]\n\n    if length % 2 == 0:\n        left = string[:mid - (N - 1)]\n        right = left[::-1]\n    else:\n        left = string[:mid - N]\n        right = string[mid + 1:(mid + 1) + N][::-1]\n\n    return left + string[mid] + right</s>"
  },
  {
    "text": "<s>[INST] How would you print all the key-value pairs of an already existing dictionary? [/INST] def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")</s>"
  },
  {
    "text": "<s>[INST] How can we delete all the elements of a list in Python? [/INST] def delete_all_elements(lst):\n    del lst[:]</s>"
  },
  {
    "text": "<s>[INST] Create a text-based menu for a command-line program. [/INST] Welcome to My Program! \n\nPlease select from the following menu:\n\n1. Run Program\n2. Edit Settings\n3. View Logs\n4. Quit Program\n\nPlease enter the number of your choice:</s>"
  },
  {
    "text": "<s>[INST] Parse the following JSON object and extract the data stored in the \"details\" field.\n\n{\n    \"data\": [\n        {\n            \"name\": \"John\",\n            \"details\": {\n                \"address\": \"123 Main St.\",\n                \"phone\": \"000-123-4567\"\n            }\n        }\n    ]\n} [/INST] const parsedJSON = JSON.parse(jsonObject);\nconst address = parsedJSON.data[0].details.address;\nconst phone = parsedJSON.data[0].details.phone;</s>"
  },
  {
    "text": "<s>[INST] Write a Python function to convert an array of integers into their respective strings.\n\narr = [1, 2, 3] [/INST] def array_int_string(arr):\n    \"\"\"Converts an array of integers into strings.\"\"\"\n    return [str(num) for num in arr]\n\narray_int_string(arr)  # returns [\"1\", \"2\", \"3\"]</s>"
  },
  {
    "text": "<s>[INST] Find the missing number in the following array: [16, 3, 2, 11, 15, 5, 4, 14]. [/INST] The missing number is 12.</s>"
  },
  {
    "text": "<s>[INST] Insert the following data into a SQL table named \"customers\":\nName: John Smith\nAge: 32\nAddress: 201 Mission Street\nCity: San Francisco\nState: CA [/INST] INSERT INTO customers (name, age, address, city, state) VALUES ('John Smith', 32, '201 Mission Street', 'San Francisco', 'CA');</s>"
  },
  {
    "text": "<s>[INST] Using a for loop, create a list of integers that are multiples of 4 from 0 to 50. [/INST] multiples_of_four = [n for n in range(0, 51) if n % 4 == 0]</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object representing a book, with properties such as title, author and pages. [/INST] let book = {\n  title: \"The Cat in the Hat\",\n  author: \"Dr. Seuss\",\n  pages: 60\n};</s>"
  },
  {
    "text": "<s>[INST] Compute the surface area of a pyramid with a base area of 10 cm and a height of 7 cm. [/INST] The surface area of the pyramid is 24 cm².</s>"
  },
  {
    "text": "<s>[INST] Design a basic graphic user interface (GUI) for a calculator. [/INST] import tkinter as tk\n\nroot = tk.Tk()\n\n# design the window\nroot.title(\"Calculator\")\nroot.geometry(\"200x250\")\n\n# create the buttons\nbutton1 = tk.Button(root, text=\"1\", width=5, height=2)\nbutton1.grid(row=0, column=0, padx=4, pady=4)\n\nbutton2 = tk.Button(root, text=\"2\", width=5, height=2)\nbutton2.grid(row=0, column=1, padx=4, pady=4)\n\nbutton3 = tk.Button(root, text=\"3\", width=5, height=2)\nbutton3.grid(row=0, column=2, padx=4, pady=4)\n\n# create more buttons\n# and so on\n\nroot.mainloop()</s>"
  },
  {
    "text": "<s>[INST] Create an array where each element is the maximum of each row in a given matrix.\n\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]] [/INST] def max_elements(matrix):\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements</s>"
  },
  {
    "text": "<s>[INST] Convert this integer to its corresponding binary representation in 8 bits.\n\n32 [/INST] def int_to_binary(num):\n    return '{0:08b}'.format(num)</s>"
  },
  {
    "text": "<s>[INST] How can you remove all blank spaces from a given string in Python? [/INST] You can remove all blank spaces from a given string in Python using the replace() function. This function takes two arguments, the first is the substring to be replaced and the second is the substring to be inserted in its place. In this case, you can use an empty string as the second argument to remove any instance of the white space from the string. \n\nFor example:\n\nstring_with_spaces = \"   Hello  World  \" \nno_spaces = string_with_spaces.replace(\" \", \"\") \nprint(no_spaces)  # Output: \"HelloWorld\"</s>"
  },
  {
    "text": "<s>[INST] Parse the following JSON string and print out all the key-value pairs:\n{“name”:”John”,”age”:25,”city”:\"New York\"\n\nString = '{\"name\":\"John\",\"age\":25,\"city\":\"New York\"}' [/INST] import json \n  \nString = '{\"name\":\"John\",\"age\":25,\"city\":\"New York\"}'\n  \n# Parse the string\njs = json.loads(String)\n  \n# Print all key-value pairs\nfor k, v in js.items():\n    print(k, \":\", v)</s>"
  },
  {
    "text": "<s>[INST] Write a CSS rule to create a text-decoration line below the h2 element. [/INST] h2 {\n  text-decoration: underline;\n}</s>"
  },
  {
    "text": "<s>[INST] Write an algorithm for checking if an array is sorted or not.\n\nArray = [4, 1, 7, 5] [/INST] // This function accepts an array as argument and returns true if array is sorted, else false.\nlet isSorted = (arr) => { \n \n  // Set the initial status as true \n  let sorted = true; \n  \n  // Iterate over the complete array \n  for (let i = 0; i < arr.length - 1; i++) { \n\n    // Compare adjacent element \n    if (arr[i] > arr[i + 1]) { \n\n        // Update the status if it is not sorted \n        sorted = false; \n        break; \n    } \n  } \n\n  // Return the sorted status \n  return sorted; \n} \n\n// Example array \nlet arr = [4, 1, 7, 5];\n\n// Check if the array is sorted\nconsole.log(isSorted(arr)); // Output: false</s>"
  },
  {
    "text": "<s>[INST] Create a CSS rule to set the size for all h1 elements as 34px. [/INST] h1 {\n  font-size: 34px;\n}</s>"
  },
  {
    "text": "<s>[INST] Design and implement a function that takes a string as input and returns the reverse string. [/INST] function reverseString(str) {\n  let reversedStr = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n  return reversedStr;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to add 1 to a designated row in a table.\n\nTable: users\nRow: age\nLocation: id = 4 [/INST] UPDATE users \nSET age = (age + 1) \nWHERE id = 4;</s>"
  },
  {
    "text": "<s>[INST] Construct a Numpy array of shape 2x3 containing all 7s. [/INST] arr = np.array([[7, 7, 7],\n                [7, 7, 7]])</s>"
  },
  {
    "text": "<s>[INST] Design an algorithm to get the maximum value from a given array of four elements.\n\n[-5, 2, 45, 9] [/INST] 1. Set a variable, maxValue, and initialize it to the first element in the array.\n2. Iterate through the array, comparing each element to maxValue.\n3. If the element is bigger than maxValue, replace maxValue with the element.\n4. When the loop is finished, save maxValue and return it as the maximum value from the array.</s>"
  },
  {
    "text": "<s>[INST] Explain what is meant by 'statement coverage' in software testing. [/INST] Statement coverage is a software testing metric which measures the percentage of statements in the source code which have been exercised by the test suite. Statement coverage focuses on validating that every line of source code is executed and checked. A successful statement coverage of 100% implies that all executable statements in the application have been tested.</s>"
  },
  {
    "text": "<s>[INST] Create an algorithm to find the second minimum element from a given array of 7 elements.\n\n[87, 34, 56, 12, 21, 45, 67] [/INST] 1. Set a variable, secondMinimum, to the first element of the array.\n2. Iterate through the array. \n3. For every element check if it is smaller than secondMinimum, but bigger than the smallest element in the array. \n4. If it is, set secondMinimum to that element. \n5. When the iteration is finished, return secondMinimum.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select users whose age is greater than or equal to 20 from the user_data table. [/INST] SELECT * FROM user_data WHERE age >= 20;</s>"
  },
  {
    "text": "<s>[INST] Generate a web page containing an HTML table containing the numbers from 1 to 10. [/INST] <html>\n  <head>\n    <title>Number Table</title>\n  </head>\n  <body>\n    <table>\n        <tr>\n            <th>Number</th>\n        </tr>\n        {% for number in range(1, 11) %}\n            <tr>\n                <td>{{number}}</td>\n            </tr>\n        {% endfor %}\n    </table>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Develop a function to merge two lists l1 and l2 into a single list.\n\n1. l1 = [3, 4, 5]\n2. l2 = [7, 8] [/INST] def merge(l1, l2):\n    l3 = l1 + l2\n    return l3</s>"
  },
  {
    "text": "<s>[INST] Create a function to print all the paths in a binary tree. [/INST] def print_paths(root): \n    path = [] \n    print_paths_util(root, path, 0) \n  \ndef print_paths_util(root, path, pathLen): \n    if root is None: \n        return\n  \n    if (len(path) > pathLen):  \n        path[pathLen] = root.data\n    else: \n        path.append(root.data) \n  \n    pathLen = pathLen + 1\n  \n    if root.left is None and root.right is None: \n        for i in range(pathLen):\n            print(path[i],end=\" \")\n        print() \n    else: \n        print_paths_util(root.left, path, pathLen) \n        print_paths_util(root.right, path, pathLen)</s>"
  },
  {
    "text": "<s>[INST] Write a Python program to create a dictionary with three elements. [/INST] d = { \n    \"one\" : 1, \n    \"two\" : 2, \n    \"three\" : 3\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Bash script to print the system date in the format \"year-month-date\". [/INST] #!/bin/bash\n\n# Get the current date in the format \"year-month-date\"\n\ndate +\"%Y-%m-%d\"</s>"
  },
  {
    "text": "<s>[INST] Create a function in C that takes a string as input and returns an integer, which represents the number of occurences of a given character in the string.\n\n\"Hello, World!\", 'o' [/INST] int count_occurrences(char *str, char c) \n{ \n    int count = 0; \n  \n    // Traverse the string and check \n    // for occurrences of character. \n    for (int i=0; str[i] != '\\0'; i++) \n        if (str[i] == c) \n            count++; \n  \n    return count; \n}</s>"
  },
  {
    "text": "<s>[INST] Write C# code to remove a specific element from an array.\n\n{1,2,3,4,5,6}, 4 [/INST] public static int[] RemoveElement(int[] arr, int element) \n{ \n    List<int> result = arr.ToList(); \n    for (int i = 0; i < result.Count; i++) \n        if (result[i] == element) \n            result.RemoveAt(i); \n    return result.ToArray(); \n}</s>"
  },
  {
    "text": "<s>[INST] Write a jQuery command to add a classname to an element. [/INST] $('element').addClass('classname');</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to store 10 numbers in an array.\n\nint array[] [/INST] int array[10];</s>"
  },
  {
    "text": "<s>[INST] Determine the sum of the integers in the following list.\n\nlist = [2, 4, 6, 8, 10] [/INST] sum = 30</s>"
  },
  {
    "text": "<s>[INST] Delete the forth row from the following table using an SQL query.\n\nTable: \nid     | name\n-------------------\n1      | John\n2      | Jane\n3      | Jacob\n4      | Jill [/INST] DELETE FROM Table\nWHERE id = 4;</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code to set the text colour of the h2 element to blue. [/INST] h2 {\n color: blue;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript expression that prints the value of the array at index 2.\n\nlet arr = [2, 4, 6, 8, 10]; [/INST] console.log(arr[2]);</s>"
  },
  {
    "text": "<s>[INST] Select all words that start with 'a' from the following text.\n\nThe quick brown fox jumps over the lazy dog. [/INST] The quick brown fox jumps over the lazy dog.\n\nAnswer: The,quick, brown, and over.</s>"
  },
  {
    "text": "<s>[INST] Write an R function that determines the average value of an integer array. [/INST] average <- function(numbers) {\n  sum <- 0\n  for (i in numbers) {\n    sum <- sum + i\n  }\n  return(sum/length(numbers))\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to get the IPv6 address of a given domain name. [/INST] import socket\n\ndef get_IPv6_address(domain_name):\n    \"\"\"\n    Function to get the IPv6 address of a given domain name\n    \"\"\"\n\n    # get the ip_addres\n    ip_address = socket.getaddrinfo(domain_name, 0, socket.AF_INET6)\n\n    # return the ip address\n    return ip_address[0][4][0]</s>"
  },
  {
    "text": "<s>[INST] Write a single line of code to remove an item from a list.\n\nmy_list = [1, 2, 3, 4] [/INST] my_list.remove(4)</s>"
  },
  {
    "text": "<s>[INST] What is the maximum value of a byte in a binary system? [/INST] The maximum value of a byte in a binary system is 255. This is because there are 8 bits in a byte, and the maximum value each bit can have is 1, giving a maximum value of 8 ones, or 255 in the denary system.</s>"
  },
  {
    "text": "<s>[INST] Compare two lists to find missing numbers.\n\nlist1 = [1, 2, 3, 4, 5] \nlist2 = [2, 3, 4] [/INST] # Create a new set to store the missing numbers\nmissing_numbers = set(list1).difference(set(list2)) \n  \n# Print the missing numbers\nprint(\"Missing numbers:\", *missing_numbers)</s>"
  },
  {
    "text": "<s>[INST] Create a function to return a random letter from a given string. [/INST] import random \n  \ndef random_letter(string): \n    \"\"\" \n    Function to return a random letter \n    from a given string \n    \"\"\"\n  \n    # Get the length of the string \n    length = len(string) \n  \n    # Get a random index  \n    # from 0 to length - 1 \n    index = random.randint(0, length - 1) \n  \n    # Return the letter at the  \n    # randomly generated index \n    return string[index] \n  \n# Driver Code \nstring = \"Geek\"\nprint(random_letter(string))</s>"
  },
  {
    "text": "<s>[INST] How to check if an item exists in a list in Python?\n\nmy_list = [1, 2, 3, 4] [/INST] # Check if item exists in list \nif 4 in my_list: \n    print(\"Exists\") \nelse: \n    print(\"Doesn't Exist\")</s>"
  },
  {
    "text": "<s>[INST] Create a class named Animal with a few methods describing different attributes of animals. [/INST] class Animal:\n    def __init__(self):\n        pass\n    \n    def is_mammal(self):\n        \"\"\"Return True if animal is a mammal, False otherwise\"\"\"\n        pass\n\n    def is_reptile(self):\n        \"\"\"Return True if animal is a reptile, False otherwise\"\"\"\n        pass\n    \n    def is_amphibian(self):\n        \"\"\"Return True if animal is an amphibian, False otherwise\"\"\"\n        pass\n\n    def is_bird(self):\n        \"\"\"Return True if animal is a bird, False otherwise\"\"\"\n        pass</s>"
  },
  {
    "text": "<s>[INST] Write a code to fetch the last ten news headlines from HackerNews using their API. [/INST] \"\"\"\nFetch the last ten news headlines from HackerNews using their API\n\"\"\"\n\nimport requests\n\ndef get_headlines():\n    url = \"https://hacker-news.firebaseio.com/v0/topstories.json\"\n    ids = requests.get(url).json()\n    headlines = []\n    for id in ids[:10]:\n        item = requests.get(f\"https://hacker-news.firebaseio.com/v0/item/{id}.json\").json()\n        headlines.append(item['title'])\n    return headlines\n\nif __name__ == '__main__':\n    headlines = get_headlines()\n    for headline in headlines:\n        print(headline)</s>"
  },
  {
    "text": "<s>[INST] Write a code in C++ to prompt the user for an integer and output the summation from 1 to that integer. [/INST] \"\"\"\nPrompt the user for an integer and output the summation from 1 to that integer\n\"\"\"\n\n#include <iostream>\nusing namespace std;\n\nint main() \n{\n    int input;\n    cout << \"Please enter a positive integer: \";\n    cin >> input;\n\n    int sum = 0;\n    for (int i = 1; i <= input; i++) {\n        sum += i;\n    }\n\n    cout << \"The summation from 1 to that integer is \" << sum << endl;\n    return 0;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a code to implement quicksort.\n\narr = [6, 1, 8, 4, 9, 5] [/INST] \"\"\"\nImplement quicksort\n\"\"\"\n\ndef quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nif __name__ == '__main__':\n    arr = [6, 1, 8, 4, 9, 5]\n    result = quicksort(arr)\n    print(result)</s>"
  },
  {
    "text": "<s>[INST] Extract the phone number from given string and output it as an integer.\n\nHi, my number is +1-345--678-9012 [/INST] \"\"\"\nExtract the phone number from given string and output it as an integer\n\"\"\"\n\ndef extract_phone_number(s):\n    s = s.replace('+', '')\n    numbers = \"\"\n    for c in s:\n        if c.isdigit():\n            numbers += c\n    return int(numbers)\n\nif __name__ == '__main__':\n    s = \"Hi, my number is +1-345--678-9012\"\n    num = extract_phone_number(s)\n    print(num)</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to retrieve the total amount of purchase each customer has made.\n\nTable:Customer_orders \n|userid|product |purchase_price|\n|------|--------|--------------|\n|1     |shoes   |50            |\n|2     |socks   |30            |\n|1     |pants   |20            | [/INST] SELECT userid, SUM(purchase_price) as total_purchase \nFROM Customer_orders \nGROUP BY userid;</s>"
  },
  {
    "text": "<s>[INST] Using ReactJS, develop a basic form component with two input fields, one for a Name and the other for Age. [/INST] class BasicForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      age: '',\n    };\n  }\n  \n  render() {\n    return (\n      <form>\n        <label>Name:\n          <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\n        </label>\n        <label>Age:\n          <input type=\"text\" name=\"age\" value={this.state.age} onChange={this.handleChange} />\n        </label>\n      </form>\n    );\n  }\n  \n  handleChange = (event) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] What would be the JavaScript code to remove duplicate values from an array?\n\n[1, 2, 3, 4, 4, 2, 5] [/INST] const inputArray = [1, 2, 3, 4, 4, 2, 5];\n\nconst outputArray = inputArray.filter((arrayVal, indexVal) => {\n  return inputArray.indexOf(arrayVal) === indexVal;\n});\n\nconsole.log(outputArray); // [1, 2, 3, 4, 5]</s>"
  },
  {
    "text": "<s>[INST] Using C#, write a method that returns a list of strings containing only elements of an input string array containing the letter 'a'.\n\nstring[] s = {\"apple\", \"banana\", \"cat\"}; [/INST] public static List<string> FilterByLetterA(string[] s)\n{\n    List<string> list = new List<string>();\n    foreach (string item in s)\n    {\n        if (item.Contains(\"a\"))\n        {\n            list.Add(item);\n        }\n    }\n    return list;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes two arrays and returns a new array with all the items of the first array followed by all the items of the second array.\n\narray1 = [1, 2, 3] \narray2 = [4, 5, 6] [/INST] function combineArrays(array1, array2){\n  let result = array1.concat(array2);\n  return result;\n}\n\nlet array1 = [1, 2, 3] \nlet array2 = [4, 5, 6]\nlet combinedArray = combineArrays(array1, array2);\n\nconsole.log(combinedArray) // [1, 2, 3, 4, 5, 6]</s>"
  },
  {
    "text": "<s>[INST] Interpret the following array of numbers consisting of 6 elements and divide it into 2 columns.\n\n[1, 2, 3, 4, 5, 6] [/INST] arr = [1, 2, 3, 4, 5, 6]\n\nfirst_column = arr[:len(arr)//2]\nsecond_column = arr[len(arr)//2:]</s>"
  },
  {
    "text": "<s>[INST] Parse the following JSON objects, convert all the values to strings and create a dictionary named \"parsed_data\".\n\n{\n \"name\": \"John Doe\",\n \"age\": 33,\n \"locations\": [\"NYC\", \"LA\"]\n} [/INST] import json\n\nparsed_data = {}\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 33,\n    \"locations\": [\"NYC\", \"LA\"]\n}\nfor key, val in data.items():\n    parsed_data[key] = str(val)</s>"
  },
  {
    "text": "<s>[INST] Create a MySQL query to print all records from a specific table in descending order of their id. [/INST] SELECT * FROM table_name ORDER BY id DESC;</s>"
  },
  {
    "text": "<s>[INST] Design a neural network for facial recognition using TensorFlow. [/INST] import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    # First convolutional layer\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(64, 64, 3)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Second convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Third convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Fourth convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Flatten the output\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(2048, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    # Output decode layer\n    tf.keras.layers.Dense(2, activation='softmax')\n])</s>"
  },
  {
    "text": "<s>[INST] Identify the differences between Java and JavaScript languages. [/INST] Java is a compiled language while JavaScript is interpreted. Java is a class-based language while JavaScript is a prototype-based language. Java is statically typed while JavaScript is dynamically typed. Java supports method overloading while JavaScript does not.</s>"
  },
  {
    "text": "<s>[INST] Describe what is a linked list data structure in 10 words or less. [/INST] A linear data structure of linked nodes.</s>"
  },
  {
    "text": "<s>[INST] Develop a function to print out the Fibonacci sequence in Java. [/INST] public class Fibonacci {\n\n    public static void printFibonacci(int n) {\n        int n1 = 0, n2 = 1;\n        for (int i = 0; i < n; i++) {\n            System.out.print(n1 + \" \");\n            int sum = n1 + n2;\n            n1 = n2;\n            n2 = sum;\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Develop a JavaScript function to reverse an array.\n\n[1, 2, 3] [/INST] function reverseArray (arr) {\n    return arr.reverse();\n}\n\nreverseArray([1, 2, 3]); // => [3, 2, 1]</s>"
  },
  {
    "text": "<s>[INST] Develop an SQL query to select all rows from a table that has two columns: 'name' and 'age'. [/INST] SELECT * FROM table_name;</s>"
  },
  {
    "text": "<s>[INST] Classify the term \"function\" as a programming language feature. [/INST] Function is a language construct used to define a reusable instruction block, typically with parameters and a return value.</s>"
  },
  {
    "text": "<s>[INST] Create a Python program that prints all numbers in the range 1-10. [/INST] for number in range(1, 11):\n print(number)</s>"
  },
  {
    "text": "<s>[INST] Edit the following C# code to round the result of x divided by y to the nearest integer.\n\ndouble x = 25;\ndouble y = 4;\ndouble result = x/y; [/INST] double x = 25;\ndouble y = 4;\ndouble result = Math.Round(x/y);</s>"
  },
  {
    "text": "<s>[INST] Write a web scraper in Python to get all the external links from a webpage.\n\nurl = 'https://en.wikipedia.org/wiki/Web_scraping' [/INST] import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Web_scraping'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\nlinks = [link.get('href') for link in soup.find_all('a') if 'http' in link.get('href')]\nprint(links)</s>"
  },
  {
    "text": "<s>[INST] Output an array of even numbers from 0 to 20 using a for loop in Python. [/INST] even_nums = []\nfor num in range(0, 21):\n    if num % 2 == 0:\n        even_nums.append(num)\nprint(even_nums)</s>"
  },
  {
    "text": "<s>[INST] Create a Python script to parse a JSON string and print the value corresponding to the key 'name'.\n\n{\"name\": \"John Doe\", \"age\": 25} [/INST] import json\n\ndata = '{\"name\": \"John Doe\", \"age\": 25}'\n\ndata = json.loads(data) \n\nprint(data[\"name\"])</s>"
  },
  {
    "text": "<s>[INST] Write a code to insert a new item into a given list at the specified index.\n\n[1, 2, 3, 4], 0, 10 [/INST] def insert_item(lst, index, item):\n  lst.insert(index, item)\n  return lst</s>"
  },
  {
    "text": "<s>[INST] Write a code to recognize the most likely language of a given text. [/INST] import langdetect\n\ndef detect_language(text):\n    language = langdetect.detect(text)\n    return language</s>"
  },
  {
    "text": "<s>[INST] Create a program to generate a sequence of integers that starts at k and ends at n in the following format: [k, k+1, ..., n-1, n] [/INST] def generate_seq(k, n):\n    seq = []\n    for i in range(k, n+1):\n        seq.append(i)\n    return seq</s>"
  },
  {
    "text": "<s>[INST] Formulate a solution to print out each letter of a string individually. [/INST] def print_letters(string):\n    for letter in string:\n        print(letter)</s>"
  },
  {
    "text": "<s>[INST] Generate a code snippet to clone/copy a dictionary. [/INST] import copy\n\ndef clone_dict(dict):\n    return copy.deepcopy(dict)</s>"
  },
  {
    "text": "<s>[INST] Suggest a solution to print the prime factorization of a number. [/INST] def prime_factors(num):\n    factors = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            factors.append(i)\n            num = num // i\n        else:\n            i += 1\n    return factors</s>"
  },
  {
    "text": "<s>[INST] Create a program to reverse an array in place, i.e. without creating a copy. [/INST] def reverse_in_place(arr):\n    n = len(arr)\n    for i in range(n//2):\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]</s>"
  },
  {
    "text": "<s>[INST] Classify this short programming code into its data structure category.\n\nh = [x for x in range(2, 101, 2)] [/INST] List comprehension - a data structure that uses a single expression to generate a list of elements.</s>"
  },
  {
    "text": "<s>[INST] Modify the following function to return the maximum value in a list.\n\ndef max_list(lst):\n    max = 0\n    for x in lst:\n        max = x\n    return max [/INST] def max_list(lst):\n    max = None\n    for x in lst:\n        if max is None or x > max:\n            max = x\n    return max</s>"
  },
  {
    "text": "<s>[INST] Generate a correct Ruby program to print all possible combinations of a given list.\n\n[\"a\", \"b\", \"c\"] [/INST] def combinations(arr)\n  arr.length.times do |i|\n    arr.length.times do |j|\n      if i != j\n        print arr[i], arr[j]\n      end\n    end\n  end \nend\n\ncombinations(['a', 'b', 'c'])</s>"
  },
  {
    "text": "<s>[INST] Write a python script to convert a given number to a string.\n\nnum = 1234 [/INST] def num_to_str(num):\n    return str(num)</s>"
  },
  {
    "text": "<s>[INST] Edit the following code to capture the errors and print them.\n\ntry:\n    num = int(input(\"Enter a number: \"))\n    print (num)\nexcept:\n    pass [/INST] try:\n    num = int(input(\"Enter a number: \"))\n    print (num)\nexcept Exception as e:\n    print(str(e))</s>"
  },
  {
    "text": "<s>[INST] Write a code to update the elements of a list inplace.\n\nlst = [2, 4, 6, 8] [/INST] for i in range(len(lst)):\n    lst[i] *= 2</s>"
  },
  {
    "text": "<s>[INST] Delete all the trailing zeros of a given float number.\n\nnum = 18.1000 [/INST] print(str(num).rstrip('0').rstrip('.'))</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to list each item of a given array into a new array in reverse order.\n\narr = [1, 2, 3, 4, 5] [/INST] newArr = arr.reverse()\nconsole.log(newArr)</s>"
  },
  {
    "text": "<s>[INST] Read an HTML page and extract all the <h2> tags.\n\n<html><h1>Heading 1</h1><h2>Heading 2</h2><h2>Heading 3</h2></html> [/INST] import bs4 \n\nhtml = \"<html><h1>Heading 1</h1><h2>Heading 2</h2><h2>Heading 3</h2></html>\" \n\nsoup = bs4.BeautifulSoup(html, 'html.parser') \n\nh2_list = soup.find_all('h2')\nprint(h2_list)</s>"
  },
  {
    "text": "<s>[INST] Fill in the blanks to write a code in JavaScript that calls a function two times.\n\nfunction sayHello() {\n  console.log('Hello');\n} [/INST] for (let i = 0; i < 2; i++) {\n  sayHello();\n}</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript code to rotate an array by n position to the left.\n\narr = [1, 2, 3, 4, 5]\npos = 2 [/INST] function rotateLeft(arr, pos) {\n    for (let i = 0; i < pos; i++) {\n        var remove = arr.shift(); \n        arr.push(remove); \n    } \n    return arr;\n}\n\nconsole.log(rotateLeft(arr, pos));</s>"
  },
  {
    "text": "<s>[INST] Using the function above, complete the following statement to compute the sum from 2 to 6. [/INST] sum_value = sum(2, 6)</s>"
  },
  {
    "text": "<s>[INST] Describe the tasks and input of a program to sort a list of integers [/INST] The task of the program is to sort a list of integers. The input is a list of integers which needs to be sorted in ascending order. The output is another list with the same elements but sorted in ascending order.</s>"
  },
  {
    "text": "<s>[INST] Generate a list of all words in the input string longer than 4 characters.\n\nmy_string = \"This is a sentence\" [/INST] word_list = [word for word in my_string.split() if len(word)>4]</s>"
  },
  {
    "text": "<s>[INST] Write a code to fetch the title of a web page [/INST] import requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_title():\n    page = requests.get('http://example.com')\n    content = page.content\n    soup = BeautifulSoup(content, 'html.parser')\n    return soup.title.string</s>"
  },
  {
    "text": "<s>[INST] Import the numpy library into the program [/INST] import numpy as np</s>"
  },
  {
    "text": "<s>[INST] Find the value of $x^2 + 4x + 5$ when $x = 3$ [/INST] x_val = 3\neq_val = x_val**2 + 4*x_val + 5\nprint(eq_val) # Output: 32</s>"
  },
  {
    "text": "<s>[INST] Create a list of integers from 1 to n in steps of 10\n\nn = 50 [/INST] list1 = []\nfor i in range(1, n+1, 10):\n    list1.append(i)</s>"
  },
  {
    "text": "<s>[INST] Write a function in Python to convert miles to kilometers.\n\n7 [/INST] def miles_to_km(miles):\n return miles * 1.609\n\nconverted_km = miles_to_km(7)\nprint(converted_km)</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript program to find the maximum number from the given three numbers.\n\n5, 10, 3 [/INST] let num1 = 5;\nlet num2 = 10;\nlet num3 = 3;\n\nlet maxNum = Math.max(num1, num2, num3);\n\nconsole.log(\"The maximum number of the three numbers given is \" + maxNum);</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to calculate the total number of possible combinations of a given list of items.\n\n[‘cat’, ‘dog’, ‘horse’] [/INST] public static int calculateCombinations(List<String> items){\n            int totalCombinations = 0;\n\n            for(int i = 0; i < Math.pow(2, items.size()); i++){\n                int count = 0;\n                String combination = \"\";\n                for(int j = 0; j < items.size(); j++){\n                    if( (i & (1 << j)) > 0){\n                        count++;\n                        combination += items.get(j) + \" \";\n                    }\n                }\n                if(count == items.size()){\n                    totalCombinations++;\n                    System.out.println(combination);\n                }\n            }\n            return totalCombinations;\n        }</s>"
  },
  {
    "text": "<s>[INST] Create a list in Python of all integers from -5 to 10. [/INST] list_nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</s>"
  },
  {
    "text": "<s>[INST] Write a code in C to identify the character type of a given character.\n\n$ [/INST] #include<stdio.h> \n \nint main() \n{ \n    char c = '$';\n    if ( (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') )\n    {\n      printf(\"The  character is an alphabet.\");\n    }\n    else if (c >= '0' && c <= '9') \n    {\n        printf(\"The character is a digit.\");\n    }\n    else\n    {\n        printf(\"The character is a special character.\");\n    }\n    return 0; \n}</s>"
  },
  {
    "text": "<s>[INST] Sort this numeric array in descending order\n\nArray: [3, 7 ,1, 5, 9] [/INST] let sortedArray = [9, 7, 5, 3, 1];</s>"
  },
  {
    "text": "<s>[INST] Retrieve the elements from the second index to the fourth index in the given array\n\nArray: [10, 20, 50, 70, 90, 100] [/INST] let retrievedElements = [50, 70, 90];</s>"
  },
  {
    "text": "<s>[INST] Construct a for-loop statement to display the numbers counting from 10 to 15 [/INST] for (let i = 10; i <= 15; i++) {\n  console.log(i);\n}</s>"
  },
  {
    "text": "<s>[INST] Formulate a SQL query to select the name and address of the customers from the database [/INST] SELECT Name, Address\nFROM Customers;</s>"
  },
  {
    "text": "<s>[INST] Generate a regex to check if a given string contains any vowels [/INST] let regex = /[aeiou]/i;</s>"
  },
  {
    "text": "<s>[INST] Construct a switch statement to return either \"Nick\" or \"Jack\" base on the value of the input\n\nInput: \"Nick\" [/INST] switch (input) {\n  case \"Nick\":\n    return \"Nick\";\n    break;\n\n  case \"Jack\":\n    return \"Jack\";\n    break;\n    \n  default:\n    return \"Invalid Input\";\n}</s>"
  },
  {
    "text": "<s>[INST] Design a class to represent a Circle with a radius [/INST] class Circle {\n  constructor(radius) { \n    this.radius = radius; \n  }\n\n  getArea() { \n    return Math.PI * this.radius * this.radius; \n  }\n\n  getCircumference() { \n    return 2 * Math.PI * this.radius; \n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Produce a Python script that generates a random string of length 10 [/INST] import random\nimport string\n\ndef get_random_string(stringLength=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nrandomString = get_random_string()\nprint(randomString) # outputs a random string of length 10</s>"
  },
  {
    "text": "<s>[INST] Design an if-else statement to print either \"Passed\" or \"Failed\" depending on the value of the given number\n\nNumber: 80 [/INST] let num = 80;\n\nif (num >= 70) {\n  console.log(\"Passed\");\n} else {\n  console.log(\"Failed\");\n}</s>"
  },
  {
    "text": "<s>[INST] Convert the following code to Python and make it object-oriented.\n\nfunction celsius_to_fahrenheit(celsius) { \n  let fahrenheit = (celsius * 9/5) + 32\n  return fahrenheit \n} [/INST] class TemperatureConverter:\n    def celsius_to_fahrenheit(self, celsius):\n        fahrenheit = (celsius * 9/5) + 32\n        return fahrenheit</s>"
  },
  {
    "text": "<s>[INST] Create a class 'Stack' that has a method 'max_stack' that returns the maximum element in the stack. [/INST] class Stack():\n    def __init__(self): \n        self.stack = []\n\n    # Inserts an element in the stack\n    def push(self, item):\n        self.stack.append(item)\n \n    # Return the maximum element in a stack\n    def max_stack(self): \n        max_elem = self.stack[0] \n        for i in range(1,len(self.stack)): \n            if self.stack[i]>max_elem:\n                    max_elem = self.stack[i] \n        return max_elem</s>"
  },
  {
    "text": "<s>[INST] Create a class \"MyDict\" that inherits from the Python built-in \"dict\" class. [/INST] class MyDict(dict):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def __getitem__(self, key): \n        if key in self:\n            return super().__getitem__(key)\n        else: \n            return None</s>"
  },
  {
    "text": "<s>[INST] Create a function to print out the Fibonacci numbers starting from 0 to the nth number.\n\nn = 7 [/INST] def print_fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a, end=' ')\n        temp = a \n        a = b \n        b = temp + b\n\n# The output of the function would be\n# 0 1 1 2 3 5 8</s>"
  },
  {
    "text": "<s>[INST] Write a LINQ query to find employees whose age is over 30 and are from the United States. [/INST] var employees = from e in Employee\n                where e.Age > 30 && e.Country == \"United States\"\n                select e;</s>"
  },
  {
    "text": "<s>[INST] Generate a matrix with 5 rows and 7 columns containing random numbers in it. [/INST] import numpy as np\n\n# Create a matrix with 5 rows and 7 columns\nmatrix = np.random.rand(5,7)</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code snippet to change the font-size of all the headings to double the original size. [/INST] h1, h2, h3, h4, h5, h6 {\n  font-size: 2em;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a LINQ query to retrieve records from employee list which are from either India or Canada. [/INST] var employees = from e in Employee\n                where e.Country == \"India\" || e.Country == \"Canada\"\n                select e;</s>"
  },
  {
    "text": "<s>[INST] Slice the following array to get the last two numbers.\n\n[2, 3, 9, 12, 13, 21] [/INST] [13, 21]</s>"
  },
  {
    "text": "<s>[INST] Identify the type of data present in the given JSON string.\n\nString: [true, false, 0, \"Sample String\"] [/INST] Boolean, Boolean, Integer, String.</s>"
  },
  {
    "text": "<s>[INST] Write a query to retrieve all the customers whose customer ID starts with a \"C\". [/INST] SELECT * FROM Customers\nWHERE customerId LIKE 'C%'</s>"
  },
  {
    "text": "<s>[INST] Given a string s, write a Python function that returns the longest substring of the given string that is a palindrome.\n\ns = \"abcbabcd\" [/INST] def longest_palindrome_substring(s):\n n = len(s)\n if n == 0:\n return \"\"\n dp = [[False for _ in range(n)] for _ in range(n)]\n start = 0\n max_length = 1\n # All substrings of length 1 are palindrome\n for i in range(n):\n  dp[i][i] = True\n # Check for substring of length 2. \n for i in range(n-1):\n  if s[i] == s[i+1]:\n   dp[i][i+1] = True\n   start = i\n   max_length = 2\n # Check for lengths greater than 2\n # k is length of substring\n for k in range(3, n+1):\n  # Fix the starting index \n  for i in range(n-k+1):\n   # Get the ending index of substring from\n   # starting index i and length k\n   j = i + k - 1\n   # checking for sub-string from ith index to\n   # jth index iff str[i+1] to str[j-1] is a\n   # palindrome\n   if dp[i+1][j-1] and s[i] == s[j]:\n    dp[i][j] = True\n    if k > max_length:\n     start = i\n     max_length = k\n # return the longest palindromic substring\n return s[start:start+max_length]</s>"
  },
  {
    "text": "<s>[INST] Create a simple chatbot using Python. [/INST] print(\"Hello, I am your chatbot!\")\n\nwhile True:\n user_input = input(\"What would you like to talk about?\\n\")\n\n if user_input == \"bye\":\n  print(\"Bye! It was nice talking to you.\")\n  break\n\n if user_input == \"weather\":\n  print(\"It is sunny outside!\")\n else:\n  print(\"I am sorry, I don't understand your query.\")</s>"
  },
  {
    "text": "<s>[INST] Create a function to create a multiplication table for a given number.\n\nNumber: 5 [/INST] def multiplication_table(num): \n      \n    for i in range(1, 11): \n        print(num, '*', i, '=', num*i) \n          \n# Driver code  \nmultiplication_table(5)</s>"
  },
  {
    "text": "<s>[INST] Implement a function to check for balanced parentheses in a given string.\n\nString: (((())())) [/INST] def is_balanced(s): \n    stack = [] \n    for letter in s: \n        if letter in [\"(\", \"[\", \"{\"]: \n            stack.append(letter) \n        else: \n            if len(stack) == 0: \n                return False\n            top = stack.pop(-1) \n            if top == '(': \n                if letter == ')':             \n                    continue\n                else: \n                    return False\n            elif top == '[': \n                if letter == ']': \n                    continue\n                else: \n                    return False\n            elif top == '{': \n                if letter == '}': \n                    continue\n                else: \n                    return False\n    if len(stack) == 0: \n        return True \n    return False \n\n# Driver code\nprint(is_balanced('(((())()))')) # True\nprint(is_balanced('(((()))')) # False</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to find the most frequent word in a given sentence.\n\nSentence: The quick brown fox ate the lazy dog [/INST] def most_frequent_word(str): \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 1\n        else: \n            frequencies[word] = 1\n  \n    most_frequent_word = \"\" \n    highest_freq = 0\n    for key, value in frequencies.items(): \n        if value > highest_freq: \n            highest_freq = value \n            most_frequent_word = key \n  \n    return most_frequent_word \n\n# Driver code   \nprint(most_frequent_word('The quick brown fox ate the lazy dog'))</s>"
  },
  {
    "text": "<s>[INST] Write a code to find the sum of the multiples of 3 and 5 up to a given number.\n\nNumber: 15 [/INST] def sum_of_multiples(num): \n    sum = 0 \n    for i in range(num):\n            if i % 3 == 0: \n                sum += i\n            elif i % 5 == 0: \n                sum += i\n    return sum\n\n# Driver code \nsum = sum_of_multiples(15)\nprint(\"Sum of multiples of 3 and 5 =\",sum)</s>"
  },
  {
    "text": "<s>[INST] Create a code to check whether two words are nearly identical.\n\nWord A: bte\nWord B: tree [/INST] def is_nearly_identical(str1, str2): \n    edit_dist = 0\n    m = len(str1)\n    n = len(str2)\n\n    # Create matrix to store results of  subproblems \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    for i in range(m + 1): \n        for j in range(n + 1):  \n            if i == 0: \n                dp[i][j] = j   \n            elif j == 0: \n                dp[i][j] = i    \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                                   dp[i - 1][j - 1])  # Replace \n\n    edit_dist = dp[m][n]\n\n    if edit_dist == 1: \n        return True\n    else:\n        return False\n\n# Driver code\nif is_nearly_identical(\"bte\",\"tree\"): \n    print(\"Words are nearly identical\") \nelse: \n    print(\"Words are not nearly identical\")</s>"
  },
  {
    "text": "<s>[INST] Convert the following range to list elements in Python.\n\nrange(2, 8) [/INST] list(range(2, 8)) # [2, 3, 4, 5, 6, 7]</s>"
  },
  {
    "text": "<s>[INST] Complete the following code with a condition so it prints the average of the array elements.\n\narr = [4, 15, 12, 3, 8]\ntotal = 0\nfor num in arr:\n  # Your code here\n\nprint(total / len(arr)) [/INST] arr = [4, 15, 12, 3, 8]\ntotal = 0\nfor num in arr:\n  total += num\n\nprint(total / len(arr))</s>"
  },
  {
    "text": "<s>[INST] Reverse the following string without using in-built functions in Python.\n\nHello World [/INST] dlroW olleH</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function to find the first element of an array that passes a given test.\n\nconst arr = [10, 20, 9, 5]; [/INST] const findElement = (arr, test) => {\n  for(let element of arr){\n    if(test(element)){\n      return element;\n    }\n  }\n};</s>"
  },
  {
    "text": "<s>[INST] Complete the following code so it swaps two given elements in the list.\n\nlist = [1, 3, 7, 4, 2]\ndef swap(list, i, j):\n    # Your code here [/INST] list = [1, 3, 7, 4, 2]\ndef swap(list, i, j):\n    # Swap the elements\n    list[i], list[j] = list[j], list[i]</s>"
  },
  {
    "text": "<s>[INST] Generate a list of distinct dates between two given dates using JavaScript.\n\nstartdate = \"01/20/2020\"\nenddate = \"05/17/2020\" [/INST] function generateDates(startdate, enddate) {\n    const dates=[],\n          start=new Date(startdate),\n          end=new Date(enddate);\n\n    while (start <= end) {\n        const newdate = new Date(start);\n        const formatteddate = `${newdate.getDate()}/${newdate.getMonth()+1}/${newdate.getFullYear()}`;\n        if(!dates.includes(formatteddate)) dates.push(formatteddate)\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}</s>"
  },
  {
    "text": "<s>[INST] Write a Python script to check for syntactic correctness of an algorithm.\n\nAlgorithm = \"1. Read input\n2. Initialize variables\n3. Process input\n4. Output result\" [/INST] def is_algorithm_syntactically_correct(algorithm):\n    algorithm = algorithm.replace('\\n', ' ').replace('\\t ', ' ').lower()\n    \n    required_words = ['read', 'input', 'initialize', 'variables', 'process', 'output', 'result']\n    for word in required_words:\n        if word not in algorithm:\n            return False\n    return True</s>"
  },
  {
    "text": "<s>[INST] Write an SQL query to find the name of all customers who have made orders before the given date.\n\nTable: Customers\nFields: name, order_date\nGiven_date = 17/2/2020 [/INST] SELECT name \nFROM Customers \nWHERE order_date < '17/2/2020';</s>"
  },
  {
    "text": "<s>[INST] Given a string s, reverse its characters and return the resulting string.\n\ns = \"apple\" [/INST] def reverse_string(s):\n  # initialize an empty string\n  reversed_string = \"\"\n\n  # loop through the string and concatenate the characters in reverse order\n  for i in range(len(s) - 1, -1, -1):\n    reversed_string += s[i]\n  return reversed_string\n  \nprint(reverse_string(\"apple\")) # elppa</s>"
  },
  {
    "text": "<s>[INST] What is the apex of the programming language C++? [/INST] The apex of the programming language C++ is Object Oriented Programming. It is a style of programming that uses objects and their interactions to design applications and computer programs. Object-oriented programming allows for code re-use, modularity and easy debugging. This makes the language an efficient choice for software development.</s>"
  },
  {
    "text": "<s>[INST] Given a list of numbers, remove all negative numbers and sort the remaining numbers in ascending order.\n\nnumbers = [-5, -1, 2, 0, 4, 5, 9] [/INST] def remove_negatives_and_sort(numbers):\n    # filter out negative numbers\n    non_negatives = list(filter(lambda x: x >= 0, numbers))\n    # sort the non-negative numbers\n    non_negatives.sort()\n    return non_negatives\n  \nprint(remove_negatives_and_sort([-5, -1, 2, 0, 4, 5, 9])) # [0, 2, 4, 5, 9]</s>"
  },
  {
    "text": "<s>[INST] Write a function that takes a string and returns the letter which appears most frequently.\n\ns = \"apple\" [/INST] def most_frequent_letter(s):\n    # get the letter frequency\n    letter_frequency = {}\n    for ch in s:\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        else:\n            letter_frequency[ch] = 1\n\n    # find the letter with the max frequency\n    max_frequency = 0\n    max_frequency_letter = ''\n    for letter, frequency in letter_frequency.items():\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_frequency_letter = letter\n\n    return max_frequency_letter\n\nprint(most_frequent_letter(\"apple\")) # 'p'</s>"
  },
  {
    "text": "<s>[INST] How to find the most common integer in a list? [/INST] The most common integer in a list can be found using the collections.Counter module. The Counter class creates a dictionary with the elements in the list as keys and the number of occurrences as values. The most_common() method can then be used to find the element with the highest number of occurrences.</s>"
  },
  {
    "text": "<s>[INST] Construct a program that takes integers x and y and swaps their values.\n\nx = 5\ny = 10 [/INST] # get two integers from the user\nx = int(input(\"Enter value for x: \"))\ny = int(input(\"Enter value for y: \"))\n\n# swap\ntmp = x\nx = y\ny = tmp\n\n# print the swapped values\nprint(\"x =\", x, \"and y =\", y)</s>"
  },
  {
    "text": "<s>[INST] What are the benefits of abstract classes in Java? [/INST] Abstract classes in Java provide a way to define and enforce common behavior that is shared between derived classes. They also allow for code reuse as the shared code can be reused by other classes. Furthermore, with the help of abstract classes, one can create a structure for developers to follow and provide a standard for them to write code. This can lead to improved code quality by enforcing certain rules and standards.</s>"
  },
  {
    "text": "<s>[INST] Codify a static HTML page such that when the page URL is accessed, it displays the message \"Please enter your login details\". [/INST] <html>\n    <head>\n        <title>Login Page</title>\n    </head>\n    <body>\n        <h1>Please enter your login details</h1>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Given a JSON object, code a JavaScript function to convert the object into a query string.\n\nlet obj = {\n    name: 'John',\n    age: 25,\n    job: 'developer'\n} [/INST] function jsonToQueryString(jsonObject) {\n    let queryString = '';\n    for(let key in jsonObject) {\n        queryString += key + '=' + jsonObject[key] + '&';\n    }\n    return queryString.substring(0, queryString.length-1);\n}\n\nconsole.log(jsonToQueryString(obj)); // prints \"name=John&age=25&job=developer\"</s>"
  },
  {
    "text": "<s>[INST] Design a Java code to create a method that counts the number of elements in a given array.\n\nint[] array = {2, 4, 6, 8} [/INST] public static int countArrayElements(int[] input) {\n    int count = 0;\n    for (int element : input) {\n        count++;\n    }\n    return count;\n}\n\nint arraySize = countArrayElements(array); // prints 4</s>"
  },
  {
    "text": "<s>[INST] Write a CSS script to add a border to the 'Title' element on a webpage. [/INST] #Title {\n    border: 1px solid black;\n}</s>"
  },
  {
    "text": "<s>[INST] Given an array of strings and a search keyword, code a JavaScript function to check if the keyword exists in the array.\n\nlet arrWords = [\"cat\", \"dog\", \"dog\", \"fish\"]\nlet keyword = 'dog' [/INST] function keywordExists(arr, keyword){\n    return arr.includes(keyword);\n}\n\nconsole.log(keywordExists(arrWords, keyword)); // prints true</s>"
  },
  {
    "text": "<s>[INST] Using Python, write a code to generate the Fibonacci series up to the given number.\n\nnum = 10 [/INST] def generateFibonacciSeries(num): \n    series = [0, 1] \n    for i in range(2, num): \n        series.append(series[i - 2] + series[i - 1]) \n    return series\n\nprint(generateFibonacciSeries(num)) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</s>"
  },
  {
    "text": "<s>[INST] Write a Node.js script to filter numeric elements from an array.\n\nlet arr = [1, 'two', 'three', 4, 'five'] [/INST] function getNumericElements(arr) {\n    return arr.filter(item => typeof item === 'number');\n}\n\nconsole.log(getNumericElements(arr)); // prints [1, 4]</s>"
  },
  {
    "text": "<s>[INST] Design a C code to accept two integers from the user and find the greatest among them. [/INST] #include < stdio.h> \n  \nint main() \n{ \n    int a, b, great; \n  \n    printf(\"Enter two integers: \"); \n    scanf(\"%d %d\", &a, &b); \n  \n    if (a > b) \n        great = a; \n    else\n        great = b; \n  \n    printf(\"Greatest among two numbers is %d\", great); \n}</s>"
  },
  {
    "text": "<s>[INST] You are given a string array. Code a JavaScript function to remove duplicate strings from the array.\n\nlet arrStrings = [\"apple\", \"orange\", \"apple\", \"banana\"] [/INST] function removeduplicates(arr){\n    let arrDupRemoved = [];\n    for (let i = 0; i < arr.length; i++){\n      if(arrDupRemoved.indexOf(arr[i]) === -1){\n        arrDupRemoved.push(arr[i]);\n      }\n    }\n    return arrDupRemoved;\n  }\n\nconsole.log(removeduplicates(arrStrings)) // prints [\"apple\", \"orange\", \"banana\"]</s>"
  },
  {
    "text": "<s>[INST] Code an assembly language program to calculate the sum of series 1 + 3 + 5 +.....+ (2*n-1).\n\nn = 6 [/INST] .MODEL SMALL \n.DATA \n        N DB ? \n        I DB ? \n        S DB ? \n.CODE \n    MOV AX,@DATA\n    MOV DS,AX\n    MOV DX,N\n    MOV AL,2\n    MUL DX\n    SUB AL,1\n    MOV N,AL\n    MOV I,N\n    MOV S,0\nAGAIN:\n    MOV AX,S\n    ADD AX,I\n    MOV S,AX\n    DEC I\n    CMP I,0\n    JNZ AGAIN\n    MOV DX,S\n    MOV AH,4CH\n    INT 21H \nEND</s>"
  },
  {
    "text": "<s>[INST] Given an array of numbers, code a Java code to find out the highest number.\n\nint arr[] = {20, 35, -15, 7, 55, 1, -22} [/INST] public static int findHighestNumber (int[] numbers) {\n \n    int highestNumber = Integer.MIN_VALUE;\n \n    for (int currentNumber : numbers) {\n        highestNumber = Math.max(currentNumber, highestNumber);\n    }\n \n    return highestNumber;\n}\n\nint highestNumber = findHighestNumber(arr); // prints 55</s>"
  },
  {
    "text": "<s>[INST] Design a HTML document to display a chart with the sales of a particular item. [/INST] <html>\n<head>\n    <title>Sales Chart</title>\n    <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n    <script type=\"text/javascript\">\n        google.charts.load('current', {'packages':['corechart']});\n        google.charts.setOnLoadCallback(drawChart);\n\n        function drawChart() {\n            var data = google.visualization.arrayToDataTable([\n            ['Month', 'Sales'],\n            ['Jan',  1000],\n            ['Feb',  1170],\n            ['Mar',  660],\n            ['April', 1030]\n          ]);\n\n          var options = {\n            title: 'Sales of a particular item',\n            legend: 'none',\n            hAxis: {title: 'Month',  titleTextStyle: {color: '#333'}},\n            vAxis: {minValue: 0}\n          };\n            \n          var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));\n          chart.draw(data, options);\n        }\n    </script>\n</head>\n<body>\n    <div id=\"chart_div\" style=\"width: 900px; height: 500px;\"></div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create a dictionary containing the frequencies for each character in the given string.\n\nstring = \"hello world\" [/INST] def count_characters(string):\n    freq_chars = {}\n    for char in string:\n        if char in freq_chars:\n            freq_chars[char] += 1\n        else:\n            freq_chars[char] = 1\n    return freq_chars</s>"
  },
  {
    "text": "<s>[INST] Create a system call in C to generate a process tree. [/INST] #include<sys/types.h>\n#include <unistd.h>\n\npid_t c_sys_tree (pid_t root_pid)\n{\n        // Code to generate a process tree \n        // based on the given root PID \n}</s>"
  },
  {
    "text": "<s>[INST] In what language was the Google search engine originally written? [/INST] The Google search engine was originally written in C++.</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page with a table to display student scores.\n\nData:\nStudent A: Score - 80 \nStudent B: Score - 90 [/INST] <!DOCTYPEhtml> \n<html> \n    <head> \n        <title>Score Table</title> \n    </head> \n    <body> \n        <h3>Score Table</h3> \n        <table> \n            <tr> \n                <th>Student Name</th> \n                <th>Score</th> \n            </tr> \n            <tr> \n                <td>Student A</td> \n                <td>80</td> \n            </tr> \n            <tr> \n                <td>Student B</td> \n                <td>90</td> \n            </tr> \n        </table> \n    </body> \n</html></s>"
  },
  {
    "text": "<s>[INST] How is a binary search tree different from a binary tree? [/INST] A binary search tree is a type of binary tree where the value of each node is greater than the values in its left subtree, and less than the values in its right subtree. A binary tree on the other hand, can have nodes with any value, and the relationship between the nodes is not necessarily sorted.</s>"
  },
  {
    "text": "<s>[INST] Identify the ‘time complexity’ of an algorithm written in Java that calculates average of all elements in a list. [/INST] The time complexity of the algorithm is O(n) since it needs to loop through all the elements in the list in order to calculate the average.</s>"
  },
  {
    "text": "<s>[INST] What are the benefits of using a hash table? [/INST] The main benefits of using a hash table are faster search times, insertion/deletion time, and less space required to store data. Hash tables are most commonly used for storing key-value pairs, and can be used to quickly search for a value corresponding to a given key. They also provide a constant time for lookups, even for large data sets.</s>"
  },
  {
    "text": "<s>[INST] Define a function which takes two strings as arguments and returns a list containing all characters that appear in either string.\n\nstring_1 = 'Apple'\nstring_2 = 'Banana' [/INST] def common_chars(string_1, string_2):\n    char_list = [] \n    for char in string_1:\n        if char in string_2 and char not in char_list:\n            char_list.append(char)\n    for char in string_2:\n        if char in string_1 and char not in char_list:\n            char_list.append(char)\n    return char_list</s>"
  },
  {
    "text": "<s>[INST] Create a data structure to store an employee's details including his personal details and salary information. [/INST] class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary</s>"
  },
  {
    "text": "<s>[INST] You are given some HTML code, write a function to strip the tags from it. [/INST] def strip_tags(string):\n    stripped_str = ''\n    skip = False\n    for i in range(len(string)):\n        if string[i] == '<' and skip == False:\n            skip = True\n        elif string[i] == '>':\n            skip = False\n        elif skip == False:\n            stripped_str += string[i]\n    return stripped_str</s>"
  },
  {
    "text": "<s>[INST] You are given two strings, find the minimum number of edits required to make them equal. [/INST] def edit_distance(str1, str2):\n    edits = 0\n    m = len(str1)\n    n = len(str2)\n    if m < n:\n        for i in range(m, n):\n            edits += 1\n        for i in range(m):\n            if str1[i] != str2[i]:\n                edits += 1\n    else:\n        for i in range(n, m):\n            edits += 1\n        for i in range(n):\n            if str1[i] != str2[i]:\n                edits += 1\n    return edits</s>"
  },
  {
    "text": "<s>[INST] Create a program to list all the prime numbers between two numbers [/INST] def list_primes(start, end):\n    prime_list = [2]\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_list.append(num)\n\n    return prime_list</s>"
  },
  {
    "text": "<s>[INST] Write a regex pattern to extract all words containing the letter 'a' from a given string [/INST] import re\n\ndef extract_words(string):\n    pattern = r'\\b\\w*a\\w*\\b'\n    words = re.findall(pattern, string)\n    return words</s>"
  },
  {
    "text": "<s>[INST] Describe the runtime complexity of segment tree. [/INST] Segment tree is a data structure used to efficiently query certain operations regarding a range of values. A segment tree is a binary tree, with each of its internal nodes containing a range and its leaf nodes reresenting the elements in the given range. The runtime complexity of a segment tree is O(logN), where N is the number of elements in the range. This makes it an efficient data structure for range queries. Additionally, the tree can be updated in logarithmic time.</s>"
  },
  {
    "text": "<s>[INST] Create an object to hold the student's grade.\n\nGrade: A+ [/INST] let studentGrade = {\n grade: 'A+'\n};</s>"
  },
  {
    "text": "<s>[INST] Generate an array containing numbers between 1 and 100 that are divisible by both 5 and 7. [/INST] let result = [];\nfor(let i = 1; i <= 100; i++){\n if (i % 5 == 0 && i % 7 == 0) result.push(i);\n};\nconsole.log(result);</s>"
  },
  {
    "text": "<s>[INST] Design a web page containing HTML/CSS containing at least 5 containers. [/INST] <html>\n<head>\n    <title>My Webpage</title>\n</head>\n<body>\n    <div class=\"container1\" >\n    </div>\n    <div class=\"container2\" >\n    </div>\n    <div class=\"container3\" >\n    </div>\n    <div class=\"container4\" >\n    </div>\n    <div class=\"container5\" >\n    </div>\n</body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Explain the concept of Binary Indexed Tree. [/INST] Binary Indexed Tree (BIT) is a data structure that leverages the advantages of both an array and a binary tree. It is also known as a Fenwick tree. It can be used to efficiently compute the sum of given range of elements in an array. BIT is a type of tree data structure in which the values stored at each node represent the sum of all the elements in the subarrays rooted at the given node. The time complexity of operation in BIT is O(logN), where N is the size of the array.</s>"
  },
  {
    "text": "<s>[INST] Design a data structure to track the frequency of words in a given text. [/INST] A HashMap can be used to track the frequency of words in a given text. The keys of the map would represent the words in the text and the associated values would represent the frequency of that word. The time complexity for retrieving the frequency of a given word in hashmap will be O(1).</s>"
  },
  {
    "text": "<s>[INST] Use the list comprehension method to print the cube of numbers from 1 to 10 [/INST] cubes = [x**3 for x in range(1, 11)]\nprint(cubes)</s>"
  },
  {
    "text": "<s>[INST] Write Javascript code to select all div elements with the class \"container\". [/INST] let containers = document.querySelectorAll('div.container');</s>"
  },
  {
    "text": "<s>[INST] Write a predicate function to check whether the given string is palindrome. [/INST] function isPalindrome(str) {\n  str = str.toLowerCase();\n  for (let i = 0; i < str.length / 2; i++) {\n    if (str[i] !== str[str.length - 1 - i]) return false;\n  }\n  return true;\n}</s>"
  },
  {
    "text": "<s>[INST] Explain the importance of using functions in programming. [/INST] Using functions in programming is important for a few reasons. Functions can be used to divide a program into smaller, more manageable pieces, making it easier to read, debug, and maintain code. Additionally, functions can be reused across multiple programs by creating libraries that can be imported, saving time and effort. The use of functions also promotes code modularity and re-usability, allowing developers to write code once and use or modify it for different applications. Finally, functions can help to improve the overall performance of code by optimizing execution time because process and code only needs to be run once per function call.</s>"
  },
  {
    "text": "<s>[INST] Write a Python function that takes as input an array of numbers and returns the maximum positive number.\n\narr = [3, -2, -1, 7, 12] [/INST] def find_max_positive(arr):\n    max_num = 0\n    for num in arr:\n        if num > 0 and num > max_num:\n            max_num = num\n    return max_num</s>"
  },
  {
    "text": "<s>[INST] Formulate a query in SQL that would output the names of products that cost more than $50. [/INST] SELECT product_name FROM products WHERE price > 50;</s>"
  },
  {
    "text": "<s>[INST] Explain why software developers should follow coding style guidelines. [/INST] Software developers should follow coding style guidelines for a few reasons. First and foremost, adherence to coding style is essential for creating code that is easy to read, understand and maintain. Especially when working on a team, consistency in style allows developers to understand each other’s code more quickly. Coding style can also be used to organize code so that it’s easier to identify certain sections and make changes as needed. Additionally, coding style can give developers more control over potential errors, such as typos, by providing guidelines that can help to reduce the possibility of making such errors.</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find the number of people below the age of 25 in the table ‘people’. [/INST] SELECT COUNT(*) from people WHERE age < 25;</s>"
  },
  {
    "text": "<s>[INST] Convert the following SPARQL query to a SQL query.\n\nSELECT ?person ?age\nWHERE {\n    ?person rdf:type ex:Person .\n    ?person ex:age ?age\n} [/INST] SELECT person, age\nFROM rdf\nWHERE type = 'ex:Person' \nAND predicate = 'ex:age';</s>"
  },
  {
    "text": "<s>[INST] Find the median of the given array [3,7,2,1,9]. [/INST] def find_median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0: \n        median = (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2 \n    else: \n        median = arr[len(arr)//2] \n    return median\n\nmedian = find_median([3,7,2,1,9])\nprint(median) # Prints 3.5</s>"
  },
  {
    "text": "<s>[INST] Create a JavaScript object literal with two properties: a key of name with a value of 'Bob' and a key of age with a value of 30. [/INST] let bob = {\n    name: 'Bob',\n    age: 30\n};</s>"
  },
  {
    "text": "<s>[INST] Write a code snippet to produce an XML result for a given input data structure.\n\nkey1: value1, key2: { key2.1: value2.1, key2.2: value2.2 } [/INST] import xml.etree.ElementTree as ET\n\ndef xml_builder(data):\n    root = ET.Element('root')\n    for key, value in data.items():\n        child = ET.SubElement(root, key)\n        if type(value) is dict:\n            for k, v in value.items():\n                sub_child = ET.SubElement(child, k)\n                sub_child.text = str(v)\n        else:\n            child.text = str(value)\n    return ET.tostring(root, encoding='utf8').decode('utf8')\n\ndata = {\"key1\": \"value1\", \"key2\": {\"key2.1\": \"value2.1\", \"key2.2\": \"value2.2\"}}\nprint(xml_builder(data))</s>"
  },
  {
    "text": "<s>[INST] Create a hashtable in Python of size 8 and insert five elements. [/INST] class HashTable:\n    def __init__(self, size):\n        self.size = size\n        self.table = [None] * size\n\n    def insert(self, key, value):\n        hash_value = hash(key)\n        index = hash_value%self.size\n        if self.table[index] == None:\n            self.table[index] = [key, value]\n        else:\n            self.table[index].append([key,value])\n\n    # Other methods go here\n\n# Create a hashtable\nht = HashTable(8)\n\n# Insert elements\nht.insert('apple', 5)\nht.insert('banana', 8)\nht.insert('strawberry', 11)\nht.insert('kiwi', 2)\nht.insert('mango', 6)</s>"
  },
  {
    "text": "<s>[INST] Create a function in JavaScript to get the value of a key from a JSON object. [/INST] function getValue(obj, key) {\n  return obj[key];\n}</s>"
  },
  {
    "text": "<s>[INST] Find the maximum value of an array without using any built-in functions\n\n[7, 9, -2, 15, 3] [/INST] def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\narr = [7, 9, -2, 15, 3]\nprint(find_max(arr))</s>"
  },
  {
    "text": "<s>[INST] Develop an algorithm for reversing a string without using any reverse string methods.\n\nHello World [/INST] def reverseString(str):\n    reversed_str = \"\"\n    for i in range(len(str)-1, -1, -1):\n        reversed_str += str[i]\n    return reversed_str\n\nprint(reverseString(\"Hello World\"))</s>"
  },
  {
    "text": "<s>[INST] Write a function in Java to delete duplicate elements. [/INST] public static List<Integer> removeDuplicates(int[] arr) {\n    List<Integer> uniqueList = new ArrayList<>();\n    for (int i : arr) {\n        if (!uniqueList.contains(i)) {\n            uniqueList.add(i);\n        }\n    }\n    return uniqueList;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a regex expression that matches all valid IP addresses. [/INST] ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL statement updates the \"products\" table and sets the value of the \"price\" column to 10. [/INST] UPDATE products SET price = 10;</s>"
  },
  {
    "text": "<s>[INST] Answer what is the longest palindrome in a given string.\n\n\"Run, spot, run. He ran up red hills\" [/INST] def longestPalindrome(st): \n    palindromes = []\n    for i in range(len(st)): \n        for j in range(i, len(st)): \n            curr = st[i:j+1] \n            rev = curr[::-1] \n            if (curr == rev): \n                palindromes.append(curr) \n    res = max(palindromes, key = len) \n        \n    return res\n\nprint(longestPalindrome(\"Run, spot, run. He ran up red hills\")) \n\n# output\nrun</s>"
  },
  {
    "text": "<s>[INST] Create a filter to remove all integers from an array of mixed data types.\n\n[\"Hello\", 3, 5.4, \"World\", 6] [/INST] def removeInts(arr): \n    return [x for x in arr if type(x) is not int] \n\nprint(removeInts([\"Hello\", 3, 5.4, \"World\", 6])) \n\n# output\n['Hello', 5.4, 'World']</s>"
  },
  {
    "text": "<s>[INST] Create a SQL statement to select all rows of the \"students\" table with a GPA higher than 3.0. [/INST] SELECT * FROM students WHERE GPA > 3.0;</s>"
  },
  {
    "text": "<s>[INST] Construct a code to get the last index of a given substring in a string.\n\n\"hi hi hello\", \"hi\" [/INST] def lastIndexOf(st, substr): \n    if substr in st: \n        start = -1 \n        while True: \n            pos = st.find(substr, start + 1) \n            if pos == -1: \n                break \n            start = pos \n            \n        return start \n    else: \n        return -1 \n    \nprint(lastIndexOf(\"hi hi hello\", \"hi\")) \n\n# output \n3</s>"
  },
  {
    "text": "<s>[INST] Create a new table in an existing SQL database.\n\nThe database called \"airports\" has the following table structure:\n\nAirport (aid, name, city, state, country, longitude, latitude) [/INST] CREATE TABLE Airport (\naid INT, \nname VARCHAR(100), \ncity VARCHAR(100), \nstate VARCHAR(100), \ncountry VARCHAR(100), \nlongitude DECIMAL(18,14), \nlatitude DECIMAL(18,14),\nPRIMARY KEY(aid) \n);</s>"
  },
  {
    "text": "<s>[INST] FreeCodeCamp is a great platform for coding practice. Give an example of a basic algorithm you can practice on FreeCodeCamp. [/INST] A basic algorithm you can practice on FreeCodeCamp is Bubble Sort. Bubble Sort is an algorithm that sorts an array of elements by repeatedly swapping matched pairs of elements if they appear in the wrong order. It continues until no further swaps are needed, at which point the array is considered sorted.</s>"
  },
  {
    "text": "<s>[INST] Convert this floating-point number to an 8-bit binary number.\n\n123.46875 [/INST] 123.46875 in 8-bit binary is 1111011.01110000</s>"
  },
  {
    "text": "<s>[INST] Create a new array using the given array and a given number.\n\nThe given array is [2, 3, 4] and the given number is 5. [/INST] The new array is [2, 3, 4, 5].</s>"
  },
  {
    "text": "<s>[INST] Create a loop in Python with the given requirements.\n\nPrint out the numbers from 1 to 10, inclusive [/INST] for x in range(1, 11):\n  print(x)</s>"
  },
  {
    "text": "<s>[INST] Explain the use of the Huffman encoding algorithm. [/INST] Huffman encoding is an algorithm used for lossless data compression. It works by taking a string of data, analysing it and creating a shorter bit string that represents the same data. The data is compressed by assigning shorter codes to commonly occurring characters. This process reduces the amount of bits needed to represent the data, which leads to overall data compression.</s>"
  },
  {
    "text": "<s>[INST] Write a function in JavaScript that takes two strings as arguments and checks if the characters in the first string form a subsequence of the characters in the second string. [/INST] function isSubsequence(str1, str2) {\n  let i = 0;\n  let j = 0;\n  while (i < str1.length && j < str2.length) {\n    if (str2[j] === str1[i]) {\n      i++;\n    }\n    j++;\n  }\n  return i === str1.length;\n}</s>"
  },
  {
    "text": "<s>[INST] For the given matrix, calculate the determinant.\n\n1 2 3\n4 5 6\n7 8 9 [/INST] 0</s>"
  },
  {
    "text": "<s>[INST] Create a linux shell script for restarting network interfaces. [/INST] #!/bin/bash\n\n# Restart network interfaces\nsudo ifconfig wlan0 down\nsudo ifconfig wlan0 up\nsudo ifconfig eth0 down\nsudo ifconfig eth0 up</s>"
  },
  {
    "text": "<s>[INST] Write a C++ program for finding the maximum value in a BST. [/INST] Node* findMax(Node* root) \n{ \n    if (root == NULL) \n        return root; \n  \n    Node* curr = root; \n    while (curr->right != NULL) \n        curr = curr->right; \n  \n    return curr; \n}</s>"
  },
  {
    "text": "<s>[INST] Describe the concept of machine learning in your own words. [/INST] Machine learning is a field of Artificial Intelligence that focuses on developing algorithms for computers to learn from data and to make predictions about their environment. It can involve supervised and unsupervised learning techniques, such as classification and clustering, to analyze data and make predictions. Machine learning algorithms are also used to detect patterns and make decisions, enabling computers to automate tasks and learn from experience.</s>"
  },
  {
    "text": "<s>[INST] Generate multiple Fibonacci numbers in Python. [/INST] def Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\") \n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n  return b\n\nfor i in range(10):\n  print(Fibonacci(i))</s>"
  },
  {
    "text": "<s>[INST] Create an SQL query to print the names of employees who are earning more than $50,000/year. [/INST] SELECT Name \nFROM Employees \nWHERE Salary > 50000;</s>"
  },
  {
    "text": "<s>[INST] Write a CSS code to create a heading with red color font. [/INST] h1 {\n  font-size: 14px; \n  color: red; \n}</s>"
  },
  {
    "text": "<s>[INST] Code a React component that renders a button with a given text.\n\nText of the button: Submit [/INST] import React from 'react';\nimport { Button } from 'react-native';\n\nconst SubmitButton = ({ text }) => {\n return (\n  <Button\n   title={text}\n  />\n );\n}\nexport default SubmitButton;</s>"
  },
  {
    "text": "<s>[INST] Write a code to delete all records in an MS Access table. [/INST] DELETE FROM tableName;</s>"
  },
  {
    "text": "<s>[INST] How to get the current date and time in a JavaScript program? [/INST] let date = new Date();\nlet current_datetime = date.getDate() + \"/\"\n                    + (date.getMonth()+1)  + \"/\" \n                    + date.getFullYear() + \" @ \"  \n                    + date.getHours() + \":\"  \n                    + date.getMinutes() + \":\" \n                    + date.getSeconds();</s>"
  },
  {
    "text": "<s>[INST] Create a Java program to output the Fibonacci series upto the given number.\n\nNumber: 10 [/INST] public class Fibonacci {\n    public static void main(String[] args) {\n        int num = 10;\n        int first = 0; \n        int second = 1;\n        \n        System.out.println(\"Fibonacci Series of \" + num + \" numbers:\");\n        for (int i = 0; i < num; i++) {\n            System.out.print(first + \" \");\n            int sum = first + second;\n            first = second;\n            second = sum;\n        }\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] How to identify an email address from a given string using Regular Expressions? [/INST] import re\n\nstring = \"My Email address is example@gmail.com\"\n\nexpression = r'[\\w\\.-]+@[\\w\\.-]+'\n\naddress = re.findall(expression, string)\n\nprint(\"Email address is: \", address)</s>"
  },
  {
    "text": "<s>[INST] What are the different types of HTML5 Semantic Elements? [/INST] The different types of HTML5 Semantic Elements are: \n- article, aside, details,figcaption, figure, footer, header, main, nav, section, summary.</s>"
  },
  {
    "text": "<s>[INST] Write a Java program that prints a rating out of 10 based on user input.\n\nInput value: 7 [/INST] public class Rating {\n public static void main (String[] args) {\n  int inputValue = 7;\n  int rating = 0;\n\n  if (inputValue >= 8) {\n   rating = 10;\n  } else if (inputValue >= 5) {\n   rating = 7;\n  } else {\n   rating = 4;\n  }\n\n  System.out.println(\"Rating: \" + rating);\n }\n}</s>"
  },
  {
    "text": "<s>[INST] How would you reverse this array?\n\n[3, 4, 7, 9, 10] [/INST] [10, 9, 7, 4, 3]</s>"
  },
  {
    "text": "<s>[INST] Write a JavaScript function that accepts a string argument and returns its capitalized value. [/INST] function capitalize(str) {\n return str.charAt(0).toUpperCase() + str.slice(1);\n}</s>"
  },
  {
    "text": "<s>[INST] Write an Android app to display a list of items from a local database. [/INST] public class MainActivity extends AppCompatActivity {\n\n    RecyclerView listView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Instantiate the database\n        AppDatabase db = AppDatabase.getInstance(this);\n\n        // Instantiate the RecyclerView\n        listView = findViewById(R.id.listView);\n\n        // Get the list of items from the database\n        List<Item> items = db.itemDao().getAll();\n\n        // Set the LayoutManager\n        listView.setLayoutManager(new LinearLayoutManager(this));\n\n        // Set the adapter for the RecyclerView\n        listView.setAdapter(new ItemAdapter(items));\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Create an HTML webpage that displays a table. [/INST] <html>\n  <head>\n    <title>Table Example</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n        <th>Column 3</th>\n      </tr>\n      <tr>\n        <td>Row 1, Column 1</td>\n        <td>Row 1, Column 2</td>\n        <td>Row 1, Column 3</td>\n      </tr>\n      <tr>\n        <td>Row 2, Column 1</td>\n        <td>Row 2, Column 2</td>\n        <td>Row 2, Column 3</td>\n      </tr>\n     </table>\n  </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Write a Python function that prints the square of a given number. [/INST] def square(num):\n  return num ** 2</s>"
  },
  {
    "text": "<s>[INST] Create a Java method that takes two integer arguments and returns their multiplication. [/INST] public static int multiply(int a, int b) {\n return a * b;\n}</s>"
  },
  {
    "text": "<s>[INST] Given a text string, write a function in Python to identify all the words that have more than 3 characters.\n\ntext = \"Python is an easy to learn language\" [/INST] def longer_words(text):\n words = text.split()\n longer = [word for word in words if len(word) > 3]\n return longer</s>"
  },
  {
    "text": "<s>[INST] Using Java, write a method that takes an array of integers and replaces all the negative numbers with 0.\n\nint[] arr = {2, 3, -4, 5, 7, -8}; [/INST] public static int[] replaceNegs(int[] arr) {\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) arr[i] = 0;\n  }\n  return arr;\n}</s>"
  },
  {
    "text": "<s>[INST] Create a function to update the existing item of a dictionary with a new value.\n\nmydict = {\n  \"name\": \"John\",\n  \"age\": 25\n} [/INST] function updateDict(d, key, value) { \n  d[key] = value; \n  return d;\n}</s>"
  },
  {
    "text": "<s>[INST] Given two arrays of integers, write a Python function which is able to identify common elements.\n\narr1 = [1,2,3,4,5]\narr2 = [3,4,5,6,7] [/INST] def common_elements(arr1, arr2):\n  return [x for x in arr1 if x in arr2]</s>"
  },
  {
    "text": "<s>[INST] Build a REST API with Node.js which provides the current temperature and humidity data of a given location. [/INST] const express = require('express');\nconst app = express();\nconst http = require(\"http\");\n \napp.get(\"/api/weather/:location\", (req, res, next) => {\n  let location = req.params.location;\n  http.get(`http://api.weatherstack.com/current?access_key=YOUR_API_KEY&query=${location}`, (response) => {\n    let data = '';\n    response.on('data', (chunk) => {  \n      data += chunk;\n    });\n    response.on('end', () => {\n      data = JSON.parse(data);\n      let temperature = data[\"current\"][\"temperature\"];\n      let humidity = data[\"current\"][\"humidity\"];\n      let response_data = {\n        temperature: temperature,\n        humidity: humidity\n      }\n      res.json(response_data);\n    });\n  });\n});</s>"
  },
  {
    "text": "<s>[INST] Using SQL, write a query to identify the student ID and the name of the student who scored the highest marks in a given subject. [/INST] SELECT students.id AS student_id, students.name AS student_name \nFROM students\nINNER JOIN marks\nON students.id = marks.student_id\nWHERE marks.subject = ‘Subject1’\nORDER BY marks.mark DESC\nLIMIT 1;</s>"
  },
  {
    "text": "<s>[INST] Design a class named \"Rectangle\" that prints out the length, width, area and perimeter of a given rectangle. [/INST] \"\"\"\nDesign a class named 'Rectangle' that prints out the length, width, area and perimeter of a given rectangle\n\"\"\"\n\nclass Rectangle:\n    def __init__(self, l, w):\n        self.length = l\n        self.width = w\n        \n    def area(self):\n        return self.length * self.width\n    \n    def perimeter(self):\n        return 2 * (self.length + self.width)\n    \n    def __str__(self):\n        return 'Rectangle with length {0} and width {1}'.format(self.length, self.width)</s>"
  },
  {
    "text": "<s>[INST] Construct a while loop that continuously adds all elements of a list until reaching a certain number\n\nlist=[1, 2, 3, 4, 5] \nsum_num=10 [/INST] sum_temp = 0\ni = 0\nwhile sum_temp < sum_num:\n    sum_temp += list[i]\n    i += 1</s>"
  },
  {
    "text": "<s>[INST] Write a function which prints out odd numbers from a given list\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] [/INST] def print_odd_num(my_list):\n    for num in my_list:\n        if num % 2 != 0:\n            print(num)</s>"
  },
  {
    "text": "<s>[INST] Make a code that takes two arguments and returns a sum of the two [/INST] def add_two_nums(a, b):\n    return a + b</s>"
  },
  {
    "text": "<s>[INST] Construct a loop that checks whether each item in a list is greater than 10\n\nmy_list = [5, 11, 8, 15] [/INST] for x in my_list:\n    if x > 10:\n        print(\"{0} is greater than 10\".format(x))</s>"
  },
  {
    "text": "<s>[INST] Using list comprehension, create a new list that contains values less than 5\n\nmy_list = [7, 2, 5, 8, 4, 9, 6] [/INST] new_list = [x for x in my_list if x < 5]</s>"
  },
  {
    "text": "<s>[INST] Construct a code that takes in an object and checks whether each property includes a certain value\n\nmy_dict = {\n    'name': 'John',\n    'age': 23,\n    'pet_name': 'Maggy'\n}\nvalue = 'John' [/INST] def check_value(obj, value):\n    for key, val in obj.items():\n        if val == value:\n            return True\n    return False</s>"
  },
  {
    "text": "<s>[INST] Edit the code to construct a bubble sort algorithm.\n\narr = [5, 2, 1, 7, 8] [/INST] def bubble_sort(arr):\n    n = len(arr)\n\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]</s>"
  },
  {
    "text": "<s>[INST] Create a loop which prints out characters from a given input\n\na = 'Hello World!' [/INST] for char in a:\n    print(char, end=\"\")</s>"
  },
  {
    "text": "<s>[INST] Design a function which can check if a given year is a leap year [/INST] def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False</s>"
  },
  {
    "text": "<s>[INST] Create a program to find the maximum and minimum from a given list\n\nmy_list = [5, 7, 6, 3] [/INST] def max_min(my_list):\n    max_val = my_list[0]\n    min_val = my_list[0]\n\n    for val in my_list:\n        if val > max_val:\n            max_val = val\n        \n        if val < min_val:\n            min_val = val\n    \n    return (max_val, min_val)</s>"
  },
  {
    "text": "<s>[INST] Construct a class which instantiates objects with a given name and age [/INST] class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age</s>"
  },
  {
    "text": "<s>[INST] Write a recursive method to calculate the Fibonacci number of a given index [/INST] def fibonacci(n): \n  # base case \n  if n <= 1: \n    return n \n  # recursive case \n  else:\n    return(fibonacci(n-1) + fibonacci(n-2))</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to get the names of all the customers who have purchased a product from a specific category. [/INST] SELECT c.name \nFROM customers c \nJOIN orders o ON c.customer_id = o.customer_id \nJOIN order_items oi ON o.order_id = oi.order_id \nJOIN products p ON p.product_id = oi.product_id \nWHERE p.category = 'category_name';</s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that renders two checkboxes and a button using JavaScript. [/INST] <html>\n    <head>\n        <script>\n            function renderCheckboxes() {\n                var checkboxes = document.createElement(\"input\");\n                checkboxes.type = \"checkbox\";\n                checkboxes.name = \"checkbox\";\n                checkboxes.value = \"1\";\n           \n                document.body.appendChild(checkboxes);\n                var checkboxes2 = document.createElement(\"input\");\n                checkboxes2.type = \"checkbox\";\n                checkboxes2.name = \"checkbox2\";\n                checkboxes2.value = \"2\";\n               \n                document.body.appendChild(checkboxes2);\n                var btn = document.createElement(\"BUTTON\");\n                btn.innerHTML = \"Submit\";\n                document.body.appendChild(btn);\n            }\n       </script>\n   </head>\n   <body onLoad=\"renderCheckboxes()\">\n   </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Create an XML element to store the customer information, such as name and address. [/INST] <customer>\n    <name>John Doe</name>\n    <address>123 Main Street, Anytown, USA 10101</address>\n</customer></s>"
  },
  {
    "text": "<s>[INST] Create an HTML page that contains an input field and a submit button; when the button is clicked, it should print the input text in the HTML page. [/INST] <html>\n    <head>\n        <script>\n            function printInput() {\n                let input = document.getElementById(\"input\").value;\n                document.getElementById(\"result\").innerHTML = input;\n            }\n        </script>\n    </head>\n    <body>\n        <input type=\"text\" id=\"input\" />\n        <button type=\"submit\" onclick=\"printInput()\">submit</button>\n        <div id=\"result\"></div>\n    </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Construct a function that converts a given temperature from Celsius to Fahrenheit.\n\nCelsius Temperature: 37.5 [/INST] def ctof(celsius): \n  fahrenheit = (celsius * 9/5) + 32\n  return fahrenheit \n\nctof(37.5) // returns 99.5</s>"
  },
  {
    "text": "<s>[INST] Analyze the given sentence and label each word according to its part of speech.\n\nSentence: She was embarrassed to open the door. [/INST] Pronoun: She \nVerb: was \nAdjective: embarrassed \nVerb: to open \nDeterminer: the \nNoun: door</s>"
  },
  {
    "text": "<s>[INST] Develop a PHP web application for a movie theater booking system. [/INST] <?php\n// Function to collect user input and query the database \nfunction bookSeats(){ \n  // Database connection and query \n  $db_connection = new mysqli(\"localhost\", \"user\", \"password\", \"database\"); \n  $query = \"SELECT * FROM movie_theater WHERE no_of_seats > 0 ORDER BY name ASC\"; \n  $result = $db_connection->query($query); \n\n  // Submit button handler \n  if (isset($_POST['submit'])) { \n    $movie = $_POST['movie']; \n    $no_of_seats = $_POST['seats']; \n\n    // If selected movie theater has available seats, book the seats \n    if ($result->num_rows > 0) { \n      while ($row = $result->fetch_assoc()) { \n        if ($row['name'] == $movie && $row['no_of_seats'] >= $no_of_seats) { \n          $row['no_of_seats'] -= $no_of_seats; \n          // Update the seats availability \n          $update_query = \"UPDATE movie_theater SET no_of_seats = '\" . $row['no_of_seats'] . \"' WHERE name = '\" . $movie . \"'\"; \n          $db_connection->query($update_query); \n        }\n      } \n    }\n  }\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a HTML page that takes a user input and display the response. [/INST] <html>\n <body>\n  <form action=\"\" method=\"POST\">\n   Enter your name: <input type=\"text\" name=\"name\"><br>\n   <input type=\"submit\" value=\"Submit\">\n  </form>\n  <?php\n   if (isset($_POST['name'])) {\n    echo \"Hello, \" . $_POST['name'];\n   }\n  ?>\n </body>\n</html></s>"
  },
  {
    "text": "<s>[INST] Design a CSS style sheet to format a web page. [/INST] body {\n background-color: #FFFFFF;\n font-family: Arial, sans-serif;\n font-size: 14px;\n margin: 0px;\n padding: 0px;\n}\n\nh1{ \n font-size: 1.5em;\n font-weight: bold;\n}\n\np { \n line-height: 25px;\n margin: 15px 0px;\n}</s>"
  },
  {
    "text": "<s>[INST] Construct a SQL query to find the list of customers with the highest total of sales. [/INST] SELECT customer.name, SUM(sales.amount) AS total_sales\nFROM customer\nINNER JOIN sales ON customer.ID = sales.customer_id\nGROUP BY customer.name\nORDER BY total_sales DESC;</s>"
  },
  {
    "text": "<s>[INST] Add a new column to a Pandas DataFrame called \"age_group\" that contains categorical values \"young\",\"adult\",\"elderly\".\n\nname\tage\nJohn\t25\nMark\t45\nIsabelle\t75 [/INST] import pandas as pd\n\n# Read in the data\ndf = pd.DataFrame({'name': ['John', 'Mark', 'Isabelle'], \n                   'age': [25, 45, 75]})\n\n# Add a new column \"age_group\"\ndef categorize_age(age):\n    if age < 18:\n        return \"young\"\n    elif 18 <= age < 65:\n        return \"adult\"\n    else:\n        return \"elderly\"\n\ndf['age_group'] = df['age'].apply(categorize_age)</s>"
  },
  {
    "text": "<s>[INST] Calculate the maximum and minimum values in the column \"seats\".\n\njob  | seats\n-----+--------\nA    | 3\nB    | 12\nC    | 2 [/INST] min_seats = 2\nmax_seats = 12</s>"
  },
  {
    "text": "<s>[INST] Given the JSON data below, find the count of each type of fruit.\n\n{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n} [/INST] import json\n\ndata = \"\"\"\n{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n}\n\"\"\"\n\ndata = json.loads(data)\n\n# Get the count for each type of fruit\napple_count = 0\norange_count = 0\nbanana_count = 0\nfor fruit in data['fruits']:\n    if fruit['type'] == 'apple':\n        apple_count = fruit['count']\n    elif fruit['type'] == 'orange':\n        orange_count = fruit['count']\n    elif fruit['type'] == 'banana':\n        banana_count = fruit['count']\n\nprint(\"Apple count = %d\" % apple_count)\nprint(\"Orange count = %d\" % orange_count)\nprint(\"Banana count = %d\" % banana_count)</s>"
  },
  {
    "text": "<s>[INST] Using string functions, capitalize each word in the given sentence.\n\nsentence = \"python is a programming language\" [/INST] sentence = \"python is a programming language\"\n\n# split the sentence into individual words\nwords = sentence.split(\" \")\n\n# capitalize each word in the sentence\ncapitalized_words = [word.capitalize() for word in words]\n\n# join the words back together\ncapitalized_sentence = \" \".join(capitalized_words)\n\nprint(capitalized_sentence) # prints \"Python Is A Programming Language\"</s>"
  },
  {
    "text": "<s>[INST] Generate a list containing the squares of the first ten odd numbers. [/INST] # Generate a list containing the squares of the first ten odd numbers\nlist_of_squares = [x**2 for x in range(1, 21, 2)]\n\nprint(list_of_squares) # prints [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]</s>"
  },
  {
    "text": "<s>[INST] Create a function that takes two arguments, \"start\" and \"end\", and returns a list of all the prime numbers between the two. [/INST] def get_prime_numbers(start, end):\n    \"\"\"\n    Function to return a list of all the prime numbers between start and end\n    \"\"\"\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            is_prime = True\n            for j in range(2, int(num/2) + 1):\n                if num % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_numbers.append(num)\n    return prime_numbers\n    \nprint(get_prime_numbers(2, 10)) # prints [2, 3, 5, 7]</s>"
  },
  {
    "text": "<s>[INST] Given the following matrix, delete the row or column that contains the least number of elements.\n\n[[0, 1, 2], \n [3, 4, 5], \n [6, 7, 8]] [/INST] import numpy as np\n\n# Create the matrix\nmatrix = np.array([[0, 1, 2], \n                   [3, 4, 5], \n                   [6, 7, 8]])\n\n# Get the lengths of each row\nrow_lengths = [len(row) for row in matrix]\n\n# Delete the row with the minimum length and print the result\ndel matrix[row_lengths.index(min(row_lengths))]\nprint(matrix) # prints [[0 1 2] \n                  #        [3 4 5] \n                  #        [6 7 8]]</s>"
  },
  {
    "text": "<s>[INST] Sort the following list using a bubble sort algorithm.\n\n[36, 71, 16, 21, 73] [/INST] # Bubble sort function\ndef bubble_sort(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\n# Test data\nmy_list = [36, 71, 16, 21, 73]\n\n# Call the function\nsorted_list = bubble_sort(my_list)\n\nprint(sorted_list) # prints [16, 21, 36, 71, 73]</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to display all rows with last_name starting with 'C'. [/INST] SELECT * \nFROM table \nWHERE last_name LIKE 'C%';</s>"
  },
  {
    "text": "<s>[INST] Create a class in Java that represent books in a library. [/INST] public class Book { \n    // Properties \n    private String title; \n    private String author; \n    private int yearPublished; \n    \n    // Constructors \n    public Book (String t, String a, int y) \n    { \n        title = t; \n        author = a; \n        yearPublished = y; \n    } \n    \n    // Accessor and mutator methods \n    public void setTitle(String newTitle) { title = newTitle; } \n    public void setAuthor(String newAuthor) { author = newAuthor; } \n    public void setYearPublished(int newYear) { yearPublished = newYear; } \n    \n    public String getTitle() { return title; } \n    public String getAuthor() { return author; } \n    public int getYearPublished() { return yearPublished; } \n}</s>"
  },
  {
    "text": "<s>[INST] Write a piece of code to store 3 values in a single variable. [/INST] let data = [val1, val2, val3];</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to select all entries in a given table with a value larger than 100. [/INST] SELECT * \nFROM table \nWHERE col > 100;</s>"
  },
  {
    "text": "<s>[INST] Change the following piece of Java code to make sure that the parameter passed is a valid date.\n\npublic boolean isValidDate(String date){ \n    // return true if date is valid \n} [/INST] public boolean isValidDate(String date){ \n    SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n    try {\n        format.parse(date);\n        return true;\n    } catch (ParseException e) {\n        return false;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Write a SQL query to find all the entries in a given table that contain a specific“value” in the given column. [/INST] SELECT * \nFROM table \nWHERE col LIKE '%{value}%';</s>"
  },
  {
    "text": "<s>[INST] Debug the following code and make sure the program runs as expected.\n\ndef number_divisible(x, y):\n      for i in range(x):\n            if i % y = 0 :\n                  print(i) [/INST] def number_divisible(x, y):\n      for i in range(x):\n            if i % y == 0 :\n                  print(i)</s>"
  },
  {
    "text": "<s>[INST] Write a HTML and CSS code that creates a 3x3 grid. [/INST] <style>\n  .grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(3, 1fr);\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"grid-container\">\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n</div></s>"
  },
  {
    "text": "<s>[INST] Output the name of the variable type in the following expression.\n\nExpression: 5 + 6j [/INST] complex</s>"
  },
  {
    "text": "<s>[INST] Output the output of the following python script.\n\nPython Script:\n\nx = 5\ny = 7\n\ndef add(x, y):\n    return x + y\n\nadd(x, y) [/INST] 12</s>"
  },
  {
    "text": "<s>[INST] Write a code to calculate the gravitational force between two objects\n\nTwo objects with a mass of 3kg and 10kg are separated by 10m. [/INST] def gravitational_force(m1, m2, r):\n    G = 6.67 * 10**-11\n    f = G*(m1*m2/r**2)\n    return f\n    \nif __name__ == '__main__':\n    m1 = 3\n    m2 = 10\n    r = 10\n    force = gravitational_force(m1, m2, r)\n    print(force)</s>"
  },
  {
    "text": "<s>[INST] Create a SQL query to select the rows with column B equal to \"test\" and column C equal to \"example\" [/INST] SELECT * FROM table\nWHERE B = 'test'\n  AND C = 'example'</s>"
  },
  {
    "text": "<s>[INST] Generate an algorithm that creates a Fibonacci sequence [/INST] def Fibonacci_sequence(length): \n    fib_seq = [0, 1]\n    if length == 1:\n        return [0]\n    elif length == 2:\n        return fib_seq\n    else:\n        for i in range(2, length):\n            fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n        return fib_seq\n\nif __name__ == '__main__':\n    length = 7\n    print(Fibonacci_sequence(length))</s>"
  },
  {
    "text": "<s>[INST] Generate a code to identify duplicate elements in a list [/INST] def find_duplicates(lst):\n    duplicate_elements = []\n    for element in lst:\n        if lst.count(element) > 1 and element not in duplicate_elements:\n            duplicate_elements.append(element)\n    return duplicate_elements\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 1]\n    print(find_duplicates(lst))</s>"
  },
  {
    "text": "<s>[INST] Create a Java class named \"Card\" to represent a standard playing card. The class should contain a constructor which takes the card's suit and number as parameters. It should also contain two getter methods to get the suit and number of the card. [/INST] public class Card {\n    private String suit;\n    private int number;\n\n    public Card(String suit, int number) {\n        this.suit = suit;\n        this.number = number;\n    }\n\n    public String getSuit() {\n        return suit;\n    }\n    public int getNumber() {\n        return number;\n    }\n}</s>"
  },
  {
    "text": "<s>[INST] Generate 5 random numbers between 1 and 10 using a PHP script. [/INST] <?php \nfor($i=0; $i<5; $i++){\n  echo rand(1, 10).\" \"; \n} \n?></s>"
  },
  {
    "text": "<s>[INST] Create a MySQL table named \"movies\" with the following columns: id, title, and release_date. [/INST] CREATE TABLE movies (\n    id INT NOT NULL AUTO_INCREMENT,\n    title VARCHAR(255) NOT NULL,\n    release_date DATE NOT NULL,\n    PRIMARY KEY (id)\n);</s>"
  },
  {
    "text": "<s>[INST] Edit the following HTML form to validate an email address.\n\n<form>\n    <input type=\"text\" name=\"email\">\n    <input type=\"submit\" value=\"Submit\">\n</form> [/INST] <form>\n    <input type=\"email\" name=\"email\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\" required>\n    <input type=\"submit\" value=\"Submit\">\n</form></s>"
  },
  {
    "text": "<s>[INST] Write an Angular directive to make a text field required.\n\n<input type=\"text\" name=\"name\"> [/INST] <input type=\"text\" name=\"name\" required></s>"
  },
  {
    "text": "<s>[INST] Add a tag 'img' in the following xml document.\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<information>\n\t<property>\n\t\t<name>Adobe</name>\n\t\t<type>Software</type>\n\t</property>\n</information> [/INST] <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<information>\n    <img />\n\t<property>\n\t\t<name>Adobe</name>\n\t\t<type>Software</type>\n\t</property>\n</information></s>"
  },
  {
    "text": "<s>[INST] Identify the HTML element for displaying a hyperlink. [/INST] The HTML element for displaying a hyperlink is 'a'.</s>"
  },
  {
    "text": "<s>[INST] Format the following string according to the specified condition.\n\nString: \"first_name,last_name,age\"\nCondition: each word should have its first letter capitalized [/INST] \"First_Name,Last_Name,Age\"</s>"
  },
  {
    "text": "<s>[INST] Design a data structure to store a list of numbers and the corresponding and their frequencies. [/INST] A HashMap can be used to store the data structure. It uses the numbers as the key, and their frequency could be the value associated with the key.</s>"
  },
  {
    "text": "<s>[INST] Insert a code line in the existing program to fix a syntax error.\n\nint main() \n{\n    printf(\"Hello World!);\n} [/INST] int main() \n{\n    printf(\"Hello World!\"); // added missing closing quotation mark\n}</s>"
  },
  {
    "text": "<s>[INST] Generate a regex for email validation [/INST] ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$</s>"
  },
  {
    "text": "<s>[INST] Find and display all the employees who earn more than the average salary across all departments. [/INST] SELECT e.name \nFROM employees e \nWHERE e.salary > (SELECT AVG(salary) FROM employees);</s>"
  },
  {
    "text": "<s>[INST] Create a Python program to accept a string from the user and print out the number of vowels in the string.\n\nHello World [/INST] def countVowels(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\n# Driver code \nstr = \"Hello World\"\nprint(\"Number of vowels are:\", countVowels(str))</s>"
  },
  {
    "text": "<s>[INST] What is LangChain? [/INST] LangChain is a framework for developing applications powered by language models. It enables apps to be data-aware, connecting LLMs to data sources, and agentic, allowing LLMs to interact with their environment. Its main value comes from modular components and off-the-shelf chains for accomplishing specific tasks.</s>"
  },
  {
    "text": "<s>[INST] What is Pinecone? [/INST] Pinecone is a managed, cloud-native vector database that provides long-term memory for AI applications. It efficiently stores and queries vector embeddings, which represent semantic information. This allows AI applications to perform fast, low-latency semantic searches at scale, combining database features with optimized vector index performance.</s>"
  },
  {
    "text": "<s>[INST] What are foundational chains in LangChain? [/INST] Foundational chains are core building blocks in LangChain. They include LLMChain for basic model interaction, RouterChain for dynamic chain selection, SequentialChain for linking multiple calls in a sequence, and TransformationChain for applying generic data transformations. These form the basis for more complex application logic.</s>"
  },
  {
    "text": "<s>[INST] What are some popular chains in LangChain? [/INST] Popular chains in LangChain are pre-built for common tasks. These include APIChain for interacting with APIs, RetrievalQA for question-answering over documents, ConversationalRetrievalQA which adds memory, SQLDatabaseChain for querying databases with natural language, and various chains for summarizing documents like MapReduceDocumentsChain.</s>"
  },
  {
    "text": "<s>[INST] What are some additional or specialized chains in LangChain? [/INST] LangChain offers specialized chains for advanced tasks. These include chains for document analysis, self-critique with constitutional AI for ethical outputs, entity extraction, interacting with graph databases, and running bash commands. It also provides chains for moderation, dynamic prompt selection, and performing complex mathematical reasoning.</s>"
  },
  {
    "text": "<s>[INST] How can I customize or manage chains in LangChain? [/INST] You can manage LangChain chains by using async APIs for concurrent execution, implementing custom logic by subclassing the base Chain, and debugging with verbose flags. Chains can also be loaded from LangChainHub, made stateful by adding memory, and serialized to or from disk in JSON or YAML formats.</s>"
  },
  {
    "text": "<s>[INST] Why are chains needed in LangChain? [/INST] Chains are essential in LangChain for building complex applications that require more than a single LLM call. They allow you to sequence calls to components, like LLMs and tools, creating a single, coherent application. This modular approach simplifies development, debugging, and maintenance of sophisticated workflows.</s>"
  },
  {
    "text": "<s>[INST] What types of document chains are available in LangChain? [/INST] LangChain provides several chains for processing documents. The \"Stuff\" chain inserts all documents into a single prompt. The \"Refine\" chain iteratively improves an answer by processing documents one by one. \"Map Reduce\" processes each document individually and then combines the results, while \"Map Re-rank\" scores each document's response and returns the best one.</s>"
  },
  {
    "text": "<s>[INST] How does LangChain interface with Large Language Models (LLMs)? [/INST] LangChain provides a standard interface for interacting with various Large Language Models (LLMs) from providers like OpenAI and Cohere, rather than serving its own. The base LLM class allows you to make calls with a simple string input/output or use a `generate` method for batch processing and richer outputs.</s>"
  },
  {
    "text": "<s>[INST] What are chat models in LangChain? [/INST] Chat models in LangChain are a variation of LLMs designed for conversational interfaces. Instead of a simple text-in, text-out API, they use a structured interface of \"chat messages\" as inputs and outputs. These messages, like HumanMessage or AIMessage, provide conversational context to the underlying language model.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between LLMs and Chat Models in LangChain? [/INST] In LangChain, LLMs refer to pure text completion models that take a string and return a string. Chat Models, while often using LLMs underneath, are tuned for conversation and use a structured interface of chat messages for input and output. Both share a base interface for interoperability.</s>"
  },
  {
    "text": "<s>[INST] What are output parsers in LangChain? [/INST] Output parsers are classes that structure the text output from language models into more usable formats, like JSON. They provide formatting instructions to guide the model's response and then parse the resulting text string into a structured object, such as a Pydantic model, for easier use in applications.</s>"
  },
  {
    "text": "<s>[INST] What are prompt templates in LangChain? [/INST] Prompt templates provide a reproducible way to generate prompts for language models. They are strings that take input variables and format them into a complete prompt, often including instructions, examples, and user queries. For chat models, ChatPromptTemplate is used to construct a sequence of role-specific messages.</s>"
  },
  {
    "text": "<s>[INST] What are example selectors in LangChain? [/INST] Example selectors are used in few-shot prompting to dynamically choose which examples to include in the prompt based on the user's input. When you have a large set of examples, a selector class can pick the most relevant ones to improve the language model's response accuracy and context.</s>"
  },
  {
    "text": "<s>[INST] What are prompts in LangChain? [/INST] The input to a language model is called a prompt. In LangChain, prompts are often constructed from multiple components. LangChain provides classes to manage this, including prompt templates for parameterizing inputs and example selectors for dynamically including few-shot examples in the prompt.</s>"
  },
  {
    "text": "<s>[INST] What does the Model I/O module in LangChain do? [/INST] The Model I/O module is a core part of LangChain for interfacing with language models. It includes building blocks like Prompts for managing model inputs, Language Models for making calls through common interfaces, and Output Parsers for extracting structured information from model outputs.</s>"
  },
  {
    "text": "<s>[INST] What are tools in LangChain? [/INST] Tools are interfaces that a LangChain agent can use to interact with the outside world. These are functions that can perform specific actions, such as running a search query, using a calculator, calling an API, or even executing another chain. They are the fundamental action components for agents.</s>"
  },
  {
    "text": "<s>[INST] What are the different types of agents in LangChain? [/INST] LangChain offers two main agent categories: Action agents, which decide the next action step-by-step (e.g., ReAct), and Plan-and-execute agents, which create a full plan upfront before execution. Specific implementations include agents optimized for conversation, using OpenAI Functions, or handling multi-input tools.</s>"
  },
  {
    "text": "<s>[INST] What are toolkits in LangChain? [/INST] Toolkits are collections of tools designed to work together for a specific purpose, such as interacting with a SQL database or a pandas DataFrame. LangChain provides these toolkits with convenience loaders, making it easy to equip an agent with all the necessary tools for a particular domain.</s>"
  },
  {
    "text": "<s>[INST] What are agents in LangChain? [/INST] Agents use an LLM to reason about which actions to take in what order to accomplish a goal. An agent has access to a suite of tools and decides which to use based on user input. The AgentExecutor is responsible for running the loop of thought, action, and observation until the task is complete.</s>"
  },
  {
    "text": "<s>[INST] What are callbacks in LangChain? [/INST] The callback system in LangChain allows you to hook into the lifecycle of your application's components. By implementing callback handlers, you can log, monitor, or stream events like the start of an LLM call (`on_llm_start`) or the end of a chain (`on_chain_end`), which is useful for debugging and observability.</s>"
  },
  {
    "text": "<s>[INST] What is memory in LangChain? [/INST] Memory allows chains and agents, which are stateless by default, to remember previous interactions. This is crucial for applications like chatbots. LangChain provides various memory types, such as `ConversationBufferMemory`, which stores a history of messages and adds it to the context for subsequent calls, making the application stateful.</s>"
  },
  {
    "text": "<s>[INST] What are the main modules in LangChain? [/INST] LangChain is organized into several key modules. These include Model I/O for interfacing with language models, Data Connection for working with application-specific data, Chains for building sequences of calls, Agents for dynamic decision-making, Memory for state persistence, and Callbacks for monitoring and logging.</s>"
  },
  {
    "text": "<s>[INST] What are text embedding models in LangChain? [/INST] Text embedding models in LangChain convert pieces of text into numerical vector representations. LangChain provides a standard `Embeddings` class to interface with various providers like OpenAI or Hugging Face. These vectors are crucial for tasks like semantic search, where similarity between texts is measured in vector space.</s>"
  },
  {
    "text": "<s>[INST] What are document loaders in LangChain? [/INST] Document loaders are components used to fetch data from various sources and convert it into a standard `Document` format, which consists of text content and associated metadata. LangChain offers many loaders for different sources, such as text files, web pages, PDFs, and databases, simplifying the data ingestion process.</s>"
  },
  {
    "text": "<s>[INST] What are document transformers and text splitters in LangChain? [/INST] Document transformers are used to manipulate loaded documents. The most common type is a text splitter, which breaks long documents into smaller, semantically meaningful chunks that can fit within a model's context window. The `RecursiveCharacterTextSplitter` does this by splitting text based on characters like newlines and spaces.</s>"
  },
  {
    "text": "<s>[INST] What are vector stores in LangChain? [/INST] Vector stores specialize in storing and searching over numerical vector embeddings of text. They are a core component of retrieval-augmented generation (RAG). At query time, the query is embedded, and the vector store efficiently retrieves the most semantically similar document embeddings from its storage for context.</s>"
  },
  {
    "text": "<s>[INST] What are retrievers in LangChain? [/INST] A retriever is an interface that fetches relevant documents in response to a query. While often backed by a vector store for semantic search, a retriever is a more general concept. Its primary role is to provide the most relevant context for a language model to answer a question accurately.</s>"
  },
  {
    "text": "<s>[INST] What is the Data Connection module in LangChain? [/INST] The Data Connection module provides the tools to link language models with user-specific data. It contains building blocks for the entire data pipeline: Document Loaders to ingest data, Document Transformers to process it, Embedding Models to vectorize it, Vector Stores to store it, and Retrievers to query it.</s>"
  },
  {
    "text": "<s>[INST] Where can I find tutorials and video resources for learning LangChain? [/INST] Numerous tutorials and videos are available for learning LangChain. Resources include official courses on DeepLearning.AI, the LangChain AI Handbook, and many short tutorials and crash courses on YouTube from creators like James Briggs, Greg Kamradt, and Sam Witteveen, covering everything from basic concepts to advanced agent creation.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between SimpleSequentialChain and SequentialChain? [/INST] `SimpleSequentialChain` is basic, where each step has one input and one output, with the output of one step feeding the next. `SequentialChain` is more flexible, allowing for multiple inputs and outputs between steps, which it manages using a shared memory object for context.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the LLMRouterChain? [/INST] An `LLMRouterChain` uses a language model to dynamically select the next chain to execute based on the user's input. This is useful for creating applications that can handle a variety of tasks by routing the query to the most appropriate specialized sub-chain for processing.</s>"
  },
  {
    "text": "<s>[INST] How does the MapReduceDocumentsChain work for summarization? [/INST] The `MapReduceDocumentsChain` first runs a prompt on each document chunk individually (the map step). Then, it takes the outputs from the map step and uses a different prompt to combine them into a final summary (the reduce step), allowing it to process large numbers of documents.</s>"
  },
  {
    "text": "<s>[INST] What is the StuffDocumentsChain and when is it used? [/INST] The `StuffDocumentsChain` is the simplest document chain. It \"stuffs\" all provided documents into a single prompt sent to the language model. It's fast and effective for a small number of documents that fit within the model's context window without exceeding the token limit.</s>"
  },
  {
    "text": "<s>[INST] What does the ConstitutionalChain do? [/INST] The `ConstitutionalChain` ensures a language model's output adheres to a predefined set of ethical or safety principles. It first generates a response, then critiques and revises it based on these \"constitutional\" rules, promoting more controlled and responsible AI-generated content.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the Hypothetical Document Embeddings (HyDE) chain? [/INST] The `Hypothetical Document Embeddings (HyDE)` chain improves retrieval accuracy. It first generates a hypothetical answer to a user's query, then embeds that answer to find similar real documents. This often works better than embedding the raw query, which may lack sufficient semantic context for searching.</s>"
  },
  {
    "text": "<s>[INST] What is the ReAct framework in the context of LangChain agents? [/INST] ReAct (Reason and Act) is a framework enabling agents to solve tasks by interleaving reasoning and action steps. The agent generates a \"thought\" to reason about its next step, an \"action\" to take (like using a tool), and an \"observation\" from the tool's output to inform its next thought.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the AgentExecutor class? [/INST] The `AgentExecutor` is the runtime for an agent. It takes an agent and a set of tools, then repeatedly calls the agent to decide which action to take. It executes that action, gets the result, and feeds it back to the agent until the agent decides it is finished.</s>"
  },
  {
    "text": "<s>[INST] Can you explain the Plan-and-execute agent architecture? [/INST] A Plan-and-execute agent first creates a multi-step plan to achieve a goal. Then, it executes each step of the plan sequentially. This approach is more robust for complex, long-running tasks as it separates the planning phase from execution, preventing the agent from getting sidetracked.</s>"
  },
  {
    "text": "<s>[INST] What is an OpenAI Functions Agent? [/INST] An `OpenAI Functions Agent` leverages OpenAI models that are specifically fine-tuned for function calling. The agent can reliably determine when to call a provided function (tool) and generate a JSON object with the correct arguments, enabling more structured and predictable interactions with tools.</s>"
  },
  {
    "text": "<s>[INST] What is ConversationBufferWindowMemory? [/INST] `ConversationBufferWindowMemory` keeps a list of the most recent interactions in a conversation. It only retains the last 'k' messages, which prevents the conversation history from growing too large and exceeding the model's context window, making it efficient for maintaining short-term context.</s>"
  },
  {
    "text": "<s>[INST] What does ConversationSummaryMemory do? [/INST] `ConversationSummaryMemory` creates a summary of the conversation over time. Instead of retaining the full chat history, it uses an LLM to condense the interactions. This is useful for keeping the context of long conversations without exceeding token limits, by passing the summary as memory.</s>"
  },
  {
    "text": "<s>[INST] How does VectorStoreRetrieverMemory work? [/INST] `VectorStoreRetrieverMemory` stores conversational history in a vector store. At runtime, it retrieves the most semantically relevant parts of the conversation to the current input. This allows the model to access the most pertinent long-term memories, rather than just recent messages or a full summary.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of Entity Memory in LangChain? [/INST] `Entity Memory` remembers specific details about entities (like people or places) mentioned in a conversation. It uses an LLM to extract these entities and their attributes, allowing a chatbot to recall and use specific facts, such as \"Sam's favorite color is blue,\" in later interactions.</s>"
  },
  {
    "text": "<s>[INST] Can you explain ConversationKGMemory? [/INST] `ConversationKGMemory` (Knowledge Graph Memory) represents entities and their relationships from a conversation as a knowledge graph. This provides a structured form of memory, allowing the model to reason about the connections between different entities discussed over time, rather than just using a linear history.</s>"
  },
  {
    "text": "<s>[INST] How does the UnstructuredFileLoader work? [/INST] The `UnstructuredFileLoader` is a versatile document loader that can process various file types like PDFs, Word documents, and HTML. It leverages the `unstructured` library to automatically detect the file type and extract its text content, simplifying data ingestion from diverse sources.</s>"
  },
  {
    "text": "<s>[INST] What is the WebBaseLoader used for? [/INST] The `WebBaseLoader` is a document loader designed to fetch and parse content from web pages. You provide it with a URL, and it uses libraries like BeautifulSoup to extract the text content from the HTML, making it easy to load online articles or documentation into LangChain.</s>"
  },
  {
    "text": "<s>[INST] What's the difference between CharacterTextSplitter and RecursiveCharacterTextSplitter? [/INST] `CharacterTextSplitter` splits text based on a single character separator. `RecursiveCharacterTextSplitter` is more robust; it tries to split based on a list of separators in order (e.g., `\\n\\n`, `\\n`, ` `). If a chunk is still too large, it moves to the next separator, preserving semantic structure better.</s>"
  },
  {
    "text": "<s>[INST] What is the TokenTextSplitter used for? [/INST] The `TokenTextSplitter` divides text into chunks based on a specified number of tokens rather than characters. This is useful because language models have context windows defined by token limits. Using this splitter ensures that your text chunks align directly with the model's processing constraints.</s>"
  },
  {
    "text": "<s>[INST] What is a VectorStoreRetriever? [/INST] A `VectorStoreRetriever` is a component that uses a vector store to fetch documents relevant to a given query. It embeds the query, performs a similarity search against the vectors in the store, and returns the documents that are most semantically similar to the query string.</s>"
  },
  {
    "text": "<s>[INST] How does Maximal Marginal Relevance (MMR) search work? [/INST] `Maximal Marginal Relevance (MMR)` is a retrieval method that optimizes for both similarity to the query and diversity among the results. After fetching an initial set of similar documents, it iteratively selects documents that are relevant but also distinct from those already selected, reducing redundancy.</s>"
  },
  {
    "text": "<s>[INST] What is a SelfQueryRetriever? [/INST] A `SelfQueryRetriever` uses an LLM to translate a user's natural language query into a structured query for a vector store. It extracts both the query to be embedded and any metadata filters from the original question, enabling more precise, filtered searches without manual filter creation.</s>"
  },
  {
    "text": "<s>[INST] Can you explain the MultiQueryRetriever? [/INST] The `MultiQueryRetriever` improves retrieval by generating several variations of a user's query from different perspectives using an LLM. It then fetches documents for each of these queries and combines the results, capturing a broader set of relevant information than a single query might.</s>"
  },
  {
    "text": "<s>[INST] What is a Contextual Compression Retriever? [/INST] A `Contextual Compression Retriever` enhances retrieval by first fetching documents and then filtering or compressing their content to keep only the most relevant parts. It uses a language model to extract sentences related to the query, reducing noise and providing more focused context to the final LLM call.</s>"
  },
  {
    "text": "<s>[INST] What are FewShotPromptTemplates? [/INST] A `FewShotPromptTemplate` provides a language model with a few examples of a task before the actual query. This \"in-context learning\" helps the model understand the desired output format or reasoning process, leading to more accurate and consistently structured responses without requiring fine-tuning.</s>"
  },
  {
    "text": "<s>[INST] What are partial_variables in a PromptTemplate? [/INST] `partial_variables` allow you to pre-fill some variables in a `PromptTemplate` before the final formatting call. This is useful when a variable's value is known ahead of time, simplifying the chain's execution by requiring fewer inputs when the chain is actually run with user-specific data.</s>"
  },
  {
    "text": "<s>[INST] What are PipelinePromptTemplates? [/INST] A `PipelinePromptTemplate` allows you to construct a final prompt from a series of smaller, intermediate prompts. Each prompt in the pipeline can format its output, which then serves as input for the next prompt, enabling the creation of complex and modular prompt structures.</s>"
  },
  {
    "text": "<s>[INST] What does the temperature parameter control in a language model? [/INST] The `temperature` parameter controls the randomness of a language model's output. A lower temperature (e.g., 0.1) makes the model more deterministic and focused, producing predictable responses. A higher temperature (e.g., 0.9) increases randomness, leading to more creative and diverse outputs.</s>"
  },
  {
    "text": "<s>[INST] How does streaming work with LLMs in LangChain? [/INST] Streaming allows an LLM to return its response token by token as it's being generated, rather than waiting for the entire completion. This is achieved using callbacks, like `StreamingStdOutCallbackHandler`, which handle each new token as it arrives, improving the user experience for real-time applications.</s>"
  },
  {
    "text": "<s>[INST] What is the FakeLLM class used for? [/INST] The `FakeLLM` class is a mock language model used for testing and development. It allows you to simulate LLM responses without making actual API calls, which saves costs and time. You can define a set of canned responses to test your chains and agents in a predictable environment.</s>"
  },
  {
    "text": "<s>[INST] What does the CommaSeparatedListOutputParser do? [/INST] The `CommaSeparatedListOutputParser` is designed to parse a language model's output that is a list of items separated by commas. It takes the raw string response and converts it into a Python list, which is useful for tasks like brainstorming or entity extraction.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the RetryOutputParser? [/INST] The `RetryOutputParser` attempts to fix a poorly formatted output from an LLM. If the initial parsing fails, it re-submits the prompt along with the failed output and formatting instructions to the LLM, asking it to correct the error. This makes output parsing more robust.</s>"
  },
  {
    "text": "<s>[INST] How does the StructuredOutputParser work? [/INST] The `StructuredOutputParser` helps you get a JSON-like object from an LLM. You define the desired schema with descriptions for each key, and the parser generates formatting instructions for the prompt. It can then parse the model's string output into a structured dictionary matching your defined schema.</s>"
  },
  {
    "text": "<s>[INST] How do you define a Custom Tool for a LangChain agent? [/INST] You can create a custom tool by defining a Python function that performs a specific task. Then, you wrap this function using the `@tool` decorator or the `Tool` class, providing a name and a clear description. The description is crucial, as it tells the agent what the tool does.</s>"
  },
  {
    "text": "<s>[INST] What is the Python REPL tool? [/INST] The `Python REPL` (Read-Eval-Print Loop) tool gives a LangChain agent the ability to write and execute Python code. This is extremely powerful for tasks involving calculations, data manipulation, or any logic that is better handled by code than by a language model's reasoning alone.</s>"
  },
  {
    "text": "<s>[INST] What is the SerpAPI tool used for? [/INST] The `SerpAPI` tool provides a LangChain agent with access to real-time internet search results via the SerpAPI service. This allows the agent to answer questions about recent events or find information not included in its training data, overcoming the LLM's knowledge cutoff.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the on_agent_action callback? [/INST] The `on_agent_action` callback is triggered whenever an agent decides to take an action (i.e., use a tool). This allows developers to log, inspect, or even interrupt the agent's behavior at each step. It's highly useful for debugging the agent's reasoning process and tool usage.</s>"
  },
  {
    "text": "<s>[INST] How does LangSmith enhance the development of LangChain applications? [/INST] LangSmith is a platform for debugging, testing, evaluating, and monitoring LLM applications. It provides full visibility into the execution of chains and agents, allowing developers to trace every step, inspect inputs and outputs, and analyze performance to quickly identify and fix issues.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the pipe (|) operator in LCEL? [/INST] In the LangChain Expression Language (LCEL), the pipe (`|`) operator chains components together. It passes the output of the component on the left as the input to the component on the right, creating a `RunnableSequence`. This provides a declarative and intuitive way to build complex chains.</s>"
  },
  {
    "text": "<s>[INST] What does RunnablePassthrough do in LCEL? [/INST] `RunnablePassthrough` is an LCEL component that passes its input through unchanged or adds extra keys to a dictionary input. It is often used to feed the same input into multiple parallel branches of a chain or to add original user questions to the final output for context.</s>"
  },
  {
    "text": "<s>[INST] What is the function of RunnableParallel in LCEL? [/INST] `RunnableParallel` allows you to execute multiple Runnables in parallel, with their results combined into a dictionary. This is useful for running different processing steps on the same input simultaneously, such as fetching documents and creating a standalone question before feeding both into a final prompt.</s>"
  },
  {
    "text": "<s>[INST] What is a RunnableSequence in LCEL? [/INST] A `RunnableSequence` is the core building block of LCEL, created by chaining components together with the pipe operator (`|`). It defines a clear, sequential execution path where the output of one step becomes the input of the next, making complex workflows easy to define and visualize.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of indexing data in LangChain? [/INST] Indexing in LangChain involves structuring documents to enable efficient querying by an LLM. This typically means creating a vector index of document embeddings. The index allows for rapid retrieval of relevant documents, which can then be passed to the LLM as context to answer a specific query.</s>"
  },
  {
    "text": "<s>[INST] Can you explain the concept of a Graph Index? [/INST] A `Graph Index` stores information as a knowledge graph, with nodes representing entities and edges representing their relationships. When querying, the LLM can traverse this graph to find answers that depend on understanding the connections between different pieces of information, not just semantic similarity.</s>"
  },
  {
    "text": "<s>[INST] How does LangChain integrate with vector databases like Chroma? [/INST] LangChain provides a standard `VectorStore` interface with integrations for many databases like Chroma, FAISS, and Pinecone. This allows you to easily embed documents and store them in your chosen database. You can then use the `as_retriever()` method to create a retriever for your RAG chains.</s>"
  },
  {
    "text": "<s>[INST] How would you build a question-answering system over documents with LangChain? [/INST] First, load documents using a `DocumentLoader` and split them with a `TextSplitter`. Next, create vector embeddings of the chunks and store them in a `VectorStore`. Finally, create a `RetrievalQA` chain that retrieves relevant chunks and passes them to an LLM to answer the question.</s>"
  },
  {
    "text": "<s>[INST] How does LangChain facilitate chatbot development? [/INST] LangChain simplifies chatbot development with its `Memory` components, which retain conversational history. `Chains` like `ConversationChain` integrate memory with an LLM and a prompt template, while `ChatPromptTemplate` helps structure the conversational flow between the user, AI, and system instructions.</s>"
  },
  {
    "text": "<s>[INST] How can LangChain agents be used for data analysis? [/INST] LangChain agents, particularly those equipped with tools like the `Pandas DataFrame Agent` or `Python REPL`, can perform data analysis. The agent can understand natural language queries about a dataset, write and execute code to perform calculations or create visualizations, and then summarize the findings.</s>"
  },
  {
    "text": "<s>[INST] What is the benefit of serializing LangChain objects? [/INST] Serializing LangChain objects (like prompts and chains) to formats like JSON or YAML allows you to save and load them from disk. This decouples the configuration of your application from the code, making it easier to share, version control, and dynamically load different prompts or chain structures.</s>"
  },
  {
    "text": "<s>[INST] What is the role of LangChain Expression Language (LCEL)? [/INST] LCEL provides a declarative syntax for composing chains and agents. It simplifies building complex applications by using a pipe (`|`) operator to link components. LCEL chains automatically get benefits like streaming, batch processing, and async support, making them both powerful and easy to use.</s>"
  },
  {
    "text": "<s>[INST] What is a vector database? [/INST] A vector database is a specialized database designed to efficiently store, manage, and search large collections of high-dimensional vectors, also known as vector embeddings. It uses algorithms like Approximate Nearest Neighbor (ANN) to perform fast and scalable similarity searches, enabling applications like semantic search and recommendation systems.</s>"
  },
  {
    "text": "<s>[INST] What are vector embeddings? [/INST] Vector embeddings are numerical representations of data like text, images, or audio, generated by machine learning models. These vectors capture the semantic meaning of the data, where similar items are located closer together in a high-dimensional space, enabling machines to understand context and relationships.</s>"
  },
  {
    "text": "<s>[INST] Why can't I use a traditional database for vector search? [/INST] Traditional databases are optimized for exact matches on structured data, not for finding the 'closest' items in a high-dimensional space. A brute-force vector search in a relational database would be incredibly slow and computationally expensive, making it impractical for real-time applications at any significant scale.</s>"
  },
  {
    "text": "<s>[INST] What is semantic search? [/INST] Semantic search seeks to understand the intent and contextual meaning of a query, rather than just matching keywords. Vector databases power this by converting both the query and the data into embeddings and then finding the items that are semantically closest to the query's meaning.</s>"
  },
  {
    "text": "<s>[INST] What is Approximate Nearest Neighbor (ANN) search? [/INST] Approximate Nearest Neighbor (ANN) is a class of algorithms used by vector databases to find 'close enough' matches for a query vector very quickly, without guaranteeing the absolute closest match. This trade-off between perfect accuracy and speed is essential for low-latency searches on massive datasets.</s>"
  },
  {
    "text": "<s>[INST] How is similarity measured between vectors? [/INST] Similarity is measured using distance metrics. Common ones include Cosine Similarity, which measures the angle between vectors (good for text), Euclidean Distance (L2), which measures the straight-line distance, and Dot Product, which considers both magnitude and angle. The choice depends on the embedding model used.</s>"
  },
  {
    "text": "<s>[INST] What is a vector index? [/INST] A vector index is a specialized data structure that organizes vector embeddings to make searching faster. Instead of comparing a query vector to every other vector, the index allows the database to quickly narrow down the search to a small, promising subset, dramatically improving performance.</s>"
  },
  {
    "text": "<s>[INST] What is metadata filtering in a vector search? [/INST] Metadata filtering allows you to narrow down a vector search to only include results that match specific criteria, such as a date, category, or user ID. This combines the power of semantic search with traditional, structured filtering for more precise and relevant results.</s>"
  },
  {
    "text": "<s>[INST] What is hybrid search in a vector database? [/INST] Hybrid search combines traditional keyword-based (sparse vector) search with modern semantic (dense vector) search. This approach leverages the strengths of both, providing results that are both lexically precise and semantically relevant, often leading to better overall search quality than either method alone.</s>"
  },
  {
    "text": "<s>[INST] What are namespaces used for in a vector database? [/INST] Namespaces are used to partition data within a single index, allowing you to isolate different tenants, users, or data sources. Queries performed within one namespace will only return results from that specific partition, providing a simple way to implement multi-tenancy or data segregation.</s>"
  },
  {
    "text": "<s>[INST] What is the curse of dimensionality? [/INST] The 'curse of dimensionality' refers to how distance metrics become less meaningful as the number of dimensions in a vector increases. In high-dimensional space, the distance between any two points tends to become very similar, making it computationally hard to find the true nearest neighbors efficiently.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between a vector library like FAISS and a vector database? [/INST] A library like FAISS provides the core indexing and search algorithms but lacks database features like data management, APIs, scalability, and persistence. A vector database is a complete, production-ready system built around such a library, offering a fully managed solution for vector operations.</s>"
  },
  {
    "text": "<s>[INST] What is an HNSW index? [/INST] HNSW (Hierarchical Navigable Small World) is a popular ANN indexing algorithm. It builds a multi-layered graph structure where long-range links on upper layers allow for fast traversal across the dataset, while shorter links on lower layers enable precise navigation to find the nearest neighbors.</s>"
  },
  {
    "text": "<s>[INST] What is an Inverted File (IVF) index? [/INST] An Inverted File (IVF) index works by clustering vectors into groups based on similarity, with each cluster represented by a centroid. During a search, it first identifies the closest clusters to the query vector and then only searches within those specific clusters, drastically reducing the search space.</s>"
  },
  {
    "text": "<s>[INST] What is Product Quantization (PQ)? [/INST] Product Quantization (PQ) is a technique used to compress vectors, significantly reducing their memory footprint. It works by splitting a vector into smaller sub-vectors and then replacing each sub-vector with a code from a pre-computed codebook, enabling large-scale, in-memory indexing.</s>"
  },
  {
    "text": "<s>[INST] What is recall in the context of vector search? [/INST] Recall is a performance metric for ANN searches that measures accuracy. It's the percentage of true nearest neighbors that are found in the approximate results. A higher recall means higher accuracy, but it often comes at the cost of increased search latency (slower speed).</s>"
  },
  {
    "text": "<s>[INST] What is the difference between pre-filtering and post-filtering? [/INST] In a filtered search, pre-filtering applies metadata filters before the vector search, narrowing the search to a smaller pool of vectors. Post-filtering performs the vector search first and then filters the results. Pre-filtering is often faster but can be less accurate than post-filtering.</s>"
  },
  {
    "text": "<s>[INST] What is an upsert operation in a vector database? [/INST] An upsert operation is a combination of 'update' and 'insert'. When you upsert a vector with a specific ID, the database will update the vector if an entry with that ID already exists, or it will insert a new entry if the ID is not found.</s>"
  },
  {
    "text": "<s>[INST] How do vector databases handle real-time updates? [/INST] Many modern vector databases are designed for real-time indexing. When new data is added, it is quickly incorporated into the index and becomes searchable within seconds. This is crucial for applications that need to work with fresh data, such as news recommendation or real-time monitoring.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between sparse and dense vectors? [/INST] Dense vectors, used for semantic meaning, have mostly non-zero values and capture context. Sparse vectors, used for keyword matching, are very high-dimensional with mostly zero values, representing the presence or absence of specific terms (like TF-IDF). Hybrid search combines both types.</s>"
  },
  {
    "text": "<s>[INST] What does it mean for a vector database to be 'managed' or 'serverless'? [/INST] A managed or serverless vector database is a cloud-hosted service where the provider handles all infrastructure, maintenance, and scaling. Users interact with it via an API without needing to worry about managing servers, making it easier to deploy and maintain production applications.</s>"
  },
  {
    "text": "<s>[INST] How do vector databases scale to handle billions of vectors? [/INST] Vector databases scale by using distributed architectures. This involves sharding the data (splitting it across multiple machines) and using replicas (copies of shards) to handle query loads. Efficient indexing algorithms and hardware optimization are also key to maintaining performance at scale.</s>"
  },
  {
    "text": "<s>[INST] What are common use cases for vector databases? [/INST] Common use cases include retrieval-augmented generation (RAG) for chatbots, recommendation engines for products or content, image and video search, anomaly detection, and natural language processing tasks. Any application that relies on finding semantically similar items can benefit from a vector database.</s>"
  },
  {
    "text": "<s>[INST] What is the role of an embedding model with a vector database? [/INST] An embedding model is a separate component that converts raw data (like text) into vector embeddings. The vector database does not create embeddings; it only stores and indexes them. Your application is responsible for using a model to generate vectors before ingesting them into the database.</s>"
  },
  {
    "text": "<s>[INST] How do you choose a distance metric for your vector database? [/INST] The choice of distance metric should match the one used to train your embedding model. Most models are optimized for a specific metric. For example, many sentence-transformer models perform best with Cosine Similarity, while other models might be better suited for Euclidean or dot product distance.</s>"
  },
  {
    "text": "<s>[INST] What is sharding in a vector database? [/INST] Sharding is the process of horizontally partitioning a large vector index into smaller, more manageable pieces called shards. Each shard is stored on a separate node or server. This allows the database to scale beyond the limits of a single machine and distribute query workloads in parallel.</s>"
  },
  {
    "text": "<s>[INST] What is a flat index? [/INST] A flat index is the most basic type of vector index. It performs an exhaustive, brute-force search by comparing the query vector to every single other vector in the dataset. While it guarantees perfect accuracy (100% recall), it is very slow and not suitable for large-scale applications.</s>"
  },
  {
    "text": "<s>[INST] How do deletes work in vector databases? [/INST] Deleting vectors from an index can be complex. Many systems initially perform a 'soft delete' by marking a vector as deleted without immediately removing it, filtering it out at query time. A background process later compacts the index to permanently remove these vectors and reclaim space.</s>"
  },
  {
    "text": "<s>[INST] What is the data ingestion process for a vector database? [/INST] The data ingestion process involves three main steps. First, you take your raw data (e.g., text documents). Second, you use an embedding model to convert that data into vector embeddings. Third, you load these vectors, along with their unique IDs and any metadata, into the vector database.</s>"
  },
  {
    "text": "<s>[INST] What is scalar quantization? [/INST] Scalar quantization is a compression technique that reduces the precision of the numbers in a vector. For example, it might convert 32-bit floating-point numbers into 8-bit integers. This significantly lowers memory usage at the cost of some precision, which can slightly affect search accuracy.</s>"
  },
  {
    "text": "<s>[INST] What is a brute-force search in vector databases? [/INST] A brute-force search, also known as an exact nearest neighbor search, calculates the distance between a query vector and every other vector in the database to find the absolute closest matches. It provides perfect accuracy but is too slow for most real-time, large-scale use cases.</s>"
  },
  {
    "text": "<s>[INST] How does batching improve performance when writing to a vector database? [/INST] Batching involves grouping multiple vectors together into a single API request instead of sending them one by one. This is far more efficient because it reduces network overhead and allows the database to process the data in optimized chunks, leading to significantly higher ingestion throughput.</s>"
  },
  {
    "text": "<s>[INST] What is the role of replicas in a vector database? [/INST] Replicas are copies of an index or its shards. They serve two main purposes: providing high availability by acting as a backup if a primary node fails, and improving read throughput by allowing the database to distribute incoming search queries across multiple copies of the data.</s>"
  },
  {
    "text": "<s>[INST] What is a 'cold start' problem in a recommendation system and how can vector databases help? [/INST] The 'cold start' problem occurs when you have new users or items with no interaction history. Vector databases can help by using content-based embeddings. A new item's features can be embedded and used to find similar items, providing initial recommendations without needing user data.</s>"
  },
  {
    "text": "<s>[INST] What is multimodal search? [/INST] Multimodal search allows you to use one type of data to search for another type, such as using a text query to find relevant images or an image to find similar audio clips. This is enabled by embedding different data modalities into a shared vector space.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between a disk-based and an in-memory vector index? [/INST] An in-memory index stores all vectors in RAM, offering the fastest possible query speeds. A disk-based index stores vectors on SSDs, which is more cost-effective for extremely large datasets but introduces higher latency as data must be read from disk during a search.</s>"
  },
  {
    "text": "<s>[INST] What are some common challenges when operating a vector database? [/INST] Common challenges include managing the trade-off between search speed, accuracy, and cost. Other issues are choosing the right indexing parameters, handling high-dimensional data efficiently, and ensuring the infrastructure can scale to meet the demands of both data ingestion and query traffic.</s>"
  },
  {
    "text": "<s>[INST] How is data consistency managed in a distributed vector database? [/INST] Distributed vector databases often use an eventual consistency model. When data is written, it is propagated to replicas and shards in the background. This means there might be a very short delay before a newly written vector is visible across all nodes in the system.</s>"
  },
  {
    "text": "<s>[INST] Can vector databases store the original data? [/INST] While some vector databases can store a small payload of original data or metadata alongside the vector, they are not designed to be primary data stores. It's common practice to store only an ID with the vector and use that ID to retrieve the full original content from another database.</s>"
  },
  {
    "text": "<s>[INST] What is a vector database 'pod' or 'node'? [/INST] A pod or node is a single computational unit in a distributed vector database that provides resources like CPU, RAM, and storage. An index is deployed across one or more of these pods, and you can often scale your index's performance by increasing the size or number of pods.</s>"
  },
  {
    "text": "<s>[INST] How can you optimize the dimensionality of your vectors? [/INST] The optimal dimensionality depends on the embedding model and task. While higher dimensions can capture more detail, they increase cost and slow down search. Techniques like Principal Component Analysis (PCA) or using models trained for lower dimensions can reduce dimensionality while preserving important information.</s>"
  },
  {
    "text": "<s>[INST] What is cross-modal retrieval? [/INST] Cross-modal retrieval is a technique that enables searching across different data types, like using text to find an image or vice-versa. It works by training a model to map different modalities (text, image, audio) into a single, shared semantic vector space where they can be compared.</s>"
  },
  {
    "text": "<s>[INST] How are vector databases used for anomaly detection? [/INST] For anomaly detection, normal data points are embedded and clustered in a vector database. A new data point is considered an anomaly if its vector falls far away from any of these clusters. This indicates that its characteristics are significantly different from the typical, expected data.</s>"
  },
  {
    "text": "<s>[INST] What is 'vector pruning' in an HNSW index? [/INST] Vector pruning is a process in HNSW and other graph-based indexes where connections to less relevant neighbors are removed during the search or build process. This helps keep the graph efficient and prevents the search from getting stuck exploring dense, unhelpful regions of the graph.</s>"
  },
  {
    "text": "<s>[INST] What is the impact of vector normalization on similarity searches? [/INST] Normalizing vectors (scaling them to have a length of 1) is a common preprocessing step. When vectors are normalized, the dot product and cosine similarity become equivalent. This can simplify calculations and is a requirement for certain index types or embedding models.</s>"
  },
  {
    "text": "<s>[INST] What is latency in the context of a vector search? [/INST] Latency is the time it takes for the vector database to return a result after receiving a query. It's a critical performance metric, especially for real-time applications. Low latency (measured in milliseconds) is a primary goal of using efficient ANN indexes instead of exact, brute-force search.</s>"
  },
  {
    "text": "<s>[INST] How can you monitor the performance of a vector database? [/INST] Performance is monitored through metrics like query latency (how fast searches are), recall (how accurate they are), and throughput (how many queries per second it can handle). Cloud providers also offer metrics on resource utilization like CPU, memory usage, and disk I/O.</s>"
  },
  {
    "text": "<s>[INST] What are 'collections' or 'indexes' in vector database terminology? [/INST] In a vector database, a 'collection' or 'index' is the top-level container for a set of vectors. All vectors within a single collection typically have the same dimensionality and are configured with the same indexing parameters and distance metric for searching.</s>"
  },
  {
    "text": "<s>[INST] What is query routing in a large-scale vector database system? [/INST] In a distributed system, query routing is the process of directing an incoming search request to the correct shard or shards that contain the relevant data. An efficient routing layer is crucial for minimizing latency and ensuring that queries are processed in parallel across the cluster.</s>"
  },
  {
    "text": "<s>[INST] How do you handle out-of-vocabulary words for a text embedding model? [/INST] Embedding models handle out-of-vocabulary words using subword tokenization. They break down unknown words into smaller, known pieces (like 'un-happi-ness'). The final vector for the word is an aggregate of these subword vectors, allowing the model to generate meaningful embeddings even for words it hasn't seen.</s>"
  },
  {
    "text": "<s>[INST] What is FastAPI? [/INST] FastAPI is a modern, high-performance Python web framework for building APIs. It is built on top of Starlette and Pydantic and is designed to be easy to use, fast to code, and production-ready. Its key features include automatic data validation, serialization, and interactive documentation.</s>"
  },
  {
    "text": "<s>[INST] What is Uvicorn? [/INST] Uvicorn is a lightning-fast ASGI (Asynchronous Server Gateway Interface) server, built on uvloop and httptools. It serves as the web server that runs asynchronous Python web applications like FastAPI, handling incoming network requests and passing them to the application for processing.</s>"
  },
  {
    "text": "<s>[INST] What makes FastAPI so fast? [/INST] FastAPI's performance comes from being built on Starlette for web handling and Pydantic for data validation, both of which are very fast. It leverages Python's native `async/await` syntax, allowing it to handle concurrent requests efficiently without blocking, which is ideal for I/O-bound operations.</s>"
  },
  {
    "text": "<s>[INST] What is the relationship between FastAPI, Uvicorn, and ASGI? [/INST] ASGI is a standard interface between async-capable Python web servers and applications. FastAPI is an ASGI-compliant framework, meaning it can be run by any ASGI server. Uvicorn is a high-performance ASGI server that is the recommended server for running FastAPI applications.</s>"
  },
  {
    "text": "<s>[INST] What are Pydantic models used for in FastAPI? [/INST] Pydantic models are used to define the data shape for API requests and responses using standard Python types. FastAPI uses these models to perform automatic data validation, serialization (converting data to JSON), and deserialization (parsing JSON into Python objects), and to generate API documentation.</s>"
  },
  {
    "text": "<s>[INST] How do you run a FastAPI application using Uvicorn? [/INST] You run a FastAPI application from the command line using Uvicorn. If your application instance is named `app` in a file named `main.py`, the command is: `uvicorn main:app`. This starts the server and makes your API accessible on the local host.</s>"
  },
  {
    "text": "<s>[INST] What is a path operation decorator in FastAPI? [/INST] A path operation decorator is a Python decorator that associates an HTTP method (like GET, POST, PUT, DELETE) and a URL path with a function. For example, `@app.get(\"/items/{item_id}\")` tells FastAPI to call the decorated function when it receives a GET request to that path.</s>"
  },
  {
    "text": "<s>[INST] What does the `--reload` flag do in Uvicorn? [/INST] The `--reload` flag enables auto-reloading. When you run Uvicorn with this flag (e.g., `uvicorn main:app --reload`), the server will automatically restart whenever it detects a change in your code. This is extremely useful during development as you don't need to manually stop and start the server.</s>"
  },
  {
    "text": "<s>[INST] How do you define path and query parameters in FastAPI? [/INST] Path parameters are defined as part of the URL path in the decorator and as function arguments (e.g., `@app.get(\"/{user_id}\")` and `def get_user(user_id: int)`). Query parameters are defined as function arguments that are not part of the path, and they are appended to the URL after a `?`.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between Uvicorn and Gunicorn? [/INST] Uvicorn is an ASGI server designed for async applications. Gunicorn is a WSGI server, primarily for synchronous applications. For production FastAPI deployments, a common pattern is to use Gunicorn to manage Uvicorn workers, leveraging Gunicorn's robust process management with Uvicorn's async performance.</s>"
  },
  {
    "text": "<s>[INST] What is Dependency Injection in FastAPI? [/INST] Dependency Injection is a system where FastAPI takes care of providing functions with the values they need to operate (their 'dependencies'). You declare dependencies using `Depends`, and FastAPI ensures they are executed and their results are passed to your path operation function before it runs.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the `--workers` flag in Uvicorn? [/INST] The `--workers` flag allows Uvicorn to run multiple parallel worker processes. This enables the server to fully utilize multiple CPU cores, significantly increasing its capacity to handle concurrent requests and improving overall throughput for CPU-bound tasks or high traffic loads.</s>"
  },
  {
    "text": "<s>[INST] How does FastAPI generate automatic API documentation? [/INST] FastAPI automatically generates interactive API documentation (like Swagger UI and ReDoc) by inspecting your code. It uses the path operations, Pydantic models, and type hints to build an OpenAPI schema that describes your entire API, including endpoints, parameters, and response structures.</s>"
  },
  {
    "text": "<s>[INST] What is middleware in FastAPI? [/INST] Middleware is a function that processes every request before it reaches the specific path operation and every response before it is sent to the client. It's used to implement cross-cutting concerns like logging, adding custom headers, handling authentication, or dealing with CORS.</s>"
  },
  {
    "text": "<s>[INST] How do you enable HTTPS/SSL in Uvicorn? [/INST] You can enable HTTPS directly in Uvicorn using command-line flags. You need to provide the paths to your SSL key and certificate files, for example: `uvicorn main:app --ssl-keyfile ./key.pem --ssl-certfile ./cert.pem`. In production, this is more commonly handled by a reverse proxy.</s>"
  },
  {
    "text": "<s>[INST] What is `async def` and why is it important in FastAPI? [/INST] `async def` is used to define an asynchronous function in Python. In FastAPI, using `async def` for path operations allows the server to handle other requests while waiting for slow I/O operations (like database calls or network requests) to complete, greatly improving concurrency and performance.</s>"
  },
  {
    "text": "<s>[INST] What is `APIRouter` used for? [/INST] `APIRouter` helps organize your application by allowing you to group related path operations into separate modules or files. You can then include these routers in your main FastAPI application, which helps keep your codebase clean, modular, and maintainable as it grows larger.</s>"
  },
  {
    "text": "<s>[INST] What are application lifecycle events in Uvicorn/FastAPI? [/INST] Lifecycle events are functions that run at specific times in the application's life. The `@app.on_event(\"startup\")` decorator registers a function to run once when the server starts up (e.g., to connect to a database), and `@app.on_event(\"shutdown\")` runs when it shuts down.</s>"
  },
  {
    "text": "<s>[INST] How do you handle file uploads in FastAPI? [/INST] To handle file uploads, you declare a parameter in your path operation function with the type `UploadFile`. FastAPI will then handle the incoming multipart form data, providing you with a file-like object that you can read to save the file or process its contents.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the TestClient in FastAPI? [/INST] `TestClient` is a utility for writing tests for your FastAPI application. It allows you to make HTTP requests directly to your app in your test code without needing a running server. This makes it easy to write fast, reliable, and isolated unit and integration tests.</s>"
  },
  {
    "text": "<s>[INST] What is `HTTPException` used for? [/INST] `HTTPException` is a special exception class in FastAPI used to return HTTP error responses. When you raise it, you can specify the HTTP status code and a detail message. FastAPI will automatically convert this exception into a properly formatted JSON error response for the client.</s>"
  },
  {
    "text": "<s>[INST] How do you run Uvicorn programmatically? [/INST] You can run Uvicorn from within your Python code by importing it and calling `uvicorn.run()`. This is useful for custom startup logic or integrating the server into a larger application. You pass the app object and configuration options like host and port directly to the function.</s>"
  },
  {
    "text": "<s>[INST] What are Background Tasks in FastAPI? [/INST] Background Tasks are operations that you need to run after returning a response to the client. This is useful for tasks that don't need to block the client, such as sending an email notification or processing data. You can define them by adding a `BackgroundTasks` parameter to your function.</s>"
  },
  {
    "text": "<s>[INST] What is CORS and how do you handle it in FastAPI? [/INST] CORS (Cross-Origin Resource Sharing) is a browser security feature that restricts web pages from making requests to a different domain. FastAPI provides `CORSMiddleware`, which you can add to your application to easily configure which origins, methods, or headers are allowed.</s>"
  },
  {
    "text": "<s>[INST] How can you secure an API endpoint in FastAPI? [/INST] FastAPI provides security utilities for common schemes like OAuth2, JWT, and API Keys. You define a security scheme and then add it as a dependency (`Depends` or `Security`) to your path operation. FastAPI will then enforce that the required credentials are provided in the request.</s>"
  },
  {
    "text": "<s>[INST] How does Uvicorn use `uvloop`? [/INST] `uvloop` is a fast, drop-in replacement for Python's built-in `asyncio` event loop. Uvicorn automatically uses `uvloop` if it's installed, which can provide a significant performance boost by leveraging Cython and libuv (the same library used by Node.js).</s>"
  },
  {
    "text": "<s>[INST] What does the `yield` keyword do in a dependency? [/INST] Using `yield` in a dependency creates a dependency with exit code. The code before the `yield` is executed before the request is handled, and the code after the `yield` is executed after the response has been sent, which is perfect for resource cleanup like closing database connections.</s>"
  },
  {
    "text": "<s>[INST] How can you configure logging in Uvicorn? [/INST] Uvicorn uses Python's standard `logging` module. You can configure it using command-line options like `--log-level` and `--log-config` to specify a configuration file. For more advanced setups, you can configure the loggers directly in your application's code.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between `Depends` and `Security`? [/INST] Both are used for dependencies, but `Security` is specifically for security schemes. It integrates with the OpenAPI documentation to correctly display the security requirements (e.g., the lock icon) and can automatically raise a 401 Unauthorized error if credentials are not valid.</s>"
  },
  {
    "text": "<s>[INST] How do you implement WebSockets in FastAPI? [/INST] FastAPI has first-class support for WebSockets. You define a WebSocket endpoint using the `@app.websocket(\"/ws\")` decorator. The decorated function receives a `WebSocket` object, which you can use to send and receive messages asynchronously within a loop until the connection is closed.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the `response_model` parameter in a path operation? [/INST] The `response_model` parameter defines the Pydantic model that the response data should conform to. FastAPI uses this to filter the returned data to only include the fields defined in the model, validate the output, and provide a precise schema for the API documentation.</s>"
  },
  {
    "text": "<s>[INST] What are `tags` used for in path operations? [/INST] The `tags` parameter is a list of strings (`tags=[\"users\"]`) that you can add to a path operation decorator or an `APIRouter`. These tags are used by the automatic documentation systems (like Swagger UI) to group related endpoints together, making the API docs easier to navigate.</s>"
  },
  {
    "text": "<s>[INST] How can you use a dependency on an entire `APIRouter`? [/INST] You can apply a dependency to all path operations within an `APIRouter` by passing a list of dependencies to its constructor (e.g., `APIRouter(dependencies=[Depends(get_current_user)])`). This is a convenient way to enforce requirements like authentication for a whole group of endpoints.</s>"
  },
  {
    "text": "<s>[INST] What is mounting a sub-application in FastAPI? [/INST] Mounting allows you to combine multiple independent applications (FastAPI or any other ASGI app) into a single main application, each under a specific path prefix. This is useful for composing large systems from smaller, self-contained services without them interfering with each other.</s>"
  },
  {
    "text": "<s>[INST] How does FastAPI serialize data types like `datetime` or `UUID`? [/INST] FastAPI's internal JSON encoder is configured to automatically handle common data types beyond the JSON standard, such as `datetime`, `timedelta`, and `UUID`. It converts them into standard ISO 8601 string formats, so you don't have to perform manual conversions before returning data.</s>"
  },
  {
    "text": "<s>[INST] What is the `Body()` function used for in FastAPI? [/INST] `Body()` is used to provide additional configuration for a request body parameter. For example, you can use `Body(..., embed=True)` to force FastAPI to expect the parameter as a key in the JSON body, or `Body(..., example={...})` to provide an example for the documentation.</s>"
  },
  {
    "text": "<s>[INST] How can you create a custom exception handler? [/INST] You can create a custom handler for a specific exception using the `@app.exception_handler(MyException)` decorator. The decorated function receives the request and the exception instance, allowing you to return a custom `Response` object, providing full control over error formatting.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between a `response_model` and a custom `Response`? [/INST] A `response_model` automatically handles data filtering and serialization to JSON. Returning a custom `Response` object (like `JSONResponse` or `HTMLResponse`) gives you more control, allowing you to set custom headers, status codes, or return non-JSON content like HTML or XML directly.</s>"
  },
  {
    "text": "<s>[INST] What is `response_model_exclude_unset` for? [/INST] Setting `response_model_exclude_unset=True` in the path operation decorator tells FastAPI to only include values in the response that were explicitly set in the returned data object. Fields that still have their default Pydantic model values will be omitted from the final JSON output.</s>"
  },
  {
    "text": "<s>[INST] How would you handle a request that can be both synchronous and asynchronous? [/INST] If a dependency or part of your code is synchronous (e.g., a CPU-bound library), you should run it in an external thread pool to avoid blocking the server's event loop. FastAPI can do this automatically for `def` functions, or you can use `run_in_threadpool` from `starlette.concurrency`.</s>"
  },
  {
    "text": "<s>[INST] What is the purpose of the `AnyIO` library in FastAPI's internals? [/INST] FastAPI uses `AnyIO` as its concurrency backend. `AnyIO` provides a compatibility layer that allows the same asynchronous code to run on different event loops, primarily `asyncio` and `trio`. This makes FastAPI's internal async handling more flexible and robust.</s>"
  },
  {
    "text": "<s>[INST] How can you access the raw `Request` object in FastAPI? [/INST] You can get access to the underlying Starlette `Request` object by adding a parameter to your path operation function with the type hint `Request`. This is useful when you need to access request details that are not directly exposed by FastAPI, such as client IP or specific headers.</s>"
  },
  {
    "text": "<s>[INST] What are callable dependencies? [/INST] A dependency can be any 'callable' that FastAPI can execute, most commonly a function. However, you can also use a class as a dependency. In this case, FastAPI will treat the class itself as a factory and call it to create a new instance for each request.</s>"
  },
  {
    "text": "<s>[INST] How can you stream a response in FastAPI? [/INST] To stream a response, you can return a `StreamingResponse` object. This response takes an asynchronous generator function as input. FastAPI will then iterate over the generator and send each yielded chunk of data to the client, which is ideal for large files or data streams.</s>"
  },
  {
    "text": "<s>[INST] What is a singleton dependency? [/INST] By default, dependencies are re-computed for every request. To create a 'singleton' dependency that is created only once and shared across all requests, you can manage its state outside the dependency function (e.g., as a global variable) and use the `startup` event to initialize it.</s>"
  },
  {
    "text": "<s>[INST] What is the role of a reverse proxy like Nginx when deploying Uvicorn? [/INST] A reverse proxy like Nginx sits in front of your Uvicorn server in production. It can handle tasks like terminating SSL (HTTPS), load balancing requests across multiple Uvicorn workers, serving static files directly, and providing an additional layer of security.</s>"
  },
  {
    "text": "<s>[INST] Can you use a synchronous function (`def`) instead of `async def` in FastAPI? [/INST] Yes, you can. If you use a regular `def` function for a path operation, FastAPI is smart enough to run it in an external thread pool. This prevents the synchronous code from blocking the server's main event loop, ensuring the application remains responsive.</s>"
  },
  {
    "text": "<s>[INST] How can you get the client's IP address in FastAPI? [/INST] You can access the client's IP address from the underlying Starlette `Request` object. Add a parameter `request: Request` to your path operation function, and then you can access the IP from `request.client.host`. This is especially useful for logging or rate-limiting.</s>"
  },
  {
    "text": "<s>[INST] How does FastAPI handle a request body with multiple media types? [/INST] FastAPI uses the `Content-Type` header to determine how to parse the request body. While a single path operation typically expects one format (like JSON), you can build more complex logic by inspecting the `Content-Type` header from the raw `Request` object to handle different formats.</s>"
  },
  {
    "text": "<s>[INST] What are some alternatives to Uvicorn for running FastAPI? [/INST] While Uvicorn is the recommended server, FastAPI can be run by other ASGI-compliant servers. Alternatives include Hypercorn, which supports more features like HTTP/2 and Trio, and Daphne, which is the official ASGI server from the Django project.</s>"
  },
  {
    "text": "<s>[INST] Can you give me a clear and simple definition of product design based on the Figma article? [/INST] Certainly. The article defines product design as the process of developing experiences to meet user needs while also aligning with the business's goals and strategies.</s>"
  },
  {
    "text": "<s>[INST] The guide mentions a product designer from Figma named Nikolas Klein. What's his perspective on product design? [/INST] According to Nikolas Klein, product design is about the relationship the product has with the user, but it also addresses its competitive context. This includes user experience design, product strategy, and go-to-market planning. He emphasizes that product designers must also assess if a solution is feasible from a business perspective.</s>"
  },
  {
    "text": "<s>[INST] I'm a little confused about the difference between product design and UX design. What does the introduction say about this? [/INST] That's a common point of confusion. The guide clarifies it this way: While UX design focuses on creating captivating, user-centric experiences, product design involves navigating the broader roadmap that connects those experiences back to the company’s overall objectives.</s>"
  },
  {
    "text": "<s>[INST] Okay, that makes sense. But why is product design considered so important for a company? [/INST] Product design is important because it helps drive both the product strategy and the larger business goals. Good product design ultimately contributes to a company's success and positively impacts its bottom line. As Nikolas Klein puts it, 'the impact of an effective product designer is a good product and a good business.'</s>"
  },
  {
    "text": "<s>[INST] Since we're on the topic, can you define what UX design is and why it matters? [/INST] Of course. The text defines User Experience (UX) design as understanding the relationship a user has with a technology or environment. It's about how users interact with a product or service. It matters because good UX design is critical for solving users' problems by creating human-centered, inclusive, and accessible experiences that are not just functional but also engaging and satisfying.</s>"
  },
  {
    "text": "<s>[INST] I'm trying to create a better workflow for my team. Can you outline the five main steps in the product design process that Figma uses? [/INST] Absolutely. Figma's product design process consists of five critical steps:\n1.  **Set goals:** Define the long-term business goal with input from the product team.\n2.  **Research:** Gather information and data-driven insights to inform the design process.\n3.  **Analyze:** Distill research findings into actionable insights and sketch out approaches to solve user pain points.\n4.  **Strategize and plan:** Propose a strategy and a detailed action plan to achieve the business goals.\n5.  **Execute and launch:** Work on the project, track progress, and bring the product to market.</s>"
  },
  {
    "text": "<s>[INST] During that final 'Execute and launch' phase, what role does a product designer typically take on? [/INST] In the 'Execute and launch' step, the product designer often transitions into a role similar to a UX designer. Their focus shifts to gathering user feedback and testing the product or service after it has been launched to see how it performs in the real world.</s>"
  },
  {
    "text": "<s>[INST] What are some of the biggest challenges a product designer might face, according to the guide? [/INST] The guide lists the top five product design challenges as:\n1.  Balancing business and user needs.\n2.  Designing for accessibility.\n3.  Ensuring sufficient team communication.\n4.  Navigating technological constraints.\n5.  Understanding your target audience.</s>"
  },
  {
    "text": "<s>[INST] That's a helpful list. Can you tell me the solutions the article suggests for each of those challenges? [/INST] Yes, here are the recommended solutions for each challenge:\n*   **Balancing needs:** Prioritize the most critical user needs using methods like user flow mapping.\n*   **Accessibility:** Follow established accessibility guidelines and involve users with disabilities in the design process for direct feedback.\n*   **Team communication:** Hold regular meetings, use open communication channels, and utilize shared documentation to keep everyone aligned.\n*   **Technological constraints:** Prioritize essential technological tools and work closely with your IT department to secure necessary resources.\n*   **Understanding the audience:** Conduct thorough user research, including interviews, surveys, and usability testing, and use tools like customer journey mapping and personas.</s>"
  },
  {
    "text": "<s>[INST] The article also mentioned a separate UX design process. What are the four steps involved there? [/INST] You're right, the UX design process is more focused and typically involves these four steps:\n1.  **Conduct user research:** Understand user behaviors, motivations, and needs.\n2.  **Design:** Build wireframes and prototypes based on research insights.\n3.  **Test and iterate:** Test prototypes with users and use their feedback to make adjustments and refine the design.\n4.  **Implement:** Build and release the design, then continue to refine it based on ongoing user feedback.</s>"
  },
  {
    "text": "<s>[INST] Could you give me a more detailed comparison between a product designer and a UX designer based on the article? I'm interested in the differences in scope, focus, and influence. [/INST] Certainly. Here’s a detailed comparison based on the text:\n\n**Product Design:**\n*   **Broader context:** Works at the intersection of business strategy, project management, and user-centric design.\n*   **Long-term vision:** Supports long-term business goals and the overall company strategy.\n*   **Greater sway:** Helps shape the product roadmap and makes decisions to maximize ROI.\n\n**UX Design:**\n*   **Narrower scope:** Is centered on creating a seamless and intuitive user experience with less emphasis on the broader business context.\n*   **Short-term focus:** Often zeroes in on improving specific features or user flows within a current sprint.\n*   **Less influence:** Focuses on representing the end user's needs, relying heavily on research and testing to inform designs.</s>"
  },
  {
    "text": "<s>[INST] The guide is from Figma, so it must have some specific tips for using the tool. What are the 'pro tips' for refining designs in Figma? [/INST] Yes, it does! The guide offers five pro tips for using Figma to refine your designs:\n1.  **Rapidly iterate** with interactive prototypes by dragging and dropping components.\n2.  **Keep the big picture in mind** through brainstorming and team huddles.\n3.  **Get instant feedback** by inviting collaborators to comment directly on design files.\n4.  **Prioritize communication and async decision-making** to keep the project moving.\n5.  **Share your prototypes** easily so stakeholders can review and provide input anytime.</s>"
  },
  {
    "text": "<s>[INST] What about team collaboration? Is there a specific Figma tool mentioned for that? [/INST] Yes, for team collaboration, the article recommends using **FigJam’s shared online whiteboard**. It's highlighted as a tool that makes team collaboration easy and helps bridge communication gaps throughout the entire product design process.</s>"
  },
  {
    "text": "<s>[INST] Can you explain what a wireframe is, based on the provided guide? [/INST] Certainly. The guide describes a wireframe as a basic blueprint that helps teams align on project requirements. You can think of it as the skeleton of your app or website, showing the bare-bones outlines of webpages, layouts, navigation, and other essential components.</s>"
  },
  {
    "text": "<s>[INST] That makes sense. Why is it so important to create a wireframe before starting the visual design? [/INST] Wireframing is important because it allows you and your team to visualize what you're trying to build and how to sequence user flows. It keeps early conversations focused and constructive by removing visual details, so you can get high-level feedback on core functionality, like whether you're prioritizing the most important elements on a screen.</s>"
  },
  {
    "text": "<s>[INST] I've heard there are different types of wireframes. Can you tell me about them? [/INST] Yes, the article outlines three basic types based on their level of detail, or fidelity:\n\n1.  **Low-fidelity wireframes:** These are very basic, focusing on layout, navigation, and information architecture. They often use simple boxes for images and placeholder text.\n2.  **Mid-fidelity wireframes:** These add more detail, like annotations and some real content, as designers map out core functionality and key interactions.\n3.  **High-fidelity wireframes:** These look like early product mockups and include visual design elements like fonts, colors, and logos to capture the look and feel of the final product for user testing, but without the full functionality of a prototype.</s>"
  },
  {
    "text": "<s>[INST] Do I always have to start with a low-fidelity wireframe and work my way up? [/INST] Not necessarily. While that's a good approach for new product concepts, the guide suggests there are cases where you can jump straight to a high-fidelity wireframe. Specifically, if you have an established design system and the design you're exploring is similar to others that already exist, a higher-fidelity wireframe can be just as fast and effective.</s>"
  },
  {
    "text": "<s>[INST] What are some best practices I should follow when creating wireframes? [/INST] The article lists seven key best practices for effective wireframe design:\n1.  **Identify your design goals** first.\n2.  **Choose the right screen size** for your target device.\n3.  **Keep the design simple** using grayscale colors and basic shapes.\n4.  **Maintain design consistency** across all wireframes.\n5.  **Make navigation obvious** and intuitive.\n6.  **Don’t get too attached** to your wireframe; it's a draft meant to evolve.\n7.  **Leverage wireframing tools** to make it easier to share, save, and iterate.</s>"
  },
  {
    "text": "<s>[INST] You mentioned choosing the right size. Does the guide give any standard dimensions for wireframes? [/INST] Yes, it provides the following standard wireframe sizes for different screen types:\n*   **Mobile:** 393 pixels wide by 852 pixels tall\n*   **11” Tablet:** 834 pixels wide by 1194 pixels tall\n*   **Desktop:** 1440 pixels wide by 1024 pixels tall</s>"
  },
  {
    "text": "<s>[INST] The guide also says to keep the design simple, but then mentions using 'real content.' When should I use actual text instead of 'lorem ipsum'? [/INST] That's a great question. While simple placeholders are fine for early-stage layouts, the guide recommends using real content for content-rich interfaces. When you're working on the information architecture, like menu items or headings, using real text is much more useful for evaluating the user experience than just seeing 'menu item 1, 2, 3, 4'.</s>"
  },
  {
    "text": "<s>[INST] How do I know when my wireframe is actually finished and ready for the next stage? [/INST] Your wireframe is ready for mockups when it clearly shows:\n*   What screens are essential to meet user needs.\n*   The primary user flow through conversion funnels.\n*   Key usability considerations, like navigation and organization.\n*   The main goals for each screen.\n*   Key UI elements, content, and interactive features on each screen.\n*   How all the design components fit together to form screen templates.</s>"
  },
  {
    "text": "<s>[INST] It's hard to measure success at such an early stage. How can I tell if my wireframe is successful? [/INST] According to Tom Lowry from Figma, you can use qualitative metrics to gauge success. A wireframe is successful if:\n1.  During user testing, users can navigate the experience and complete tasks without instructions.\n2.  You receive the type of high-level feedback you wanted from stakeholders, and you feel confident about moving forward to the next steps.</s>"
  },
  {
    "text": "<s>[INST] What if my stakeholders are doing the opposite? What should I do if they get distracted by small visual details instead of the core functionality? [/INST] The guide suggests that if stakeholders are focusing on minor details like colors or fonts, it might be an indication that your wireframe's fidelity is too high. The solution is to 'lower wireframe fidelity'—remove some of the visual polish from the design to help refocus their feedback on the structural and functional aspects you need to validate at that stage.</s>"
  },
  {
    "text": "<s>[INST] Does the Figma article recommend any specific tools or resources to get started with wireframing? [/INST] Yes, it does. It mentions that **Figma's wireframe kit** includes drag-and-drop tools to help you get started. It also suggests using Figma's free **website wireframing kit** to jumpstart projects and recommends connecting with the **Figma community** to find a plethora of wireframe ideas and UI templates.</s>"
  },
  {
    "text": "<s>[INST] Hi, can you give me a clear definition of what a brand style guide is? [/INST] Certainly. A brand style guide is a foundational document that maintains brand consistency and coherence. It provides helpful templates and guidance on how to use brand elements—including fonts, logos, color palettes, and imagery. It also guides messaging and content creation by defining the company’s brand voice, tone, and writing style.</s>"
  },
  {
    "text": "<s>[INST] That makes sense. What are the main benefits of having a style guide? [/INST] The primary benefit is building a strong, consistent brand. It aligns key stakeholders, from designers to strategists, ensuring they deliver a unified user experience across all channels like websites, apps, and social media. It also speeds up product development by providing easy and centralized access to approved design elements.</s>"
  },
  {
    "text": "<s>[INST] At what point in a company's life should a brand style guide be created? [/INST] Teams typically need a brand style guide very early in the product development cycle. It doesn't need to be perfect from the start; you can create the first version as soon as you have a few core brand assets. It should be treated as a living document that is updated and added to as the brand and customer needs evolve.</s>"
  },
  {
    "text": "<s>[INST] I'm tasked with creating one for my company. What are the most important elements I should include? [/INST] A comprehensive brand style guide should include five key elements to serve as your source of truth:\n1.  **Brand Story:** This communicates your company’s vision, mission, and core values.\n2.  **Target Audience:** A definition of your customers, often developed using personas, to ensure the brand resonates with them.\n3.  **Visual Identity:** This section details typography, logo usage, imagery, iconography, and the official brand color palette with specific codes (like RGB, HEX, and CMYK).\n4.  **Brand Voice:** This defines your brand's personality, often expressed through a unique combination of adjectives (e.g., 'modern, clever, and brave').\n5.  **Writing Guidelines:** This provides a framework for writing, including grammar rules, readability levels, and brand-approved words and phrases.</s>"
  },
  {
    "text": "<s>[INST] That's a great list. Could you walk me through the basic steps to create a brand style guide? [/INST] Of course. The process can be broken down into four basic steps:\n1.  **Build an outline:** Start by creating a detailed table of contents based on the key elements you want to include.\n2.  **Capture the guidelines:** Gather existing materials like mission statements and collaborate with your brand team to develop the specific rules for all visual and written components.\n3.  **Revise the guide:** Form a review committee with key stakeholders to get feedback, then revise the guide for clarity and simplicity before getting final leadership approval.\n4.  **Share the style guide:** Once it's finalized, present it to the entire company and make it easily accessible for all teams to use, often as part of the employee onboarding process.</s>"
  },
  {
    "text": "<s>[INST] Do you have any final tips for making sure the style guide is actually effective and gets used by the team? [/INST] Yes, here are three tips to ensure your style guide is effective:\n1.  **Make it accessible:** Post the guide where everyone, including full-time staff and freelancers, can easily access it. An interactive format that allows people to submit questions is also highly beneficial.\n2.  **Update it regularly:** Your guide is a living document. It should be updated periodically, perhaps every six months to a year, to adapt to changes in your brand or business.\n3.  **Give real-life 'dos and don'ts':** Include concrete examples that illustrate how your brand should and should not be represented in different contexts. This makes it much easier for stakeholders to implement the guidelines correctly.</s>"
  },
  {
    "text": "<s>[INST] What is a 'frame' in the context of Figma Design? [/INST] In Figma Design, a frame is a container that holds all the elements of your design, such as shapes, text, images, and even other frames. They are the fundamental building blocks for organizing your work.</s>"
  },
  {
    "text": "<s>[INST] Why are frames so important for creating flexible designs? [/INST] Frames are important because they help keep your designs organized and flexible across different screen sizes. They also unlock powerful tools like layout grids and auto layout, which are essential for creating responsive, editable designs.</s>"
  },
  {
    "text": "<s>[INST] What are shapes used for in digital design? [/INST] Shapes like rectangles, ellipses, and stars are scalable building blocks used to create everything from simple icons to complex logos and illustrations.</s>"
  },
  {
    "text": "<s>[INST] What is the main advantage of the vector-based shapes used in Figma? [/INST] The main advantage of vector-based shapes is that they do not lose quality when resized. This means your designs, like logos or icons, stay crisp and sharp at any size, unlike pixel-based images like JPEGs.</s>"
  },
  {
    "text": "<s>[INST] Could you give me a simple definition of typography? [/INST] Typography is the practice of choosing and arranging letters and words to make written language legible, readable, and visually appealing. It involves how you style text, choose fonts, and create a visual rhythm in your layouts.</s>"
  },
  {
    "text": "<s>[INST] How can typography improve a design, like a poster or a social media graphic? [/INST] Good typography can significantly improve a design by setting the right tone, building a clear visual hierarchy that guides the viewer's eye, and enhancing the overall readability and impact of the message.</s>"
  },
  {
    "text": "<s>[INST] How can I create more complex illustrations using just basic shapes? [/INST] You can create complex visuals by using tools that allow you to combine basic shapes in creative ways. Features like boolean operations let you cut, merge, and remix shapes to build custom icons, avatars, or detailed illustrations much faster.</s>"
  },
  {
    "text": "<s>[INST] What is the Pen tool used for in design software? [/INST] The Pen tool allows you to draw custom shapes and lines with precision by adding points and adjusting curves. It is especially useful for creating detailed drawings, unique icons, and other creative elements that require a high degree of control.</s>"
  },
  {
    "text": "<s>[INST] I've heard about Figma Draw. What is it? [/INST] Figma Draw is a set of illustration tools built directly into the Figma Design editor. It provides features like vector brushes, texture fills, and dynamic strokes that allow you to create more expressive, hand-drawn visuals.</s>"
  },
  {
    "text": "<s>[INST] What is Smart Animate and how does it work? [/INST] Smart Animate is a feature that creates smooth transitions and simple animations between frames without needing any code. It automatically detects matching layers in different frames and animates any changes in their properties, such as size, position, rotation, and color.</s>"
  },
  {
    "text": "<s>[INST] What are some simple animations I could create with Smart Animate? [/INST] You could create a variety of simple animations. For example, you can make a shape scale up to show growth, shift its position to create a sense of motion, or change its color and corner radius to visually suggest an idea like collaboration.</s>"
  },
  {
    "text": "<s>[INST] What is prototyping and why is it useful? [/INST] Prototyping is the process of turning static design screens into interactive experiences. It's useful because it allows you to create realistic flows that explore how a user might interact with your design, helping you test and refine the user experience before development.</s>"
  },
  {
    "text": "<s>[INST] What's the difference between a basic and an advanced prototype? [/INST] A basic prototype might include simple interactions like scrolling and clicking. An advanced prototype builds on that by incorporating more dynamic experiences, such as animated transitions between screens, complex navigation flows, and interactive elements that make the design feel like a real app.</s>"
  },
  {
    "text": "<s>[INST] How can learning these design skills help students? [/INST] Learning these skills helps students develop real-world design and technical abilities used by professionals. It teaches them how to express ideas visually, solve problems creatively, and build digital products that are both functional and engaging.</s>"
  },
  {
    "text": "<s>[INST] Do the lessons need to be completed in a specific order? [/INST] While the skills build on one another and can be reviewed in order, it is not required. You can dive into a specific topic or pick a single activity that fits your immediate needs.</s>"
  },
  {
    "text": "<s>[INST] Is Figma really free for educational use? [/INST] Yes, Figma and FigJam are available for free to eligible K-12 and higher education institutions, allowing students and educators to use the full suite of design and collaboration tools.</s>"
  },
  {
    "text": "<s>[INST] Who qualifies for the free Education plan? [/INST] Students, teachers, and administrators at accredited K-12 schools and higher education institutions are generally eligible for the free Education plan after a verification process.</s>"
  },
  {
    "text": "<s>[INST] Is the platform compliant with student privacy regulations like COPPA or GDPR? [/INST] Yes, educational software providers like Figma are required to be compliant with major data privacy regulations, including the Children's Online Privacy Protection Act (COPPA), the Family Educational Rights and Privacy Act (FERPA), and the General Data Protection Regulation (GDPR).</s>"
  },
  {
    "text": "<s>[INST] I'm a bit confused about some design terms. Can you start by explaining what a wireframe is? [/INST] Absolutely! Think of a wireframe as a basic blueprint for a webpage or an app screen. It's a simple, low-fidelity layout, usually in black and white, that shows the structure and where things go, without any focus on colors or graphics.</s>"
  },
  {
    "text": "<s>[INST] Okay, a blueprint. So what's its main purpose? [/INST] Its main purpose is to help everyone focus on the essential questions about the user's journey. For example, it helps you figure out what screens you'll need, what information should be on each screen, and the best way to organize the content for the user.</s>"
  },
  {
    "text": "<s>[INST] That makes sense. Now, what is a mockup? [/INST] A mockup is the next step up. It's a high-fidelity, static visual representation of the final product. It focuses on the look and feel, so it includes all the visual details like colors, fonts, images, and icons.</s>"
  },
  {
    "text": "<s>[INST] So a mockup looks like the final product. Does it work like one too? [/INST] That's a great question. No, it doesn't. A mockup is all about the form, not the function. It's a static image, so you can see what the product will look like, but the buttons and links aren't clickable.</s>"
  },
  {
    "text": "<s>[INST] What is the key difference between a wireframe and a mockup, in simple terms? [/INST] The simplest way to think about it is this: a wireframe is about the **structure and flow** (the skeleton), while a mockup is about the **visual design** (the skin).</s>"
  },
  {
    "text": "<s>[INST] Which one is considered 'low-fidelity' and which is 'high-fidelity'? [/INST] Wireframes are typically low-fidelity because they are simple and unpolished. Mockups are high-fidelity because they are detailed and look very realistic.</s>"
  },
  {
    "text": "<s>[INST] At what stage of a project would I use each one? [/INST] You would use a wireframe in the early discovery phase of a project to get feedback from your team and decide on the basic direction. You'd use a mockup later in the design phase to finalize the visual look before it gets handed off to developers.</s>"
  },
  {
    "text": "<s>[INST] Why is it beneficial to start with wireframing? [/INST] Starting with wireframes has several benefits. They are quick to create, which speeds up the design process. They also help get everyone on the team aligned on the structure early on and can help you spot potential problems before they become costly to fix.</s>"
  },
  {
    "text": "<s>[INST] How do mockups help refine a design? [/INST] Mockups are excellent for getting clear and useful feedback from stakeholders because they can see exactly how the finished product will look. They also make it easy to experiment with visual changes, since no code is involved, and they help ensure the final design is visually consistent.</s>"
  },
  {
    "text": "<s>[INST] When I'm getting feedback from my team, is it better to use a low-fidelity or high-fidelity wireframe? [/INST] For early feedback from your team and for user testing, it's best to stick with low-fidelity. This keeps everyone focused on the big ideas like layout and flow, rather than getting distracted by colors or fonts.</s>"
  },
  {
    "text": "<s>[INST] Is there ever a time to use a high-fidelity wireframe? [/INST] Yes, definitely. If you need to present your design direction to a client, customer, or investor, a high-fidelity wireframe can be more effective because it helps them visualize the finished product more clearly.</s>"
  },
  {
    "text": "<s>[INST] What's a good tip to remember before I start building a mockup? [/INST] A great pro tip is to brainstorm and sketch out your ideas before you jump into creating the mockup. You can also use the feedback and structure you established with your wireframes as a solid foundation.</s>"
  },
  {
    "text": "<s>[INST] I've come across the term 'Human-Computer Interaction' or HCI. Can you explain what it means in a simple way? [/INST] Of course! Human-Computer Interaction is a field of study focused on making computer systems easy and enjoyable for people to use. Think of it as the bridge that connects humans with technology, ensuring our digital experiences are smooth and intuitive.</s>"
  },
  {
    "text": "<s>[INST] So, it's about making computers more user-friendly. When did this idea become popular? [/INST] That's exactly right. The concept really took off in the 1980s with the rise of personal computers. The original Apple Macintosh, with its simple interface, keyboard, and mouse, is a classic example of HCI principles in action.</s>"
  },
  {
    "text": "<s>[INST] How do we actually interact with technology? What are the different ways? [/INST] We interact with technology in five primary ways, using our senses and actions:\n1.  **Sight:** Using our vision to navigate interfaces and scan content.\n2.  **Touch:** Tapping, swiping, and pinching on touch screens.\n3.  **Sound:** Hearing audio cues like ringtones or notification beeps.\n4.  **Voice:** Using voice-activated systems like Siri or Alexa.\n5.  **Spatial:** Using physical movement or gestures to control a device.</s>"
  },
  {
    "text": "<s>[INST] When designing something, what are the key elements of HCI I should be thinking about? [/INST] There are four essential factors to consider:\n1.  **The User:** Their behaviors, needs, and feelings.\n2.  **The Task:** The primary goal you want the user to achieve.\n3.  **The Interface:** How the user will interact (touch, voice, click) and its design.\n4.  **The Context:** The environment where the user is, like their location or network connection.</s>"
  },
  {
    "text": "<s>[INST] Are there any core principles that guide good HCI design? [/INST] Yes, there are! Pioneering HCI researcher Ben Schneiderman outlined eight key principles, including things like maintaining consistency in your design, providing shortcuts for experienced users, and giving clear feedback to let users know what's happening.</s>"
  },
  {
    "text": "<s>[INST] Could you give me an example of the 'feedback' principle? [/INST] Certainly. A great example is a progress bar you see when downloading a file. It provides a clear visual cue that tells you where you are in the process and how much is left. This kind of feedback is very reassuring for the user.</s>"
  },
  {
    "text": "<s>[INST] What about the 'error handling' principle? [/INST] Good error handling is about minimizing mistakes and helping users fix them easily. For instance, when a word processor like Google Docs underlines a grammatical error in red and suggests a correction, that's effective error handling in action.</s>"
  },
  {
    "text": "<s>[INST] Why is it so important to apply these HCI principles? What are the benefits? [/INST] Applying HCI principles leads to many benefits. It creates a better user experience, which increases customer satisfaction and loyalty. It also improves accessibility for users with disabilities, boosts user engagement, and encourages innovation in design.</s>"
  },
  {
    "text": "<s>[INST] Can you give me a common example of HCI that I probably use every day? [/INST] Absolutely. The most common example is the Graphical User Interface, or GUI. It's the system of icons, menus, and windows that you use to interact with your smartphone, computer, and web browsers. It's the foundation of most modern devices.</s>"
  },
  {
    "text": "<s>[INST] What about newer technologies? How does HCI apply to them? [/INST] HCI is central to newer tech as well. Think of gesture-based interfaces in gaming (like the Nintendo Wii), wearable technology like smartwatches that use voice and biometrics, and augmented reality apps that overlay digital information onto the real world.</s>"
  },
  {
    "text": "<s>[INST] What's the difference between Augmented Reality (AR) and Virtual Reality (VR)? [/INST] That's a great question. Augmented Reality (AR) overlays digital content onto your physical environment, like an app that lets you see how a new sofa would look in your living room. Virtual Reality (VR), on the other hand, creates a completely immersive digital environment, like stepping into a whole new world created by a computer.</s>"
  },
  {
    "text": "<s>[INST] I'm trying to learn about different problem-solving methods. Can you explain what 'design thinking' is? [/INST] Of course! Design thinking is a methodology that focuses on deeply understanding the needs of the people you're designing for. It's a human-centered approach that combines empathy, creativity, and practical problem-solving to create innovative solutions that people truly connect with.</s>"
  },
  {
    "text": "<s>[INST] That sounds interesting. When I'm using design thinking, how should I evaluate my ideas? [/INST] That's a great question. You should look at your ideas through three specific lenses:\n1.  **Desirability:** Do people actually want or need this solution?\n2.  **Feasibility:** Can we realistically build this with our current resources and technology?\n3.  **Viability:** Is this a solution our business can sustain and profit from in the long term?</s>"
  },
  {
    "text": "<s>[INST] Are there any core principles I should keep in mind? [/INST] Yes, Stanford's d.school established four key principles to guide you:\n1.  **The Human Rule:** Always focus on the end user.\n2.  **The Ambiguity Rule:** Be comfortable with uncertainty and explore new ideas boldly.\n3.  **The Re-design Rule:** Recognize that technology changes, but core human needs often don't.\n4.  **The Tangibility Rule:** Make your ideas real by creating prototypes to test them.</s>"
  },
  {
    "text": "<s>[INST] What are the stages of the design thinking process? [/INST] The design thinking process is typically broken down into five stages: Empathize, Define, Ideate, Prototype & Test, and Implement. It's important to remember that this process is non-linear, so you can repeat stages or run them in parallel as needed.</s>"
  },
  {
    "text": "<s>[INST] Could you briefly explain the first stage, 'Empathize'? [/INST] Absolutely. The 'Empathize' stage is all about understanding your target audience. This means setting aside your own assumptions and using user research, interviews, and observation to learn about their thoughts, feelings, and challenges.</s>"
  },
  {
    "text": "<s>[INST] What happens in the 'Define' stage? [/INST] In the 'Define' stage, you take all the insights you gathered during your research and use them to form a clear problem statement. This is where you pinpoint the most important issues you need to solve for your users.</s>"
  },
  {
    "text": "<s>[INST] What's the goal of the 'Ideate' stage? [/INST] The 'Ideate' stage is where you brainstorm. The goal is to generate a wide range of creative ideas and potential solutions to the problem you've defined. It's all about thinking outside the box in a judgment-free environment.</s>"
  },
  {
    "text": "<s>[INST] What do you do in the 'Prototype and Test' stage? [/INST] This is the hands-on stage. You build simple, early versions of your most promising ideas—called prototypes—and then test them with real users to get valuable feedback. This helps you validate your concepts and refine them early on.</s>"
  },
  {
    "text": "<s>[INST] And the final stage is 'Implement'? [/INST] Correct. 'Implement' is when you turn your most successful prototype into a real product. After it's launched, you'll continue to track its performance to guide future improvements, and you might even revisit earlier stages of the process.</s>"
  },
  {
    "text": "<s>[INST] Why is design thinking considered so important for businesses? [/INST] It's important for several reasons. It helps increase customer satisfaction by creating products people actually need. It boosts innovation by challenging assumptions. It also improves team collaboration and reduces the risk of failure by emphasizing early testing and iteration.</s>"
  },
  {
    "text": "<s>[INST] Can you give me a real-world example of a company using design thinking? [/INST] A classic example is Airbnb. Early on, they struggled to get bookings. By using design thinking, they empathized with their users and realized the listing photos were low-quality and unappealing. By improving the photography, they addressed a core user need and saw a dramatic increase in revenue.</s>"
  },
  {
    "text": "<s>[INST] That's a great example. Do you have another one? [/INST] Certainly. The design team for Uber Eats realized they couldn't effectively design their app for different cities from their offices. They created a program to immerse their designers in those cities to understand local user needs. This empathy-driven approach helped them create features tailored to each market.</s>"
  },
  {
    "text": "<s>[INST] Is there a specific technique I can use during the 'Define' stage? [/INST] Yes, a very effective technique is the '5 Whys.' You repeatedly ask 'why' to drill down past surface-level issues and uncover the root cause of a problem. This helps you challenge assumptions and find more user-centered solutions.</s>"
  },
  {
    "text": "<s>[INST] What about a method for the 'Ideate' stage? [/INST] For the 'Ideate' stage, mind mapping is a fantastic tool. It's a visual way to organize your thoughts and explore the relationships between different ideas, which helps your team break away from purely linear thinking and be more creative.</s>"
  },
  {
    "text": "<s>[INST] I'd like to understand the basics of web design. Can you tell me what it is? [/INST] Certainly! Web design is the process of creating attractive and user-friendly websites and web-based apps. It involves balancing both the visual appeal (the form) and the usability (the function) to create a great experience for the visitor.</s>"
  },
  {
    "text": "<s>[INST] Why is having a good web design so important? [/INST] Good web design is crucial because users form an opinion about a website in just 50 milliseconds. A well-designed site makes a great first impression, helps build a memorable brand identity, and makes it easy for users to find what they're looking for.</s>"
  },
  {
    "text": "<s>[INST] Can good web design also help with my site's visibility on Google? [/INST] Yes, it can. A well-designed website contributes to better search engine optimization (SEO), which can help improve your search rankings and increase visibility among your target audience.</s>"
  },
  {
    "text": "<s>[INST] I often hear 'web design' and 'web development' used together. What's the difference between them? [/INST] That's a very common question. Think of it this way: **Web design** is about the look and feel—the visual elements, layouts, and user experience. **Web development** is about bringing that design to life using code, like HTML, CSS, and JavaScript, to make the website functional.</s>"
  },
  {
    "text": "<s>[INST] So, a designer creates the blueprint, and a developer builds the house? [/INST] That's a perfect analogy! The web designer plans how the site will look and how users will interact with it, and the web developer uses code to actually construct it.</s>"
  },
  {
    "text": "<s>[INST] What are the most important components of an effective website design? [/INST] There are five fundamental components you should focus on:\n1.  **Content:** The actual information, text, and images on the page.\n2.  **Layout:** How that content is structured and arranged for easy use.\n3.  **Navigation:** The menus, bars, and links that help users move around the site.\n4.  **Visual Style:** The colors, fonts, and imagery that create a consistent brand look.\n5.  **Function:** How well the site works, including things like page loading speed.</s>"
  },
  {
    "text": "<s>[INST] You mentioned page loading speed. Is it really that important? [/INST] It's incredibly important. For an e-commerce site, for example, a page that loads in just one second has a conversion rate 2.5 times higher than a site that takes five seconds to load. Speed has a direct impact on user satisfaction and business results.</s>"
  },
  {
    "text": "<s>[INST] What does it mean to design with a 'mobile-first' approach? [/INST] A 'mobile-first' approach means you prioritize designing the website for smartphone browsers before designing for larger screens like desktops. Since more than half of all website traffic often comes from mobile devices, it makes sense to design for that primary audience first.</s>"
  },
  {
    "text": "<s>[INST] What is 'responsive web design'? [/INST] Responsive web design is a technique where you organize your website content on a flexible grid. This allows the page layout to dynamically adjust and fit perfectly on different screen sizes, whether it's a phone, a tablet, or a desktop computer.</s>"
  },
  {
    "text": "<s>[INST] How can I make the text on my website easier to read? [/INST] To improve readability, you should design for a clear visual hierarchy. You can achieve this by using different font sizes, weights (like bold), and typeface combinations to make the pages easy for users to scan and find the most important information quickly.</s>"
  },
  {
    "text": "<s>[INST] What's a good first step to take before I even start designing? [/INST] The best first step is to design for your users. This means conducting user research to understand who your target audience is, what they need, and how they behave. It's the foundation of any successful human-centered design.</s>"
  },
  {
    "text": "<s>[INST] Is it important to test my designs before the website is built? [/INST] Yes, it's a critical step. Performing user testing on your web designs allows you to get feedback, find and fix problems, and refine the experience before it gets translated into code, which saves a lot of time and effort.</s>"
  },
  {
    "text": "<s>[INST] I keep hearing about 'lateral thinking.' Can you explain what it is? [/INST] Certainly! Lateral thinking is a creative approach to problem-solving. Instead of following a traditional, step-by-step logical path, it's about taking a creative detour to challenge your assumptions and uncover innovative, 'out-of-the-box' ideas.</s>"
  },
  {
    "text": "<s>[INST] So it's different from normal, logical thinking? [/INST] Exactly. Normal problem-solving, often called 'vertical thinking,' is logical and step-by-step. Lateral thinking is non-linear. It's about exploring ideas from many different angles to find a creative breakthrough.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of a company that uses lateral thinking? [/INST] A great example is Apple. Instead of just making incremental improvements to existing products, they often shift their focus to entirely new categories. The Apple Watch is a perfect result of this—it challenged the conventional idea of what a wristwatch could be.</s>"
  },
  {
    "text": "<s>[INST] Why is lateral thinking so important for designers and other creative professionals? [/INST] It's important because it helps break through creative roadblocks. By encouraging new ways of thinking, it can lead to increased innovation, better problem-solving, and a more collaborative team environment where bold ideas are welcomed.</s>"
  },
  {
    "text": "<s>[INST] This sounds interesting. What are some techniques I can use to practice lateral thinking? [/INST] There are many great techniques! Some of the most popular ones include brainstorming sessions, mind mapping, the 'Six Thinking Hats' method, and even solving puzzles or brain teasers to disrupt your normal thought patterns.</s>"
  },
  {
    "text": "<s>[INST] Tell me more about the 'Six Thinking Hats' method. It sounds fun. [/INST] It is! It's a technique where you and your team examine a problem from six distinct perspectives, each represented by a different colored 'hat.' For example, the white hat is for facts, the green hat is for creativity, and the black hat is for identifying risks. It ensures you look at the problem from all angles.</s>"
  },
  {
    "text": "<s>[INST] What is 'reverse brainstorming'? [/INST] Reverse brainstorming is a creative twist on a standard brainstorm. Instead of trying to find solutions, your team brainstorms all the potential failures and problems that could happen. By understanding what can go wrong, you can then develop strategies to prevent those issues.</s>"
  },
  {
    "text": "<s>[INST] I've heard of the SCAMPER method. Can you briefly explain it? [/INST] Of course. SCAMPER is an acronym that stands for seven prompts: Substitute, Combine, Adapt, Modify, Put to another use, Eliminate, and Reverse. It's a brainstorming technique used to generate new ideas by looking at an existing product or concept and asking questions based on those seven prompts.</s>"
  },
  {
    "text": "<s>[INST] How does using a random word help with creativity? [/INST] Using a random word is a powerful lateral thinking exercise. You start with your problem and then introduce a completely unrelated word. This forces your brain to make unexpected connections between the two, which can spark surprisingly fresh and innovative ideas.</s>"
  },
  {
    "text": "<s>[INST] What's a key mindset I need to adopt to be a good lateral thinker? [/INST] One of the most critical mindsets is the willingness to challenge assumptions. You have to be able to question the status quo and break away from conventional beliefs. Allowing yourself to consider all perspectives is what sparks true creativity.</s>"
  },
  {
    "text": "<s>[INST] Is it okay to fail when trying these techniques? [/INST] Absolutely! Embracing failure is a core part of lateral thinking. Learning from mistakes and welcoming feedback on both good and bad ideas is what allows you to explore alternative solutions and opens up new ways of thinking.</s>"
  },
  {
    "text": "<s>[INST] What's a simple thing I can do to get my creative juices flowing? [/INST] A simple but effective tip is to diversify your stimuli. Break away from your routine. Listen to a new podcast, read a book outside your usual genre, or even just take a walk in a different neighborhood. Introducing new and random inputs helps fuel creative thinking.</s>"
  },
  {
    "text": "<s>[INST] I'm trying to understand different design philosophies. What exactly is 'human-centered design'? [/INST] Great question! Human-centered design, or HCD, is an approach that puts people at the very center of the design process. It starts by deeply understanding user needs, challenges, and behaviors in their real-world environments to create solutions that are truly meaningful to them.</s>"
  },
  {
    "text": "<s>[INST] That sounds a lot like User Experience (UX) design. How are HCD and UX related? [/INST] You've noticed a strong connection! HCD is the broader philosophy that informs UX design. While UX focuses on the specific experience a user has with a product, HCD is the holistic approach that ensures the entire product development process is focused on human needs.</s>"
  },
  {
    "text": "<s>[INST] So, why does human-centered design matter so much? [/INST] It matters because it helps create an emotional connection between people and products. When you design with empathy, you create solutions that don't just work well but can also spark joy. This builds strong user loyalty and helps a business grow by turning occasional users into enthusiastic fans.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of HCD in a modern product, like something with AI? [/INST] Certainly. A good example is how LinkedIn designs its AI tools for recruiters. They recognized that users want to feel in control of automation. So, instead of having AI write messages automatically, they allow the recruiter to see and select the fields the AI will use, keeping the human in the driver's seat.</s>"
  },
  {
    "text": "<s>[INST] What are the fundamental principles of human-centered design? [/INST] There are three key fundamentals to keep in mind:\n1.  **See from your customers' point of view:** This is all about building empathy through research and direct conversation.\n2.  **Evolve products with users in mind:** Continuously improve your product by focusing on solving your customers' key problems.\n3.  **Solve problems holistically:** Look beyond the surface issues to find and address the root cause of a user's problem.</s>"
  },
  {
    "text": "<s>[INST] What's a good way to build empathy with my customers? [/INST] A great way to build empathy is to make them an extension of your team. You can recruit a small group of customers—with varying levels of experience—that you can be in regular conversation with to gather insights and feedback.</s>"
  },
  {
    "text": "<s>[INST] Can you walk me through the steps of the human-centered design process? [/INST] Of course. The process can be broken down into five essential steps:\n1.  **Define the problem:** Identify a key user problem that your company is well-suited to solve.\n2.  **Gather user research:** Use methods like interviews to understand your users' thoughts, feelings, and challenges.\n3.  **Generate ideas:** Brainstorm creative concepts based on your research insights.\n4.  **Build prototypes:** Create interactive mockups of your best ideas so you can test them.\n5.  **Test & iterate:** Conduct user testing with your prototypes and keep refining them until they meet user expectations.</s>"
  },
  {
    "text": "<s>[INST] What happens during the 'Generate ideas' or ideation phase? [/INST] During the ideation phase, your team uses the insights from user research to spark creative concepts. This is where you brainstorm and pursue promising ideas that answer key questions, like whether the concept truly meets user needs and if it's feasible to build.</s>"
  },
  {
    "text": "<s>[INST] What is 'rapid prototyping'? [/INST] Rapid prototyping is the process of quickly creating interactive but simplified mockups of your design. The goal isn't to build a perfect product, but to create something you can test with users right away to get feedback and validate your concept early in the process.</s>"
  },
  {
    "text": "<s>[INST] What is the end goal of the 'Test & iterate' step? [/INST] The end goal is to refine your prototype based on real user feedback until it effectively solves the user's problem and meets their expectations. This continuous cycle of testing and improving ensures the final product you build has a much higher chance of success.</s>"
  },
  {
    "text": "<s>[INST] I'm studying design and came across the term 'Gestalt principles.' What are they? [/INST] Great question! Gestalt principles are a set of rules from psychology that explain how our minds naturally organize visual information into meaningful patterns. Essentially, they describe our brain's tendency to see a unified whole rather than just a collection of individual parts.</s>"
  },
  {
    "text": "<s>[INST] Why are these principles so important for a designer to know? [/INST] They are incredibly important because they help designers create more intuitive and engaging experiences. By understanding how the brain naturally groups things, you can structure content, create a clear visual hierarchy, and guide the user's eye in a way that feels natural and easy to understand.</s>"
  },
  {
    "text": "<s>[INST] Where did these principles come from? [/INST] They originated from Gestalt psychology, a field founded by three psychologists in the early 1900s. They observed how humans perceive the world and summarized their findings into these principles, which have since become a cornerstone of modern design.</s>"
  },
  {
    "text": "<s>[INST] The text mentions four key drivers of Gestalt theory. Can you explain 'Emergence'? [/INST] Certainly. 'Emergence' describes our ability to see a complete shape or object 'emerge' from a collection of random parts. For example, you see a dog in a pattern of spots before you notice each individual spot. We see the whole before the parts.</s>"
  },
  {
    "text": "<s>[INST] What about 'Reification'? [/INST] Reification is how our mind mentally fills in gaps to recognize a familiar form, even if it's not fully there. We use our past experiences to complete an image in our head, like seeing a triangle from three spaced-out dots.</s>"
  },
  {
    "text": "<s>[INST] I see a list of many principles. Can you explain the principle of 'Proximity'? [/INST] The principle of Proximity states that we perceive objects that are close to each other as being related. In design, this is why we place a caption right next to an image or an icon next to its label—their closeness creates a clear relationship.</s>"
  },
  {
    "text": "<s>[INST] What is the 'Similarity' principle? [/INST] The Similarity principle explains that we instinctively group together elements that look alike, whether they share the same shape, color, or size. This is why all the clickable links on a webpage are often the same color.</s>"
  },
  {
    "text": "<s>[INST] Can you explain the 'Closure' principle? [/INST] The principle of Closure describes our tendency to see an object as complete even if parts of it are missing. Our brain fills in the gaps to create a whole shape. This is why we can recognize a logo that is made of incomplete lines or shapes.</s>"
  },
  {
    "text": "<s>[INST] What is the 'Figure-Ground' principle? [/INST] Figure-Ground explains how we separate a main subject (the figure) from its background. A classic example is Rubin's vase, where you can either see a white vase in the foreground or two black faces in the background, but it's difficult to see both at once.</s>"
  },
  {
    "text": "<s>[INST] Could you explain the principle of 'Common Fate'? [/INST] The principle of Common Fate suggests that we see elements that move in the same direction as being related. A great example in digital design is an animated dropdown menu, where all the items move downwards together, signaling that they belong to the same group.</s>"
  },
  {
    "text": "<s>[INST] How does the 'Focal Point' principle work? [/INST] The Focal Point principle describes how a unique or different element in a design immediately grabs our attention. Designers use this to create a focal point that directs a user's eye to the most important content or a call-to-action button.</s>"
  },
  {
    "text": "<s>[INST] How can I apply these principles to structure a webpage? [/INST] You can use principles like Common Region to group related content inside boxes or modules, and Proximity to ensure that related items like headlines and their corresponding paragraphs are visually connected. This makes the entire page feel more organized and intuitive to navigate.</s>"
  },
  {
    "text": "<s>[INST] I'm new to design and want to understand the basics. What exactly is color theory? [/INST] Color theory is a framework that helps artists and designers understand how colors work together to create a visually appealing result, known as color harmony. It provides practical guidance for choosing a color palette that can stir emotions and leave a lasting impact.</s>"
  },
  {
    "text": "<s>[INST] Why is it so important for a designer to understand color theory? [/INST] Understanding color theory is crucial for a few key reasons. It helps you create impactful visual designs, improve the user experience by making content easier to navigate, and express a brand's personality and mood effectively.</s>"
  },
  {
    "text": "<s>[INST] I've seen the color wheel before. What are the main types of colors on it? [/INST] The color wheel is organized into three main types of colors:\n1.  **Primary Colors:** These are red, yellow, and blue. They are the base for all other colors.\n2.  **Secondary Colors:** Orange, green, and violet. These are created by mixing two primary colors.\n3.  **Tertiary Colors:** These are made by mixing a primary color with a secondary color, resulting in shades like red-orange or blue-green.</s>"
  },
  {
    "text": "<s>[INST] Who invented the color wheel that we use today? [/INST] The modern color wheel we use comes from Sir Isaac Newton's experiments with light in the 1700s. By shining sunlight through a prism, he saw a rainbow of colors and plotted them on a spectrum wheel, which laid the foundation for color theory.</s>"
  },
  {
    "text": "<s>[INST] What is an 'analogous' color scheme? [/INST] An analogous color scheme uses three colors that sit right next to each other on the color wheel, like blue, blue-green, and green. This creates a harmonious and cohesive look, often with one color as dominant, one as support, and one as an accent.</s>"
  },
  {
    "text": "<s>[INST] What about a 'complementary' color scheme? [/INST] A complementary color scheme uses two colors that are directly opposite each other on the color wheel, such as red and green or blue and orange. This creates a high-contrast, vibrant look that really stands out.</s>"
  },
  {
    "text": "<s>[INST] Is a 'monochromatic' scheme just different shades of one color? [/INST] That's exactly right. A monochromatic scheme relies on various shades, tints, and tones of a single color to create a unified and elegant look. A great example is the Barbie brand, which is built around its signature pink.</s>"
  },
  {
    "text": "<s>[INST] I've heard about the psychology of color. Can you explain color temperature? [/INST] Certainly. Colors are often grouped into 'warm' and 'cool' temperatures. Warm colors like red and orange tend to convey energy, passion, and excitement. Cool colors like blue and green often promote trust, calmness, and professionalism.</s>"
  },
  {
    "text": "<s>[INST] What do the terms hue, value, and saturation mean when talking about color? [/INST] Those are three key elements for fine-tuning color:\n*   **Hue:** This is simply the pure color itself (e.g., red, blue, green).\n*   **Value:** This refers to how light or dark a color is.\n*   **Saturation:** This describes the intensity or purity of a color. A highly saturated color is vivid and bold, while a desaturated color is more muted.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between RGB and CMYK? [/INST] That's a very important distinction. **RGB** (Red, Green, Blue) is a color model used for digital screens, like websites and apps. **CMYK** (Cyan, Magenta, Yellow, Black) is a color model used for print materials, like business cards and billboards. You use RGB for digital work and CMYK for physical printing.</s>"
  },
  {
    "text": "<s>[INST] So if I'm designing a mobile app, I should use RGB? [/INST] Yes, precisely. For anything that will be viewed on a screen, you should always work in the RGB color model to ensure the colors look as you intend.</s>"
  },
  {
    "text": "<s>[INST] And if I'm creating a poster to be printed, I should use CMYK? [/INST] Correct again. For any design that will be physically printed, using the CMYK color model will give you the most accurate color results.</s>"
  },
  {
    "text": "<s>[INST] I'm trying to understand color systems in design. What does RGB stand for? [/INST] Great question to start with! RGB stands for Red, Green, and Blue. It's the fundamental color model used for everything we see on digital screens.</s>"
  },
  {
    "text": "<s>[INST] So, how does RGB actually create all the different colors I see on my phone or computer screen? [/INST] It works through a process called 'additive color mixing.' It combines red, green, and blue light in varying amounts, or intensities. By blending these three primary colors of light, it can create a vast spectrum of different color shades.</s>"
  },
  {
    "text": "<s>[INST] What do you mean by 'intensities'? [/INST] Each color channel—red, green, and blue—has an intensity value that ranges from zero, which is complete darkness, up to 255, which is maximum brightness. The specific combination of these three values creates a unique color.</s>"
  },
  {
    "text": "<s>[INST] What happens when all three colors are at their lowest intensity? [/INST] When red, green, and blue are all mixed at their lowest intensity, which is a value of zero, they create the color black.</s>"
  },
  {
    "text": "<s>[INST] And how is white created in the RGB model? [/INST] White is created by doing the opposite. When all three colors—red, green, and blue—are combined at their maximum intensity, a value of 255, they produce pure white light.</s>"
  },
  {
    "text": "<s>[INST] Can you give me some common examples of where the RGB color model is used? [/INST] Absolutely. Anything that uses a screen to produce an image uses the RGB color model. This includes web design, graphic design for digital ads, smartphone and computer displays, digital photography, and video editing.</s>"
  },
  {
    "text": "<s>[INST] I've also heard of CMYK. What's the main difference between RGB and CMYK? [/INST] The main difference is their application. RGB is an 'additive' color model used for on-screen viewing, where light is added together to create color. CMYK is a 'subtractive' color model used for color printing, where ink is applied to paper to subtract or absorb light.</s>"
  },
  {
    "text": "<s>[INST] So, just to be clear, which one is for screens and which is for printing? [/INST] That's the key takeaway! RGB is for screens, and CMYK is for printing.</s>"
  },
  {
    "text": "<s>[INST] Why do I need to convert a design from RGB to CMYK before I print it? [/INST] That's a very important step. You need to convert it because RGB colors are made of light and CMYK colors are made of ink, and they don't look the same. To ensure the colors on your printed project look the way you intended them to on your screen, you must convert the file to the CMYK color model.</s>"
  },
  {
    "text": "<s>[INST] So, if I design a promotional graphic for a website but also need to print it as a flyer, what do I need to do? [/INST] You would keep the website version in the RGB color model. For the flyer, you would need to convert a copy of the file from RGB to CMYK before sending it to the printer. You can usually do this by changing the color profile in your design software.</s>"
  },
  {
    "text": "<s>[INST] I'm just starting to learn about creative fields. Can you tell me, what is graphic design? [/INST] Certainly! Graphic design is the practice of creating visual content to communicate ideas. Designers use elements like color, shapes, and typography to create eye-catching designs that both grab attention and deliver a specific message.</s>"
  },
  {
    "text": "<s>[INST] So is graphic design just about making things look nice? [/INST] While making things look good is definitely part of it, graphic design is much more than that. Its main goal is to use visuals to communicate a message effectively and create a connection with the viewer.</s>"
  },
  {
    "text": "<s>[INST] What are some of the key elements that make up a graphic design? [/INST] The most important elements include color, texture, typography, line, shape, and space. Designers also use principles like balance and harmony to make sure all those elements work together cohesively.</s>"
  },
  {
    "text": "<s>[INST] How does 'space' work as a design element? It sounds like nothing. [/INST] That's a great observation! Space is actually a very powerful element. It includes both positive space (areas filled with content) and negative space (the empty areas). Using space effectively creates balance and helps draw the user's eye to the most important parts of the design.</s>"
  },
  {
    "text": "<s>[INST] I'm a little confused about the difference between graphic design and UX design. Can you clarify? [/INST] Absolutely. The main difference is their primary goal. Graphic design focuses on visually communicating an idea through aesthetics. UX design, on the other hand, focuses on the entire interaction a user has with a product to make sure it's functional, easy to use, and enjoyable.</s>"
  },
  {
    "text": "<s>[INST] Could you give me an example to illustrate that difference? [/INST] Of course. Imagine an email from a travel company. A graphic designer would create the beautiful, attention-grabbing banner image at the top of the email. A UX designer would focus on improving the company's app, maybe by creating a new search filter that helps users easily find those discounted trips.</s>"
  },
  {
    "text": "<s>[INST] What are some of the most important skills a graphic designer needs? [/INST] A graphic designer needs a mix of creative and analytical skills. Some of the most important ones are problem-solving, visual storytelling, a strong understanding of design principles and color theory, and clear communication.</s>"
  },
  {
    "text": "<s>[INST] How is storytelling a skill for a graphic designer? [/INST] Graphic designers are visual storytellers. They use the strategic combination of colors, icons, illustrations, and layouts to convey a brand's story or simplify complex information, often without needing many words at all.</s>"
  },
  {
    "text": "<s>[INST] Are there different types of graphic design? [/INST] Yes, it's a broad field. Some of the most common types include branding and visual identity, marketing design, publication design, illustration, and packaging design.</s>"
  },
  {
    "text": "<s>[INST] What does a designer working on 'branding and visual identity' do? [/INST] They focus on creating a cohesive and consistent visual identity for a brand. This includes designing the logo, choosing the official color palette and fonts, and creating guidelines to ensure the brand looks the same everywhere.</s>"
  },
  {
    "text": "<s>[INST] What about 'marketing design'? What kind of things would that involve? [/INST] Marketing design involves creating all the visuals used to promote a product or service. This could be anything from social media campaigns and online ads to email newsletters and printed posters.</s>"
  },
  {
    "text": "<s>[INST] And what is 'publication design'? [/INST] Publication design deals with the layout and visual elements of printed materials like magazines, newspapers, and books. The designer focuses on things like balance, hierarchy, and white space to guide the reader through the content and make it easy to read.</s>"
  },
  {
    "text": "<s>[INST] What is the goal of 'packaging design'? [/INST] Packaging design is a very important part of product marketing. Its goal is to create a package that not only looks good but also influences purchasing decisions and helps a product stand out from its competitors on a crowded shelf.</s>"
  },
  {
    "text": "<s>[INST] I'm learning about the design process. Is there more to being a designer than just making things look good? [/INST] Yes, absolutely. A designer's job is much more than just the visual aspect. A large part of it is about identifying real problems, asking the right questions, and creating solutions that are truly helpful for people. This is where design ethics come into play.</s>"
  },
  {
    "text": "<s>[INST] What are 'design ethics'? [/INST] Design ethics is the practice of considering the real-world impact of your work. It's about recognizing that the products and services you create can help or harm people, and taking that responsibility seriously by aiming to solve real problems and improve people's lives.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of an ethical design choice? [/INST] Certainly. Instead of creating another weather app, which is a problem that's mostly solved, an ethical designer might create an app that helps transgender individuals find safe public restrooms. This addresses a real, serious problem that affects a vulnerable community.</s>"
  },
  {
    "text": "<s>[INST] It sounds like a designer has a lot of responsibility. Is there a 'code of ethics' for them? [/INST] While there isn't a universal, formal code like the Hippocratic Oath for doctors, many designers follow their own ethical principles. A key idea is to judge the value of your work by the impact it has on the world and to be aware of whether that impact is good or bad.</s>"
  },
  {
    "text": "<s>[INST] What about user data? How do ethics play a role there? [/INST] Data privacy is a huge ethical consideration. An ethical designer would ensure that users have control over their data and clearly understand how it's being used. For example, a shopping list app shouldn't sell your list to advertisers unless you explicitly agree to it.</s>"
  },
  {
    "text": "<s>[INST] The text mentions 'empathy.' Why is that so important in design? [/INST] Empathy is crucial because design is a people-focused job. It's the ability to understand the world through other people's eyes and set aside your own assumptions. Without empathy, it's very difficult to understand your audience's real needs and create effective solutions for them.</s>"
  },
  {
    "text": "<s>[INST] I've heard the term 'unconscious bias.' What does that mean? [/INST] Unconscious bias is when cultural stereotypes or past experiences influence how our minds process new information, without us even being aware of it. Our brains naturally look for patterns to make quick judgments, but those patterns can be based on harmful stereotypes.</s>"
  },
  {
    "text": "<s>[INST] Why do designers need to be aware of their own unconscious biases? [/INST] Designers need to be aware of their biases because those biases can unintentionally shape their work, potentially leading to designs that exclude or misrepresent certain groups of people. For example, an illustration style might not reflect the diversity of the product's actual users.</s>"
  },
  {
    "text": "<s>[INST] Can you give an example of how bias can affect a design process? [/INST] Imagine designing an app for a global audience. If you only leave enough space in a button for a short English word, that button might break when the text is translated to a language like German, where the equivalent word is much longer. This is a bias toward your own language.</s>"
  },
  {
    "text": "<s>[INST] Is it possible to completely get rid of unconscious bias? [/INST] It's nearly impossible to get rid of it entirely, but you can actively work to reduce it. By consciously exposing yourself to diverse perspectives and being mindful of your own thought patterns, you can begin to change how those biases inform your perceptions.</s>"
  },
  {
    "text": "<s>[INST] How does understanding bias help create better experiences? [/INST] By understanding bias, designers can not only combat their own but also better understand the biases of their users. This deeper understanding allows them to create more inclusive and effective products that resonate with a wider audience.</s>"
  },
  {
    "text": "<s>[INST] I want to make sure my designs are for everyone. What does 'inclusion' mean in the context of design? [/INST] Inclusion in design means creating products or services that are accessible to and usable by as many people as reasonably possible. It's about being aware that people have different needs and abilities, and actively working to avoid excluding anyone.</s>"
  },
  {
    "text": "<s>[INST] Why is it so important to design inclusively? [/INST] It's incredibly important because a significant portion of the global population, over one billion people, has some form of impairment. Designing inclusively not only helps you reach this large audience but often improves the product experience for everyone.</s>"
  },
  {
    "text": "<s>[INST] Does inclusive design mean I have to create one product that works for the entire world? [/INST] Not necessarily. It's often better to determine a specific target audience and then consider creating a suite of products or different versions of your main product to better serve diverse groups. The goal is to lower the barrier to access for as many people as possible.</s>"
  },
  {
    "text": "<s>[INST] I've heard the term 'intersectionality.' What does that mean? [/INST] Intersectionality is the idea that different forms of oppression, like racism, sexism, and ableism, are interconnected and can't be looked at in isolation. When designing for inclusion, it's important to consider how these overlapping identities can affect a person's experience.</s>"
  },
  {
    "text": "<s>[INST] What is 'accessibility' in design? [/INST] Accessibility is the degree to which your product is usable by the broadest range of people, including those with disabilities. A great real-world example is a wheelchair ramp—it's essential for someone in a wheelchair but can also be helpful for someone pushing a stroller.</s>"
  },
  {
    "text": "<s>[INST] It feels awkward talking about disabilities. What's the best way to approach it? [/INST] It's okay to be unsure about the right language to use. The best approach is to ask and consult directly with disabled people. This not only helps you get the terminology right but also opens up a valuable opportunity for feedback.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of how a design decision can affect accessibility? [/INST] Certainly. A common example is color choice. If you use an orange and a green color that look very different to you, they might appear nearly identical to someone with red-green color blindness. This can make important interface elements, like buttons, impossible to distinguish.</s>"
  },
  {
    "text": "<s>[INST] How common is color blindness? [/INST] It's more common than you might think. It's estimated to affect 1 in 12 men and 1 in 200 women worldwide. This is a large audience that can be excluded if color contrast isn't considered in a design.</s>"
  },
  {
    "text": "<s>[INST] What is a simple way I can make my website more accessible for people with visual impairments? [/INST] A very important and simple way is to add 'alt text' to every image in your website's code. This provides a text description of the image that can be read aloud by a screen reader, giving a person with reduced vision access to that visual information.</s>"
  },
  {
    "text": "<s>[INST] I've also heard the term 'usability.' How is that different from accessibility? [/INST] Usability is about how easy, intuitive, and efficient a product is to use for a specific goal. While accessibility is about making sure people *can* use it, usability is about making sure it's a *good experience* when they do. A product can be accessible but still difficult to use.</s>"
  },
  {
    "text": "<s>[INST] Can you give an example of a design choice that improves usability? [/INST] A great example is the placement of menu bars on large smartphones. Because it's hard to reach the top of the screen with your thumb, many apps are now placing their menu and search bars at the bottom. This small change dramatically increases their usability for one-handed use.</s>"
  },
  {
    "text": "<s>[INST] I'm starting a new design project. What is the 'research' stage all about? [/INST] The research stage is where you discover the problems you need to solve and the customers you need to help. Your main goal is to deeply understand a group of people, their problems, and the context of their situation before you start designing.</s>"
  },
  {
    "text": "<s>[INST] Is research just something I do once at the beginning of a project? [/INST] That's a common misconception, but no. While it's crucial to do research before you start designing, it's not a one-time process. Research should continue before, during, and even after your product launches to learn from your users and find areas for improvement.</s>"
  },
  {
    "text": "<s>[INST] Why is it so important to understand the customer? [/INST] Understanding your customers allows you to be an advocate for them. It helps you see the world through their eyes, avoid your own biases, and create design solutions that truly meet their needs and solve their problems effectively.</s>"
  },
  {
    "text": "<s>[INST] What kind of questions should I be trying to answer during my research? [/INST] You should aim to answer questions like: Who are my target customers? Why will they use my product? What are their motivations and expectations? And, very importantly, how are they currently trying to solve the problem that my product addresses?</s>"
  },
  {
    "text": "<s>[INST] What is 'firsthand research'? [/INST] Firsthand research involves learning about your customers directly from them. This can include methods like one-on-one interviews, customer studies, focus groups, and surveys. It's about getting insights straight from the source.</s>"
  },
  {
    "text": "<s>[INST] Where is the best place to conduct customer interviews? [/INST] It's always best to interview customers in their own environment if possible. For example, if you're designing a product for grocery shoppers, you should go to a grocery store. This gives you much richer context than interviewing them in your office.</s>"
  },
  {
    "text": "<s>[INST] When I interview customers, should I just ask them what they want in a product? [/INST] It's better to focus on their past behavior rather than asking them directly what they want. Ask them open-ended questions about how they have dealt with their problems in the past. This often provides more helpful insights into their real needs and motivations.</s>"
  },
  {
    "text": "<s>[INST] What is 'secondhand research'? [/INST] Secondhand research involves gathering information from existing sources. This could mean looking at successful products from your competitors, reading findings from research organizations, or analyzing your own product's usage data.</s>"
  },
  {
    "text": "<s>[INST] Is it a good idea to copy what my competitors are doing? [/INST] It can be helpful to look at competitors for inspiration and to understand the market, but you should be careful not to simply copy their designs. Their solution might not be the best one, and you could miss an opportunity to create something much better on your own.</s>"
  },
  {
    "text": "<s>[INST] What is A/B testing? [/INST] A/B testing is a method used in digital products where you show different versions of a design to different subsets of your users. By comparing how each group interacts with their version, you can gather data on which design is more effective.</s>"
  },
  {
    "text": "<s>[INST] Should I share my research findings with my team? [/INST] Yes, absolutely! Sharing your research across the team is crucial. It creates a shared understanding of your goals and your audience, which helps everyone work together to build a unified and effective product.</s>"
  },
  {
    "text": "<s>[INST] What's a 'prototype' and how is it used in research? [/INST] A prototype is an early, simplified version of what a final product might look or feel like. Designers create them to test potential solutions with users without having to build the full, final product. It's an excellent way to get feedback and iterate on ideas early in the design process.</s>"
  },
  {
    "text": "<s>[INST] When I'm starting a new design, should I focus on the layout first or the content? [/INST] While it can be tempting to jump right into the layout, it's actually best to work on the content—the words and information—first. Designing with real or near-final content helps you create a more effective and realistic final product.</s>"
  },
  {
    "text": "<s>[INST] Why is it so important to design with real content? [/INST] It's important because if you design with placeholder text, you might find that the real content doesn't fit. For example, a real headline might be much longer than your placeholder, which can break your beautifully crafted design. It helps you avoid these kinds of problems later on.</s>"
  },
  {
    "text": "<s>[INST] So, what's a good first step before I even open my design software? [/INST] A great first step is to map out the types of things you want to communicate. By planning your content first, you can avoid designing pages that aren't necessary and get a much clearer understanding of the overall flow of your product.</s>"
  },
  {
    "text": "<s>[INST] Writing seems like a really difficult part of the design process. How important is it? [/INST] You're right, writing copy can be very challenging, which is why it's often overlooked. However, it's incredibly important. Poorly written copy can ruin the entire experience of an otherwise well-designed product for a customer.</s>"
  },
  {
    "text": "<s>[INST] Do you have any tips for improving my writing? [/INST] Definitely. A few simple tips can make a big difference: Try to write in a conversational tone, as if you were speaking to someone in person. Keep your writing as simple and clear as possible, and always avoid using jargon.</s>"
  },
  {
    "text": "<s>[INST] Is it helpful to read my writing out loud? [/INST] Yes, that's an excellent practice. Reading everything you write out loud before you finalize it helps you catch awkward phrasing and ensures it sounds natural and easy to understand.</s>"
  },
  {
    "text": "<s>[INST] I've heard the phrase 'less is more' in writing. What does that mean? [/INST] It means you should be concise and purposeful with your words. A good practice is to examine every word you write and remove any that don't serve a clear purpose. This makes your message stronger and easier to digest.</s>"
  },
  {
    "text": "<s>[INST] What if I don't have the final, approved copy when I need to start designing? [/INST] That's a common situation. You don't need the absolute final copy to start. As long as you know the general message and what sections of content you'll need, you can use well-thought-out placeholders in your designs.</s>"
  },
  {
    "text": "<s>[INST] How can using placeholders help me in the design process? [/INST] Placeholders are very helpful for establishing a visual hierarchy, blocking out the different content areas in your design, and getting a good sense of the overall spacing and layout.</s>"
  },
  {
    "text": "<s>[INST] Is there anything I need to be careful about when using placeholders? [/INST] Yes, the most important thing is to clearly communicate to your team and stakeholders that the text is just a placeholder. If your temporary content looks too polished, it might be mistaken for the real thing and critiqued, which can cause confusion.</s>"
  },
  {
    "text": "<s>[INST] When I'm gathering content, do I have to create everything from scratch? [/INST] Not at all. There are many great resources available online for things like fonts, icon libraries, and photography. Just be sure to use them legally and get the creator's permission when it's required.</s>"
  },
  {
    "text": "<s>[INST] I'm trying to improve my design skills. What does it mean to use 'storytelling' in design? [/INST] That's a fantastic question. Storytelling in design is about focusing on the customer's entire experience as they move through your product, whether it's a website or an app. It's about designing a clear, engaging, and logical journey for them, much like how a book guides a reader through a story.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of what that 'customer journey' looks like? [/INST] Certainly. Imagine a customer shopping for shoes online. Their journey starts when they first land on your website and ask themselves questions like, 'Is this the right place for me?' or 'Can I trust this retailer?' Your design should answer these questions and guide them smoothly through each step, from browsing to checkout and beyond.</s>"
  },
  {
    "text": "<s>[INST] So, my website should welcome customers, just like a guest in my home? [/INST] That's a perfect way to think about it! You want to welcome them, introduce yourself and what you're offering, and make them feel comfortable in your digital space. A good experience will make them want to come back and even bring their friends.</s>"
  },
  {
    "text": "<s>[INST] Should I try to put all the information on the homepage so the customer sees everything at once? [/INST] It's best not to do that. Putting too much information on one screen can be overwhelming. A better approach is to let the experience unfold over time, like a story. Reveal information only when it's relevant to the customer's current step in their journey.</s>"
  },
  {
    "text": "<s>[INST] When is a good time to show information like shipping speeds? [/INST] That's a great example. Information about shipping speeds is most relevant when the customer is at the checkout stage. Introducing it at that point feels natural and helpful, whereas it might just be clutter on the homepage.</s>"
  },
  {
    "text": "<s>[INST] I've heard that design is also about what you leave out. How does that relate to storytelling? [/INST] That's a very insightful point. Choosing what *not* to include at certain moments is a huge part of crafting a good story. By revealing information progressively, you reduce clutter and create a clearer, more focused narrative for the user.</s>"
  },
  {
    "text": "<s>[INST] Besides making customers happy, are there other benefits to using storytelling in my design process? [/INST] Yes, absolutely. Crafting a clear narrative is also crucial for explaining and defending your design decisions to your team, clients, or other stakeholders. A strong story helps everyone understand the 'why' behind your design choices.</s>"
  },
  {
    "text": "<s>[INST] How can storytelling help me get my team on board with a design? [/INST] Communicating through a story is a powerful way to build empathy for the customer within your team. When your collaborators understand the user's journey and needs, it's much easier to get their approval and ensure everyone is working toward the same goal.</s>"
  },
  {
    "text": "<s>[INST] Is there a tool I can use to help visualize the user's journey? [/INST] Yes, a site map or a customer journey map is an excellent tool for this. It allows you to visualize the key moments in a user's journey, which you can then easily share with teammates to collaborate and align on the story you're trying to create.</s>"
  },
  {
    "text": "<s>[INST] I'm looking at one of my designs, and it just feels too complicated. What does it mean for a design to be 'too complex' for a user? [/INST] That's a great thing to be aware of. A design is often too complex when it presents an overwhelming amount of information all at once. This can make it difficult for a user to understand what they're supposed to do, causing confusion and frustration.</s>"
  },
  {
    "text": "<s>[INST] So, how can I start to simplify a screen that feels too crowded or complex? [/INST] There are several great strategies you can use. You can try removing any non-essential elements, editing the text to be shorter and clearer, or even breaking a single, complex screen into multiple, simpler screens that the user moves through one step at a time.</s>"
  },
  {
    "text": "<s>[INST] Wait, wouldn't breaking it into more screens make it more complicated? [/INST] That's an excellent question, and it seems counterintuitive, I know. But by breaking a process into more steps, you can present less information on each screen. This reduces the mental load on the user at any given moment, often making the overall experience feel much simpler and more manageable.</s>"
  },
  {
    "text": "<s>[INST] What role does writing play in simplifying a design? [/INST] Writing plays a huge role. By editing your text to be shorter, more valuable, and more accessible, you can make the entire experience easier to understand. Clear and concise language reduces confusion and helps guide the user more effectively.</s>"
  },
  {
    "text": "<s>[INST] Can visual choices like colors and shapes also help reduce complexity? [/INST] Yes, absolutely. Choosing a clean color palette, simple shapes, and using accessible language can significantly contribute to a better, less overwhelming experience for your users. Good visual design creates a sense of order and calm.</s>"
  },
  {
    "text": "<s>[INST] Is it easy to create a simple design? [/INST] That's the interesting paradox of design. Creating something that feels truly simple and intuitive is often not easy at all. It requires a lot of thoughtful consideration and effort to decide what's truly essential and what can be removed.</s>"
  },
  {
    "text": "<s>[INST] What's a good mindset to have when I'm trying to simplify my work? [/INST] A great mindset is to challenge every element on the screen. Ask yourself, 'Does this really need to be here right now?' or 'Can I communicate this more clearly?' Don't worry about getting it perfect on the first try; simplification is an iterative process.</s>"
  },
  {
    "text": "<s>[INST] I'm about to start a new design project, but I feel like I don't have all the information I need. What can help with that? [/INST] It sounds like you need a design brief! It's a document that outlines the scope, goals, and all the essential details of a project to make sure everyone is on the same page before you begin.</s>"
  },
  {
    "text": "<s>[INST] So, what exactly is a design brief? [/INST] A design brief is a document that outlines the scope and deliverables for a design project. It typically includes key information like the project's goals, target audience, design requirements, timeline, and budget.</s>"
  },
  {
    "text": "<s>[INST] Why is it so important to use a design brief for a major project? [/INST] Using a design brief is crucial because it acts as a 'north star' for the entire project. It promotes clear communication, helps align the team around a shared vision, and streamlines the workflow, which helps you make decisions faster and stay on track.</s>"
  },
  {
    "text": "<s>[INST] I've also heard of a 'creative brief.' Is that the same thing? [/INST] That's a great question. They are slightly different. A design brief focuses on the specific details a designer needs to get started on a project. A creative brief is usually a bit broader and provides a big-picture overview for both the design and marketing teams.</s>"
  },
  {
    "text": "<s>[INST] What are the most important elements that should be included in a design brief? [/INST] A good design brief should cover several key areas: a project overview, clear goals, a problem statement, competitor insights, brand guidelines, target audience details, and the practical constraints like budget and timeline.</s>"
  },
  {
    "text": "<s>[INST] What is a 'problem statement' in a design brief? [/INST] A problem statement is a clear and concise description of the user's challenge that you are trying to solve with your design. It helps keep the project focused on addressing a real user need.</s>"
  },
  {
    "text": "<s>[INST] What about the 'project deliverables' section? [/INST] That section is very important for clarity. It specifies exactly what the final output of the project will be, right down to the required file formats, screen sizes, and resolutions. It leaves no room for confusion about what needs to be created.</s>"
  },
  {
    "text": "<s>[INST] I'm not sure what the visual style of my project should be. Is there a tool that can help with that? [/INST] Yes, creating a mood board is a perfect tool for that. You can collect sample images, colors, and other design elements that you like. As you add them to the board, a cohesive theme or 'mood' will start to emerge, which can help you define the visual direction.</s>"
  },
  {
    "text": "<s>[INST] Who is usually responsible for creating the design brief? [/INST] Typically, the project leaders or the client will take the lead in creating the design brief. However, it's often a collaborative process involving project managers, designers, and user researchers to make sure all the information is accurate and complete.</s>"
  },
  {
    "text": "<s>[INST] Can you give me a few tips for making a design brief more effective? [/INST] Absolutely! Here are three pro tips:\n1.  **Write clearly and concisely** so it's easy for everyone to understand.\n2.  **Rely on subject matter experts** from different teams to ensure the information is accurate.\n3.  **Keep it handy** and make sure everyone on the project can easily access it to stay on track.</s>"
  },
  {
    "text": "<s>[INST] I've heard of storyboarding in movies, but what is a 'UX storyboard'? [/INST] That's a great question. A UX storyboard is a series of early sketches that visually map out a user's journey through a specific process or flow in your product. It's a way for designers to tell the story of how a user interacts with an app or website.</s>"
  },
  {
    "text": "<s>[INST] Why would a design team create a UX storyboard? [/INST] Storyboards are really useful for several reasons. They help teams get early feedback from stakeholders, identify potential problems in a user flow, and create a unified vision for a new feature before they invest a lot of time in detailed design work.</s>"
  },
  {
    "text": "<s>[INST] What's the very first step in making a storyboard? [/INST] The first step is to set a clear goal. You need to define the storyboard's purpose by deciding what story you want to tell. A good way to do this is to use your existing design research to identify a specific challenge or user process to focus on.</s>"
  },
  {
    "text": "<s>[INST] Should my storyboard be super detailed and polished, or just simple sketches? [/INST] It depends on your goal. If you're brainstorming with your team, a low-fidelity storyboard with simple stick figures and basic shapes is best. This keeps the focus on the ideas. If you're presenting to decision-makers, a more detailed, high-fidelity storyboard can help them better understand the final vision.</s>"
  },
  {
    "text": "<s>[INST] Is it better to create a storyboard on paper or using a digital tool? [/INST] Both have their advantages. Paper is quick and great for in-person collaboration. However, for remote or hybrid teams, digital storyboards are much better because they are easier to edit, share, and gather feedback on in one central place.</s>"
  },
  {
    "text": "<s>[INST] Every story needs a main character. How do I develop the 'protagonist' for my UX storyboard? [/INST] Your protagonist is based on your user persona. You should identify their goal, their challenges, and how your product will help them. Building off your existing user research will make this step much easier.</s>"
  },
  {
    "text": "<s>[INST] After I have my character, what's next? [/INST] Next, you develop a 'scenario,' which is a one-sentence description of your character's story. For example: 'A busy parent is placing a custom cookie order online to celebrate their child's graduation.' This sets the scene and provides important context.</s>"
  },
  {
    "text": "<s>[INST] How do I actually draft the story itself? [/INST] A good way to start is by going through the process yourself to understand each step. Then, write down that process from the user's perspective. Think about their goal, the problem they're facing, and how your product provides the solution.</s>"
  },
  {
    "text": "<s>[INST] What are the essential elements of a UX storyboard panel? [/INST] Each panel, which is like a single scene, typically includes a title and number, a visual sketch of the action, and a caption below that describes what's happening. You can also add arrows to show the flow between panels.</s>"
  },
  {
    "text": "<s>[INST] Once I've created my storyboard, is it finished? [/INST] Not quite. The next important step is to review and revise it. Look for any confusing parts, missing steps, or areas that don't flow well. It's an iterative process, and the feedback you get will help you make it much stronger.</s>"
  },
  {
    "text": "<s>[INST] How is a storyboard different from a user journey map? [/INST] That's a great distinction to make. A storyboard typically focuses on one specific, detailed process or flow. A user journey map is much broader and visualizes every phase a user goes through when interacting with your entire product, from awareness to long-term use.</s>"
  },
  {
    "text": "<s>[INST] And how is it different from a wireframe? [/INST] A wireframe is like a blueprint that focuses on the structure and layout of a single page or component. A storyboard, on the other hand, is a narrative that shows a sequence of actions and interactions across multiple screens or moments in time.</s>"
  },
  {
    "text": "<s>[INST] I'm starting to work with a design system for the first time. Can you explain what it is? [/INST] That's a great step! Think of a design system as a set of reusable components, like LEGO bricks. It provides you with all the basic building blocks—like buttons, icons, and color styles—that you can piece together to build your designs.</s>"
  },
  {
    "text": "<s>[INST] What kind of 'building blocks' are typically included in a basic design system? [/INST] A basic design system will usually include all the core visual elements you need, such as pre-designed buttons, a set of icons, approved images or image styles, a defined color palette, and specific text styles for things like headings and body text.</s>"
  },
  {
    "text": "<s>[INST] What is the main goal or benefit of using these pre-made components from a design system? [/INST] The main goal is to create consistency. By using the same set of components across all your screens, you ensure that your entire app or website has a cohesive look and feel, which makes the user experience much better and more predictable.</s>"
  },
  {
    "text": "<s>[INST] Are there any rules I need to follow when I'm using a design system? [/INST] Yes, there's one very important rule, or constraint, to keep in mind. You should try to only use the components provided in the system and avoid creating new, one-off elements like a different style of button or a new color that isn't in the palette.</s>"
  },
  {
    "text": "<s>[INST] Why is it so important to stick to the components in the system? [/INST] Sticking to the system's components is what guarantees that consistency. If designers start adding their own unique elements, the product can quickly become visually messy and disconnected. Following the constraint is key to maintaining that cohesive experience.</s>"
  },
  {
    "text": "<s>[INST] So I can't add *anything* new? What if I need different images for my design? [/INST] That's a great question. There are often exceptions. While you should stick to the defined styles for things like buttons and typography, you can usually use your own images or photos, as long as they fit the overall aesthetic of the product you're designing.</s>"
  },
  {
    "text": "<s>[INST] Do I have to use every single component that's available in the design system? [/INST] Not at all. You should only use the elements that are right for the specific screen or feature you're designing. Don't feel obligated to use every single button style or icon if it doesn't fit within your product's design.</s>"
  },
  {
    "text": "<s>[INST] What can I create with these components? Am I limited to a specific type of screen? [/INST] You can create almost anything! The components are designed to be flexible. You can use them to piece together a whole series of different app screens that all work together, whether it's a login screen, a profile page, or a product gallery.</s>"
  },
  {
    "text": "<s>[INST] I need to create a resume, but I want to design it well. Where should I even start? [/INST] That's a great goal to have. The most important first step is to get all of your information written down *before* you start thinking about the visual design. Content always comes first, because the main purpose of your resume is to clearly communicate your skills and experience.</s>"
  },
  {
    "text": "<s>[INST] Okay, so I have all my information written out. What's the next step? [/INST] Now, you can start to prioritize and group your information. This is where design principles come in. For example, you can use the Gestalt principle of Proximity to visually group all of your work experiences together and all of your educational experiences together.</s>"
  },
  {
    "text": "<s>[INST] What are Gestalt principles? [/INST] Gestalt principles are rules that describe how we as humans naturally interpret visual information. Our minds look for patterns, and these principles, like Proximity and Similarity, help us understand how to group related items so the layout is logical and easy to read.</s>"
  },
  {
    "text": "<s>[INST] After I've grouped the information, how can I make the most important parts stand out? [/INST] Once you have the basic structure, you can start experimenting with typography to create a clear visual hierarchy. This means using different font sizes, weights, or styles to draw attention to the most important elements, like your job titles or the companies you've worked for.</s>"
  },
  {
    "text": "<s>[INST] I'm not very familiar with what a CV or resume is. Can you explain? [/INST] Of course. A CV, or resume, is a summary of your professional skills and experiences. Think of it as an advertisement for yourself, where you're demonstrating that you have the necessary qualifications for a specific job you're applying for.</s>"
  },
  {
    "text": "<s>[INST] What essential information must I include on my resume? [/INST] You should always include your name and contact information (email and phone number), a link to your portfolio if you have one, your education history, your work experience, and any skills that are relevant to the job you're applying for.</s>"
  },
  {
    "text": "<s>[INST] Should I create a personal logo for my resume? [/INST] For now, it's best to avoid creating a personal logo. You can show plenty of personality and professionalism through thoughtful and well-chosen typography.</s>"
  },
  {
    "text": "<s>[INST] Is it a good idea to tailor my resume for each job I apply to? [/INST] Yes, that's a highly recommended practice. You should do some research on the company and the specific role, and then tailor your resume to highlight your most relevant experience. Always try to put the most important work experience near the top.</s>"
  },
  {
    "text": "<s>[INST] How long should my resume be? [/INST] Unless you have several decades of experience, you should always aim to limit your resume to a single page. This forces you to be concise and focus on the most impactful information.</s>"
  },
  {
    "text": "<s>[INST] Once I think my resume is finished, what should I do? [/INST] A very important final step is to ask a friend to review it for you. A fresh pair of eyes can often catch typos or unclear phrasing that you might have missed.</s>"
  },
  {
    "text": "<s>[INST] I'm working on a design that needs to be printed. I've been told I need to use CMYK. What does that stand for? [/INST] That's a great question, and it's essential for printing. CMYK is a color model that stands for Cyan, Magenta, Yellow, and Key.</s>"
  },
  {
    "text": "<s>[INST] Cyan, Magenta, and Yellow make sense, but why 'Key' for black? [/INST] In traditional printing, the black plate was called the 'key' plate because it provided the sharpest details and contrast in an image. The 'K' also helps avoid any confusion with the 'B' in blue from the RGB model.</s>"
  },
  {
    "text": "<s>[INST] How do these four colors create all the other colors in a printed image? [/INST] CMYK works by layering different amounts of cyan, magenta, and yellow ink to create a wide range of colors. Black is then used to add depth, contrast, and create the darkest areas of the image.</s>"
  },
  {
    "text": "<s>[INST] How is 'rich black' different from regular black? [/INST] That's a good distinction to know. 'True black' is created using only the black ink (K=100). 'Rich black' is a deeper, more saturated black that's made by combining a high percentage of black ink with smaller amounts of cyan, magenta, and yellow. It's often used for large, solid black areas in print.</s>"
  },
  {
    "text": "<s>[INST] I've heard of RGB before. How is CMYK different from RGB? [/INST] The main difference is their purpose. CMYK is a 'subtractive' color model used for printed materials, where ink absorbs light. RGB is an 'additive' color model used for digital screens, where light is added together to create color.</s>"
  },
  {
    "text": "<s>[INST] So, just to confirm, CMYK is for print and RGB is for screens? [/INST] You've got it exactly right! That's the most important thing to remember. CMYK is for physical materials like paper and fabric, and RGB is for digital content on screens.</s>"
  },
  {
    "text": "<s>[INST] Why is it so important to use the CMYK model for printing? [/INST] Using CMYK is crucial because it ensures color consistency. It guarantees that the colors on your printed materials, like posters or packaging, will look uniform and match your original design, which is vital for protecting a brand's visual identity.</s>"
  },
  {
    "text": "<s>[INST] Can you give me some examples of when I should definitely use CMYK? [/INST] You should use CMYK for any design you plan to print. This includes things like business cards, posters, flyers, brochures, product packaging, and even branded merchandise like T-shirts and mugs.</s>"
  },
  {
    "text": "<s>[INST] My design was created in RGB for a website, but now I need to print it. What do I have to do? [/INST] Before you send your design to be printed, it's a critical step to convert the file from the RGB color model to the CMYK color model. This ensures that the colors will translate as accurately as possible from the screen to the paper.</s>"
  },
  {
    "text": "<s>[INST] Will the colors look exactly the same after I convert them? [/INST] Not always. The range of colors that can be produced by light (RGB) is different from the range that can be produced by ink (CMYK). Some hues might shift slightly during the conversion, so it's important to check your design and make any necessary adjustments to preserve the vibrancy of your original.</s>"
  },
  {
    "text": "<s>[INST] What are the best file types to use for designs that are in CMYK? [/INST] The best file types for CMYK are typically PDFs, AI (Adobe Illustrator) files, and EPS files. These formats are well-suited to support the CMYK color mode and are widely used in the printing industry.</s>"
  },
  {
    "text": "<s>[INST] I'm trying to get back to the basics of design. What are the primary colors? [/INST] That's a great place to start! In traditional color theory, the three primary colors are red, yellow, and blue. They are the foundational colors from which all other colors can be mixed.</s>"
  },
  {
    "text": "<s>[INST] How do primary colors create other colors? [/INST] When you mix two primary colors together, you create what's called a secondary color, like orange, green, or purple. Then, by mixing a primary and a secondary color, you can create even more shades, known as tertiary colors.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of a major brand that uses a primary color effectively? [/INST] A great example is Snapchat. Its bright yellow logo and interface really stand out. Yellow represents energy, youth, and happiness, which aligns perfectly with the spontaneous nature of the app and its target audience.</s>"
  },
  {
    "text": "<s>[INST] I've noticed the primary colors for digital screens are different. Why is that? [/INST] You're right, they are different! For digital screens, the primary colors are Red, Green, and Blue, which you'll see as RGB. This is because our eyes have receptors that are specifically sensitive to these three colors of light.</s>"
  },
  {
    "text": "<s>[INST] So, how does the RGB model create color on my screen? [/INST] The RGB model is an 'additive' process. It starts with black and then adds red, green, and blue light in different intensities. The combination of these light sources is what creates the millions of colors you see on a digital screen.</s>"
  },
  {
    "text": "<s>[INST] What is the other main color model I should know about? [/INST] The other main model is CMYK, which is used for printing. It's a 'subtractive' model that uses Cyan, Magenta, and Yellow ink to absorb, or subtract, light. It also includes Black (the 'K') to create richer dark tones.</s>"
  },
  {
    "text": "<s>[INST] So, just to be clear, when should I use RGB and when should I use CMYK? [/INST] That's the most important takeaway. You should always use the RGB model for any design that will be viewed on a digital screen, like a website or a mobile app. You should use the CMYK model for any design that will be physically printed, like a poster or a business card.</s>"
  },
  {
    "text": "<s>[INST] I see the term 'gamut' mentioned. What does that mean? [/INST] Gamut is a key concept for designers. It refers to the specific range of colors that a particular device, like your laptop or phone, is capable of displaying accurately. Understanding gamut is important for ensuring your colors look consistent across different screens.</s>"
  },
  {
    "text": "<s>[INST] Why would the same design look different on my phone versus my laptop? [/INST] That's usually because each device has a unique color gamut. Your phone might be able to display a wider or different range of colors than your laptop, which can cause the same design to appear slightly different on each screen.</s>"
  },
  {
    "text": "<s>[INST] How does color relate to accessibility? [/INST] That's a very important consideration. Millions of people have color vision deficiencies, which means they perceive colors differently. To make designs accessible, you should never rely on color alone to convey important information. Always use other cues, like text labels, icons, or patterns.</s>"
  },
  {
    "text": "<s>[INST] I know about primary colors, but what are secondary colors? [/INST] That's a great next step in understanding color. Secondary colors are the colors you create by mixing equal amounts of two primary colors. On the traditional color wheel, the three secondary colors are orange, green, and purple.</s>"
  },
  {
    "text": "<s>[INST] Can you remind me how to mix each of the secondary colors? [/INST] Absolutely! It's quite simple:\n*   Mixing red and yellow creates **orange**.\n*   Blending yellow and blue produces **green**.\n*   Combining blue and red gives you **purple**.</s>"
  },
  {
    "text": "<s>[INST] How are secondary colors useful for designers? [/INST] Secondary colors are incredibly useful because they help designers create fresh, unique, and memorable color palettes. They can help a brand stand out and can also be used to create a pleasing balance between warm and cool tones in a design.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of a brand that uses a secondary color really well? [/INST] A perfect example is Spotify. They use a very distinct, vibrant neon green. This color suggests growth, creativity, and freshness, which perfectly captures the brand's mission of endless music discovery.</s>"
  },
  {
    "text": "<s>[INST] Do you have another example, maybe one that uses purple? [/INST] Certainly. The streaming platform Twitch uses a playful purple as its main brand color. This helps position the platform as a fun, creative, and exciting community space for gamers and creators.</s>"
  },
  {
    "text": "<s>[INST] I've heard about the 60-30-10 rule in design. How does that work with secondary colors? [/INST] The 60-30-10 rule is a classic design principle for creating a balanced color scheme. A common way to apply it is to use a neutral color for 60% of your design, a primary brand color for 30%, and then use a secondary color as an accent for the remaining 10%.</s>"
  },
  {
    "text": "<s>[INST] How can I use secondary colors to create a visual hierarchy? [/INST] You can use different shades, tints, and hues of secondary colors to draw the viewer's attention to the most important elements. In a user interface, these visual cues can help guide users through a process or highlight important information.</s>"
  },
  {
    "text": "<s>[INST] How do secondary colors relate to accessibility? [/INST] Secondary colors can be a great tool for accessibility. Because they can create strong contrast with primary or neutral colors, they can help ensure that your text and interface elements are easy to read and meet accessibility standards for everyone.</s>"
  },
  {
    "text": "<s>[INST] How are secondary colors created in the digital world, on screens? [/INST] On digital screens, which use the RGB color model, secondary colors are created by adding two primary colors of *light* at full intensity. For example, mixing red and green light creates yellow, and mixing green and blue light creates cyan.</s>"
  },
  {
    "text": "<s>[INST] And how is that different from creating secondary colors for print? [/INST] For print, which uses the CMYK color model, you're mixing inks, not light. This is a 'subtractive' process. For instance, mixing magenta and yellow ink creates red, and mixing cyan and yellow ink creates green.</s>"
  },
  {
    "text": "<s>[INST] I'm learning about color schemes, and I've come across the term 'split-complementary.' What is it? [/INST] That's a great color scheme to learn about! A split-complementary color scheme is a variation on a complementary color scheme. It uses a base color and the two colors that are adjacent to its direct complement on the color wheel.</s>"
  },
  {
    "text": "<s>[INST] Can you walk me through how to find a split-complementary color scheme on a color wheel? [/INST] Absolutely. It's a simple three-step process:\n1. First, choose your main or 'base' color on the wheel.\n2. Then, find the color directly opposite it—that's its complement.\n3. Finally, instead of using the complement, you select the two colors on either side of it. Those three colors together make your split-complementary scheme.</s>"
  },
  {
    "text": "<s>[INST] Why would a designer choose this type of color scheme over a simple complementary one? [/INST] Designers often choose a split-complementary scheme because it provides strong visual contrast, similar to a complementary scheme, but with less tension. It creates a more toned-down, nuanced, and often more sophisticated look.</s>"
  },
  {
    "text": "<s>[INST] What are the main benefits of using split-complementary colors? [/INST] There are three key benefits:\n1.  **Greater Range:** Having three colors gives you more creative options.\n2.  **Good Contrast:** The colors still offer enough contrast to be distinctive and accessible.\n3.  **Less Visual Tension:** The contrast is a bit softer and less jarring than a direct complementary pair.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of a brand that uses this color scheme? [/INST] A good example is the travel site Trivago. Its logo uses a split-complementary scheme, which helps create a look that is vibrant and inviting without being overwhelming.</s>"
  },
  {
    "text": "<s>[INST] I want to build my own split-complementary scheme. What's a good first step? [/INST] A great first step is to choose your base color wisely. Think about the personality of your brand and explore color meanings to find a color that best expresses it, whether that's a creative violet or a calming blue.</s>"
  },
  {
    "text": "<s>[INST] Once I have my three colors, how do I make sure they don't clash? [/INST] To avoid clashing, you can apply color theory by tweaking the tint, shade, and saturation of your colors. Making some colors brighter and others softer can help you strike the right mood and create a more balanced look.</s>"
  },
  {
    "text": "<s>[INST] How does the 60-30-10 rule apply to a split-complementary scheme? [/INST] The 60-30-10 rule is a great way to create balance. You would typically use your main base color for 60% of the design, and then use the two other supporting colors for 30% and 10% respectively. This creates a cohesive and visually pleasing result.</s>"
  },
  {
    "text": "<s>[INST] What if I want a color scheme with even less contrast? [/INST] If you want less contrast, you could try an 'analogous' color scheme. This uses three colors that sit right next to each other on the color wheel, which creates a very harmonious and unified look.</s>"
  },
  {
    "text": "<s>[INST] And what if I want something with a lot of pop, but is still balanced? [/INST] In that case, you might want to consider a 'triadic' color scheme. This uses three colors that are evenly spaced around the color wheel, which creates a vibrant and dynamic yet balanced palette.</s>"
  },
  {
    "text": "<s>[INST] I'm trying to improve the look and feel of my designs. What exactly are 'design aesthetics'? [/INST] That's a great topic to focus on. Design aesthetics refer to the visual elements that a designer uses to create an emotional response in an audience. This includes things like the color scheme, shapes, balance, white space, and typography.</s>"
  },
  {
    "text": "<s>[INST] So, is it just about making a design look pretty? [/INST] While making something pleasing to the eye is a big part of it, design aesthetics go deeper than that. The goal is to create a design that is not only visually appealing but also effectively meets the user's wants and needs.</s>"
  },
  {
    "text": "<s>[INST] Why do design aesthetics matter so much for a company or brand? [/INST] Aesthetics are very important because they help a company make a great first impression, engage their target audience with unique concepts, and boost their brand identity and credibility through a clear and simple design.</s>"
  },
  {
    "text": "<s>[INST] I've heard of the 'aesthetic-usability effect.' What is that? [/INST] The aesthetic-usability effect is a fascinating finding from research. It's the principle that users tend to perceive visually appealing designs as being easier to use, even if they aren't. It highlights the powerful connection between how something looks and how we think it works.</s>"
  },
  {
    "text": "<s>[INST] Does that mean if my design looks good, I don't have to worry as much about how well it works? [/INST] Not at all. While a beautiful design can make a good first impression, the most successful products are the ones that combine great aesthetic design with excellent usability. That combination is what wins loyal fans and brand advocates.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of a brand that's known for its strong design aesthetics? [/INST] A classic example is Apple. The brand is famous for its elegant, minimalist design aesthetic. This consistent and appealing visual style has been a key factor in attracting and retaining their loyal and growing customer base.</s>"
  },
  {
    "text": "<s>[INST] I want to create more attractive designs. What are some best practices I can follow? [/INST] There are five key best practices you should follow:\n1.  **Know your audience:** Understand their preferences and pain points.\n2.  **Make it useful:** Ensure the visual form supports the content and function.\n3.  **Keep it simple:** Start with a minimalist approach and only include essential elements.\n4.  **Apply core design principles:** Use principles like Gestalt to organize information effectively.\n5.  **Consider context:** Always take the user's real-world environment and challenges into account.</s>"
  },
  {
    "text": "<s>[INST] What's the most important first step before I start designing? [/INST] The most important first step is to know your audience. You need to dig into your users' backgrounds, behaviors, and preferences. This understanding is the foundation for creating a design that will truly resonate with them.</s>"
  },
  {
    "text": "<s>[INST] Why is it so important to keep a design simple? [/INST] Keeping a design simple by only including relevant elements helps to reduce confusion and cognitive load for the user. A simple, intuitive experience is often the most effective and enjoyable one.</s>"
  },
  {
    "text": "<s>[INST] I'm exploring different color schemes for a design project. What exactly is a 'monochromatic' color scheme? [/INST] That's a great one to learn. A monochromatic color scheme is a palette built from variations of a single base color. It uses different shades, tints, and tones of that one color to create a very unified and cohesive look.</s>"
  },
  {
    "text": "<s>[INST] So it's all just one color? How do you create variations of it? [/INST] You create variations by mixing the base color with neutral colors:\n*   You create a **tint** by adding white to lighten the color.\n*   You create a **shade** by adding black to darken it.\n*   You create a **tone** by adding gray, which mutes the color and lowers its intensity.</s>"
  },
  {
    "text": "<s>[INST] Why would a designer choose to use a monochromatic color scheme? [/INST] Designers use monochromatic schemes for several key reasons. They create a strong sense of cohesion and unity, they can strengthen a brand's identity by being very memorable, and they simplify the color selection process, which helps teams stay consistent.</s>"
  },
  {
    "text": "<s>[INST] Can a single color really set a mood? [/INST] Yes, absolutely. By using color psychology, you can choose a single hue that connects with your users' thoughts and feelings. For example, a palette of warm reds can feel energetic, while a palette of cool blues can feel calming and trustworthy.</s>"
  },
  {
    "text": "<s>[INST] Are there any potential problems or pitfalls I should watch out for when using a monochromatic scheme? [/INST] The main pitfall is that it can sometimes lead to a design that feels a bit monotonous or flat. It's also very important to make sure you have enough contrast between your shades and tints to meet accessibility standards for readability.</s>"
  },
  {
    "text": "<s>[INST] How can I add more visual interest to a monochromatic design without adding new colors? [/INST] A great way to add interest is by using accent colors or subtle color variations. You can also add different undertones to your base color, like mixing a little bit of yellow into a gray to warm it up. Just be sure to test these changes, as they can affect the overall mood of your design.</s>"
  },
  {
    "text": "<s>[INST] What if a monochromatic scheme just doesn't feel right for my brand? [/INST] If it doesn't feel right, there are many other great alternatives. You could try an 'analogous' color scheme, which uses three colors that are right next to each other on the color wheel for a harmonious look. Or, for more contrast, you could try a 'complementary' scheme using two colors that are opposite each other.</s>"
  },
  {
    "text": "<s>[INST] I'm trying to create a design that really pops. What are 'complementary colors'? [/INST] That's a great choice for a vibrant design. Complementary colors are pairs of colors that are directly opposite each other on the color wheel. The secret is that opposites attract!</s>"
  },
  {
    "text": "<s>[INST] Can you give me the three main complementary color pairs? [/INST] Certainly. The three main pairs that include the primary colors are:\n*   Red and green\n*   Blue and orange\n*   Yellow and purple</s>"
  },
  {
    "text": "<s>[INST] What happens when I place two complementary colors next to each other? [/INST] When you put them side by side, they create a very strong contrast. This effect is called 'simultaneous contrast,' and it makes each color appear brighter and more vibrant.</s>"
  },
  {
    "text": "<s>[INST] Why are complementary colors so useful for designers? [/INST] Designers love them because their high contrast is naturally eye-catching. This makes them powerful tools for guiding a user's focus to key elements, like a button, and for enhancing the readability of text, which is great for accessibility.</s>"
  },
  {
    "text": "<s>[INST] Are the complementary color pairs different for digital screens versus print? [/INST] Yes, they are, and that's a very important distinction to make. For digital screens, which use the RGB (light-based) color model, the pairs are red-cyan, green-magenta, and blue-yellow. For print, which uses the CMYK (ink-based) model, the pairs are magenta-green, yellow-blue, and cyan-red.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of a brand that uses a complementary color scheme effectively? [/INST] A great example is the Duolingo app. It uses green as its primary color to represent learning, and then uses red accents as a complementary color to help users quickly identify correct and incorrect answers.</s>"
  },
  {
    "text": "<s>[INST] What's a good tip for using complementary colors without making the design too overwhelming? [/INST] A great pro tip is to exercise restraint. Use the bold complementary colors sparingly and only for the most important parts of your design, like buttons or key information. This ensures those elements stand out without overpowering everything else.</s>"
  },
  {
    "text": "<s>[INST] How can I make the color palette more complex and interesting? [/INST] You can experiment with using lighter tints (by adding white) and darker shades (by adding black) of your complementary colors. This can add more depth and intrigue to your design while still maintaining that core vibrant contrast.</s>"
  },
  {
    "text": "<s>[INST] What if the contrast of direct complementary colors is too intense for the mood I'm trying to create? [/INST] If the contrast is too vivid, you can use a 'split-complementary' color scheme instead. This softens the contrast but keeps the lively feel. You use one base color and the two colors that are adjacent to its direct opposite on the wheel.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of a split-complementary scheme? [/INST] Of course. If your main color is blue, instead of pairing it directly with orange, you would use the two colors on either side of orange: red-orange and yellow-orange. This creates a harmonious palette with a little less tension.</s>"
  },
  {
    "text": "<s>[INST] I'm looking for a color scheme that is both vibrant and balanced. What are 'triadic colors'? [/INST] A triadic color scheme is a great choice for that. It's a color palette that combines three colors that are evenly spaced around the color wheel. This creates a look that is both harmonious and visually interesting.</s>"
  },
  {
    "text": "<s>[INST] How do you typically use the three colors in a triadic scheme? [/INST] Usually, you'll choose one of the colors to be the dominant color for your design, and then use the other two as supporting or accent colors. This helps to create a clear visual hierarchy while maintaining that balanced feel.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of a triadic color combination? [/INST] Certainly. The most basic and high-contrast triadic combination is the three primary colors: red, yellow, and blue. Another common one is the three secondary colors: orange, green, and violet.</s>"
  },
  {
    "text": "<s>[INST] Are there other triadic combinations besides the primary and secondary colors? [/INST] Yes, there are two more. You can also create triadic schemes using the tertiary colors. For example, red-orange, yellow-green, and blue-violet form one tertiary triad.</s>"
  },
  {
    "text": "<s>[INST] How do I choose which combination to use? [/INST] It depends on the mood you want to create. If you're going for a very bold, high-contrast, and vibrant look, the primary colors are a great choice. If you want a more subtle or understated palette, you might want to try one of the tertiary color combinations instead.</s>"
  },
  {
    "text": "<s>[INST] I've heard of the 60-30-10 rule. How does that apply to a triadic scheme? [/INST] The 60-30-10 rule is a fantastic way to create balance with a triadic scheme. You would use your chosen dominant color for about 60% of your design, a secondary color for 30%, and the third color as an accent for the remaining 10%.</s>"
  },
  {
    "text": "<s>[INST] What's the most important thing to consider when choosing my dominant color? [/INST] The most important thing is to consider the context of your design. You should choose a dominant color that aligns with your brand's identity and the goals of your project. For example, a brand focused on nature might choose green to convey growth.</s>"
  },
  {
    "text": "<s>[INST] How can I make sure my triadic color palette feels cohesive? [/INST] To create a cohesive design, you can experiment with adjusting the tints, shades, and saturation of your three colors. This can help you achieve a more harmonious visual result and fine-tune the overall mood.</s>"
  },
  {
    "text": "<s>[INST] Is there anything else I need to be careful about? [/INST] Yes, it's very important to check the color contrast of your final palette. You need to make sure your text is legible and your design is accessible to everyone, including people with visual impairments.</s>"
  },
  {
    "text": "<s>[INST] What if a triadic scheme feels too vibrant for my project? [/INST] If it's too vibrant, you have many other options. For a more calming and unified look, you could try an 'analogous' color scheme, which uses three colors that are right next to each other on the color wheel.</s>"
  },
  {
    "text": "<s>[INST] I'm working on a new app design. What exactly is a 'color palette'? [/INST] A color palette is the specific combination of colors that a designer chooses for a project. It's a powerful tool used to reflect a brand's identity, evoke emotions, and guide users through the content of a website or app.</s>"
  },
  {
    "text": "<s>[INST] How many colors are usually in a color palette? [/INST] A typical color palette often includes one primary color, one secondary color, and one or two accent colors. This provides enough variety to create visual interest without becoming overwhelming for the user.</s>"
  },
  {
    "text": "<s>[INST] Are there standard types of color palettes I can use for inspiration? [/INST] Yes, there are six common types of color palettes, each with its own feel:\n1.  **Complementary:** High-contrast and energetic.\n2.  **Analogous:** Natural and harmonious.\n3.  **Monochromatic:** Simple and minimalistic.\n4.  **Split-complementary:** Subtle contrast.\n5.  **Triadic:** Vibrant and playful.\n6.  **Square:** Balanced and diverse.</s>"
  },
  {
    "text": "<s>[INST] I'm designing a wellness app. What kind of color palette would work well for that? [/INST] For a wellness app, you'd likely want to create a sense of relaxation and ease. An analogous palette with warm, inviting colors like cream, light green, and peach would be a great choice to evoke a calming and natural feel.</s>"
  },
  {
    "text": "<s>[INST] What about a gaming app for children? What would you suggest for that? [/INST] For a children's gaming app, you'd want something vibrant and energetic. A split-complementary palette with a playful pastel orange as the base and accents of blue and violet would be fantastic for creating an engaging and creative atmosphere.</s>"
  },
  {
    "text": "<s>[INST] I'm ready to choose a color palette for my design. What's the first step I should take? [/INST] The very first step is always to conduct research. You need to gain a deep understanding of your target audience and the message you want to convey. Ask yourself what emotional response you want to evoke and what actions you want users to take.</s>"
  },
  {
    "text": "<s>[INST] How does color psychology play a role in this? [/INST] Color psychology is very important. Different colors can evoke specific emotions and encourage certain actions. For example, blue often symbolizes trust and security, making it a popular choice for banking apps, while red can create a sense of urgency.</s>"
  },
  {
    "text": "<s>[INST] I've heard of the 60-30-10 rule. Can you explain how it works for a color palette? [/INST] Certainly. The 60-30-10 rule is a simple guideline for creating a balanced interface. It suggests using your dominant or primary color for 60% of the design, a secondary color for 30%, and an accent color for the remaining 10% to highlight key elements.</s>"
  },
  {
    "text": "<s>[INST] What do 'value' and 'contrast' mean in the context of a color palette? [/INST] *   **Value** refers to the lightness or darkness of a single color.\n*   **Contrast** refers to the difference in value between two colors. High contrast, like black text on a white background, is crucial for readability and accessibility.</s>"
  },
  {
    "text": "<s>[INST] What is a good contrast ratio to aim for to make sure my text is readable? [/INST] According to the Web Content Accessibility Guidelines (WCAG), you should aim for a minimum contrast ratio of 4.5:1 for normal-sized text. This ensures that your design is clear and easy to understand for everyone, including those with visual impairments.</s>"
  },
  {
    "text": "<s>[INST] What's the final step I should take before I launch my design with its new color palette? [/INST] The final, crucial step is to gather feedback. Show your color palette to end users to ensure it resonates with them and aligns with your overall goal. This allows you to make any necessary adjustments to create the best possible user experience.</s>"
  },
  {
    "text": "<s>[INST] Is it a good idea to test different color schemes with users? [/INST] Yes, that's an excellent idea. You can conduct A/B testing to see how users respond to different color schemes. For example, you could test two different colored 'call to action' buttons to see which one gets more clicks.</s>"
  },
  {
    "text": "<s>[INST] I'm trying to create a design that really connects with users. How important is the color combination I choose? [/INST] The color combination you choose is incredibly important. In UI design, colors are a vital tool for shaping the user experience. A well-chosen palette can guide users, create a clear visual hierarchy, and even evoke specific emotions.</s>"
  },
  {
    "text": "<s>[INST] What is 'color harmony' and why does it matter? [/INST] Color harmony is the technique of arranging colors in a way that is visually pleasing. It matters because a harmonious color combination not only looks good but also makes a design easier to navigate, contributes to brand recognition, and helps create the right mood for your users.</s>"
  },
  {
    "text": "<s>[INST] You mentioned 'color properties.' What are they? [/INST] Color properties are the different characteristics of a color that you can adjust. This includes the hue (the pure color), the value (how light or dark it is), the saturation (how intense it is), and the temperature (whether it feels warm or cool).</s>"
  },
  {
    "text": "<s>[INST] How can changing a color's properties affect a design? [/INST] Changing a property can completely alter a color's effect. For example, a bold, saturated yellow is attention-grabbing. But if you add white to change its value and create a pastel yellow, it can feel much more tranquil and fresh.</s>"
  },
  {
    "text": "<s>[INST] What is color psychology? [/INST] Color psychology is the study of how different colors are associated with certain emotions and perceptions. By understanding these associations, you can choose color combinations that will elicit the right emotional response from your users.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of color psychology in action? [/INST] Certainly. A brand like Zoom uses blue as its primary color. In color psychology, blue is connected to trust, security, and professionalism—all qualities you would want in a video communication platform.</s>"
  },
  {
    "text": "<s>[INST] What are some of the most common types of color combinations? [/INST] Some of the most common types include complementary, monochromatic, analogous, triadic, and split-complementary schemes. Each one is created based on the relationship between colors on the color wheel and has a different visual effect.</s>"
  },
  {
    "text": "<s>[INST] I'm designing a professional user interface for a finance app. What kind of color combination would you suggest? [/INST] For a finance app, you'd want to convey trustworthiness and reliability. A monochromatic color combination using blue-gray hues, like the 'Stormy Morning' example, would be an excellent choice to create a professional and secure feel.</s>"
  },
  {
    "text": "<s>[INST] What about a design for a health and wellness app? [/INST] For a health and wellness app, you might want to create a natural and earthy vibe. A monochromatic palette of olive green tones, like the 'Mossy Hollow' example, would be a great way to bring that feeling to your design.</s>"
  },
  {
    "text": "<s>[INST] I'm looking for a color palette that feels soft and inviting. Any suggestions? [/INST] For a soft and inviting atmosphere, you could try a romantic color palette. A combination like 'Blooming Romance,' which uses rich shades of pink, purple, and green, can bring a sense of sophistication and luxury to a design.</s>"
  },
  {
    "text": "<s>[INST] I need a palette that's fun and exciting for a children's app. What would work for that? [/INST] For a children's app, you'll want something playful and cheerful. A monochromatic scheme using bright shades of yellow, like the 'Zesty Lemon' example, would be perfect for engaging young users and creating a happy vibe.</s>"
  },
  {
    "text": "<s>[INST] What if I want a color combination that's very bold and energetic? [/INST] In that case, you could explore a vibrant color combination. A palette like 'Electropop,' which uses bold and saturated hues like chartreuse, brings a very lively and fun appeal that's great for music or gaming apps.</s>"
  },
  {
    "text": "<s>[INST] I'm designing for a luxury brand. What kind of palette would convey sophistication? [/INST] For a luxury brand, a neutral color combination often works very well. A palette like 'Quiet Luxury,' which uses soft champagne tones with muted pink and brown hues, can create a very elegant, calming, and inviting interface.</s>"
  },
  {
    "text": "<s>[INST] How can I find a color combination that feels calming and peaceful? [/INST] To create a sense of peace, you can use a tranquil color palette. A combination like 'Calm Blue,' which uses different tones of blue, is great for promoting calmness and reliability, putting users at ease.</s>"
  },
  {
    "text": "<s>[INST] I'm designing a new website. How important is the font I choose? [/INST] The font you choose is incredibly important. It does more than just display text—it plays a major role in establishing your brand's identity, enhancing readability, and improving the overall user experience.</s>"
  },
  {
    "text": "<s>[INST] What are the different types of fonts I can use for a website? [/INST] There are five main types of fonts to consider:\n1.  **Serif fonts:** Have small strokes at the end of each letter.\n2.  **Sans serif fonts:** Do not have those small strokes.\n3.  **Monospace fonts:** Have equal spacing between each letter.\n4.  **Slab serif fonts:** Are like serif fonts but with thicker, more rounded strokes.\n5.  **Script fonts:** Mimic handwriting or calligraphy.</s>"
  },
  {
    "text": "<s>[INST] What's the difference between a 'serif' and a 'sans serif' font? [/INST] That's a key distinction. 'Serif' fonts have a small decorative stroke, or 'foot,' attached to the end of the main strokes of a letter. 'Sans serif' literally means 'without serif,' so these fonts lack those small strokes, giving them a cleaner, more modern look.</s>"
  },
  {
    "text": "<s>[INST] I've seen the terms 'web fonts' and 'web-safe fonts.' What's the difference? [/INST] That's a great question. **Web-safe fonts** are the ones that are pre-installed on most computers, so you can be sure they will display correctly for everyone. **Web fonts** are hosted online and are downloaded by the user's browser, which gives you a much wider, more unique selection to choose from.</s>"
  },
  {
    "text": "<s>[INST] So, which one is better to use? [/INST] Web fonts are generally preferred for modern web design. While web-safe fonts are reliable, their limited selection doesn't allow for much creativity. Web fonts offer far more customization, which is essential for creating a cohesive and unique brand identity.</s>"
  },
  {
    "text": "<s>[INST] Can you recommend a good, modern font that's specifically designed for user interfaces? [/INST] A fantastic choice is **Inter**. It's a free, open-source sans serif font that was designed specifically for screens. It's highly readable and flexible, which is why major companies like GitHub and Mozilla use it.</s>"
  },
  {
    "text": "<s>[INST] I'm looking for a font that feels elegant and has a vintage style. Any suggestions? [/INST] For an elegant, vintage feel, you should check out **Josefin Sans**. It's a geometric sans serif font inspired by designs from the 1920s. It works best for larger text like headings and is perfect for brands that want to convey a sense of luxury and sophistication.</s>"
  },
  {
    "text": "<s>[INST] What's a really popular and easy-to-read font that I can use almost anywhere? [/INST] You can't go wrong with **Roboto**. It's a very popular web-safe font known for its minimalistic and clean design. Its simplicity makes it highly readable on any screen, so it's a great choice for everything from headers to body text.</s>"
  },
  {
    "text": "<s>[INST] I need a font for my body text that is optimized for readability. What's a good option? [/INST] **Open Sans** is an excellent choice. It's a humanist sans serif font that was specifically designed with readability in mind for both web and mobile interfaces. Its clean and friendly style makes it very easy on the eyes.</s>"
  },
  {
    "text": "<s>[INST] What if I want a classic serif font that's been adapted for modern screens? [/INST] In that case, **Libre Baskerville** is a perfect option. It's based on a well-known classic typeface but was redesigned with a taller x-height and wider counters to enhance its readability on screens, making it ideal for body copy.</s>"
  },
  {
    "text": "<s>[INST] This is a lot to choose from. Do you have any general tips for picking the right font? [/INST] Absolutely. Here are a few key tips:\n*   **Prioritize accessibility:** Make sure your font is readable for everyone.\n*   **Focus on versatility:** Choose a font that has different weights and styles.\n*   **Create harmonious pairings:** Make sure your headline and body fonts complement each other.\n*   **Match your brand identity:** The font's personality should align with your brand's message.</s>"
  },
  {
    "text": "<s>[INST] What are 'variable fonts' and why are they useful? [/INST] Variable fonts are a newer font technology that packages an entire typeface family into a single file. This is useful because it gives you much more precise control over things like the font's weight and width, and it can also help optimize your website's loading speed.</s>"
  },
  {
    "text": "<s>[INST] I'm planning to build a website, but I'm not sure where to start. I've heard the terms 'static' and 'dynamic.' What is a static website? [/INST] That's a great first question. A static website is one where the content is fixed and doesn't change, no matter who is visiting. Think of it like a digital brochure—the information stays the same unless a developer manually updates the code.</s>"
  },
  {
    "text": "<s>[INST] What kind of technology is used to build a static website? [/INST] Static websites are typically built using the three core technologies of the web: HTML for the content structure, CSS for the visual styling, and sometimes JavaScript for simple animations or interactive elements.</s>"
  },
  {
    "text": "<s>[INST] What are the main benefits of having a static website? [/INST] Static websites have several key advantages. They are generally much faster, more secure, easier to build, and more cost-effective to host and maintain.</s>"
  },
  {
    "text": "<s>[INST] Why are static websites faster and more secure? [/INST] They're faster because the content is pre-built and sent directly to the user's browser without any server-side processing. They're more secure because they don't have a database or complex server-side code, which means there are fewer potential vulnerabilities for hackers to exploit.</s>"
  },
  {
    "text": "<s>[INST] So, what is a dynamic website then? [/INST] A dynamic website is much more interactive. Its content can change based on user input or real-time data. It's built using server-side languages like PHP or Python and a database to generate content on the fly.</s>"
  },
  {
    "text": "<s>[INST] Can you give me an example of a dynamic website? [/INST] A perfect example is an e-commerce store like Amazon. The product prices, stock availability, and personalized recommendations you see are all generated in real-time, which is only possible with a dynamic website.</s>"
  },
  {
    "text": "<s>[INST] What are the main benefits of a dynamic website? [/INST] The biggest benefits are the ability to offer more personalization for users, improved functionality like user logins and real-time updates, and the ease of updating content through a content management system (CMS) without needing to code.</s>"
  },
  {
    "text": "<s>[INST] In a nutshell, what is the key difference between a static and a dynamic website? [/INST] The key difference is how the content is handled. A static website's content is fixed, like a snapshot in time. A dynamic website's content is interactive and can change in real-time.</s>"
  },
  {
    "text": "<s>[INST] How do I choose which type of website is right for me? [/INST] To choose the right type, you should start by determining your website's primary goal. Think about who your audience is, what kind of content you'll be sharing, and how often it will need to be updated.</s>"
  },
  {
    "text": "<s>[INST] If my content doesn't change very often, which one should I pick? [/INST] If your content is informational and doesn't change frequently—like a portfolio, a brochure site for a local business, or a personal blog—a static website is often the most cost-effective and efficient choice.</s>"
  },
  {
    "text": "<s>[INST] What if I need features like user logins or an online store? [/INST] If you need interactive features like user logins, e-commerce functionality, or personalized content, you will definitely need a dynamic website. These features require a database and server-side processing that static sites can't provide.</s>"
  },
  {
    "text": "<s>[INST] I'm also concerned about my website's ability to grow in the future. What is 'scalability'? [/INST] Scalability is your website's ability to handle more visitors and more content without slowing down. In general, dynamic websites are more scalable because they are built on technologies that can easily be expanded to accommodate growing demand.</s>"
  },
  {
    "text": "<s>[INST] I've seen the term 'Fitts' Law' in design articles. Can you explain what it is in simple terms? [/INST] Certainly! Fitts' Law is a simple but powerful principle. It states that the time it takes to move to a target, like a button, depends on how big that target is and how far away it is. In short, bigger, closer targets are faster and easier to hit.</s>"
  },
  {
    "text": "<s>[INST] Where did this law come from? Was it created for web design? [/INST] That's a great question. It was actually developed by a psychologist named Paul Fitts back in 1954 as a model for human movement in the physical world. While it wasn't created for UI design, its principles apply perfectly to how we interact with digital interfaces.</s>"
  },
  {
    "text": "<s>[INST] I saw a mathematical formula in the explanation. Do I need to be a math expert to use Fitts' Law? [/INST] Not at all! You don't need to do any math to understand and apply the concept. The formula is just the scientific model that proves the core idea: the time to reach a target is a function of its distance and its width.</s>"
  },
  {
    "text": "<s>[INST] How does Fitts' Law apply to designing a button on a website? [/INST] It directly applies to button design. The law tells us that if you want a user to click a button, especially an important one like a 'Submit' or 'Add to Cart' button, it should be large enough to be an easy target and placed in an accessible location.</s>"
  },
  {
    "text": "<s>[INST] So, should I just make all my important buttons huge? [/INST] Not necessarily. While buttons need to be large enough for users to click accurately with minimal effort, making them too big can take up too much screen space and unbalance your design. It's about finding the right size that makes the button easy to select without overwhelming other elements.</s>"
  },
  {
    "text": "<s>[INST] How does this law affect navigation design, like menus? [/INST] For navigation, Fitts' Law suggests that your menu items should be visible and large enough to be easily clicked. It also tells us that the most frequently used navigation links should be placed closer to the user's likely starting point to reduce travel distance.</s>"
  },
  {
    "text": "<s>[INST] Does Fitts' Law also apply to touchscreens and mobile design? [/INST] Yes, absolutely. It applies to thumbs just as it does to mouse cursors. This is where the concept of the 'thumb zone' comes in.</s>"
  },
  {
    "text": "<s>[INST] What is the 'thumb zone'? [/INST] The thumb zone is the area of a smartphone screen that a person can comfortably reach with their thumb while holding the phone. Fitts' Law guides us to place important buttons and interactive elements within this zone to make them easy to tap.</s>"
  },
  {
    "text": "<s>[INST] I saw the terms 'prime pixel' and 'magic pixels.' What are they? [/INST] Those are interesting concepts related to cursor position. The 'prime pixel' is where the user's cursor currently is. The 'magic pixels' are in the four corners of the screen. Because you can't overshoot a corner, they are considered infinitely large targets and are very easy to hit.</s>"
  },
  {
    "text": "<s>[INST] So where should I place important and less important elements based on that? [/INST] You should place your most important and frequently used buttons as close to the likely prime pixel as possible to minimize travel time. Less critical design elements, on the other hand, can be placed further away, such as in the corners.</s>"
  },
  {
    "text": "<s>[INST] Is just making a button bigger the best way to improve its usability? [/INST] A great pro tip is to use padding strategically. Instead of making the button text huge, you can add generous padding around it. This increases the overall clickable area (the target) while keeping the visual design clean and legible.</s>"
  },
  {
    "text": "<s>[INST] How can I be sure that my application of Fitts' Law is actually working? [/INST] The best way to know for sure is through user testing. By watching how real people interact with your interface, you can see where they hesitate or make mistakes. These observations will often highlight opportunities to improve your target sizing and placement.</s>"
  },
  {
    "text": "<s>[INST] What is Figma? [/INST] Figma is a collaborative, cloud-based design tool primarily used for creating user interfaces, interactive prototypes, and scalable design systems. Its real-time multiplayer editing allows teams to design together seamlessly, making it a central hub for the entire product design process.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between a Frame and a Group? [/INST] A Frame is a container with its own dimensions, layout grids, and constraints, acting like an artboard for a screen or component. A Group is simply a collection of layers whose size is determined by its contents. Frames are fundamental for prototyping and responsive design.</s>"
  },
  {
    "text": "<s>[INST] What are Vector Networks in Figma? [/INST] Unlike traditional vector paths, Vector Networks allow multiple lines to connect at a single point. This makes creating complex shapes and icons more flexible because you can draw lines that branch off from any existing point, not just from the ends of a path.</s>"
  },
  {
    "text": "<s>[INST] What are Components in Figma? [/INST] Components are reusable UI elements. When you create a main component and use instances of it throughout your designs, any change to the main component will automatically update all instances. This ensures consistency and dramatically speeds up the design workflow.</s>"
  },
  {
    "text": "<s>[INST] What are Variants in Figma? [/INST] Variants let you group different versions of a single component into one container, organized by properties like 'state' or 'size'. This cleans up your assets panel and allows designers to switch between component states (e.g., default, hover, disabled) from a simple dropdown menu.</s>"
  },
  {
    "text": "<s>[INST] What is Auto Layout? [/INST] Auto Layout allows you to create frames and components that dynamically resize based on their content. You can define padding, spacing between items, and alignment, which makes building responsive and flexible layouts that adapt to new content effortless.</s>"
  },
  {
    "text": "<s>[INST] What are Constraints in Figma? [/INST] Constraints define how an object behaves when its parent frame is resized. You can pin an object to the left, right, top, bottom, or center, or set it to scale. This is essential for ensuring that your UI elements reflow correctly on different screen sizes.</s>"
  },
  {
    "text": "<s>[INST] What are Styles in Figma? [/INST] Styles are saved, reusable sets of properties for colors, text, effects (like shadows), and layout grids. Applying styles ensures visual consistency across your design files, and updating a style will automatically apply that change to every object using it.</s>"
  },
  {
    "text": "<s>[INST] How does Prototyping work in Figma? [/INST] Prototyping allows you to create interactive mockups by linking frames together. You can add clickable hotspots, define transitions like 'dissolve' or 'slide in', and use features like Smart Animate to create realistic user flows and test experiences without writing code.</s>"
  },
  {
    "text": "<s>[INST] What is FigJam? [/INST] FigJam is Figma's online whiteboard tool designed for brainstorming, diagramming, and team collaboration. It provides tools like sticky notes, drawing, and shapes in a more freeform environment, perfect for workshops and exploring early-stage ideas before moving into high-fidelity design.</s>"
  },
  {
    "text": "<s>[INST] What are Boolean Operations in Figma? [/INST] Boolean operations (Union, Subtract, Intersect, Exclude) are non-destructive methods for combining multiple shape layers into a single, more complex shape. They are fundamental for creating custom icons and illustrations from basic geometric forms.</s>"
  },
  {
    "text": "<s>[INST] How does Masking work in Figma? [/INST] Masking uses one layer's shape to reveal parts of the layers above it. The bottom layer acts as the mask container, and any content outside its boundaries is hidden. This is commonly used for cropping images into specific shapes or creating unique visual effects.</s>"
  },
  {
    "text": "<s>[INST] What are Component Properties? [/INST] Component Properties (Boolean, Instance Swap, Text, and Variant) make components more flexible and configurable. They allow designers to change aspects like layer visibility, swap nested components, or edit text directly from the properties panel without detaching the instance.</s>"
  },
  {
    "text": "<s>[INST] What is Smart Animate? [/INST] Smart Animate is a prototyping feature that creates smooth animations between two frames. If layers with matching names exist in both the start and end frames, Figma automatically tweens the differences in their properties (like position, size, or color) to generate a fluid transition.</s>"
  },
  {
    "text": "<s>[INST] What are Interactive Components? [/INST] Interactive Components allow you to create prototype interactions directly within a component's variant set. For example, you can define a button's hover and pressed states once, and that interactivity will work automatically on every instance of that button used in your prototypes.</s>"
  },
  {
    "text": "<s>[INST] What are Team Libraries? [/INST] Team Libraries are a way to share components, styles, and variables across different files and projects within your team. When a main component in a library is updated, anyone using it in another file receives a notification to accept the changes, ensuring design consistency.</s>"
  },
  {
    "text": "<s>[INST] How does Version History work in Figma? [/INST] Figma automatically saves a detailed history of all changes made to a file. You can browse this history, see who made specific edits, and restore the file to any previous point. You can also manually save named versions to mark important milestones.</s>"
  },
  {
    "text": "<s>[INST] What is Dev Mode in Figma? [/INST] Dev Mode is a workspace in Figma tailored for developers. It translates designs into ready-to-use code snippets for CSS, iOS, and Android, and clearly displays measurements, assets, and component properties. It streamlines the design-to-developer handoff process.</s>"
  },
  {
    "text": "<s>[INST] What is Branching and Merging? [/INST] Branching allows you to create a separate copy of a design file to explore changes without affecting the main version. After review, these changes can be merged back into the main file. It provides a safe, version-controlled workflow for design exploration and updates.</s>"
  },
  {
    "text": "<s>[INST] What are Variables in Figma? [/INST] Variables are reusable, raw values that can represent colors, numbers (for spacing or sizes), strings (for text content), and booleans (for visibility). They are more primitive than styles and are the foundation for creating advanced design systems with features like themes (e.g., light/dark modes).</s>"
  },
  {
    "text": "<s>[INST] What are Modes for Variables? [/INST] Modes allow you to define different value sets for your variables. For example, you can create a 'light mode' and a 'dark mode' that assign different color values to your color variables. Applying a mode to a frame instantly switches all the associated variable values.</s>"
  },
  {
    "text": "<s>[INST] What does the Scale Tool do? [/INST] The Scale Tool (shortcut 'K') resizes a selection and all its nested properties proportionally, including stroke weights, corner radii, and font sizes. This is different from the regular resize handles, which only change the object's frame size without scaling its internal properties.</s>"
  },
  {
    "text": "<s>[INST] What is 'Outline Stroke'? [/INST] The 'Outline Stroke' command converts a vector path's stroke into a separate, editable filled shape. This is useful when you need to manipulate the border of an object independently or when preparing an icon for export as a single, combined vector shape.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between 'Fill container' and 'Hug contents' in Auto Layout? [/INST] 'Hug contents' makes a frame's size shrink to fit snugly around the objects inside it. 'Fill container' makes an object stretch to fill all available space within its parent Auto Layout frame, which is key for creating responsive elements.</s>"
  },
  {
    "text": "<s>[INST] What is Absolute Position in an Auto Layout frame? [/INST] Absolute Position allows an object to be placed at specific X/Y coordinates inside an Auto Layout frame, effectively ignoring the normal layout flow. This is perfect for overlaying elements like notification badges or close icons on top of other content.</s>"
  },
  {
    "text": "<s>[INST] How do you export assets from Figma? [/INST] You can mark any frame, component, or layer as exportable from the 'Export' section in the right-hand design panel. Figma supports exporting to PNG, JPG, SVG, and PDF formats, and allows you to specify different scales (e.g., @2x, @3x) for various screen densities.</s>"
  },
  {
    "text": "<s>[INST] What are Layout Grids? [/INST] Layout Grids are visual guides that you can apply to frames to help align elements and maintain consistent spacing. Figma supports column, row, and uniform grid styles, which are essential for creating structured and organized user interface designs.</s>"
  },
  {
    "text": "<s>[INST] What is the Figma Community? [/INST] The Figma Community is a public platform where users can publish and share files, plugins, and widgets. It serves as a massive repository of resources like UI kits, design systems, and icon sets that anyone can duplicate and use in their own projects.</s>"
  },
  {
    "text": "<s>[INST] How does commenting work in Figma? [/INST] The Comment tool allows users to leave feedback by dropping a pin anywhere on the canvas. Teammates can be @-tagged to send notifications, and conversations can be threaded in replies. Once feedback is addressed, comments can be resolved to clean up the workspace.</s>"
  },
  {
    "text": "<s>[INST] What are Plugins in Figma? [/INST] Plugins are third-party scripts that extend Figma's capabilities. They can automate repetitive tasks, generate content (like user avatars or placeholder text), check for accessibility, or integrate Figma with other tools, significantly speeding up the design workflow.</s>"
  },
  {
    "text": "<s>[INST] What is conditional prototyping logic? [/INST] Conditional prototyping allows you to create more dynamic prototypes by adding 'if-else' logic based on variables. For instance, a prototype can navigate to different screens depending on whether a variable is true or false, enabling the simulation of more complex user flows.</s>"
  },
  {
    "text": "<s>[INST] What is the 'Tidy up' feature? [/INST] 'Tidy up' is a tool that instantly organizes a selection of objects into a neat grid. It automatically aligns the objects and equalizes the spacing between them, both horizontally and vertically. It is a quick way to clean up a messy arrangement of layers.</s>"
  },
  {
    "text": "<s>[INST] What are Sections in Figma? [/INST] Sections are organizational containers that let you group related frames and objects on the canvas. They help structure your design file, making it easier to navigate complex user flows. When you move a section, all of its contents move with it.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between the Pen and Pencil tools? [/INST] The Pen tool creates precise vector paths by placing individual anchor points and adjusting their curves, which is ideal for creating clean icons and illustrations. The Pencil tool is for freehand drawing, creating more organic, less precise vector paths suitable for sketching.</s>"
  },
  {
    "text": "<s>[INST] What is 'Copy as SVG'? [/INST] The 'Copy as SVG' command copies the selected object's Scalable Vector Graphics (SVG) code directly to your clipboard. This provides an extremely fast way for developers to grab an icon or simple illustration from a design and paste it directly into their code.</s>"
  },
  {
    "text": "<s>[INST] How can you manage file organization in Figma? [/INST] Figma files are organized using Pages, which act like tabs for different stages or sections of a project (e.g., 'Wireframes', 'Components', 'V1 Designs'). On the canvas, you can use Sections to group related frames and apply covers to files for better visual identification.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between using Figma in the browser vs. the desktop app? [/INST] The functionality is nearly identical. The main advantage of the desktop app is its ability to access locally installed fonts without needing a separate font installer. The browser version offers easy access from any computer without requiring installation.</s>"
  },
  {
    "text": "<s>[INST] How do Blending Modes work in Figma? [/INST] Blending Modes determine how a layer's colors interact with the colors of the layers beneath it. You can apply modes like Multiply, Screen, or Overlay to a layer's fill or stroke to create a wide range of visual effects, from subtle color shifts to dramatic compositions.</s>"
  },
  {
    "text": "<s>[INST] What is Smart Selection? [/INST] Smart Selection provides handles that appear when you select multiple objects, allowing you to quickly adjust the spacing between them uniformly. You can also drag and drop individual objects within the selection to easily reorder them while maintaining consistent spacing.</s>"
  },
  {
    "text": "<s>[INST] What does 'Flattening' a selection do? [/INST] Flattening combines multiple selected vector layers into a single, new vector object. This is a destructive action because it merges the paths and you can no longer edit the original individual shapes, but it can simplify complex vectors and improve file performance.</s>"
  },
  {
    "text": "<s>[INST] What are Variable Fonts? [/INST] Variable Fonts are a type of font file that contains a range of design variations, such as weight, width, and slant, all within a single file. In Figma, you can access these variations with sliders, allowing for much more granular typographic control than with standard static fonts.</s>"
  },
  {
    "text": "<s>[INST] How can you present a prototype in Figma? [/INST] You can present a prototype by clicking the 'Present' (play) icon, which opens the prototype in a new tab. In presentation view, you can interact with the prototype, view it on different device frames, and share a link for others to test the user flow.</s>"
  },
  {
    "text": "<s>[INST] How does multiplayer collaboration work in Figma? [/INST] Figma's multiplayer feature allows multiple users to edit the same file simultaneously. You can see other collaborators' cursors moving in real-time. This live collaboration is ideal for design pairing, feedback sessions, and team-based design sprints.</s>"
  },
  {
    "text": "<s>[INST] What is the 'Instance Swap' component property? [/INST] The 'Instance Swap' property allows you to create a placeholder in a component that can be filled with other components. For example, you can create a button component with an icon slot that lets you easily swap in different icons from a predefined set.</s>"
  },
  {
    "text": "<s>[INST] How do you create responsive text in Figma? [/INST] To create responsive text, you can set its horizontal resizing property in the design panel. 'Hug contents' makes the text box fit the text, 'Fill container' makes the text wrap to fill the width of its parent frame, and 'Fixed size' keeps the dimensions static.</s>"
  },
  {
    "text": "<s>[INST] What are the benefits of using a Design System in Figma? [/INST] A Design System, built with shared components, styles, and variables, creates a single source of truth for a product's UI. This ensures visual and functional consistency, accelerates the design and development process, and makes scaling the product much more efficient.</s>"
  },
  {
    "text": "<s>[INST] What is the difference between 'Copy Properties' and 'Paste Properties'? [/INST] This feature allows you to quickly replicate styling. 'Copy Properties' (Ctrl/Cmd + Alt + C) copies attributes like fill, stroke, and effects from a selected object. 'Paste Properties' (Ctrl/Cmd + Alt + V) applies those copied attributes to another selected object.</s>"
  },
  {
    "text": "<s>[INST] How can you share a specific frame or selection from a Figma file? [/INST] You can share a direct link to a specific frame or selection by right-clicking it on the canvas and choosing 'Copy link'. When someone opens this link, the Figma file will load and automatically zoom in on the exact object you selected.</s>"
  },
  {
    "text": "<s>[INST] What is the 'Show outlines' view? [/INST] The 'Show outlines' view (Ctrl/Cmd + Y) displays only the vector outlines of all objects on the canvas, hiding all fills, strokes, and effects. This is useful for debugging complex layouts, checking alignments, and seeing the underlying structure of your designs.</s>"
  }
]